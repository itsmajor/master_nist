-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_compare is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v1_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    v1_V_ce0 : OUT STD_LOGIC;
    v1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v1_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    v2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    v2_V_ce0 : OUT STD_LOGIC;
    v2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v2_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    size_V_offset : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of vect_compare is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_112_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_172 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln182_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal diff_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_reg_84 : STD_LOGIC_VECTOR (11 downto 0);
    signal diff_0_reg_95 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln883_1_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_2_fu_137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_fu_118_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln883_fu_122_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln883_1_fu_132_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln883_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((icmp_ln182_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= diff_0_reg_95;
                end if; 
            end if;
        end if;
    end process;


    diff_0_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                diff_0_reg_95 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                diff_0_reg_95 <= diff_fu_148_p2;
            end if; 
        end if;
    end process;

    t_V_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_84 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_84 <= i_V_reg_172;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_172 <= i_V_fu_112_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln182_fu_107_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln182_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln883_1_fu_132_p2 <= std_logic_vector(unsigned(zext_ln883_fu_118_p1) + unsigned(v2_V_offset));
    add_ln883_fu_122_p2 <= std_logic_vector(unsigned(zext_ln883_fu_118_p1) + unsigned(v1_V_offset));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln182_fu_107_p2)
    begin
        if ((((icmp_ln182_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln182_fu_107_p2)
    begin
        if (((icmp_ln182_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, icmp_ln182_fu_107_p2, diff_0_reg_95, ap_return_preg)
    begin
        if (((icmp_ln182_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= diff_0_reg_95;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    diff_fu_148_p2 <= (icmp_ln883_fu_142_p2 or diff_0_reg_95);
    i_V_fu_112_p2 <= std_logic_vector(unsigned(t_V_reg_84) + unsigned(ap_const_lv12_1));
    icmp_ln182_fu_107_p2 <= "1" when (t_V_reg_84 = size_V_offset) else "0";
    icmp_ln883_fu_142_p2 <= "0" when (v1_V_q0 = v2_V_q0) else "1";
    v1_V_address0 <= zext_ln883_1_fu_127_p1(13 - 1 downto 0);

    v1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v1_V_ce0 <= ap_const_logic_1;
        else 
            v1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_V_address0 <= zext_ln883_2_fu_137_p1(13 - 1 downto 0);

    v2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v2_V_ce0 <= ap_const_logic_1;
        else 
            v2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln883_1_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_fu_122_p2),64));
    zext_ln883_2_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_1_fu_132_p2),64));
    zext_ln883_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_84),13));
end behav;
