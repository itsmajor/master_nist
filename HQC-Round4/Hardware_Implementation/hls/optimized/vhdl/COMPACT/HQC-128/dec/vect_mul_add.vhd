-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_mul_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    o_V_ce0 : OUT STD_LOGIC;
    o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    o_V_ce1 : OUT STD_LOGIC;
    o_V_we1 : OUT STD_LOGIC;
    o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a1_V_ce0 : OUT STD_LOGIC;
    a1_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    a2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a2_V_ce0 : OUT STD_LOGIC;
    a2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a2_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a2_V_ce1 : OUT STD_LOGIC;
    a2_V_we1 : OUT STD_LOGIC;
    a2_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V : IN STD_LOGIC_VECTOR (7 downto 0);
    a3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a3_V_ce0 : OUT STD_LOGIC;
    a3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of vect_mul_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_8A1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100001";
    constant ap_const_lv64_8A0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_1142 : STD_LOGIC_VECTOR (12 downto 0) := "1000101000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_8A2 : STD_LOGIC_VECTOR (11 downto 0) := "100010100010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv13_8A0 : STD_LOGIC_VECTOR (12 downto 0) := "0100010100000";
    constant ap_const_lv13_8A1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010100001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_299_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_310_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_514 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_6_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_318_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_V_reg_522 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln76_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln80_fu_343_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln80_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln82_fu_357_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln82_reg_537 : STD_LOGIC_VECTOR (12 downto 0);
    signal dl_V_fu_367_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal dl_V_reg_545 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln887_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_mult_V_addr_4_reg_555 : STD_LOGIC_VECTOR (12 downto 0);
    signal v1_V_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal xor_ln719_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_3_fu_421_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_3_reg_574 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln215_fu_427_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_reg_579 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_7_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_mult_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_mult_V_load_reg_595 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln544_12_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_12_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal res_mult_V_ce0 : STD_LOGIC;
    signal res_mult_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal res_mult_V_ce1 : STD_LOGIC;
    signal res_mult_V_we1 : STD_LOGIC;
    signal res_mult_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_mult_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_025_0_i_reg_236 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_078_0_i_reg_247 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_082_0_i_reg_258 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_V_3_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_281 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln544_7_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_8_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_9_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_10_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_11_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_6_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln717_fu_496_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_329_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln79_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_neg_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_347_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_1_fu_378_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_7_fu_382_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_s_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1527_fu_400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln209_fu_405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_431_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_5_fu_442_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln790_fu_467_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_fu_458_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_4_fu_471_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln717_fu_492_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component vect_mul_add_res_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    res_mult_V_U : component vect_mul_add_res_mb6
    generic map (
        DataWidth => 8,
        AddressRange => 4418,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => res_mult_V_address0,
        ce0 => res_mult_V_ce0,
        q0 => res_mult_V_q0,
        address1 => res_mult_V_address1,
        ce1 => res_mult_V_ce1,
        we1 => res_mult_V_we1,
        d1 => res_mult_V_d1,
        q1 => res_mult_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_025_0_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_025_0_i_reg_236 <= i_V_fu_299_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_025_0_i_reg_236 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    p_078_0_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_078_0_i_reg_247 <= ap_const_lv7_0;
            elsif (((icmp_ln887_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_078_0_i_reg_247 <= k_V_reg_522;
            end if; 
        end if;
    end process;

    p_082_0_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_082_0_i_reg_258 <= dl_V_reg_545;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_082_0_i_reg_258 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    r_V_3_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_V_3_reg_269 <= v1_V_reg_561;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_V_3_reg_269 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                t_V_reg_281 <= i_V_3_reg_574;
            elsif (((icmp_ln76_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_281 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dl_V_reg_545 <= dl_V_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_reg_514 <= empty_fu_310_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_V_3_reg_574 <= i_V_3_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_V_reg_522 <= k_V_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                res_mult_V_addr_4_reg_555 <= zext_ln544_9_fu_387_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                res_mult_V_load_reg_595 <= res_mult_V_q0;
                    zext_ln544_12_reg_605(11 downto 0) <= zext_ln544_12_fu_452_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                v1_V_reg_561 <= a2_V_q0;
                xor_ln719_reg_566 <= xor_ln719_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_7_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln215_reg_579(11 downto 0) <= zext_ln215_fu_427_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln80_reg_532(3 downto 0) <= zext_ln80_fu_343_p1(3 downto 0);
                    zext_ln82_reg_537(11 downto 0) <= zext_ln82_fu_357_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln80_reg_532(15 downto 4) <= "000000000000";
    zext_ln82_reg_537(12) <= '0';
    zext_ln215_reg_579(12) <= '0';
    zext_ln544_12_reg_605(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_6_fu_293_p2, ap_CS_fsm_state3, icmp_ln76_fu_313_p2, ap_CS_fsm_state5, icmp_ln887_fu_361_p2, ap_CS_fsm_state8, icmp_ln887_7_fu_415_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_6_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln76_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln887_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln887_7_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a1_V_address0 <= zext_ln544_fu_324_p1(7 - 1 downto 0);

    a1_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a1_V_ce0 <= ap_const_logic_1;
        else 
            a1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a2_V_address0 <= zext_ln544_8_fu_373_p1(12 - 1 downto 0);
    a2_V_address1 <= ap_const_lv64_8A1(12 - 1 downto 0);

    a2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a2_V_ce0 <= ap_const_logic_1;
        else 
            a2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a2_V_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a2_V_ce1 <= ap_const_logic_1;
        else 
            a2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a2_V_d1 <= ap_const_lv8_0;

    a2_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_6_fu_293_p2)
    begin
        if (((icmp_ln887_6_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a2_V_we1 <= ap_const_logic_1;
        else 
            a2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a3_V_address0 <= zext_ln544_12_fu_452_p1(12 - 1 downto 0);

    a3_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a3_V_ce0 <= ap_const_logic_1;
        else 
            a3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dl_V_fu_367_p2 <= std_logic_vector(unsigned(p_082_0_i_reg_258) + unsigned(ap_const_lv12_1));
    empty_fu_310_p1 <= weight_V(7 - 1 downto 0);
    i_V_3_fu_421_p2 <= std_logic_vector(unsigned(t_V_reg_281) + unsigned(ap_const_lv12_1));
    i_V_fu_299_p2 <= std_logic_vector(unsigned(p_025_0_i_reg_236) + unsigned(ap_const_lv13_1));
    icmp_ln76_fu_313_p2 <= "1" when (p_078_0_i_reg_247 = empty_reg_514) else "0";
    icmp_ln887_6_fu_293_p2 <= "1" when (p_025_0_i_reg_236 = ap_const_lv13_1142) else "0";
    icmp_ln887_7_fu_415_p2 <= "1" when (t_V_reg_281 = ap_const_lv12_8A1) else "0";
    icmp_ln887_fu_361_p2 <= "1" when (p_082_0_i_reg_258 = ap_const_lv12_8A2) else "0";
    k_V_fu_318_p2 <= std_logic_vector(unsigned(p_078_0_i_reg_247) + unsigned(ap_const_lv7_1));
    lshr_ln1527_fu_400_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_392_p3),to_integer(unsigned('0' & zext_ln80_reg_532(16-1 downto 0)))));
    o_V_address0 <= ap_const_lv64_8A0(12 - 1 downto 0);

    o_V_address1_assign_proc : process(zext_ln544_12_reg_605, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            o_V_address1 <= ap_const_lv64_8A0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            o_V_address1 <= zext_ln544_12_reg_605(12 - 1 downto 0);
        else 
            o_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    o_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            o_V_ce0 <= ap_const_logic_1;
        else 
            o_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            o_V_ce1 <= ap_const_logic_1;
        else 
            o_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    o_V_d1_assign_proc : process(ap_CS_fsm_state10, ret_V_6_fu_485_p2, ap_CS_fsm_state11, zext_ln717_fu_496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            o_V_d1 <= zext_ln717_fu_496_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            o_V_d1 <= ret_V_6_fu_485_p2;
        else 
            o_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    o_V_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            o_V_we1 <= ap_const_logic_1;
        else 
            o_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_392_p3 <= (a2_V_q0 & r_V_3_reg_269);
    r_V_4_fu_471_p3 <= (trunc_ln790_fu_467_p1 & r_V_fu_458_p4);
    r_V_fu_458_p4 <= res_mult_V_load_reg_595(7 downto 5);
    r_neg_fu_337_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln79_fu_333_p1));

    res_mult_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln544_9_fu_387_p1, zext_ln544_10_fu_437_p1, zext_ln544_11_fu_447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            res_mult_V_address0 <= zext_ln544_11_fu_447_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            res_mult_V_address0 <= zext_ln544_10_fu_437_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_mult_V_address0 <= zext_ln544_9_fu_387_p1(13 - 1 downto 0);
        else 
            res_mult_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    res_mult_V_address1_assign_proc : process(ap_CS_fsm_state2, res_mult_V_addr_4_reg_555, ap_CS_fsm_state9, zext_ln544_12_fu_452_p1, ap_CS_fsm_state7, zext_ln544_7_fu_305_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            res_mult_V_address1 <= zext_ln544_12_fu_452_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            res_mult_V_address1 <= res_mult_V_addr_4_reg_555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_mult_V_address1 <= zext_ln544_7_fu_305_p1(13 - 1 downto 0);
        else 
            res_mult_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    res_mult_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            res_mult_V_ce0 <= ap_const_logic_1;
        else 
            res_mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_mult_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            res_mult_V_ce1 <= ap_const_logic_1;
        else 
            res_mult_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_mult_V_d1_assign_proc : process(ap_CS_fsm_state2, xor_ln719_reg_566, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            res_mult_V_d1 <= xor_ln719_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_mult_V_d1 <= ap_const_lv8_0;
        else 
            res_mult_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    res_mult_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_6_fu_293_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln887_6_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            res_mult_V_we1 <= ap_const_logic_1;
        else 
            res_mult_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_4_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv13_8A0) + unsigned(zext_ln215_fu_427_p1));
    ret_V_5_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv13_8A1) + unsigned(zext_ln215_reg_579));
    ret_V_6_fu_485_p2 <= (xor_ln1357_fu_479_p2 xor res_mult_V_q1);
    ret_V_7_fu_382_p2 <= std_logic_vector(unsigned(zext_ln82_reg_537) + unsigned(zext_ln215_1_fu_378_p1));
    ret_V_fu_329_p1 <= a1_V_q0(3 - 1 downto 0);
    tmp_5_fu_347_p4 <= a1_V_q0(14 downto 3);
    trunc_ln209_fu_405_p1 <= lshr_ln1527_fu_400_p2(8 - 1 downto 0);
    trunc_ln717_fu_492_p1 <= o_V_q0(5 - 1 downto 0);
    trunc_ln790_fu_467_p1 <= res_mult_V_q0(5 - 1 downto 0);
    xor_ln1357_fu_479_p2 <= (r_V_4_fu_471_p3 xor a3_V_q0);
    xor_ln719_fu_409_p2 <= (trunc_ln209_fu_405_p1 xor res_mult_V_q0);
    zext_ln215_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_082_0_i_reg_258),13));
    zext_ln215_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_281),13));
    zext_ln544_10_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_431_p2),64));
    zext_ln544_11_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_fu_442_p2),64));
    zext_ln544_12_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_281),64));
    zext_ln544_7_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_reg_236),64));
    zext_ln544_8_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_082_0_i_reg_258),64));
    zext_ln544_9_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_fu_382_p2),64));
    zext_ln544_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_078_0_i_reg_247),64));
    zext_ln717_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_fu_492_p1),8));
    zext_ln79_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_329_p1),4));
    zext_ln80_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_neg_fu_337_p2),16));
    zext_ln82_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_347_p4),13));
end behav;
