-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gf_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (7 downto 0);
    b_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gf_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b2_V_fu_130_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_fu_140_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_V_fu_164_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln887_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln858_fu_180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_V_2_fu_184_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_21_fu_200_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln719_2_fu_280_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln86_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op_V_read_assign_reg_68 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_V_buf_0_i_reg_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_092_0_i_reg_89 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_reg_100 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_V_buf_0_i_reg_109 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_0191_0_i_reg_119 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1355_fu_146_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_150_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_158_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_170_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_206_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mod_V_fu_220_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mod_V_3_fu_232_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln86_fu_190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1503_fu_216_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_2_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mod_V_4_fu_244_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_20_fu_262_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_fu_228_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_21_fu_268_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln719_fu_258_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_19_fu_274_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((icmp_ln86_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_preg <= trunc_ln86_fu_190_p1;
                end if; 
            end if;
        end if;
    end process;


    a_V_buf_0_i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_V_buf_0_i_reg_80 <= zext_ln858_fu_180_p1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_V_buf_0_i_reg_80 <= a_V;
            end if; 
        end if;
    end process;

    lhs_V_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                lhs_V_reg_100 <= b2_V_2_fu_184_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_V_reg_100 <= b2_V_fu_130_p1;
            end if; 
        end if;
    end process;

    op_V_read_assign_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                op_V_read_assign_reg_68 <= c_V_fu_164_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                op_V_read_assign_reg_68 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    p_0191_0_i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0191_0_i_reg_119 <= ap_const_lv2_0;
            elsif (((icmp_ln86_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0191_0_i_reg_119 <= i_V_21_fu_200_p2;
            end if; 
        end if;
    end process;

    p_092_0_i_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_092_0_i_reg_89 <= i_V_fu_140_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_092_0_i_reg_89 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_V_buf_0_i_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_V_buf_0_i_reg_109 <= op_V_read_assign_reg_68;
            elsif (((icmp_ln86_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_V_buf_0_i_reg_109 <= zext_ln719_2_fu_280_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                ap_return <= trunc_ln86_fu_190_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_134_p2, ap_CS_fsm_state3, icmp_ln86_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln86_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln86_fu_194_p2)
    begin
        if (((icmp_ln86_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b2_V_2_fu_184_p2 <= std_logic_vector(shift_left(unsigned(lhs_V_reg_100),to_integer(unsigned('0' & ap_const_lv15_1(15-1 downto 0)))));
    b2_V_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V),15));
    c_V_fu_164_p2 <= (ret_V_fu_158_p2 xor op_V_read_assign_reg_68);
    i_V_21_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_0191_0_i_reg_119));
    i_V_fu_140_p2 <= std_logic_vector(unsigned(p_092_0_i_reg_89) + unsigned(ap_const_lv4_1));
    icmp_ln86_fu_194_p2 <= "1" when (p_0191_0_i_reg_119 = ap_const_lv2_2) else "0";
    icmp_ln887_fu_134_p2 <= "1" when (p_092_0_i_reg_89 = ap_const_lv4_8) else "0";
    lshr_ln_fu_170_p4 <= a_V_buf_0_i_reg_80(7 downto 1);
    mod_V_3_fu_232_p3 <= (tmp_s_fu_206_p4 & ap_const_lv3_0);
    mod_V_4_fu_244_p3 <= (tmp_s_fu_206_p4 & ap_const_lv4_0);
    mod_V_fu_220_p3 <= (tmp_s_fu_206_p4 & ap_const_lv2_0);
    ret_V_fu_158_p2 <= (rhs_V_fu_150_p3 and lhs_V_reg_100);
    rhs_V_fu_150_p3 <= 
        ap_const_lv15_7FFF when (trunc_ln1355_fu_146_p1(0) = '1') else 
        ap_const_lv15_0;
    tmp_s_fu_206_p4 <= x_V_buf_0_i_reg_109(14 downto 8);
    trunc_ln1355_fu_146_p1 <= a_V_buf_0_i_reg_80(1 - 1 downto 0);
    trunc_ln86_fu_190_p1 <= x_V_buf_0_i_reg_109(8 - 1 downto 0);
    xor_ln719_19_fu_274_p2 <= (zext_ln719_fu_258_p1 xor xor_ln719_21_fu_268_p2);
    xor_ln719_20_fu_262_p2 <= (zext_ln841_2_fu_240_p1 xor mod_V_4_fu_244_p3);
    xor_ln719_21_fu_268_p2 <= (zext_ln841_fu_228_p1 xor xor_ln719_20_fu_262_p2);
    xor_ln719_fu_252_p2 <= (zext_ln1503_fu_216_p1 xor trunc_ln86_fu_190_p1);
    zext_ln1503_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_206_p4),8));
    zext_ln719_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_19_fu_274_p2),15));
    zext_ln719_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_fu_252_p2),11));
    zext_ln841_2_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_3_fu_232_p3),11));
    zext_ln841_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_fu_220_p3),11));
    zext_ln858_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_170_p4),8));
end behav;
