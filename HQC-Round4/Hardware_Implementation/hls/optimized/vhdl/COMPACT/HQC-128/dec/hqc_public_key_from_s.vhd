-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hqc_public_key_from_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_V_ce1 : OUT STD_LOGIC;
    s_V_we1 : OUT STD_LOGIC;
    s_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pk_V_ce0 : OUT STD_LOGIC;
    pk_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of hqc_public_key_from_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_115 : STD_LOGIC_VECTOR (8 downto 0) := "100010101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_109_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_192 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_115_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_reg_197 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln63_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pk_V_addr_reg_202 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_140_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln65_fu_150_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_reg_215 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln64_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln66_fu_161_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln66_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal pk_V_load_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln1503_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1503_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_81 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln1503_1_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1503_fu_123_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_fu_146_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal op2_assign_fu_165_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1503_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1503_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_81 <= i_reg_192;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_81 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_92 <= j_reg_210;
            elsif (((icmp_ln63_fu_103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_92 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln65_reg_215 <= add_ln65_fu_150_p2;
                icmp_ln65_reg_220 <= icmp_ln65_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_192 <= i_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_210 <= j_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                pk_V_addr_reg_202 <= zext_ln1503_1_fu_129_p1(9 - 1 downto 0);
                    shl_ln_reg_197(11 downto 3) <= shl_ln_fu_115_p3(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pk_V_load_reg_229 <= pk_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln1503_reg_234 <= trunc_ln1503_fu_181_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_155_p2 = ap_const_lv1_1) and (icmp_ln64_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln66_reg_224 <= trunc_ln66_fu_161_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_197(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln63_fu_103_p2, ap_CS_fsm_state3, icmp_ln64_fu_134_p2, icmp_ln65_fu_155_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln63_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln64_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln65_fu_155_p2 = ap_const_lv1_0) and (icmp_ln64_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1503_fu_123_p2 <= std_logic_vector(unsigned(i_0_reg_81) + unsigned(ap_const_lv9_A));
    add_ln65_fu_150_p2 <= std_logic_vector(unsigned(shl_ln_reg_197) + unsigned(zext_ln65_fu_146_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln63_fu_103_p2)
    begin
        if ((((icmp_ln63_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln63_fu_103_p2)
    begin
        if (((icmp_ln63_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_109_p2 <= std_logic_vector(unsigned(i_0_reg_81) + unsigned(ap_const_lv9_1));
    icmp_ln63_fu_103_p2 <= "1" when (i_0_reg_81 = ap_const_lv9_115) else "0";
    icmp_ln64_fu_134_p2 <= "1" when (j_0_reg_92 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_155_p2 <= "1" when (unsigned(add_ln65_fu_150_p2) < unsigned(ap_const_lv12_8A1)) else "0";
    j_fu_140_p2 <= std_logic_vector(unsigned(j_0_reg_92) + unsigned(ap_const_lv4_1));
    lshr_ln1503_fu_176_p2 <= std_logic_vector(shift_right(unsigned(pk_V_load_reg_229),to_integer(unsigned('0' & zext_ln1503_fu_172_p1(31-1 downto 0)))));
    op2_assign_fu_165_p3 <= (trunc_ln66_reg_224 & ap_const_lv3_0);
    pk_V_address0 <= pk_V_addr_reg_202;

    pk_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_V_ce0 <= ap_const_logic_1;
        else 
            pk_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_V_address1 <= zext_ln66_fu_185_p1(12 - 1 downto 0);

    s_V_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_V_ce1 <= ap_const_logic_1;
        else 
            s_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s_V_d1 <= trunc_ln1503_reg_234;

    s_V_we1_assign_proc : process(icmp_ln65_reg_220, ap_CS_fsm_state6)
    begin
        if (((icmp_ln65_reg_220 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            s_V_we1 <= ap_const_logic_1;
        else 
            s_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_115_p3 <= (i_0_reg_81 & ap_const_lv3_0);
    trunc_ln1503_fu_181_p1 <= lshr_ln1503_fu_176_p2(8 - 1 downto 0);
    trunc_ln66_fu_161_p1 <= j_0_reg_92(3 - 1 downto 0);
    zext_ln1503_1_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1503_fu_123_p2),64));
    zext_ln1503_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_165_p3),64));
    zext_ln65_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_92),12));
    zext_ln66_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_reg_215),64));
end behav;
