-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hqc_ciphertext_from_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    u_V_ce1 : OUT STD_LOGIC;
    u_V_we1 : OUT STD_LOGIC;
    u_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    d_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_V_ce0 : OUT STD_LOGIC;
    d_V_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    d_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce0 : OUT STD_LOGIC;
    ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of hqc_ciphertext_from_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv13_8A1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010100001";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1141 : STD_LOGIC_VECTOR (12 downto 0) := "1000101000001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_200_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_462 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_19_fu_228_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_19_reg_475 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln215_fu_234_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_reg_480 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_20_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_20_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_20_reg_493 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln414_fu_288_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln414_reg_498 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_21_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_V_addr_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_511 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln555_fu_304_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln555_reg_516 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln887_22_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Lo_fu_328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal Lo_reg_527 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Hi_fu_335_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Hi_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal ct_V_load_2_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln414_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0281_0_reg_149 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_0281_1_reg_161 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_0281_2_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0180_0_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln544_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_54_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_55_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_56_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_2_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_fu_211_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_238_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln321_4_fu_249_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1352_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_85_fu_280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_6_fu_308_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1353_2_fu_312_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1353_fu_318_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln414_1_fu_350_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_2_fu_353_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_fu_362_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_2_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_1_fu_369_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_1_fu_383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_3_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_407_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_4_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_5_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_1_fu_424_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln414_fu_430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln414_3_fu_417_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_fu_436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_6_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0180_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0180_0_reg_183 <= j_V_reg_511;
            elsif (((icmp_ln887_21_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0180_0_reg_183 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0281_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0281_0_reg_149 <= i_V_reg_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0281_0_reg_149 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0281_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0281_1_reg_161 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0281_1_reg_161 <= i_V_19_reg_475;
            end if; 
        end if;
    end process;

    p_0281_2_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_20_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0281_2_reg_172 <= ap_const_lv4_0;
            elsif (((icmp_ln887_22_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0281_2_reg_172 <= i_V_20_reg_493;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    Hi_reg_532(5 downto 3) <= Hi_fu_335_p2(5 downto 3);
                    Lo_reg_527(5 downto 3) <= Lo_fu_328_p3(5 downto 3);
                ct_V_load_2_reg_537 <= ct_V_q0;
                icmp_ln414_reg_542 <= icmp_ln414_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_21_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                d_V_addr_reg_503 <= zext_ln544_55_fu_271_p1(3 - 1 downto 0);
                    zext_ln414_reg_498(5 downto 3) <= zext_ln414_fu_288_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_19_reg_475 <= i_V_19_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_V_20_reg_493 <= i_V_20_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_462 <= i_V_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_V_reg_511 <= j_V_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_22_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                trunc_ln555_reg_516 <= trunc_ln555_fu_304_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_20_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln215_reg_480(11 downto 0) <= zext_ln215_fu_234_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_reg_480(12) <= '0';
    zext_ln414_reg_498(2 downto 0) <= "000";
    zext_ln414_reg_498(12 downto 6) <= "0000000";
    Lo_reg_527(2 downto 0) <= "000";
    Hi_reg_532(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_194_p2, ap_CS_fsm_state4, icmp_ln887_20_fu_222_p2, ap_CS_fsm_state6, icmp_ln887_21_fu_259_p2, ap_CS_fsm_state7, icmp_ln887_22_fu_292_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_20_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln887_21_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln887_22_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    Hi_fu_335_p2 <= (ap_const_lv6_7 or Lo_fu_328_p3);
    Lo_fu_328_p3 <= (trunc_ln555_reg_516 & ap_const_lv3_0);
    add_ln1353_2_fu_312_p2 <= std_logic_vector(signed(ap_const_lv13_1141) + signed(zext_ln215_6_fu_308_p1));
    add_ln1353_fu_318_p2 <= std_logic_vector(unsigned(add_ln1353_2_fu_312_p2) + unsigned(zext_ln414_reg_498));
    add_ln321_4_fu_249_p2 <= std_logic_vector(unsigned(zext_ln215_reg_480) + unsigned(ap_const_lv13_8B1));
    add_ln321_fu_211_p2 <= std_logic_vector(unsigned(p_0281_0_reg_149) + unsigned(ap_const_lv12_10));
    and_ln414_fu_436_p2 <= (shl_ln414_1_fu_424_p2 and lshr_ln414_fu_430_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln887_21_fu_259_p2)
    begin
        if ((((icmp_ln887_21_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln887_21_fu_259_p2)
    begin
        if (((icmp_ln887_21_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln544_fu_206_p1, zext_ln544_54_fu_244_p1, zext_ln544_56_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ct_V_address0 <= zext_ln544_56_fu_323_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ct_V_address0 <= zext_ln544_54_fu_244_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ct_V_address0 <= zext_ln544_fu_206_p1(13 - 1 downto 0);
        else 
            ct_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ct_V_ce0 <= ap_const_logic_1;
        else 
            ct_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_address0 <= d_V_addr_reg_503;

    d_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            d_V_ce0 <= ap_const_logic_1;
        else 
            d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_d0 <= (select_ln414_3_fu_417_p3 and and_ln414_fu_436_p2);

    d_V_we0_assign_proc : process(ap_CS_fsm_state9, shl_ln414_2_fu_452_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            d_V_we0 <= shl_ln414_2_fu_452_p2;
        else 
            d_V_we0 <= ap_const_lv8_0;
        end if; 
    end process;

    i_V_19_fu_228_p2 <= std_logic_vector(unsigned(p_0281_1_reg_161) + unsigned(ap_const_lv12_1));
    i_V_20_fu_265_p2 <= std_logic_vector(unsigned(p_0281_2_reg_172) + unsigned(ap_const_lv4_1));
    i_V_fu_200_p2 <= std_logic_vector(unsigned(p_0281_0_reg_149) + unsigned(ap_const_lv12_1));
    icmp_ln414_fu_341_p2 <= "1" when (unsigned(Lo_fu_328_p3) > unsigned(Hi_fu_335_p2)) else "0";
    icmp_ln887_20_fu_222_p2 <= "1" when (p_0281_1_reg_161 = ap_const_lv12_8A0) else "0";
    icmp_ln887_21_fu_259_p2 <= "1" when (p_0281_2_reg_172 = ap_const_lv4_8) else "0";
    icmp_ln887_22_fu_292_p2 <= "1" when (p_0180_0_reg_183 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_194_p2 <= "1" when (p_0281_0_reg_149 = ap_const_lv12_8A1) else "0";
    j_V_fu_298_p2 <= std_logic_vector(unsigned(p_0180_0_reg_183) + unsigned(ap_const_lv4_1));
    lshr_ln414_fu_430_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_5_fu_397_p1(31-1 downto 0)))));
    ret_V_85_fu_280_p3 <= (trunc_ln1352_fu_276_p1 & ap_const_lv3_0);
    ret_V_fu_238_p2 <= std_logic_vector(unsigned(zext_ln215_fu_234_p1) + unsigned(ap_const_lv13_8A1));
    select_ln414_1_fu_369_p3 <= 
        zext_ln414_2_fu_353_p1 when (icmp_ln414_reg_542(0) = '1') else 
        zext_ln414_1_fu_350_p1;
    select_ln414_2_fu_376_p3 <= 
        xor_ln414_fu_356_p2 when (icmp_ln414_reg_542(0) = '1') else 
        zext_ln414_1_fu_350_p1;
    select_ln414_3_fu_417_p3 <= 
        tmp_5_fu_407_p4 when (icmp_ln414_reg_542(0) = '1') else 
        shl_ln414_fu_401_p2;
    select_ln414_fu_362_p3 <= 
        zext_ln414_1_fu_350_p1 when (icmp_ln414_reg_542(0) = '1') else 
        zext_ln414_2_fu_353_p1;
    shl_ln414_1_fu_424_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_4_fu_393_p1(31-1 downto 0)))));
    shl_ln414_2_fu_452_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_6_fu_449_p1(8-1 downto 0)))));
    shl_ln414_fu_401_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_347_p1),to_integer(unsigned('0' & zext_ln414_3_fu_389_p1(31-1 downto 0)))));
    
    tmp_5_fu_407_p4_proc : process(shl_ln414_fu_401_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_5_fu_407_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln414_fu_401_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_5_fu_407_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_5_fu_407_p4_i) := shl_ln414_fu_401_p2(64-1-tmp_5_fu_407_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_407_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_V_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ct_V_load_2_reg_537),64));
    trunc_ln1352_fu_276_p1 <= p_0281_2_reg_172(3 - 1 downto 0);
    trunc_ln555_fu_304_p1 <= p_0180_0_reg_183(3 - 1 downto 0);

    u_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln321_fu_217_p1, zext_ln321_5_fu_254_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            u_V_address1 <= zext_ln321_5_fu_254_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            u_V_address1 <= zext_ln321_fu_217_p1(13 - 1 downto 0);
        else 
            u_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    u_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            u_V_ce1 <= ap_const_logic_1;
        else 
            u_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    u_V_d1 <= ct_V_q0;

    u_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            u_V_we1 <= ap_const_logic_1;
        else 
            u_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln414_1_fu_383_p2 <= (select_ln414_fu_362_p3 xor ap_const_lv7_3F);
    xor_ln414_fu_356_p2 <= (zext_ln414_1_fu_350_p1 xor ap_const_lv7_3F);
    zext_ln215_6_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0180_0_reg_183),13));
    zext_ln215_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_1_reg_161),13));
    zext_ln321_5_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_4_fu_249_p2),64));
    zext_ln321_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_211_p2),64));
    zext_ln414_1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_reg_527),7));
    zext_ln414_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_reg_532),7));
    zext_ln414_3_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_376_p3),64));
    zext_ln414_4_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_369_p3),64));
    zext_ln414_5_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln414_1_fu_383_p2),64));
    zext_ln414_6_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln555_reg_516),8));
    zext_ln414_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_85_fu_280_p3),13));
    zext_ln544_54_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_238_p2),64));
    zext_ln544_55_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_2_reg_172),64));
    zext_ln544_56_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_318_p2),64));
    zext_ln544_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_0_reg_149),64));
end behav;
