-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_solomon_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    msg_V_ce1 : OUT STD_LOGIC;
    msg_V_we1 : OUT STD_LOGIC;
    msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_solomon_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_13E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_13F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv9_13E : STD_LOGIC_VECTOR (8 downto 0) := "100111110";
    constant ap_const_lv9_16C : STD_LOGIC_VECTOR (8 downto 0) := "101101100";
    constant ap_const_lv12_4F : STD_LOGIC_VECTOR (11 downto 0) := "000001001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_19A : STD_LOGIC_VECTOR (9 downto 0) := "0110011010";
    constant ap_const_lv9_3E : STD_LOGIC_VECTOR (8 downto 0) := "000111110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_1E : STD_LOGIC_VECTOR (8 downto 0) := "000011110";
    constant ap_const_lv7_3E : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alpha_ij_pow_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha_ij_pow_V_ce0 : STD_LOGIC;
    signal alpha_ij_pow_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks2_ce0 : STD_LOGIC;
    signal masks2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_ce0 : STD_LOGIC;
    signal index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks3_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks3_ce0 : STD_LOGIC;
    signal masks3_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_ce0 : STD_LOGIC;
    signal masks4_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_array_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_array_V_ce0 : STD_LOGIC;
    signal exp_array_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_gf_mul_fu_1105_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_1105_ap_done : STD_LOGIC;
    signal grp_gf_inverse_fu_1097_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1137 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_gf_inverse_fu_1097_ap_ready : STD_LOGIC;
    signal grp_gf_inverse_fu_1097_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal reg_1143 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal rs_mem_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1105_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal beta_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1157 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i_fu_1169_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln221_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln221_1_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln221_2_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rhs_V_9_reg_2390 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln69_fu_1257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_reg_2395 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_V_fu_1269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_2403 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs_mem_1_addr_8_reg_2408 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln69_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln71_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_1312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_V_reg_2432 : STD_LOGIC_VECTOR (5 downto 0);
    signal cdw_V_load_reg_2437 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal alpha_ij_pow_V_load_reg_2442 : STD_LOGIC_VECTOR (7 downto 0);
    signal syndrome_local_V_1_fu_1324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln120_fu_1330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln120_reg_2452 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mu_add_V_fu_1340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mu_add_V_reg_2460 : STD_LOGIC_VECTOR (4 downto 0);
    signal deg_X_V_fu_1346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_X_V_reg_2469 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln120_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_2474 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_1396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_reg_2489 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_fu_1421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_reg_2495 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_fu_1438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_reg_2500 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_fu_1456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_reg_2505 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_1_reg_2510 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln140_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_67_fu_1500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_67_reg_2533 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_p_V_fu_1518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_p_V_reg_2538 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln151_fu_1524_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln151_reg_2543 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_64_fu_1535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_64_reg_2548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal rs_mem_1_addr_12_reg_2553 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_V_6_fu_1556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_6_reg_2559 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigma_local_V_1_fu_1562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln899_1_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_2572 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln151_fu_1569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_8_fu_1605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_8_reg_2587 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs_mem_1_load_6_reg_2592 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_2_fu_1635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_V_7_fu_1647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_7_reg_2610 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln277_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_6_fu_1659_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_V_6_reg_2623 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ret_V_47_fu_1677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_47_reg_2628 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_load_reg_2638 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal rs_mem_1_addr_17_reg_2648 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_1751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_2654 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ret_V_42_fu_1761_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_42_reg_2659 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln180_fu_1767_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_reg_2664 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal lhs_V_15_fu_1781_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_15_reg_2672 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_fu_1771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_1_fu_1821_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_1_reg_2693 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ret_V_70_fu_1835_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_70_reg_2698 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_addr_15_reg_2703 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln183_fu_1851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_8_fu_1887_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_8_reg_2722 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_9_fu_1893_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_7_fu_1928_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_V_10_fu_1945_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_10_reg_2743 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln887_10_fu_1939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_2753 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal retrieved_mask_V_reg_2768 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal rhs_V_24_reg_2774 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_j_V_addr_1_reg_2779 : STD_LOGIC_VECTOR (3 downto 0);
    signal delta_counter_V_fu_2014_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_V_13_fu_2026_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_13_reg_2792 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln544_45_fu_2032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_45_reg_2797 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln226_fu_2020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln232_fu_2037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_9_fu_2058_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_9_reg_2815 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_fu_2064_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_reg_2820 : STD_LOGIC_VECTOR (4 downto 0);
    signal error_values_a_V_fu_2068_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln236_fu_2078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_2114_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_V_reg_2838 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_16_fu_2124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_16_reg_2843 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_j_V_addr_1_reg_2848 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln214_fu_2130_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln214_reg_2853 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_V_11_fu_2174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_11_reg_2871 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal icmp_ln887_12_fu_2168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_reg_2881 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal rs_mem_1_addr_24_reg_2896 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_4_fu_2245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_4_reg_2902 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal delta_counter_V_1_fu_2255_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal delta_counter_V_1_reg_2907 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_12_fu_2267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_12_reg_2915 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal icmp_ln887_13_fu_2261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cdw_V_addr_7_reg_2925 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_14_fu_2306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_14_reg_2934 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln887_15_fu_2300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce0 : STD_LOGIC;
    signal rs_mem_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce1 : STD_LOGIC;
    signal rs_mem_1_we1 : STD_LOGIC;
    signal rs_mem_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_j_V_ce0 : STD_LOGIC;
    signal beta_j_V_we0 : STD_LOGIC;
    signal beta_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_j_V_ce0 : STD_LOGIC;
    signal e_j_V_we0 : STD_LOGIC;
    signal e_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce0 : STD_LOGIC;
    signal X_sigma_p_V_we0 : STD_LOGIC;
    signal X_sigma_p_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce1 : STD_LOGIC;
    signal X_sigma_p_V_we1 : STD_LOGIC;
    signal X_sigma_p_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_add_fft_fu_1084_ap_start : STD_LOGIC;
    signal grp_add_fft_fu_1084_ap_done : STD_LOGIC;
    signal grp_add_fft_fu_1084_ap_idle : STD_LOGIC;
    signal grp_add_fft_fu_1084_ap_ready : STD_LOGIC;
    signal grp_add_fft_fu_1084_rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_fft_fu_1084_rs_mem_1_ce0 : STD_LOGIC;
    signal grp_add_fft_fu_1084_rs_mem_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_fft_fu_1084_rs_mem_1_ce1 : STD_LOGIC;
    signal grp_add_fft_fu_1084_rs_mem_1_we1 : STD_LOGIC;
    signal grp_add_fft_fu_1084_rs_mem_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_inverse_fu_1097_ap_start : STD_LOGIC;
    signal grp_gf_inverse_fu_1097_ap_idle : STD_LOGIC;
    signal grp_gf_inverse_fu_1097_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1105_ap_start : STD_LOGIC;
    signal grp_gf_mul_fu_1105_ap_idle : STD_LOGIC;
    signal grp_gf_mul_fu_1105_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1105_b_V : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_reg_677 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i47_reg_688 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i53_reg_699 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_i59_reg_710 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln221_3_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_088_0_i_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_732 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_063_0_i_reg_744 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_6_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_copy_V_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_10_reg_777 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_5_reg_789 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_7_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_5_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_reg_823 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_9_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_28_reg_843 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_0_i_reg_852 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0390_1_i_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_1_i_reg_875 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_01206_0_i_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_01077_0_i_reg_898 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal indvars_iv_i_reg_909 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0249_0_i_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_0260_0_i_reg_932 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_9_fu_1922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0312_0_i_reg_943 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_955 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0426_1_i_reg_967 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal p_0260_1_i_reg_979 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_044_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_034_reg_1002 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0243_0_i_reg_1014 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_039_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0312_1_i_reg_1037 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal p_0426_2_i_reg_1049 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_022_0_i_reg_1061 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal p_071_0_reg_1072 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_add_fft_fu_1084_ap_start_reg : STD_LOGIC := '0';
    signal grp_gf_inverse_fu_1097_ap_start_reg : STD_LOGIC := '0';
    signal grp_gf_mul_fu_1105_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln222_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_37_fu_1286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_36_fu_1392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_38_fu_1484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_1_fu_1551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_2_fu_1590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_1_fu_1600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_1616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_41_fu_1683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_4_fu_1697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_2_fu_1711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_1790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_fu_1816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_39_fu_1805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_2_fu_1846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_1866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_fu_1882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_40_fu_1934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_3_fu_1961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_1982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_43_fu_1966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_44_fu_1987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_1_fu_2053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_48_fu_2109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln239_fu_2137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_5_fu_2190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_2211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_46_fu_2195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_3_fu_2226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_4_fu_2288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_47_fu_2273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_50_fu_2322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_49_fu_2327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_34_fu_1318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_11_fu_1744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_1915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_fu_2004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_fu_1192_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_2_fu_1215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_1_fu_1219_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln321_4_fu_1242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_2_fu_1246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_35_fu_1291_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln72_fu_1297_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_fu_1301_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln209_1_fu_1356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_fu_1352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal deg_X_sigma_p_V_fu_1360_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln895_fu_1366_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln130_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_2_fu_1404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_61_fu_1409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_29_fu_1415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_62_fu_1427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_31_fu_1432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_63_fu_1444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_33_fu_1450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln899_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_65_fu_1489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_66_fu_1495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_68_fu_1507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_37_fu_1513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_fu_1527_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1355_fu_1541_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln719_fu_1545_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln152_1_fu_1580_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln152_fu_1584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_49_fu_1595_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln899_1_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1355_1_fu_1621_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_50_fu_1629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1352_fu_1665_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_46_fu_1669_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_42_fu_1688_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_fu_1691_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_3_fu_1702_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_1_fu_1705_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_18_fu_1716_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_48_fu_1720_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_1726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_14_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln719_fu_1740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1354_fu_1757_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_fu_1785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_fu_1777_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_43_fu_1799_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1354_1_fu_1795_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1357_fu_1810_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_69_fu_1829_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1357_1_fu_1841_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_21_fu_1856_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln184_fu_1860_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_51_fu_1871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_52_fu_1876_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1357_fu_1899_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_71_fu_1904_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_54_fu_1910_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_fu_1951_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_fu_1955_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_11_fu_1971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_fu_1977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_2_fu_1992_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln700_fu_1999_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_fu_2011_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln234_fu_2043_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln234_fu_2047_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln236_1_fu_2074_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_58_fu_2084_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1372_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1372_fu_2095_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_59_fu_2101_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_2120_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1355_2_fu_2147_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_72_fu_2141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_57_fu_2155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_4_fu_2180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_2_fu_2184_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_14_fu_2200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln246_fu_2206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1355_1_fu_2216_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln700_16_fu_2220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln321_3_fu_2231_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_55_fu_2239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_2_fu_2251_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln719_3_fu_2278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_2_fu_2282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_2312_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_60_fu_2316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);

    component add_fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rs_mem_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rs_mem_1_ce0 : OUT STD_LOGIC;
        rs_mem_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rs_mem_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rs_mem_1_ce1 : OUT STD_LOGIC;
        rs_mem_1_we1 : OUT STD_LOGIC;
        rs_mem_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decosc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decotde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component reed_solomon_decoudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decozec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    alpha_ij_pow_V_U : component reed_solomon_decosc4
    generic map (
        DataWidth => 8,
        AddressRange => 3792,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_ij_pow_V_address0,
        ce0 => alpha_ij_pow_V_ce0,
        q0 => alpha_ij_pow_V_q0);

    masks2_U : component reed_solomon_decotde
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks2_address0,
        ce0 => masks2_ce0,
        q0 => masks2_q0);

    index_U : component reed_solomon_decoudo
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_address0,
        ce0 => index_ce0,
        q0 => index_q0);

    masks3_U : component reed_solomon_decotde
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks3_address0,
        ce0 => masks3_ce0,
        q0 => masks3_q0);

    masks4_U : component reed_solomon_decotde
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks4_address0,
        ce0 => masks4_ce0,
        q0 => masks4_q0);

    exp_array_V_U : component reed_solomon_decoxdS
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_array_V_address0,
        ce0 => exp_array_V_ce0,
        q0 => exp_array_V_q0);

    rs_mem_1_U : component reed_solomon_decoyd2
    generic map (
        DataWidth => 8,
        AddressRange => 666,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rs_mem_1_address0,
        ce0 => rs_mem_1_ce0,
        q0 => rs_mem_1_q0,
        address1 => rs_mem_1_address1,
        ce1 => rs_mem_1_ce1,
        we1 => rs_mem_1_we1,
        d1 => rs_mem_1_d1,
        q1 => rs_mem_1_q1);

    beta_j_V_U : component reed_solomon_decozec
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_j_V_address0,
        ce0 => beta_j_V_ce0,
        we0 => beta_j_V_we0,
        d0 => beta_j_V_d0,
        q0 => beta_j_V_q0);

    e_j_V_U : component reed_solomon_decozec
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_j_V_address0,
        ce0 => e_j_V_ce0,
        we0 => e_j_V_we0,
        d0 => e_j_V_d0,
        q0 => e_j_V_q0);

    X_sigma_p_V_U : component reed_solomon_decoBew
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_sigma_p_V_address0,
        ce0 => X_sigma_p_V_ce0,
        we0 => X_sigma_p_V_we0,
        d0 => X_sigma_p_V_d0,
        q0 => X_sigma_p_V_q0,
        address1 => X_sigma_p_V_address1,
        ce1 => X_sigma_p_V_ce1,
        we1 => X_sigma_p_V_we1,
        d1 => X_sigma_p_V_d1);

    grp_add_fft_fu_1084 : component add_fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_fft_fu_1084_ap_start,
        ap_done => grp_add_fft_fu_1084_ap_done,
        ap_idle => grp_add_fft_fu_1084_ap_idle,
        ap_ready => grp_add_fft_fu_1084_ap_ready,
        rs_mem_1_address0 => grp_add_fft_fu_1084_rs_mem_1_address0,
        rs_mem_1_ce0 => grp_add_fft_fu_1084_rs_mem_1_ce0,
        rs_mem_1_q0 => rs_mem_1_q0,
        rs_mem_1_address1 => grp_add_fft_fu_1084_rs_mem_1_address1,
        rs_mem_1_ce1 => grp_add_fft_fu_1084_rs_mem_1_ce1,
        rs_mem_1_we1 => grp_add_fft_fu_1084_rs_mem_1_we1,
        rs_mem_1_d1 => grp_add_fft_fu_1084_rs_mem_1_d1);

    grp_gf_inverse_fu_1097 : component gf_inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_inverse_fu_1097_ap_start,
        ap_done => grp_gf_inverse_fu_1097_ap_done,
        ap_idle => grp_gf_inverse_fu_1097_ap_idle,
        ap_ready => grp_gf_inverse_fu_1097_ap_ready,
        a_V => grp_gf_inverse_fu_1097_a_V,
        ap_return => grp_gf_inverse_fu_1097_ap_return);

    grp_gf_mul_fu_1105 : component gf_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_mul_fu_1105_ap_start,
        ap_done => grp_gf_mul_fu_1105_ap_done,
        ap_idle => grp_gf_mul_fu_1105_ap_idle,
        ap_ready => grp_gf_mul_fu_1105_ap_ready,
        a_V => grp_gf_mul_fu_1105_a_V,
        b_V => grp_gf_mul_fu_1105_b_V,
        ap_return => grp_gf_mul_fu_1105_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_add_fft_fu_1084_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_fft_fu_1084_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln120_fu_1334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_add_fft_fu_1084_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_fft_fu_1084_ap_ready = ap_const_logic_1)) then 
                    grp_add_fft_fu_1084_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gf_inverse_fu_1097_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_inverse_fu_1097_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((icmp_ln236_fu_2078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((icmp_ln120_fu_1334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_gf_inverse_fu_1097_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_inverse_fu_1097_ap_ready = ap_const_logic_1)) then 
                    grp_gf_inverse_fu_1097_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gf_mul_fu_1105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_mul_fu_1105_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((icmp_ln232_fu_2037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then 
                    grp_gf_mul_fu_1105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_mul_fu_1105_ap_ready = ap_const_logic_1)) then 
                    grp_gf_mul_fu_1105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    deg_sigma_copy_V_reg_765_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                deg_sigma_copy_V_reg_765 <= deg_sigma_V_reg_2495;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                deg_sigma_copy_V_reg_765 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i47_reg_688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_1163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i47_reg_688 <= ap_const_lv6_0;
            elsif (((icmp_ln221_1_fu_1180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i47_reg_688 <= i_1_fu_1186_p2;
            end if; 
        end if;
    end process;

    i_0_i53_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_1_fu_1180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i53_reg_699 <= ap_const_lv6_0;
            elsif (((icmp_ln221_2_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i53_reg_699 <= i_2_fu_1209_p2;
            end if; 
        end if;
    end process;

    i_0_i59_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_2_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i59_reg_710 <= ap_const_lv6_0;
            elsif (((icmp_ln221_3_fu_1230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i59_reg_710 <= i_3_fu_1236_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_677 <= ap_const_lv5_0;
            elsif (((icmp_ln221_fu_1163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_677 <= i_fu_1169_p2;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_909_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvars_iv_i_reg_909 <= ap_const_lv5_2;
            elsif (((icmp_ln183_fu_1851_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                indvars_iv_i_reg_909 <= i_V_9_fu_1893_p2;
            end if; 
        end if;
    end process;

    lhs_V_4_reg_823_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                lhs_V_4_reg_823 <= mu_add_V_reg_2460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_4_reg_823 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    lhs_V_5_reg_813_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                lhs_V_5_reg_813 <= p_0390_1_i_reg_864;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_5_reg_813 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_6_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                lhs_V_6_reg_755 <= syndrome_local_V_1_fu_1324_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                lhs_V_6_reg_755 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_9_reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    lhs_V_9_reg_834 <= sigma_local_V_1_fu_1562_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    lhs_V_9_reg_834 <= reg_1143;
                end if;
            end if; 
        end if;
    end process;

    p_01077_0_i_reg_898_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                p_01077_0_i_reg_898 <= j_V_6_reg_2623;
            elsif (((icmp_ln277_fu_1641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_01077_0_i_reg_898 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_01206_0_i_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_1653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_01206_0_i_reg_886 <= i_V_7_reg_2610;
            elsif (((grp_add_fft_fu_1084_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                p_01206_0_i_reg_886 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_022_0_i_reg_1061_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_12_fu_2168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                p_022_0_i_reg_1061 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                p_022_0_i_reg_1061 <= i_V_12_reg_2915;
            end if; 
        end if;
    end process;

    p_0243_0_i_reg_1014_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                p_0243_0_i_reg_1014 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0243_0_i_reg_1014 <= k_V_reg_2838;
            end if; 
        end if;
    end process;

    p_0249_0_i_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0249_0_i_reg_921 <= j_V_8_reg_2722;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                p_0249_0_i_reg_921 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_932_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1922_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_0260_0_i_reg_932 <= j_V_7_fu_1928_p2;
            elsif (((icmp_ln180_fu_1771_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                p_0260_0_i_reg_932 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0260_1_i_reg_979_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0260_1_i_reg_979 <= j_V_9_reg_2815;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then 
                p_0260_1_i_reg_979 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_0312_0_i_reg_943_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1922_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_0312_0_i_reg_943 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                p_0312_0_i_reg_943 <= delta_counter_V_fu_2014_p2;
            end if; 
        end if;
    end process;

    p_0312_1_i_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                p_0312_1_i_reg_1037 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                p_0312_1_i_reg_1037 <= delta_counter_V_1_reg_2907;
            end if; 
        end if;
    end process;

    p_034_reg_1002_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_034_reg_1002 <= error_values_a_V_fu_2068_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then 
                p_034_reg_1002 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0390_1_i_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0390_1_i_reg_864 <= d_V_2_fu_1635_p2;
            elsif (((icmp_ln140_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_0390_1_i_reg_864 <= d_V_1_reg_2510;
            end if; 
        end if;
    end process;

    p_039_reg_1025_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                p_039_reg_1025 <= ap_const_lv8_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_039_reg_1025 <= grp_gf_mul_fu_1105_ap_return;
            end if; 
        end if;
    end process;

    p_0426_1_i_reg_967_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_1939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                p_0426_1_i_reg_967 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0426_1_i_reg_967 <= i_V_13_reg_2792;
            end if; 
        end if;
    end process;

    p_0426_2_i_reg_1049_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                p_0426_2_i_reg_1049 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                p_0426_2_i_reg_1049 <= i_V_11_reg_2871;
            end if; 
        end if;
    end process;

    p_044_reg_990_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_044_reg_990 <= reg_1151;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then 
                p_044_reg_990 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0459_0_i_reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    p_0459_0_i_reg_852 <= i_V_6_reg_2559;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    p_0459_0_i_reg_852 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    p_0459_1_i_reg_875_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_0459_1_i_reg_875 <= i_V_8_reg_2587;
            elsif (((icmp_ln140_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_0459_1_i_reg_875 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_063_0_i_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
                p_063_0_i_reg_744 <= j_V_reg_2432;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_063_0_i_reg_744 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    p_071_0_reg_1072_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_fu_2261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                p_071_0_reg_1072 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                p_071_0_reg_1072 <= i_V_14_reg_2934;
            end if; 
        end if;
    end process;

    p_088_0_i_reg_721_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_088_0_i_reg_721 <= i_V_reg_2403;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_088_0_i_reg_721 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_732_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul_reg_732 <= add_ln69_reg_2395;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_732 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    reg_1143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                reg_1143 <= rs_mem_1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then 
                reg_1143 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    rhs_V_10_reg_777_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_10_reg_777 <= deg_sigma_p_V_reg_2538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_10_reg_777 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rhs_V_28_reg_843_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    rhs_V_28_reg_843 <= ret_V_67_reg_2533;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    rhs_V_28_reg_843 <= X_sigma_p_V_q0;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_5_reg_789_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_5_reg_789 <= pp_V_reg_2500;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_5_reg_789 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;

    rhs_V_7_reg_801_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_7_reg_801 <= d_p_V_reg_2505;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_7_reg_801 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    t_V_reg_955_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1922_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                t_V_reg_955 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                t_V_reg_955 <= i_V_10_reg_2743;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln69_reg_2395 <= add_ln69_fu_1257_p2;
                i_V_reg_2403 <= i_V_fu_1269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                add_ln700_4_reg_2902 <= add_ln700_4_fu_2245_p2;
                delta_counter_V_1_reg_2907 <= delta_counter_V_1_fu_2255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                alpha_ij_pow_V_load_reg_2442 <= alpha_ij_pow_V_q0;
                cdw_V_load_reg_2437 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                beta_j_V_addr_1_reg_2779 <= zext_ln544_44_fu_1987_p1(4 - 1 downto 0);
                retrieved_mask_V_reg_2768 <= masks4_q0;
                rhs_V_24_reg_2774 <= exp_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_fu_2261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                cdw_V_addr_7_reg_2925 <= zext_ln544_47_fu_2273_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                d_V_1_reg_2510 <= rs_mem_1_q0;
                d_p_V_reg_2505 <= d_p_V_fu_1456_p2;
                deg_sigma_V_reg_2495 <= deg_sigma_V_fu_1421_p2;
                pp_V_reg_2500 <= pp_V_fu_1438_p2;
                select_ln321_reg_2489 <= select_ln321_fu_1396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_1334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                deg_X_V_reg_2469 <= deg_X_V_fu_1346_p2;
                icmp_ln895_1_reg_2474 <= icmp_ln895_1_fu_1370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                deg_sigma_p_V_reg_2538 <= deg_sigma_p_V_fu_1518_p2;
                    zext_ln151_reg_2543(4 downto 0) <= zext_ln151_fu_1524_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_2078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                e_j_V_addr_1_reg_2848 <= zext_ln544_45_reg_2797(4 - 1 downto 0);
                icmp_ln887_16_reg_2843 <= icmp_ln887_16_fu_2124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                i_V_10_reg_2743 <= i_V_10_fu_1945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_V_11_reg_2871 <= i_V_11_fu_2174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                i_V_12_reg_2915 <= i_V_12_fu_2267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_V_13_reg_2792 <= i_V_13_fu_2026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_V_14_reg_2934 <= i_V_14_fu_2306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_V_6_reg_2559 <= i_V_6_fu_1556_p2;
                    rs_mem_1_addr_12_reg_2553(5 downto 0) <= zext_ln719_1_fu_1551_p1(10 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_V_7_reg_2610 <= i_V_7_fu_1647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                i_V_8_reg_2587 <= i_V_8_fu_1605_p2;
                icmp_ln899_1_reg_2572 <= icmp_ln899_1_fu_1575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                icmp_ln883_1_reg_2881 <= grp_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                icmp_ln883_reg_2753 <= grp_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                index_load_reg_2638 <= index_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                j_V_6_reg_2623 <= j_V_6_fu_1659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln183_fu_1851_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                j_V_8_reg_2722 <= j_V_8_fu_1887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                j_V_9_reg_2815 <= j_V_9_fu_2058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                j_V_reg_2432 <= j_V_fu_1312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_2078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                k_V_reg_2838 <= k_V_fu_2114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_1771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    lhs_V_15_reg_2672(4 downto 0) <= lhs_V_15_fu_1781_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mu_add_V_reg_2460 <= mu_add_V_fu_1340_p2;
                    zext_ln120_reg_2452(4 downto 0) <= zext_ln120_fu_1330_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then
                reg_1129 <= rs_mem_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then
                reg_1137 <= grp_gf_inverse_fu_1097_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then
                reg_1151 <= grp_gf_mul_fu_1105_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_1157 <= beta_j_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                ret_V_42_reg_2659 <= ret_V_42_fu_1761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_1653_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                ret_V_47_reg_2628 <= ret_V_47_fu_1677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                ret_V_64_reg_2548 <= ret_V_64_fu_1535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_1462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                ret_V_67_reg_2533 <= ret_V_67_fu_1500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                ret_V_70_reg_2698 <= ret_V_70_fu_1835_p2;
                    rs_mem_1_addr_15_reg_2703(8 downto 0) <= zext_ln1357_2_fu_1846_p1(10 - 1 downto 0)(8 downto 0);
                select_ln321_1_reg_2693 <= select_ln321_1_fu_1821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                ret_V_reg_2654 <= ret_V_fu_1751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                rhs_V_9_reg_2390 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    rs_mem_1_addr_17_reg_2648(8 downto 0) <= zext_ln719_2_fu_1711_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                    rs_mem_1_addr_24_reg_2896(8 downto 0) <= zext_ln700_3_fu_2226_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    rs_mem_1_addr_8_reg_2408(4 downto 0) <= zext_ln544_fu_1275_p1(10 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                rs_mem_1_load_6_reg_2592 <= rs_mem_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                xor_ln214_reg_2853 <= xor_ln214_fu_2130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                    zext_ln180_reg_2664(4 downto 0) <= zext_ln180_fu_1767_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    zext_ln236_reg_2820(3 downto 0) <= zext_ln236_fu_2064_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    zext_ln544_45_reg_2797(3 downto 0) <= zext_ln544_45_fu_2032_p1(3 downto 0);
            end if;
        end if;
    end process;
    rs_mem_1_addr_8_reg_2408(9 downto 5) <= "00000";
    zext_ln120_reg_2452(7 downto 5) <= "000";
    zext_ln151_reg_2543(5) <= '0';
    rs_mem_1_addr_12_reg_2553(9 downto 6) <= "0000";
    rs_mem_1_addr_17_reg_2648(9) <= '0';
    zext_ln180_reg_2664(7 downto 5) <= "000";
    lhs_V_15_reg_2672(8 downto 5) <= "0000";
    rs_mem_1_addr_15_reg_2703(9) <= '0';
    zext_ln544_45_reg_2797(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln236_reg_2820(4) <= '0';
    rs_mem_1_addr_24_reg_2896(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state46, grp_gf_mul_fu_1105_ap_done, ap_CS_fsm_state14, grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state44, ap_CS_fsm_state52, ap_CS_fsm_state15, ap_CS_fsm_state2, icmp_ln221_fu_1163_p2, ap_CS_fsm_state3, icmp_ln221_1_fu_1180_p2, ap_CS_fsm_state4, icmp_ln221_2_fu_1203_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln69_fu_1263_p2, ap_CS_fsm_state9, icmp_ln71_fu_1280_p2, ap_CS_fsm_state11, ap_CS_fsm_state13, icmp_ln120_fu_1334_p2, ap_CS_fsm_state16, icmp_ln140_fu_1462_p2, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln151_fu_1569_p2, ap_CS_fsm_state22, ap_CS_fsm_state24, icmp_ln277_fu_1641_p2, ap_CS_fsm_state25, icmp_ln278_fu_1653_p2, ap_CS_fsm_state31, icmp_ln180_fu_1771_p2, ap_CS_fsm_state33, icmp_ln183_fu_1851_p2, ap_CS_fsm_state36, ap_CS_fsm_state37, icmp_ln887_10_fu_1939_p2, ap_CS_fsm_state42, icmp_ln226_fu_2020_p2, ap_CS_fsm_state45, icmp_ln232_fu_2037_p2, ap_CS_fsm_state47, ap_CS_fsm_state48, icmp_ln236_fu_2078_p2, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state54, icmp_ln887_12_fu_2168_p2, ap_CS_fsm_state59, icmp_ln887_13_fu_2261_p2, ap_CS_fsm_state61, icmp_ln887_15_fu_2300_p2, grp_add_fft_fu_1084_ap_done, icmp_ln221_3_fu_1230_p2, ap_CS_fsm_state23, ap_CS_fsm_state35, icmp_ln887_9_fu_1922_p2, ap_CS_fsm_state53)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln221_fu_1163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln221_1_fu_1180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln221_2_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln221_3_fu_1230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln69_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln71_fu_1280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln120_fu_1334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln140_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln151_fu_1569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((grp_add_fft_fu_1084_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln277_fu_1641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln278_fu_1653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln180_fu_1771_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln183_fu_1851_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln887_9_fu_1922_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln887_10_fu_1939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln226_fu_2020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln232_fu_2037_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln236_fu_2078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln887_12_fu_2168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln887_13_fu_2261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln887_15_fu_2300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_sigma_p_V_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, icmp_ln140_fu_1462_p2, zext_ln544_38_fu_1484_p1)
    begin
        if (((icmp_ln140_fu_1462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            X_sigma_p_V_address0 <= zext_ln544_38_fu_1484_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            X_sigma_p_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address0 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address1 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_ce0_assign_proc : process(ap_CS_fsm_state14, grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state16, icmp_ln140_fu_1462_p2)
    begin
        if ((((icmp_ln140_fu_1462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then 
            X_sigma_p_V_ce0 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            X_sigma_p_V_ce1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_sigma_p_V_d0 <= (rhs_V_28_reg_843 xor ret_V_66_fu_1495_p2);

    X_sigma_p_V_d1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_0;
        else 
            X_sigma_p_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    X_sigma_p_V_we0_assign_proc : process(ap_CS_fsm_state16, icmp_ln140_fu_1462_p2)
    begin
        if (((icmp_ln140_fu_1462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            X_sigma_p_V_we0 <= ap_const_logic_1;
        else 
            X_sigma_p_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7, icmp_ln69_fu_1263_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln69_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            X_sigma_p_V_we1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1357_1_fu_1841_p2 <= std_logic_vector(signed(ap_const_lv9_13E) + signed(lhs_V_15_reg_2672));
    add_ln1357_fu_1810_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1354_1_fu_1795_p1));
    add_ln1372_fu_2095_p2 <= std_logic_vector(unsigned(ret_V_58_fu_2084_p2) + unsigned(ap_const_lv5_11));
    add_ln152_fu_1584_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln152_1_fu_1580_p1));
    add_ln184_fu_1860_p2 <= std_logic_vector(unsigned(rhs_V_21_fu_1856_p1) + unsigned(ap_const_lv9_1E));
    add_ln215_fu_1691_p2 <= std_logic_vector(unsigned(ap_const_lv10_19A) + unsigned(zext_ln544_42_fu_1688_p1));
    add_ln234_fu_2047_p2 <= std_logic_vector(unsigned(zext_ln234_fu_2043_p1) + unsigned(ap_const_lv9_13E));
    add_ln321_1_fu_1219_p2 <= std_logic_vector(unsigned(zext_ln321_2_fu_1215_p1) + unsigned(ap_const_lv9_13E));
    add_ln321_2_fu_1246_p2 <= std_logic_vector(unsigned(zext_ln321_4_fu_1242_p1) + unsigned(ap_const_lv9_16C));
    add_ln321_fu_1192_p2 <= std_logic_vector(unsigned(i_0_i47_reg_688) + unsigned(ap_const_lv6_1E));
    add_ln69_fu_1257_p2 <= std_logic_vector(unsigned(phi_mul_reg_732) + unsigned(ap_const_lv12_4F));
    add_ln700_16_fu_2220_p2 <= std_logic_vector(signed(ap_const_lv9_16C) + signed(zext_ln1355_1_fu_2216_p1));
    add_ln700_4_fu_2245_p2 <= std_logic_vector(unsigned(ret_V_55_fu_2239_p2) + unsigned(rs_mem_1_q0));
    add_ln700_fu_2004_p2 <= std_logic_vector(unsigned(and_ln700_fu_1999_p2) + unsigned(beta_j_V_q0));
    add_ln719_1_fu_1705_p2 <= std_logic_vector(unsigned(ap_const_lv9_3E) + unsigned(zext_ln215_3_fu_1702_p1));
    add_ln719_2_fu_2282_p2 <= std_logic_vector(unsigned(zext_ln719_3_fu_2278_p1) + unsigned(ap_const_lv9_16C));
    add_ln719_fu_1545_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1355_fu_1541_p1));
    add_ln72_fu_1301_p2 <= std_logic_vector(unsigned(phi_mul_reg_732) + unsigned(zext_ln72_fu_1297_p1));
    add_ln883_2_fu_2184_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_4_fu_2180_p1));
    add_ln883_fu_1955_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_fu_1951_p1));
    alpha_ij_pow_V_address0 <= zext_ln72_1_fu_1307_p1(12 - 1 downto 0);

    alpha_ij_pow_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_ij_pow_V_ce0 <= ap_const_logic_1;
        else 
            alpha_ij_pow_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln130_fu_1382_p2 <= (icmp_ln895_fu_1376_p2 and icmp_ln895_1_reg_2474);
    and_ln220_fu_1977_p2 <= (icmp_ln887_11_fu_1971_p2 and icmp_ln883_reg_2753);
    and_ln246_fu_2206_p2 <= (icmp_ln887_14_fu_2200_p2 and icmp_ln883_1_reg_2881);
    and_ln700_fu_1999_p2 <= (select_ln321_2_fu_1992_p3 and rhs_V_24_reg_2774);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state61, icmp_ln887_15_fu_2300_p2)
    begin
        if ((((icmp_ln887_15_fu_2300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state61, icmp_ln887_15_fu_2300_p2)
    begin
        if (((icmp_ln887_15_fu_2300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state40, beta_j_V_addr_1_reg_2779, ap_CS_fsm_state41, ap_CS_fsm_state42, zext_ln544_45_fu_2032_p1, ap_CS_fsm_state48, zext_ln544_40_fu_1934_p1, zext_ln544_44_fu_1987_p1, zext_ln544_48_fu_2109_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            beta_j_V_address0 <= zext_ln544_48_fu_2109_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            beta_j_V_address0 <= zext_ln544_45_fu_2032_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            beta_j_V_address0 <= beta_j_V_addr_1_reg_2779;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            beta_j_V_address0 <= zext_ln544_44_fu_1987_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            beta_j_V_address0 <= zext_ln544_40_fu_1934_p1(4 - 1 downto 0);
        else 
            beta_j_V_address0 <= "XXXX";
        end if; 
    end process;


    beta_j_V_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            beta_j_V_ce0 <= ap_const_logic_1;
        else 
            beta_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_d0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state41, add_ln700_fu_2004_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            beta_j_V_d0 <= add_ln700_fu_2004_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            beta_j_V_d0 <= ap_const_lv8_0;
        else 
            beta_j_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    beta_j_V_we0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state41, icmp_ln887_9_fu_1922_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((icmp_ln887_9_fu_1922_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            beta_j_V_we0 <= ap_const_logic_1;
        else 
            beta_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state59, ap_CS_fsm_state61, zext_ln544_37_fu_1286_p1, zext_ln544_47_fu_2273_p1, zext_ln544_50_fu_2322_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            cdw_V_address0 <= zext_ln544_50_fu_2322_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            cdw_V_address0 <= zext_ln544_47_fu_2273_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cdw_V_address0 <= zext_ln544_37_fu_1286_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cdw_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            cdw_V_address0 <= "XXXXXX";
        end if; 
    end process;

    cdw_V_address1 <= cdw_V_addr_7_reg_2925;

    cdw_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state59, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cdw_V_d1 <= (rs_mem_1_q0 xor cdw_V_q0);

    cdw_V_we1_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_2_fu_1635_p2 <= (ret_V_50_fu_1629_p2 xor p_0390_1_i_reg_864);
    d_p_V_fu_1456_p2 <= (rhs_V_7_reg_801 xor ret_V_33_fu_1450_p2);
    deg_X_V_fu_1346_p2 <= std_logic_vector(unsigned(zext_ln120_fu_1330_p1) - unsigned(rhs_V_5_reg_789));
    deg_X_sigma_p_V_fu_1360_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_1356_p1) + unsigned(zext_ln209_fu_1352_p1));
    deg_sigma_V_fu_1421_p2 <= (ret_V_29_fu_1415_p2 xor deg_sigma_copy_V_reg_765);
    deg_sigma_p_V_fu_1518_p2 <= (rhs_V_10_reg_777 xor ret_V_37_fu_1513_p2);
    delta_counter_V_1_fu_2255_p2 <= std_logic_vector(unsigned(p_0312_1_i_reg_1037) + unsigned(zext_ln700_2_fu_2251_p1));
    delta_counter_V_fu_2014_p2 <= std_logic_vector(unsigned(p_0312_0_i_reg_943) + unsigned(zext_ln700_fu_2011_p1));

    e_j_V_address0_assign_proc : process(ap_CS_fsm_state52, e_j_V_addr_1_reg_2848, ap_CS_fsm_state56, ap_CS_fsm_state53, zext_ln544_46_fu_2195_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            e_j_V_address0 <= zext_ln544_46_fu_2195_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            e_j_V_address0 <= e_j_V_addr_1_reg_2848;
        else 
            e_j_V_address0 <= "XXXX";
        end if; 
    end process;


    e_j_V_ce0_assign_proc : process(grp_gf_mul_fu_1105_ap_done, grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state52, ap_CS_fsm_state56, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then 
            e_j_V_ce0 <= ap_const_logic_1;
        else 
            e_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_j_V_d0 <= (ret_V_57_fu_2155_p2 xor e_j_V_q0);

    e_j_V_we0_assign_proc : process(grp_gf_mul_fu_1105_ap_done, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1))) then 
            e_j_V_we0 <= ap_const_logic_1;
        else 
            e_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    error_values_a_V_fu_2068_p2 <= (p_034_reg_1002 xor grp_gf_mul_fu_1105_ap_return);
    exp_array_V_address0 <= zext_ln544_43_fu_1966_p1(8 - 1 downto 0);

    exp_array_V_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            exp_array_V_ce0 <= ap_const_logic_1;
        else 
            exp_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_add_fft_fu_1084_ap_start <= grp_add_fft_fu_1084_ap_start_reg;
    grp_fu_1123_p2 <= "0" when (rs_mem_1_q0 = ap_const_lv8_0) else "1";

    grp_gf_inverse_fu_1097_a_V_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state44, ap_CS_fsm_state52, reg_1157, rhs_V_7_reg_801, p_039_reg_1025)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_gf_inverse_fu_1097_a_V <= p_039_reg_1025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_gf_inverse_fu_1097_a_V <= reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_gf_inverse_fu_1097_a_V <= rhs_V_7_reg_801;
        else 
            grp_gf_inverse_fu_1097_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_gf_inverse_fu_1097_ap_start <= grp_gf_inverse_fu_1097_ap_start_reg;

    grp_gf_mul_fu_1105_a_V_assign_proc : process(reg_1129, ap_CS_fsm_state46, reg_1137, reg_1143, reg_1151, ap_CS_fsm_state15, cdw_V_load_reg_2437, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state51, lhs_V_5_reg_813, ap_CS_fsm_state35, ap_CS_fsm_state53, p_044_reg_990, p_034_reg_1002, p_039_reg_1025)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_gf_mul_fu_1105_a_V <= p_034_reg_1002;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_gf_mul_fu_1105_a_V <= p_039_reg_1025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_gf_mul_fu_1105_a_V <= reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_gf_mul_fu_1105_a_V <= p_044_reg_990;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_gf_mul_fu_1105_a_V <= reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gf_mul_fu_1105_a_V <= reg_1143;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_gf_mul_fu_1105_a_V <= reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_gf_mul_fu_1105_a_V <= lhs_V_5_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_gf_mul_fu_1105_a_V <= cdw_V_load_reg_2437;
        else 
            grp_gf_mul_fu_1105_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_gf_mul_fu_1105_ap_start <= grp_gf_mul_fu_1105_ap_start_reg;

    grp_gf_mul_fu_1105_b_V_assign_proc : process(reg_1129, ap_CS_fsm_state46, reg_1137, reg_1143, ap_CS_fsm_state15, reg_1157, alpha_ij_pow_V_load_reg_2442, ap_CS_fsm_state11, ret_V_64_reg_2548, ap_CS_fsm_state19, rs_mem_1_load_6_reg_2592, ap_CS_fsm_state22, ap_CS_fsm_state47, xor_ln214_reg_2853, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state35, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_gf_mul_fu_1105_b_V <= xor_ln214_reg_2853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_gf_mul_fu_1105_b_V <= reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_gf_mul_fu_1105_b_V <= reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_gf_mul_fu_1105_b_V <= reg_1143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gf_mul_fu_1105_b_V <= rs_mem_1_load_6_reg_2592;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_gf_mul_fu_1105_b_V <= ret_V_64_reg_2548;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_gf_mul_fu_1105_b_V <= reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_gf_mul_fu_1105_b_V <= alpha_ij_pow_V_load_reg_2442;
        else 
            grp_gf_mul_fu_1105_b_V <= "XXXXXXXX";
        end if; 
    end process;

    i_1_fu_1186_p2 <= std_logic_vector(unsigned(i_0_i47_reg_688) + unsigned(ap_const_lv6_1));
    i_2_fu_1209_p2 <= std_logic_vector(unsigned(i_0_i53_reg_699) + unsigned(ap_const_lv6_1));
    i_3_fu_1236_p2 <= std_logic_vector(unsigned(i_0_i59_reg_710) + unsigned(ap_const_lv6_1));
    i_V_10_fu_1945_p2 <= std_logic_vector(unsigned(t_V_reg_955) + unsigned(ap_const_lv6_1));
    i_V_11_fu_2174_p2 <= std_logic_vector(unsigned(p_0426_2_i_reg_1049) + unsigned(ap_const_lv6_1));
    i_V_12_fu_2267_p2 <= std_logic_vector(unsigned(p_022_0_i_reg_1061) + unsigned(ap_const_lv6_1));
    i_V_13_fu_2026_p2 <= std_logic_vector(unsigned(p_0426_1_i_reg_967) + unsigned(ap_const_lv4_1));
    i_V_14_fu_2306_p2 <= std_logic_vector(unsigned(p_071_0_reg_1072) + unsigned(ap_const_lv5_1));
    i_V_6_fu_1556_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_0_i_reg_852));
    i_V_7_fu_1647_p2 <= std_logic_vector(unsigned(p_01206_0_i_reg_886) + unsigned(ap_const_lv8_1));
    i_V_8_fu_1605_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_1_i_reg_875));
    i_V_9_fu_1893_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_909) + unsigned(ap_const_lv5_1));
    i_V_fu_1269_p2 <= std_logic_vector(unsigned(p_088_0_i_reg_721) + unsigned(ap_const_lv5_1));
    i_fu_1169_p2 <= std_logic_vector(unsigned(i_0_i_reg_677) + unsigned(ap_const_lv5_1));
    icmp_ln120_fu_1334_p2 <= "1" when (lhs_V_4_reg_823 = ap_const_lv5_1E) else "0";
    icmp_ln1372_fu_2089_p2 <= "1" when (unsigned(ret_V_58_fu_2084_p2) < unsigned(ap_const_lv5_F)) else "0";
    icmp_ln140_fu_1462_p2 <= "1" when (p_0459_0_i_reg_852 = ap_const_lv5_10) else "0";
    icmp_ln151_fu_1569_p2 <= "1" when (p_0459_1_i_reg_875 = ap_const_lv5_10) else "0";
    icmp_ln180_fu_1771_p2 <= "1" when (indvars_iv_i_reg_909 = ap_const_lv5_10) else "0";
    icmp_ln183_fu_1851_p2 <= "1" when (p_0249_0_i_reg_921 = zext_ln180_reg_2664) else "0";
    icmp_ln221_1_fu_1180_p2 <= "1" when (i_0_i47_reg_688 = ap_const_lv6_20) else "0";
    icmp_ln221_2_fu_1203_p2 <= "1" when (i_0_i53_reg_699 = ap_const_lv6_2E) else "0";
    icmp_ln221_3_fu_1230_p2 <= "1" when (i_0_i59_reg_710 = ap_const_lv6_2E) else "0";
    icmp_ln221_fu_1163_p2 <= "1" when (i_0_i_reg_677 = ap_const_lv5_1E) else "0";
    icmp_ln226_fu_2020_p2 <= "1" when (p_0426_1_i_reg_967 = ap_const_lv4_F) else "0";
    icmp_ln232_fu_2037_p2 <= "1" when (p_0260_1_i_reg_979 = ap_const_lv5_10) else "0";
    icmp_ln236_fu_2078_p2 <= "1" when (p_0243_0_i_reg_1014 = ap_const_lv4_F) else "0";
    icmp_ln277_fu_1641_p2 <= "1" when (p_01206_0_i_reg_886 = ap_const_lv8_80) else "0";
    icmp_ln278_fu_1653_p2 <= "1" when (p_01077_0_i_reg_898 = ap_const_lv2_2) else "0";
    icmp_ln69_fu_1263_p2 <= "1" when (p_088_0_i_reg_721 = ap_const_lv5_1E) else "0";
    icmp_ln71_fu_1280_p2 <= "1" when (p_063_0_i_reg_744 = ap_const_lv6_2E) else "0";
    icmp_ln887_10_fu_1939_p2 <= "1" when (t_V_reg_955 = ap_const_lv6_2E) else "0";
    icmp_ln887_11_fu_1971_p2 <= "1" when (unsigned(p_0312_0_i_reg_943) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_12_fu_2168_p2 <= "1" when (p_0426_2_i_reg_1049 = ap_const_lv6_2E) else "0";
    icmp_ln887_13_fu_2261_p2 <= "1" when (p_022_0_i_reg_1061 = ap_const_lv6_2E) else "0";
    icmp_ln887_14_fu_2200_p2 <= "1" when (unsigned(p_0312_1_i_reg_1037) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_15_fu_2300_p2 <= "1" when (p_071_0_reg_1072 = ap_const_lv5_10) else "0";
    icmp_ln887_16_fu_2124_p2 <= "1" when (unsigned(zext_ln887_fu_2120_p1) < unsigned(p_0312_0_i_reg_943)) else "0";
    icmp_ln887_9_fu_1922_p2 <= "1" when (p_0260_0_i_reg_932 = ap_const_lv4_F) else "0";
    icmp_ln887_fu_1785_p2 <= "1" when (signed(lhs_V_15_fu_1781_p1) < signed(ret_V_42_reg_2659)) else "0";
    icmp_ln895_1_fu_1370_p2 <= "1" when (unsigned(deg_X_sigma_p_V_fu_1360_p2) > unsigned(zext_ln895_fu_1366_p1)) else "0";
    icmp_ln895_fu_1376_p2 <= "0" when (lhs_V_5_reg_813 = ap_const_lv8_0) else "1";
    icmp_ln899_1_fu_1575_p2 <= "1" when (unsigned(mu_add_V_reg_2460) < unsigned(p_0459_1_i_reg_875)) else "0";
    icmp_ln899_fu_1468_p2 <= "1" when (unsigned(mu_add_V_reg_2460) < unsigned(p_0459_0_i_reg_852)) else "0";
    index_address0 <= zext_ln544_41_fu_1683_p1(8 - 1 downto 0);

    index_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            index_ce0 <= ap_const_logic_1;
        else 
            index_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_V_6_fu_1659_p2 <= std_logic_vector(unsigned(p_01077_0_i_reg_898) + unsigned(ap_const_lv2_1));
    j_V_7_fu_1928_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_932) + unsigned(ap_const_lv4_1));
    j_V_8_fu_1887_p2 <= std_logic_vector(unsigned(p_0249_0_i_reg_921) + unsigned(ap_const_lv8_1));
    j_V_9_fu_2058_p2 <= std_logic_vector(unsigned(p_0260_1_i_reg_979) + unsigned(ap_const_lv5_1));
    j_V_fu_1312_p2 <= std_logic_vector(unsigned(p_063_0_i_reg_744) + unsigned(ap_const_lv6_1));
    k_V_fu_2114_p2 <= std_logic_vector(unsigned(p_0243_0_i_reg_1014) + unsigned(ap_const_lv4_1));
    lhs_V_15_fu_1781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_909),9));
    lhs_V_2_fu_1404_p2 <= std_logic_vector(unsigned(deg_X_V_reg_2469) + unsigned(rhs_V_10_reg_777));

    masks2_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state16, zext_ln130_fu_1387_p1, zext_ln141_fu_1479_p1, zext_ln152_fu_1616_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            masks2_address0 <= zext_ln152_fu_1616_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            masks2_address0 <= zext_ln141_fu_1479_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            masks2_address0 <= zext_ln130_fu_1387_p1(1 - 1 downto 0);
        else 
            masks2_address0 <= "X";
        end if; 
    end process;


    masks2_ce0_assign_proc : process(ap_CS_fsm_state14, grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then 
            masks2_ce0 <= ap_const_logic_1;
        else 
            masks2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    masks3_address0 <= zext_ln181_fu_1790_p1(1 - 1 downto 0);

    masks3_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            masks3_ce0 <= ap_const_logic_1;
        else 
            masks3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    masks4_address0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state39, ap_CS_fsm_state56, zext_ln220_fu_1982_p1, zext_ln239_fu_2137_p1, zext_ln246_fu_2211_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            masks4_address0 <= zext_ln246_fu_2211_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            masks4_address0 <= zext_ln239_fu_2137_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            masks4_address0 <= zext_ln220_fu_1982_p1(1 - 1 downto 0);
        else 
            masks4_address0 <= "X";
        end if; 
    end process;


    masks4_ce0_assign_proc : process(grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state52, ap_CS_fsm_state39, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then 
            masks4_ce0 <= ap_const_logic_1;
        else 
            masks4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_address1 <= zext_ln544_49_fu_2327_p1(13 - 1 downto 0);

    msg_V_ce1_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            msg_V_ce1 <= ap_const_logic_1;
        else 
            msg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_d1 <= cdw_V_q0;

    msg_V_we1_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            msg_V_we1 <= ap_const_logic_1;
        else 
            msg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mu_add_V_fu_1340_p2 <= std_logic_vector(unsigned(lhs_V_4_reg_823) + unsigned(ap_const_lv5_1));
    pp_V_fu_1438_p2 <= (rhs_V_5_reg_789 xor ret_V_31_fu_1432_p2);
    ret_V_29_fu_1415_p2 <= (select_ln321_fu_1396_p3 and ret_V_61_fu_1409_p2);
    ret_V_31_fu_1432_p2 <= (select_ln321_fu_1396_p3 and ret_V_62_fu_1427_p2);
    ret_V_33_fu_1450_p2 <= (select_ln321_fu_1396_p3 and ret_V_63_fu_1444_p2);
    ret_V_34_fu_1318_p2 <= (rhs_V_9_reg_2390 xor lhs_V_6_reg_755);
    ret_V_35_fu_1291_p2 <= std_logic_vector(unsigned(p_063_0_i_reg_744) + unsigned(ap_const_lv6_3F));
    ret_V_37_fu_1513_p2 <= (select_ln321_reg_2489 and ret_V_68_fu_1507_p2);
    ret_V_42_fu_1761_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_1757_p1) + unsigned(ap_const_lv9_1FF));
    ret_V_43_fu_1799_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(trunc_ln887_fu_1777_p1));
    ret_V_46_fu_1669_p3 <= (trunc_ln1352_fu_1665_p1 & ap_const_lv7_0);
    ret_V_47_fu_1677_p2 <= std_logic_vector(unsigned(ret_V_46_fu_1669_p3) + unsigned(p_01206_0_i_reg_886));
    ret_V_48_fu_1720_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_18_fu_1716_p1));
    ret_V_49_fu_1595_p2 <= std_logic_vector(unsigned(zext_ln151_reg_2543) - unsigned(zext_ln152_1_fu_1580_p1));
    ret_V_50_fu_1629_p2 <= (select_ln1355_1_fu_1621_p3 and grp_gf_mul_fu_1105_ap_return);
    ret_V_51_fu_1871_p2 <= std_logic_vector(unsigned(lhs_V_15_reg_2672) - unsigned(rhs_V_21_fu_1856_p1));
    ret_V_52_fu_1876_p2 <= std_logic_vector(unsigned(ret_V_51_fu_1871_p2) + unsigned(ap_const_lv9_1FF));
    ret_V_54_fu_1910_p2 <= (select_ln321_1_reg_2693 and ret_V_71_fu_1904_p2);
    ret_V_55_fu_2239_p2 <= (select_ln321_3_fu_2231_p3 and e_j_V_q0);
    ret_V_57_fu_2155_p2 <= (select_ln1355_2_fu_2147_p3 and ret_V_72_fu_2141_p2);
    ret_V_58_fu_2084_p2 <= std_logic_vector(unsigned(zext_ln236_1_fu_2074_p1) + unsigned(zext_ln236_reg_2820));
    ret_V_59_fu_2101_p3 <= 
        ret_V_58_fu_2084_p2 when (icmp_ln1372_fu_2089_p2(0) = '1') else 
        add_ln1372_fu_2095_p2;
    ret_V_60_fu_2316_p2 <= std_logic_vector(unsigned(zext_ln215_fu_2312_p1) + unsigned(ap_const_lv6_1E));
    ret_V_61_fu_1409_p2 <= (lhs_V_2_fu_1404_p2 xor deg_sigma_copy_V_reg_765);
    ret_V_62_fu_1427_p2 <= (zext_ln120_reg_2452 xor rhs_V_5_reg_789);
    ret_V_63_fu_1444_p2 <= (rhs_V_7_reg_801 xor lhs_V_5_reg_813);
    ret_V_64_fu_1535_p2 <= (select_ln1355_fu_1527_p3 and X_sigma_p_V_q0);
    ret_V_65_fu_1489_p2 <= (rhs_V_28_reg_843 xor lhs_V_9_reg_834);
    ret_V_66_fu_1495_p2 <= (select_ln321_reg_2489 and ret_V_65_fu_1489_p2);
    ret_V_67_fu_1500_p2 <= (rhs_V_28_reg_843 xor ret_V_66_fu_1495_p2);
    ret_V_68_fu_1507_p2 <= (rhs_V_10_reg_777 xor deg_sigma_copy_V_reg_765);
    ret_V_69_fu_1829_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    ret_V_70_fu_1835_p2 <= (select_ln321_1_fu_1821_p3 and ret_V_69_fu_1829_p2);
    ret_V_71_fu_1904_p2 <= (xor_ln1357_fu_1899_p2 xor rs_mem_1_q0);
    ret_V_72_fu_2141_p2 <= (grp_gf_mul_fu_1105_ap_return xor e_j_V_q0);
    ret_V_fu_1751_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    rhs_V_18_fu_1716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1129),9));
    rhs_V_21_fu_1856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0249_0_i_reg_921),9));

    rs_mem_1_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state14, ap_CS_fsm_state7, icmp_ln69_fu_1263_p2, ap_CS_fsm_state13, icmp_ln120_fu_1334_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state31, rs_mem_1_addr_15_reg_2703, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state45, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state59, grp_add_fft_fu_1084_rs_mem_1_address0, ap_CS_fsm_state23, zext_ln544_fu_1275_p1, zext_ln544_36_fu_1392_p1, zext_ln719_1_fu_1551_p1, zext_ln152_2_fu_1590_p1, zext_ln215_4_fu_1697_p1, zext_ln719_2_fu_1711_p1, zext_ln1357_fu_1816_p1, zext_ln184_1_fu_1866_p1, zext_ln883_3_fu_1961_p1, zext_ln234_1_fu_2053_p1, zext_ln883_5_fu_2190_p1, zext_ln700_3_fu_2226_p1, zext_ln719_4_fu_2288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            rs_mem_1_address0 <= zext_ln719_4_fu_2288_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            rs_mem_1_address0 <= zext_ln700_3_fu_2226_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            rs_mem_1_address0 <= zext_ln883_5_fu_2190_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            rs_mem_1_address0 <= zext_ln234_1_fu_2053_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rs_mem_1_address0 <= zext_ln883_3_fu_1961_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            rs_mem_1_address0 <= rs_mem_1_addr_15_reg_2703;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            rs_mem_1_address0 <= zext_ln184_1_fu_1866_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_address0 <= zext_ln1357_fu_1816_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            rs_mem_1_address0 <= zext_ln719_2_fu_1711_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rs_mem_1_address0 <= zext_ln215_4_fu_1697_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            rs_mem_1_address0 <= ap_const_lv64_1F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rs_mem_1_address0 <= zext_ln152_2_fu_1590_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rs_mem_1_address0 <= zext_ln719_1_fu_1551_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rs_mem_1_address0 <= zext_ln544_36_fu_1392_p1(10 - 1 downto 0);
        elsif (((icmp_ln120_fu_1334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            rs_mem_1_address0 <= ap_const_lv64_1E(10 - 1 downto 0);
        elsif (((icmp_ln69_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rs_mem_1_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((icmp_ln69_fu_1263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rs_mem_1_address0 <= zext_ln544_fu_1275_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_address0 <= grp_add_fft_fu_1084_rs_mem_1_address0;
        else 
            rs_mem_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, rs_mem_1_addr_8_reg_2408, ap_CS_fsm_state9, rs_mem_1_addr_12_reg_2553, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state24, rs_mem_1_addr_17_reg_2648, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, rs_mem_1_addr_15_reg_2703, ap_CS_fsm_state33, rs_mem_1_addr_24_reg_2896, grp_add_fft_fu_1084_rs_mem_1_address1, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state58, zext_ln222_fu_1175_p1, zext_ln321_fu_1198_p1, zext_ln321_3_fu_1225_p1, zext_ln321_5_fu_1252_p1, sext_ln544_1_fu_1600_p1, zext_ln544_39_fu_1805_p1, sext_ln544_fu_1882_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_24_reg_2896;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_15_reg_2703;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            rs_mem_1_address1 <= sext_ln544_fu_1882_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_address1 <= zext_ln544_39_fu_1805_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rs_mem_1_address1 <= ap_const_lv64_13F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            rs_mem_1_address1 <= ap_const_lv64_13E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_17_reg_2648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            rs_mem_1_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rs_mem_1_address1 <= sext_ln544_1_fu_1600_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_12_reg_2553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rs_mem_1_address1 <= ap_const_lv64_1E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_8_reg_2408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rs_mem_1_address1 <= zext_ln321_5_fu_1252_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_address1 <= zext_ln321_3_fu_1225_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rs_mem_1_address1 <= zext_ln321_fu_1198_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_address1 <= zext_ln222_fu_1175_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_address1 <= grp_add_fft_fu_1084_rs_mem_1_address1;
        else 
            rs_mem_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state14, grp_gf_inverse_fu_1097_ap_done, ap_CS_fsm_state7, icmp_ln69_fu_1263_p2, ap_CS_fsm_state13, icmp_ln120_fu_1334_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state45, ap_CS_fsm_state54, ap_CS_fsm_state56, ap_CS_fsm_state59, grp_add_fft_fu_1084_rs_mem_1_ce0, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((icmp_ln120_fu_1334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln69_fu_1263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln69_fu_1263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1097_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_ce0 <= grp_add_fft_fu_1084_rs_mem_1_ce0;
        else 
            rs_mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_ce1_assign_proc : process(ap_CS_fsm_state12, grp_gf_mul_fu_1105_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state33, grp_add_fft_fu_1084_rs_mem_1_ce1, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_ce1 <= grp_add_fft_fu_1084_rs_mem_1_ce1;
        else 
            rs_mem_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_d1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, sigma_local_V_1_fu_1562_p2, ap_CS_fsm_state19, ret_V_reg_2654, ap_CS_fsm_state29, ap_CS_fsm_state30, add_ln700_4_reg_2902, grp_add_fft_fu_1084_rs_mem_1_d1, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state58, ret_V_34_fu_1318_p2, xor_ln719_11_fu_1744_p2, xor_ln719_fu_1915_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rs_mem_1_d1 <= add_ln700_4_reg_2902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rs_mem_1_d1 <= xor_ln719_fu_1915_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rs_mem_1_d1 <= ret_V_reg_2654;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rs_mem_1_d1 <= xor_ln719_11_fu_1744_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rs_mem_1_d1 <= sigma_local_V_1_fu_1562_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            rs_mem_1_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rs_mem_1_d1 <= ret_V_34_fu_1318_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rs_mem_1_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_d1 <= grp_add_fft_fu_1084_rs_mem_1_d1;
        else 
            rs_mem_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    rs_mem_1_we1_assign_proc : process(ap_CS_fsm_state12, grp_gf_mul_fu_1105_ap_done, ap_CS_fsm_state2, icmp_ln221_fu_1163_p2, ap_CS_fsm_state3, icmp_ln221_1_fu_1180_p2, ap_CS_fsm_state4, icmp_ln221_2_fu_1203_p2, ap_CS_fsm_state5, ap_CS_fsm_state9, icmp_ln71_fu_1280_p2, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state30, grp_add_fft_fu_1084_rs_mem_1_we1, icmp_ln221_3_fu_1230_p2, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln71_fu_1280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln221_3_fu_1230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln221_2_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln221_1_fu_1180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln221_fu_1163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1105_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_we1 <= grp_add_fft_fu_1084_rs_mem_1_we1;
        else 
            rs_mem_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1355_1_fu_1621_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_2_fu_2147_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_fu_1527_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_1_fu_1821_p3 <= 
        ap_const_lv8_FF when (masks3_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_2_fu_1992_p3 <= 
        ap_const_lv8_FF when (retrieved_mask_V_reg_2768(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_3_fu_2231_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_fu_1396_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
        sext_ln544_1_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_49_fu_1595_p2),64));

        sext_ln544_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_52_fu_1876_p2),64));

    sigma_local_V_1_fu_1562_p2 <= (rs_mem_1_q0 xor grp_gf_mul_fu_1105_ap_return);
    syndrome_local_V_1_fu_1324_p2 <= (lhs_V_6_reg_755 xor grp_gf_mul_fu_1105_ap_return);
    tmp_3_fu_1726_p3 <= ret_V_48_fu_1720_p2(8 downto 8);
    trunc_ln1352_fu_1665_p1 <= p_01077_0_i_reg_898(1 - 1 downto 0);
    trunc_ln887_fu_1777_p1 <= indvars_iv_i_reg_909(4 - 1 downto 0);
    xor_ln1357_fu_1899_p2 <= (ret_V_70_reg_2698 xor grp_gf_mul_fu_1105_ap_return);
    xor_ln214_fu_2130_p2 <= (grp_gf_mul_fu_1105_ap_return xor ap_const_lv8_1);
    xor_ln719_11_fu_1744_p2 <= (zext_ln719_fu_1740_p1 xor rs_mem_1_q0);
    xor_ln719_14_fu_1734_p2 <= (tmp_3_fu_1726_p3 xor ap_const_lv1_1);
    xor_ln719_fu_1915_p2 <= (rs_mem_1_q0 xor ret_V_54_fu_1910_p2);
    xor_ln899_1_fu_1611_p2 <= (icmp_ln899_1_reg_2572 xor ap_const_lv1_1);
    xor_ln899_fu_1473_p2 <= (icmp_ln899_fu_1468_p2 xor ap_const_lv1_1);
    zext_ln120_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_4_reg_823),8));
    zext_ln130_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln130_fu_1382_p2),64));
    zext_ln1354_1_fu_1795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_909),6));
    zext_ln1354_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_765),9));
    zext_ln1355_1_fu_2216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_1_i_reg_1037),9));
    zext_ln1355_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_0_i_reg_852),6));
    zext_ln1357_2_fu_1846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_1_fu_1841_p2),64));
    zext_ln1357_fu_1816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_fu_1810_p2),64));
    zext_ln141_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_fu_1473_p2),64));
    zext_ln151_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2460),6));
    zext_ln152_1_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_1_i_reg_875),6));
    zext_ln152_2_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_fu_1584_p2),64));
    zext_ln152_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_1_fu_1611_p2),64));
    zext_ln180_fu_1767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_909),8));
    zext_ln181_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_fu_1785_p2),64));
    zext_ln184_1_fu_1866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln184_fu_1860_p2),64));
    zext_ln209_1_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_10_reg_777),9));
    zext_ln209_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_X_V_fu_1346_p2),9));
    zext_ln215_3_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_load_reg_2638),9));
    zext_ln215_4_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_1691_p2),64));
    zext_ln215_fu_2312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1072),6));
    zext_ln220_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln220_fu_1977_p2),64));
    zext_ln222_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_677),64));
    zext_ln234_1_fu_2053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln234_fu_2047_p2),64));
    zext_ln234_fu_2043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_1_i_reg_979),9));
    zext_ln236_1_fu_2074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0243_0_i_reg_1014),5));
    zext_ln236_fu_2064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_967),5));
    zext_ln239_fu_2137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_16_reg_2843),64));
    zext_ln246_fu_2211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln246_fu_2206_p2),64));
    zext_ln321_2_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i53_reg_699),9));
    zext_ln321_3_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_1219_p2),64));
    zext_ln321_4_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i59_reg_710),9));
    zext_ln321_5_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_2_fu_1246_p2),64));
    zext_ln321_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_1192_p2),64));
    zext_ln544_36_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2460),64));
    zext_ln544_37_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_063_0_i_reg_744),64));
    zext_ln544_38_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_0_i_reg_852),64));
    zext_ln544_39_fu_1805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_43_fu_1799_p2),64));
    zext_ln544_40_fu_1934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_932),64));
    zext_ln544_41_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_47_fu_1677_p2),64));
    zext_ln544_42_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_47_reg_2628),10));
    zext_ln544_43_fu_1966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_955),64));
    zext_ln544_44_fu_1987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_0_i_reg_943),64));
    zext_ln544_45_fu_2032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_967),64));
    zext_ln544_46_fu_2195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_1049),64));
    zext_ln544_47_fu_2273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_022_0_i_reg_1061),64));
    zext_ln544_48_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_59_fu_2101_p3),64));
    zext_ln544_49_fu_2327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1072),64));
    zext_ln544_50_fu_2322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_60_fu_2316_p2),64));
    zext_ln544_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_721),64));
    zext_ln700_2_fu_2251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(masks4_q0),6));
    zext_ln700_3_fu_2226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_16_fu_2220_p2),64));
    zext_ln700_fu_2011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retrieved_mask_V_reg_2768),6));
    zext_ln719_1_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_fu_1545_p2),64));
    zext_ln719_2_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_1_fu_1705_p2),64));
    zext_ln719_3_fu_2278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_022_0_i_reg_1061),9));
    zext_ln719_4_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_2_fu_2282_p2),64));
    zext_ln719_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_14_fu_1734_p2),8));
    zext_ln72_1_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_1301_p2),64));
    zext_ln72_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_35_fu_1291_p2),12));
    zext_ln883_3_fu_1961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_fu_1955_p2),64));
    zext_ln883_4_fu_2180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_1049),7));
    zext_ln883_5_fu_2190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_2_fu_2184_p2),64));
    zext_ln883_fu_1951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_955),7));
    zext_ln887_fu_2120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_967),6));
    zext_ln895_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_765),9));
end behav;
