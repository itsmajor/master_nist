-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hadamard_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    src_V_ce0 : OUT STD_LOGIC;
    src_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    src_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    src_V_ce1 : OUT STD_LOGIC;
    src_V_q1 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dst_V_ce1 : OUT STD_LOGIC;
    dst_V_we1 : OUT STD_LOGIC;
    dst_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of hadamard_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_96_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_reg_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_136_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln68_reg_171 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_reg_78 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln544_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_57_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_58_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_59_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_fu_129_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_102_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_86_fu_113_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_87_fu_142_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    t_V_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_reg_78 <= i_V_reg_156;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_78 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_156 <= i_V_fu_96_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sub_ln68_reg_171 <= sub_ln68_fu_136_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_90_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln68_fu_129_p2 <= std_logic_vector(unsigned(src_V_q1) + unsigned(src_V_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_90_p2)
    begin
        if ((((icmp_ln887_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_90_p2)
    begin
        if (((icmp_ln887_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln544_58_fu_124_p1, zext_ln544_59_fu_148_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_V_address1 <= zext_ln544_59_fu_148_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_V_address1 <= zext_ln544_58_fu_124_p1(7 - 1 downto 0);
        else 
            dst_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    dst_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dst_V_ce1 <= ap_const_logic_1;
        else 
            dst_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_d1_assign_proc : process(sub_ln68_reg_171, ap_CS_fsm_state3, ap_CS_fsm_state4, add_ln68_fu_129_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_V_d1 <= sub_ln68_reg_171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_V_d1 <= add_ln68_fu_129_p2;
        else 
            dst_V_d1 <= "XXXXXXXXXX";
        end if; 
    end process;


    dst_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dst_V_we1 <= ap_const_logic_1;
        else 
            dst_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_96_p2 <= std_logic_vector(unsigned(t_V_reg_78) + unsigned(ap_const_lv7_1));
    icmp_ln887_fu_90_p2 <= "1" when (t_V_reg_78 = ap_const_lv7_40) else "0";
    ret_V_86_fu_113_p2 <= (ret_V_fu_102_p2 or ap_const_lv7_1);
    ret_V_87_fu_142_p2 <= (t_V_reg_78 xor ap_const_lv7_40);
    ret_V_fu_102_p2 <= std_logic_vector(shift_left(unsigned(t_V_reg_78),to_integer(unsigned('0' & ap_const_lv7_1(7-1 downto 0)))));
    src_V_address0 <= zext_ln544_fu_108_p1(7 - 1 downto 0);
    src_V_address1 <= zext_ln544_57_fu_119_p1(7 - 1 downto 0);

    src_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_V_ce0 <= ap_const_logic_1;
        else 
            src_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_V_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_V_ce1 <= ap_const_logic_1;
        else 
            src_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_fu_136_p2 <= std_logic_vector(unsigned(src_V_q0) - unsigned(src_V_q1));
    zext_ln544_57_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_86_fu_113_p2),64));
    zext_ln544_58_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_78),64));
    zext_ln544_59_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_87_fu_142_p2),64));
    zext_ln544_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_102_p2),64));
end behav;
