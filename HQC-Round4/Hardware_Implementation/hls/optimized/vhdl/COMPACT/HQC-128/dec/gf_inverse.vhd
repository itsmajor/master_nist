-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gf_inverse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gf_inverse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_224_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_V_fu_230_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln887_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln214_fu_238_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_V_2_fu_248_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln52_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_V_1_fu_276_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_22_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln86_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln86_reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_V_23_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln719_3_fu_378_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln86_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_V_fu_382_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_24_fu_392_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_V_fu_416_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln887_23_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln858_fu_432_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_V_3_fu_436_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal inv_V_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_V_25_fu_452_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln719_5_fu_532_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln86_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_0_reg_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_V_read_assign_reg_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_0_reg_93 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_093_0_i_reg_104 : STD_LOGIC_VECTOR (14 downto 0);
    signal op_V_read_assign_1_reg_113 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_084_0_i_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_V_buf_0_i_i_reg_134 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_0191_0_i_i_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal op_V_read_assign_3_reg_155 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_V_buf_0_i_i_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_092_0_i_i_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_23_reg_188 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_V_buf_0_i_i4_reg_197 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_0191_0_i_i5_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_V_fu_234_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln54_fu_260_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_264_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_270_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_304_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mod_V_fu_318_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mod_V_5_fu_330_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1503_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_3_fu_338_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mod_V_6_fu_342_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_23_fu_360_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_fu_326_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_24_fu_366_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln719_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_22_fu_372_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1355_fu_398_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_36_fu_402_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_88_fu_410_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_422_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_458_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mod_V_7_fu_472_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mod_V_8_fu_484_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1503_2_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_26_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_5_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mod_V_9_fu_496_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_28_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_4_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_29_fu_520_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln719_4_fu_510_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_27_fu_526_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((icmp_ln887_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= agg_result_V_0_reg_72;
                end if; 
            end if;
        end if;
    end process;


    a_V_buf_0_i_i_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                a_V_buf_0_i_i_reg_167 <= zext_ln858_fu_432_p1;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_V_buf_0_i_i_reg_167 <= agg_result_V_0_reg_72;
            end if; 
        end if;
    end process;

    agg_result_V_0_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                agg_result_V_0_reg_72 <= inv_V_fu_442_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                agg_result_V_0_reg_72 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    lhs_V_23_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                lhs_V_23_reg_188 <= b2_V_3_fu_436_p2;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                lhs_V_23_reg_188 <= b2_V_fu_382_p1;
            end if; 
        end if;
    end process;

    op_V_read_assign_1_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                op_V_read_assign_1_reg_113 <= s_V_1_fu_276_p2;
            elsif (((icmp_ln887_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                op_V_read_assign_1_reg_113 <= zext_ln214_fu_238_p1;
            end if; 
        end if;
    end process;

    op_V_read_assign_3_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                op_V_read_assign_3_reg_155 <= c_V_fu_416_p2;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                op_V_read_assign_3_reg_155 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    op_V_read_assign_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                op_V_read_assign_reg_84 <= trunc_ln86_reg_577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                op_V_read_assign_reg_84 <= a_V;
            end if; 
        end if;
    end process;

    p_0191_0_i_i5_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0191_0_i_i5_reg_207 <= ap_const_lv2_0;
            elsif (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0191_0_i_i5_reg_207 <= i_V_25_fu_452_p2;
            end if; 
        end if;
    end process;

    p_0191_0_i_i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0191_0_i_i_reg_144 <= ap_const_lv2_0;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0191_0_i_i_reg_144 <= i_V_23_fu_298_p2;
            end if; 
        end if;
    end process;

    p_084_0_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_084_0_i_reg_123 <= i_V_22_fu_282_p2;
            elsif (((icmp_ln887_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_084_0_i_reg_123 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    p_092_0_i_i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_092_0_i_i_reg_177 <= i_V_24_fu_392_p2;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_092_0_i_i_reg_177 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_093_0_i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_093_0_i_reg_104 <= b_V_2_fu_248_p2;
            elsif (((icmp_ln887_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_093_0_i_reg_104 <= b_V_fu_230_p1;
            end if; 
        end if;
    end process;

    p_0_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0_0_reg_93 <= i_V_reg_544;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_0_reg_93 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_V_buf_0_i_i4_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_V_buf_0_i_i4_reg_197 <= op_V_read_assign_3_reg_155;
            elsif (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                x_V_buf_0_i_i4_reg_197 <= zext_ln719_5_fu_532_p1;
            end if; 
        end if;
    end process;

    x_V_buf_0_i_i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_V_buf_0_i_i_reg_134 <= op_V_read_assign_1_reg_113;
            elsif (((icmp_ln86_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_V_buf_0_i_i_reg_134 <= zext_ln719_3_fu_378_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_544 <= i_V_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln86_reg_577 <= trunc_ln86_fu_288_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_218_p2, ap_CS_fsm_state3, icmp_ln52_fu_242_p2, ap_CS_fsm_state4, icmp_ln86_fu_292_p2, ap_CS_fsm_state5, icmp_ln887_23_fu_386_p2, ap_CS_fsm_state6, icmp_ln86_1_fu_446_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln86_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln887_23_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln86_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_218_p2)
    begin
        if ((((icmp_ln887_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_218_p2)
    begin
        if (((icmp_ln887_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_218_p2, agg_result_V_0_reg_72, ap_return_preg)
    begin
        if (((icmp_ln887_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= agg_result_V_0_reg_72;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b2_V_3_fu_436_p2 <= std_logic_vector(shift_left(unsigned(lhs_V_23_reg_188),to_integer(unsigned('0' & ap_const_lv15_1(15-1 downto 0)))));
    b2_V_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln86_fu_288_p1),15));
    b_V_2_fu_248_p2 <= std_logic_vector(shift_left(unsigned(p_093_0_i_reg_104),to_integer(unsigned('0' & ap_const_lv15_1(15-1 downto 0)))));
    b_V_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op_V_read_assign_reg_84),15));
    c_V_fu_416_p2 <= (ret_V_88_fu_410_p2 xor op_V_read_assign_3_reg_155);
    i_V_22_fu_282_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(p_084_0_i_reg_123));
    i_V_23_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_0191_0_i_i_reg_144));
    i_V_24_fu_392_p2 <= std_logic_vector(unsigned(p_092_0_i_i_reg_177) + unsigned(ap_const_lv4_1));
    i_V_25_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_0191_0_i_i5_reg_207));
    i_V_fu_224_p2 <= std_logic_vector(unsigned(p_0_0_reg_93) + unsigned(ap_const_lv3_1));
    icmp_ln52_fu_242_p2 <= "1" when (p_084_0_i_reg_123 = ap_const_lv4_8) else "0";
    icmp_ln86_1_fu_446_p2 <= "1" when (p_0191_0_i_i5_reg_207 = ap_const_lv2_2) else "0";
    icmp_ln86_fu_292_p2 <= "1" when (p_0191_0_i_i_reg_144 = ap_const_lv2_2) else "0";
    icmp_ln887_23_fu_386_p2 <= "1" when (p_092_0_i_i_reg_177 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_218_p2 <= "1" when (p_0_0_reg_93 = ap_const_lv3_7) else "0";
    inv_V_fu_442_p1 <= x_V_buf_0_i_i4_reg_197(8 - 1 downto 0);
    lshr_ln_fu_422_p4 <= a_V_buf_0_i_i_reg_167(7 downto 1);
    mod_V_5_fu_330_p3 <= (tmp_s_fu_304_p4 & ap_const_lv3_0);
    mod_V_6_fu_342_p3 <= (tmp_s_fu_304_p4 & ap_const_lv4_0);
    mod_V_7_fu_472_p3 <= (tmp_1_fu_458_p4 & ap_const_lv2_0);
    mod_V_8_fu_484_p3 <= (tmp_1_fu_458_p4 & ap_const_lv3_0);
    mod_V_9_fu_496_p3 <= (tmp_1_fu_458_p4 & ap_const_lv4_0);
    mod_V_fu_318_p3 <= (tmp_s_fu_304_p4 & ap_const_lv2_0);
    ret_V_88_fu_410_p2 <= (rhs_V_36_fu_402_p3 and lhs_V_23_reg_188);
    ret_V_fu_270_p2 <= (rhs_V_fu_264_p2 and b_V_2_fu_248_p2);
    rhs_V_36_fu_402_p3 <= 
        ap_const_lv15_7FFF when (trunc_ln1355_fu_398_p1(0) = '1') else 
        ap_const_lv15_0;
    rhs_V_fu_264_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv15_1),to_integer(unsigned('0' & zext_ln54_fu_260_p1(15-1 downto 0)))));
    s_V_1_fu_276_p2 <= (ret_V_fu_270_p2 xor op_V_read_assign_1_reg_113);
    s_V_fu_234_p1 <= op_V_read_assign_reg_84(1 - 1 downto 0);
    shl_ln54_fu_254_p2 <= std_logic_vector(shift_left(unsigned(p_084_0_i_reg_123),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp_1_fu_458_p4 <= x_V_buf_0_i_i4_reg_197(14 downto 8);
    tmp_s_fu_304_p4 <= x_V_buf_0_i_i_reg_134(14 downto 8);
    trunc_ln1355_fu_398_p1 <= a_V_buf_0_i_i_reg_167(1 - 1 downto 0);
    trunc_ln86_fu_288_p1 <= x_V_buf_0_i_i_reg_134(8 - 1 downto 0);
    xor_ln719_22_fu_372_p2 <= (zext_ln719_fu_356_p1 xor xor_ln719_24_fu_366_p2);
    xor_ln719_23_fu_360_p2 <= (zext_ln841_3_fu_338_p1 xor mod_V_6_fu_342_p3);
    xor_ln719_24_fu_366_p2 <= (zext_ln841_fu_326_p1 xor xor_ln719_23_fu_360_p2);
    xor_ln719_26_fu_504_p2 <= (zext_ln1503_2_fu_468_p1 xor inv_V_fu_442_p1);
    xor_ln719_27_fu_526_p2 <= (zext_ln719_4_fu_510_p1 xor xor_ln719_29_fu_520_p2);
    xor_ln719_28_fu_514_p2 <= (zext_ln841_5_fu_492_p1 xor mod_V_9_fu_496_p3);
    xor_ln719_29_fu_520_p2 <= (zext_ln841_4_fu_480_p1 xor xor_ln719_28_fu_514_p2);
    xor_ln719_fu_350_p2 <= (zext_ln1503_fu_314_p1 xor trunc_ln86_fu_288_p1);
    zext_ln1503_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_458_p4),8));
    zext_ln1503_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_304_p4),8));
    zext_ln214_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_V_fu_234_p1),15));
    zext_ln54_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_fu_254_p2),15));
    zext_ln719_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_22_fu_372_p2),15));
    zext_ln719_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_26_fu_504_p2),11));
    zext_ln719_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_27_fu_526_p2),15));
    zext_ln719_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_fu_350_p2),11));
    zext_ln841_3_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_5_fu_330_p3),11));
    zext_ln841_4_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_7_fu_472_p3),11));
    zext_ln841_5_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_8_fu_484_p3),11));
    zext_ln841_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_fu_318_p3),11));
    zext_ln858_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_422_p4),8));
end behav;
