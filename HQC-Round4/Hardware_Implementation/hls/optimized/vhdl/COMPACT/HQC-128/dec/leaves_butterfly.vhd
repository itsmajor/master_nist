-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity leaves_butterfly is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    small_w_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    small_w_V_ce0 : OUT STD_LOGIC;
    small_w_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    small_w_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    small_w_V_ce1 : OUT STD_LOGIC;
    small_w_V_we1 : OUT STD_LOGIC;
    small_w_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    A_1_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of leaves_butterfly is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal betas_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal betas_ce0 : STD_LOGIC;
    signal betas_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_V_fu_260_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal b2_V_reg_572 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_fu_270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_580 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_V_16_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_V_fu_311_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln887_19_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln858_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_V_1_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_V_18_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln719_1_fu_427_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln86_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_17_fu_461_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_17_reg_637 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal shl_ln39_fu_483_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln39_reg_642 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln38_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_35_fu_493_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_35_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_fu_512_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_656 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ret_V_fu_518_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_reg_661 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln39_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_054_0_reg_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal op_V_read_assign_reg_176 : STD_LOGIC_VECTOR (14 downto 0);
    signal a_V_buf_0_i_i_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_092_0_i_i_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_reg_208 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_V_buf_0_i_i_reg_217 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_0191_0_i_i_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_054_1_reg_238 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_080_0_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln544_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_53_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_52_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_V_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_V_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln321_fu_431_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_V_1_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_V_2_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_V_3_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_84_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1355_fu_293_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_297_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_83_fu_305_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_317_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_353_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mod_V_fu_367_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mod_V_1_fu_379_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1503_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln841_1_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mod_V_2_fu_391_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_17_fu_409_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_fu_375_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_18_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln719_fu_405_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_16_fu_421_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_fu_479_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_35_fu_493_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component crypto_kem_dec_hlqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component leaves_butterfly_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    betas_U : component leaves_butterfly_pcA
    generic map (
        DataWidth => 8,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => betas_address0,
        ce0 => betas_ce0,
        q0 => betas_q0);

    crypto_kem_dec_hlqcK_U42 : component crypto_kem_dec_hlqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_3_V_fu_90,
        din1 => tmp_3_V_1_fu_94,
        din2 => tmp_3_V_2_fu_98,
        din3 => tmp_3_V_3_fu_102,
        din4 => rhs_V_35_fu_493_p5,
        dout => rhs_V_35_fu_493_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_V_buf_0_i_i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_V_buf_0_i_i_reg_188 <= zext_ln858_fu_327_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                a_V_buf_0_i_i_reg_188 <= betas_q0;
            end if; 
        end if;
    end process;

    lhs_V_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                lhs_V_reg_208 <= b2_V_1_fu_331_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                lhs_V_reg_208 <= b2_V_reg_572;
            end if; 
        end if;
    end process;

    op_V_read_assign_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                op_V_read_assign_reg_176 <= c_V_fu_311_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                op_V_read_assign_reg_176 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    p_0191_0_i_i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0191_0_i_i_reg_227 <= ap_const_lv2_0;
            elsif (((icmp_ln86_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0191_0_i_i_reg_227 <= i_V_18_fu_347_p2;
            end if; 
        end if;
    end process;

    p_054_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_054_0_reg_164 <= i_V_reg_580;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_054_0_reg_164 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_054_1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_507_p2 = ap_const_lv1_1))) then 
                p_054_1_reg_238 <= i_V_17_reg_637;
            elsif (((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_054_1_reg_238 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_080_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_080_0_reg_249 <= j_V_reg_656;
            elsif (((icmp_ln38_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_080_0_reg_249 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_092_0_i_i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_092_0_i_i_reg_197 <= i_V_16_fu_287_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_092_0_i_i_reg_197 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_V_buf_0_i_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_V_buf_0_i_i_reg_217 <= op_V_read_assign_reg_176;
            elsif (((icmp_ln86_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_V_buf_0_i_i_reg_217 <= zext_ln719_1_fu_427_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    b2_V_reg_572(7 downto 0) <= b2_V_fu_260_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_V_17_reg_637 <= i_V_17_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_580 <= i_V_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_V_reg_656 <= j_V_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ret_V_reg_661 <= ret_V_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                rhs_V_35_reg_648 <= rhs_V_35_fu_493_p6;
                shl_ln39_reg_642 <= shl_ln39_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln321_fu_431_p1 = ap_const_lv2_1))) then
                tmp_3_V_1_fu_94 <= tmp_0_V_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln321_fu_431_p1 = ap_const_lv2_2))) then
                tmp_3_V_2_fu_98 <= tmp_0_V_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln321_fu_431_p1 = ap_const_lv2_3))) then
                tmp_3_V_3_fu_102 <= tmp_0_V_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln321_fu_431_p1 = ap_const_lv2_0))) then
                tmp_3_V_fu_90 <= tmp_0_V_fu_337_p1;
            end if;
        end if;
    end process;
    b2_V_reg_572(14 downto 8) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_264_p2, ap_CS_fsm_state4, icmp_ln887_19_fu_281_p2, ap_CS_fsm_state5, icmp_ln86_fu_341_p2, ap_CS_fsm_state6, icmp_ln38_fu_455_p2, ap_CS_fsm_state7, icmp_ln39_fu_507_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_19_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln86_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_455_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln38_fu_455_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_455_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln38_fu_455_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_455_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b2_V_1_fu_331_p2 <= std_logic_vector(shift_left(unsigned(lhs_V_reg_208),to_integer(unsigned('0' & ap_const_lv15_1(15-1 downto 0)))));
    b2_V_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_1_V),15));
    betas_address0 <= zext_ln544_fu_276_p1(2 - 1 downto 0);

    betas_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            betas_ce0 <= ap_const_logic_1;
        else 
            betas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_V_fu_311_p2 <= (ret_V_83_fu_305_p2 xor op_V_read_assign_reg_176);
    i_V_16_fu_287_p2 <= std_logic_vector(unsigned(p_092_0_i_i_reg_197) + unsigned(ap_const_lv4_1));
    i_V_17_fu_461_p2 <= std_logic_vector(unsigned(p_054_1_reg_238) + unsigned(ap_const_lv3_1));
    i_V_18_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_0191_0_i_i_reg_227));
    i_V_fu_270_p2 <= std_logic_vector(unsigned(p_054_0_reg_164) + unsigned(ap_const_lv3_1));
    icmp_ln38_fu_455_p2 <= "1" when (p_054_1_reg_238 = ap_const_lv3_4) else "0";
    icmp_ln39_fu_507_p2 <= "1" when (p_080_0_reg_249 = shl_ln39_reg_642) else "0";
    icmp_ln86_fu_341_p2 <= "1" when (p_0191_0_i_i_reg_227 = ap_const_lv2_2) else "0";
    icmp_ln887_19_fu_281_p2 <= "1" when (p_092_0_i_i_reg_197 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_264_p2 <= "1" when (p_054_0_reg_164 = ap_const_lv3_4) else "0";
    j_V_fu_512_p2 <= std_logic_vector(unsigned(p_080_0_reg_249) + unsigned(ap_const_lv4_1));
    lshr_ln_fu_317_p4 <= a_V_buf_0_i_i_reg_188(7 downto 1);
    mod_V_1_fu_379_p3 <= (tmp_s_fu_353_p4 & ap_const_lv3_0);
    mod_V_2_fu_391_p3 <= (tmp_s_fu_353_p4 & ap_const_lv4_0);
    mod_V_fu_367_p3 <= (tmp_s_fu_353_p4 & ap_const_lv2_0);
    ret_V_83_fu_305_p2 <= (rhs_V_fu_297_p3 and lhs_V_reg_208);
    ret_V_84_fu_532_p2 <= (small_w_V_q0 xor rhs_V_35_reg_648);
    ret_V_fu_518_p2 <= std_logic_vector(unsigned(shl_ln39_reg_642) + unsigned(p_080_0_reg_249));
    rhs_V_35_fu_493_p5 <= p_054_1_reg_238(2 - 1 downto 0);
    rhs_V_fu_297_p3 <= 
        ap_const_lv15_7FFF when (trunc_ln1355_fu_293_p1(0) = '1') else 
        ap_const_lv15_0;
    shl_ln39_fu_483_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln39_fu_479_p1(4-1 downto 0)))));
    small_w_V_address0 <= zext_ln544_53_fu_523_p1(4 - 1 downto 0);

    small_w_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, zext_ln544_52_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            small_w_V_address1 <= zext_ln544_52_fu_528_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small_w_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            small_w_V_address1 <= "XXXX";
        end if; 
    end process;


    small_w_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            small_w_V_ce0 <= ap_const_logic_1;
        else 
            small_w_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    small_w_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            small_w_V_ce1 <= ap_const_logic_1;
        else 
            small_w_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    small_w_V_d1_assign_proc : process(A_0_V, ap_CS_fsm_state2, ap_CS_fsm_state8, ret_V_84_fu_532_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            small_w_V_d1 <= ret_V_84_fu_532_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small_w_V_d1 <= A_0_V;
        else 
            small_w_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    small_w_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_264_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            small_w_V_we1 <= ap_const_logic_1;
        else 
            small_w_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_0_V_fu_337_p1 <= x_V_buf_0_i_i_reg_217(8 - 1 downto 0);
    tmp_s_fu_353_p4 <= x_V_buf_0_i_i_reg_217(14 downto 8);
    trunc_ln1355_fu_293_p1 <= a_V_buf_0_i_i_reg_188(1 - 1 downto 0);
    trunc_ln321_fu_431_p1 <= p_054_0_reg_164(2 - 1 downto 0);
    xor_ln719_16_fu_421_p2 <= (zext_ln719_fu_405_p1 xor xor_ln719_18_fu_415_p2);
    xor_ln719_17_fu_409_p2 <= (zext_ln841_1_fu_387_p1 xor mod_V_2_fu_391_p3);
    xor_ln719_18_fu_415_p2 <= (zext_ln841_fu_375_p1 xor xor_ln719_17_fu_409_p2);
    xor_ln719_fu_399_p2 <= (zext_ln1503_fu_363_p1 xor tmp_0_V_fu_337_p1);
    zext_ln1503_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_353_p4),8));
    zext_ln39_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_054_1_reg_238),4));
    zext_ln544_52_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_661),64));
    zext_ln544_53_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_080_0_reg_249),64));
    zext_ln544_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_054_0_reg_164),64));
    zext_ln719_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_16_fu_421_p2),15));
    zext_ln719_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_fu_399_p2),11));
    zext_ln841_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_1_fu_379_p3),11));
    zext_ln841_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_V_fu_367_p3),11));
    zext_ln858_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_317_p4),8));
end behav;
