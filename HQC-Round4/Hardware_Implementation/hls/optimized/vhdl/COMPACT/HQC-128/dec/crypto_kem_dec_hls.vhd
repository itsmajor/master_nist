-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_dec_hls is
  port (
    ap_clk        : in  std_logic;
    ap_rst        : in  std_logic;
    ap_start      : in  std_logic;
    ap_done       : out std_logic;
    ap_idle       : out std_logic;
    ap_ready      : out std_logic;
    ss_V_address0 : out std_logic_vector (2 downto 0);
    ss_V_ce0      : out std_logic;
    ss_V_we0      : out std_logic;
    ss_V_d0       : out std_logic_vector (63 downto 0);
    ss_V_q0       : in  std_logic_vector (63 downto 0);
    ct_V_address0 : out std_logic_vector (12 downto 0);
    ct_V_ce0      : out std_logic;
    ct_V_q0       : in  std_logic_vector (7 downto 0);
    sk_V_address0 : out std_logic_vector (8 downto 0);
    sk_V_ce0      : out std_logic;
    sk_V_q0       : in  std_logic_vector (63 downto 0);
    ap_return     : out std_logic_vector (31 downto 0));
end;


architecture behav of crypto_kem_dec_hls is
  attribute CORE_GENERATION_INFO          : string;
  attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_dec_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-ftg256-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.864400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=7996,HLS_SYN_LUT=24183,HLS_VERSION=2020_1}";
  constant ap_const_logic_1               : std_logic                      := '1';
  constant ap_const_logic_0               : std_logic                      := '0';
  constant ap_ST_fsm_state1               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000000001";
  constant ap_ST_fsm_state2               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000000010";
  constant ap_ST_fsm_state3               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000000100";
  constant ap_ST_fsm_state4               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000001000";
  constant ap_ST_fsm_state5               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000010000";
  constant ap_ST_fsm_state6               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000100000";
  constant ap_ST_fsm_state7               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000001000000";
  constant ap_ST_fsm_state8               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000010000000";
  constant ap_ST_fsm_state9               : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000100000000";
  constant ap_ST_fsm_state10              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000001000000000";
  constant ap_ST_fsm_state11              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000010000000000";
  constant ap_ST_fsm_state12              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000100000000000";
  constant ap_ST_fsm_state13              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000001000000000000";
  constant ap_ST_fsm_state14              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000010000000000000";
  constant ap_ST_fsm_state15              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000100000000000000";
  constant ap_ST_fsm_state16              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000001000000000000000";
  constant ap_ST_fsm_state17              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000010000000000000000";
  constant ap_ST_fsm_state18              : std_logic_vector (49 downto 0) := "00000000000000000000000000000000100000000000000000";
  constant ap_ST_fsm_state19              : std_logic_vector (49 downto 0) := "00000000000000000000000000000001000000000000000000";
  constant ap_ST_fsm_state20              : std_logic_vector (49 downto 0) := "00000000000000000000000000000010000000000000000000";
  constant ap_ST_fsm_state21              : std_logic_vector (49 downto 0) := "00000000000000000000000000000100000000000000000000";
  constant ap_ST_fsm_state22              : std_logic_vector (49 downto 0) := "00000000000000000000000000001000000000000000000000";
  constant ap_ST_fsm_state23              : std_logic_vector (49 downto 0) := "00000000000000000000000000010000000000000000000000";
  constant ap_ST_fsm_state24              : std_logic_vector (49 downto 0) := "00000000000000000000000000100000000000000000000000";
  constant ap_ST_fsm_state25              : std_logic_vector (49 downto 0) := "00000000000000000000000001000000000000000000000000";
  constant ap_ST_fsm_state26              : std_logic_vector (49 downto 0) := "00000000000000000000000010000000000000000000000000";
  constant ap_ST_fsm_state27              : std_logic_vector (49 downto 0) := "00000000000000000000000100000000000000000000000000";
  constant ap_ST_fsm_state28              : std_logic_vector (49 downto 0) := "00000000000000000000001000000000000000000000000000";
  constant ap_ST_fsm_state29              : std_logic_vector (49 downto 0) := "00000000000000000000010000000000000000000000000000";
  constant ap_ST_fsm_state30              : std_logic_vector (49 downto 0) := "00000000000000000000100000000000000000000000000000";
  constant ap_ST_fsm_state31              : std_logic_vector (49 downto 0) := "00000000000000000001000000000000000000000000000000";
  constant ap_ST_fsm_state32              : std_logic_vector (49 downto 0) := "00000000000000000010000000000000000000000000000000";
  constant ap_ST_fsm_state33              : std_logic_vector (49 downto 0) := "00000000000000000100000000000000000000000000000000";
  constant ap_ST_fsm_state34              : std_logic_vector (49 downto 0) := "00000000000000001000000000000000000000000000000000";
  constant ap_ST_fsm_state35              : std_logic_vector (49 downto 0) := "00000000000000010000000000000000000000000000000000";
  constant ap_ST_fsm_state36              : std_logic_vector (49 downto 0) := "00000000000000100000000000000000000000000000000000";
  constant ap_ST_fsm_state37              : std_logic_vector (49 downto 0) := "00000000000001000000000000000000000000000000000000";
  constant ap_ST_fsm_state38              : std_logic_vector (49 downto 0) := "00000000000010000000000000000000000000000000000000";
  constant ap_ST_fsm_state39              : std_logic_vector (49 downto 0) := "00000000000100000000000000000000000000000000000000";
  constant ap_ST_fsm_state40              : std_logic_vector (49 downto 0) := "00000000001000000000000000000000000000000000000000";
  constant ap_ST_fsm_state41              : std_logic_vector (49 downto 0) := "00000000010000000000000000000000000000000000000000";
  constant ap_ST_fsm_state42              : std_logic_vector (49 downto 0) := "00000000100000000000000000000000000000000000000000";
  constant ap_ST_fsm_state43              : std_logic_vector (49 downto 0) := "00000001000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state44              : std_logic_vector (49 downto 0) := "00000010000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state45              : std_logic_vector (49 downto 0) := "00000100000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state46              : std_logic_vector (49 downto 0) := "00001000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state47              : std_logic_vector (49 downto 0) := "00010000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state48              : std_logic_vector (49 downto 0) := "00100000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state49              : std_logic_vector (49 downto 0) := "01000000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state50              : std_logic_vector (49 downto 0) := "10000000000000000000000000000000000000000000000000";
  constant ap_const_lv32_0                : std_logic_vector (31 downto 0) := "00000000000000000000000000000000";
  constant ap_const_lv32_2                : std_logic_vector (31 downto 0) := "00000000000000000000000000000010";
  constant ap_const_lv32_3                : std_logic_vector (31 downto 0) := "00000000000000000000000000000011";
  constant ap_const_lv1_0                 : std_logic_vector (0 downto 0)  := "0";
  constant ap_const_lv32_14               : std_logic_vector (31 downto 0) := "00000000000000000000000000010100";
  constant ap_const_lv32_19               : std_logic_vector (31 downto 0) := "00000000000000000000000000011001";
  constant ap_const_lv32_1B               : std_logic_vector (31 downto 0) := "00000000000000000000000000011011";
  constant ap_const_lv32_1F               : std_logic_vector (31 downto 0) := "00000000000000000000000000011111";
  constant ap_const_boolean_0             : boolean                        := false;
  constant ap_const_lv32_2D               : std_logic_vector (31 downto 0) := "00000000000000000000000000101101";
  constant ap_const_lv32_2F               : std_logic_vector (31 downto 0) := "00000000000000000000000000101111";
  constant ap_const_lv32_30               : std_logic_vector (31 downto 0) := "00000000000000000000000000110000";
  constant ap_const_lv3_0                 : std_logic_vector (2 downto 0)  := "000";
  constant ap_const_lv32_4                : std_logic_vector (31 downto 0) := "00000000000000000000000000000100";
  constant ap_const_lv32_13               : std_logic_vector (31 downto 0) := "00000000000000000000000000010011";
  constant ap_const_lv32_15               : std_logic_vector (31 downto 0) := "00000000000000000000000000010101";
  constant ap_const_lv32_1A               : std_logic_vector (31 downto 0) := "00000000000000000000000000011010";
  constant ap_const_lv32_1C               : std_logic_vector (31 downto 0) := "00000000000000000000000000011100";
  constant ap_const_lv4_0                 : std_logic_vector (3 downto 0)  := "0000";
  constant ap_const_lv32_31               : std_logic_vector (31 downto 0) := "00000000000000000000000000110001";
  constant ap_const_lv32_A                : std_logic_vector (31 downto 0) := "00000000000000000000000000001010";
  constant ap_const_lv32_24               : std_logic_vector (31 downto 0) := "00000000000000000000000000100100";
  constant ap_const_lv32_28               : std_logic_vector (31 downto 0) := "00000000000000000000000000101000";
  constant ap_const_lv32_B                : std_logic_vector (31 downto 0) := "00000000000000000000000000001011";
  constant ap_const_lv32_25               : std_logic_vector (31 downto 0) := "00000000000000000000000000100101";
  constant ap_const_lv32_29               : std_logic_vector (31 downto 0) := "00000000000000000000000000101001";
  constant ap_const_lv8_42                : std_logic_vector (7 downto 0)  := "01000010";
  constant ap_const_lv8_4B                : std_logic_vector (7 downto 0)  := "01001011";
  constant ap_const_lv1_1                 : std_logic_vector (0 downto 0)  := "1";
  constant ap_const_lv32_1D               : std_logic_vector (31 downto 0) := "00000000000000000000000000011101";
  constant ap_const_lv32_2A               : std_logic_vector (31 downto 0) := "00000000000000000000000000101010";
  constant ap_const_lv32_2B               : std_logic_vector (31 downto 0) := "00000000000000000000000000101011";
  constant ap_const_lv32_E                : std_logic_vector (31 downto 0) := "00000000000000000000000000001110";
  constant ap_const_lv32_F                : std_logic_vector (31 downto 0) := "00000000000000000000000000001111";
  constant ap_const_lv32_6                : std_logic_vector (31 downto 0) := "00000000000000000000000000000110";
  constant ap_const_lv32_8                : std_logic_vector (31 downto 0) := "00000000000000000000000000001000";
  constant ap_const_lv32_1E               : std_logic_vector (31 downto 0) := "00000000000000000000000000011110";
  constant ap_const_lv32_22               : std_logic_vector (31 downto 0) := "00000000000000000000000000100010";
  constant ap_const_lv32_7                : std_logic_vector (31 downto 0) := "00000000000000000000000000000111";
  constant ap_const_lv32_9                : std_logic_vector (31 downto 0) := "00000000000000000000000000001001";
  constant ap_const_lv32_23               : std_logic_vector (31 downto 0) := "00000000000000000000000000100011";
  constant ap_const_lv7_42                : std_logic_vector (6 downto 0)  := "1000010";
  constant ap_const_lv7_4B                : std_logic_vector (6 downto 0)  := "1001011";
  constant ap_const_lv32_12               : std_logic_vector (31 downto 0) := "00000000000000000000000000010010";
  constant ap_const_lv14_10               : std_logic_vector (13 downto 0) := "00000000010000";
  constant ap_const_lv14_1151             : std_logic_vector (13 downto 0) := "01000101010001";
  constant ap_const_lv4_3                 : std_logic_vector (3 downto 0)  := "0011";
  constant ap_const_lv4_4                 : std_logic_vector (3 downto 0)  := "0100";
  constant ap_const_lv4_5                 : std_logic_vector (3 downto 0)  := "0101";
  constant ap_const_lv32_17               : std_logic_vector (31 downto 0) := "00000000000000000000000000010111";
  constant ap_const_lv32_18               : std_logic_vector (31 downto 0) := "00000000000000000000000000011000";
  constant ap_const_lv32_5                : std_logic_vector (31 downto 0) := "00000000000000000000000000000101";
  constant ap_const_lv32_16               : std_logic_vector (31 downto 0) := "00000000000000000000000000010110";
  constant ap_const_lv32_C                : std_logic_vector (31 downto 0) := "00000000000000000000000000001100";
  constant ap_const_lv32_D                : std_logic_vector (31 downto 0) := "00000000000000000000000000001101";
  constant ap_const_lv32_1                : std_logic_vector (31 downto 0) := "00000000000000000000000000000001";
  constant ap_const_lv32_26               : std_logic_vector (31 downto 0) := "00000000000000000000000000100110";
  constant ap_const_lv32_27               : std_logic_vector (31 downto 0) := "00000000000000000000000000100111";
  constant ap_const_lv32_2C               : std_logic_vector (31 downto 0) := "00000000000000000000000000101100";
  constant ap_const_lv32_2E               : std_logic_vector (31 downto 0) := "00000000000000000000000000101110";
  constant ap_const_lv13_10               : std_logic_vector (12 downto 0) := "0000000010000";
  constant ap_const_lv13_8B1              : std_logic_vector (12 downto 0) := "0100010110001";
  constant ap_const_lv12_8A1              : std_logic_vector (11 downto 0) := "100010100001";
  constant ap_const_lv12_8A0              : std_logic_vector (11 downto 0) := "100010100000";
  constant ap_const_lv32_20               : std_logic_vector (31 downto 0) := "00000000000000000000000000100000";
  constant ap_const_lv32_21               : std_logic_vector (31 downto 0) := "00000000000000000000000000100001";
  constant ap_const_lv32_10               : std_logic_vector (31 downto 0) := "00000000000000000000000000010000";
  constant ap_const_lv32_11               : std_logic_vector (31 downto 0) := "00000000000000000000000000010001";
  constant ap_const_lv64_0                : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant ap_const_lv64_8A0              : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100000";
  constant ap_const_lv64_8A1              : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100001";
  constant ap_const_lv8_0                 : std_logic_vector (7 downto 0)  := "00000000";
  constant ap_const_lv8_FF                : std_logic_vector (7 downto 0)  := "11111111";
  constant ap_const_lv15_0                : std_logic_vector (14 downto 0) := "000000000000000";
  constant ap_const_lv3_5                 : std_logic_vector (2 downto 0)  := "101";
  constant ap_const_lv3_1                 : std_logic_vector (2 downto 0)  := "001";
  constant ap_const_lv64_FFFFFFFFFFFFFFFF : std_logic_vector (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
  constant ap_const_lv4_8                 : std_logic_vector (3 downto 0)  := "1000";
  constant ap_const_lv4_1                 : std_logic_vector (3 downto 0)  := "0001";
  constant ap_const_boolean_1             : boolean                        := true;

  signal ap_CS_fsm                                                                 : std_logic_vector (49 downto 0) := "00000000000000000000000000000000000000000000000001";
  attribute fsm_encoding                                                           : string;
  attribute fsm_encoding of ap_CS_fsm                                              : signal is "none";
  signal ap_CS_fsm_state1                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state1                                       : signal is "none";
  signal uv2_V_address0                                                            : std_logic_vector (12 downto 0);
  signal uv2_V_ce0                                                                 : std_logic;
  signal uv2_V_q0                                                                  : std_logic_vector (7 downto 0);
  signal uv2_V_address1                                                            : std_logic_vector (12 downto 0);
  signal uv2_V_ce1                                                                 : std_logic;
  signal uv2_V_we1                                                                 : std_logic;
  signal uv2_V_d1                                                                  : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state3                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state3                                       : signal is "none";
  signal grp_hqc_ciphertext_from_s_fu_809_ap_ready                                 : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_ap_done                                  : std_logic;
  signal i_4_fu_883_p2                                                             : std_logic_vector (2 downto 0);
  signal i_4_reg_1013                                                              : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state4                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state4                                       : signal is "none";
  signal zext_ln285_fu_889_p1                                                      : std_logic_vector (63 downto 0);
  signal zext_ln285_reg_1018                                                       : std_logic_vector (63 downto 0);
  signal icmp_ln284_fu_877_p2                                                      : std_logic_vector (0 downto 0);
  signal i_5_fu_900_p2                                                             : std_logic_vector (2 downto 0);
  signal i_5_reg_1031                                                              : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state21                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state21                                      : signal is "none";
  signal icmp_ln284_1_fu_894_p2                                                    : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state26                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state26                                      : signal is "none";
  signal i_6_fu_941_p2                                                             : std_logic_vector (2 downto 0);
  signal i_6_reg_1050                                                              : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state28                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state28                                      : signal is "none";
  signal zext_ln285_2_fu_947_p1                                                    : std_logic_vector (63 downto 0);
  signal zext_ln285_2_reg_1055                                                     : std_logic_vector (63 downto 0);
  signal icmp_ln284_2_fu_935_p2                                                    : std_logic_vector (0 downto 0);
  signal grp_vect_compare_64_fu_871_ap_return                                      : std_logic_vector (0 downto 0);
  signal cmp_d_d2_reg_1065                                                         : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state32                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state32                                      : signal is "none";
  signal grp_vect_set_random_fixe_fu_710_ap_ready                                  : std_logic;
  signal grp_vect_set_random_fixe_fu_710_ap_done                                   : std_logic;
  signal grp_shake256_512_ds_fu_733_ap_ready                                       : std_logic;
  signal grp_shake256_512_ds_fu_733_ap_done                                        : std_logic;
  signal grp_vect_compare_64_fu_871_ap_ready                                       : std_logic;
  signal grp_vect_compare_64_fu_871_ap_done                                        : std_logic;
  signal ap_block_state32_on_subcall_done                                          : boolean;
  signal grp_vect_compare_fu_824_ap_return                                         : std_logic_vector (0 downto 0);
  signal cmp_u_u2_reg_1070                                                         : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state46                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state46                                      : signal is "none";
  signal grp_vect_compare_fu_824_ap_ready                                          : std_logic;
  signal grp_vect_compare_fu_824_ap_done                                           : std_logic;
  signal result_fu_957_p2                                                          : std_logic_vector (0 downto 0);
  signal result_reg_1075                                                           : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state48                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state48                                      : signal is "none";
  signal lhs_V_fu_968_p3                                                           : std_logic_vector (63 downto 0);
  signal lhs_V_reg_1080                                                            : std_logic_vector (63 downto 0);
  signal i_fu_982_p2                                                               : std_logic_vector (3 downto 0);
  signal i_reg_1088                                                                : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state49                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state49                                      : signal is "none";
  signal ss_V_addr_reg_1093                                                        : std_logic_vector (2 downto 0);
  signal icmp_ln390_fu_976_p2                                                      : std_logic_vector (0 downto 0);
  signal store_rs_encode_V_address0                                                : std_logic_vector (5 downto 0);
  signal store_rs_encode_V_ce0                                                     : std_logic;
  signal store_rs_encode_V_q0                                                      : std_logic_vector (7 downto 0);
  signal store_rs_encode_V_ce1                                                     : std_logic;
  signal store_rs_encode_V_we1                                                     : std_logic;
  signal store_rs_decode_V_ce0                                                     : std_logic;
  signal store_rs_decode_V_q0                                                      : std_logic_vector (7 downto 0);
  signal store_rs_decode_V_address1                                                : std_logic_vector (5 downto 0);
  signal store_rs_decode_V_ce1                                                     : std_logic;
  signal store_rs_decode_V_we1                                                     : std_logic;
  signal store_rs_decode_V_d1                                                      : std_logic_vector (7 downto 0);
  signal state_seedexpander_V_address0                                             : std_logic_vector (4 downto 0);
  signal state_seedexpander_V_ce0                                                  : std_logic;
  signal state_seedexpander_V_q0                                                   : std_logic_vector (63 downto 0);
  signal state_seedexpander_V_address1                                             : std_logic_vector (4 downto 0);
  signal state_seedexpander_V_ce1                                                  : std_logic;
  signal state_seedexpander_V_we1                                                  : std_logic;
  signal state_seedexpander_V_d1                                                   : std_logic_vector (63 downto 0);
  signal mc_V_address0                                                             : std_logic_vector (12 downto 0);
  signal mc_V_ce0                                                                  : std_logic;
  signal mc_V_q0                                                                   : std_logic_vector (7 downto 0);
  signal mc_V_address1                                                             : std_logic_vector (12 downto 0);
  signal mc_V_ce1                                                                  : std_logic;
  signal mc_V_we1                                                                  : std_logic;
  signal mc_V_d1                                                                   : std_logic_vector (7 downto 0);
  signal mc_V_q1                                                                   : std_logic_vector (7 downto 0);
  signal theta_V_address0                                                          : std_logic_vector (2 downto 0);
  signal theta_V_ce0                                                               : std_logic;
  signal theta_V_we0                                                               : std_logic;
  signal theta_V_d0                                                                : std_logic_vector (63 downto 0);
  signal theta_V_q0                                                                : std_logic_vector (63 downto 0);
  signal d_V_address0                                                              : std_logic_vector (2 downto 0);
  signal d_V_ce0                                                                   : std_logic;
  signal d_V_we0                                                                   : std_logic_vector (7 downto 0);
  signal d_V_d0                                                                    : std_logic_vector (63 downto 0);
  signal d_V_q0                                                                    : std_logic_vector (63 downto 0);
  signal store_A_V_address0                                                        : std_logic_vector (11 downto 0);
  signal store_A_V_ce0                                                             : std_logic;
  signal store_A_V_q0                                                              : std_logic_vector (7 downto 0);
  signal store_A_V_address1                                                        : std_logic_vector (11 downto 0);
  signal store_A_V_ce1                                                             : std_logic;
  signal store_A_V_we1                                                             : std_logic;
  signal store_A_V_d1                                                              : std_logic_vector (7 downto 0);
  signal store_B_V_address0                                                        : std_logic_vector (11 downto 0);
  signal store_B_V_ce0                                                             : std_logic;
  signal store_B_V_q0                                                              : std_logic_vector (7 downto 0);
  signal store_B_V_address1                                                        : std_logic_vector (11 downto 0);
  signal store_B_V_ce1                                                             : std_logic;
  signal store_B_V_we1                                                             : std_logic;
  signal store_B_V_d1                                                              : std_logic_vector (7 downto 0);
  signal store_C_V_ce0                                                             : std_logic;
  signal store_C_V_q0                                                              : std_logic_vector (7 downto 0);
  signal store_C_V_address1                                                        : std_logic_vector (3 downto 0);
  signal store_C_V_ce1                                                             : std_logic;
  signal store_C_V_we1                                                             : std_logic;
  signal store_C_V_d1                                                              : std_logic_vector (7 downto 0);
  signal h_s_V_address0                                                            : std_logic_vector (11 downto 0);
  signal h_s_V_ce0                                                                 : std_logic;
  signal h_s_V_q0                                                                  : std_logic_vector (7 downto 0);
  signal h_s_V_address1                                                            : std_logic_vector (11 downto 0);
  signal h_s_V_ce1                                                                 : std_logic;
  signal h_s_V_we1                                                                 : std_logic;
  signal h_s_V_d1                                                                  : std_logic_vector (7 downto 0);
  signal random_vector_A_V_address0                                                : std_logic_vector (6 downto 0);
  signal random_vector_A_V_ce0                                                     : std_logic;
  signal random_vector_A_V_q0                                                      : std_logic_vector (14 downto 0);
  signal random_vector_A_V_address1                                                : std_logic_vector (6 downto 0);
  signal random_vector_A_V_ce1                                                     : std_logic;
  signal random_vector_A_V_we1                                                     : std_logic;
  signal random_vector_A_V_d1                                                      : std_logic_vector (14 downto 0);
  signal random_vector_B_V_address0                                                : std_logic_vector (6 downto 0);
  signal random_vector_B_V_ce0                                                     : std_logic;
  signal random_vector_B_V_q0                                                      : std_logic_vector (14 downto 0);
  signal random_vector_B_V_address1                                                : std_logic_vector (6 downto 0);
  signal random_vector_B_V_ce1                                                     : std_logic;
  signal random_vector_B_V_we1                                                     : std_logic;
  signal random_vector_B_V_d1                                                      : std_logic_vector (14 downto 0);
  signal store_seeds_V_address0                                                    : std_logic_vector (2 downto 0);
  signal store_seeds_V_ce0                                                         : std_logic;
  signal store_seeds_V_we0                                                         : std_logic;
  signal store_seeds_V_d0                                                          : std_logic_vector (63 downto 0);
  signal store_seeds_V_q0                                                          : std_logic_vector (63 downto 0);
  signal grp_vect_mul_add_fu_591_ap_start                                          : std_logic;
  signal grp_vect_mul_add_fu_591_ap_done                                           : std_logic;
  signal grp_vect_mul_add_fu_591_ap_idle                                           : std_logic;
  signal grp_vect_mul_add_fu_591_ap_ready                                          : std_logic;
  signal grp_vect_mul_add_fu_591_o_V_address0                                      : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_591_o_V_ce0                                           : std_logic;
  signal grp_vect_mul_add_fu_591_o_V_address1                                      : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_591_o_V_ce1                                           : std_logic;
  signal grp_vect_mul_add_fu_591_o_V_we1                                           : std_logic;
  signal grp_vect_mul_add_fu_591_o_V_d1                                            : std_logic_vector (7 downto 0);
  signal grp_vect_mul_add_fu_591_a1_V_address0                                     : std_logic_vector (6 downto 0);
  signal grp_vect_mul_add_fu_591_a1_V_ce0                                          : std_logic;
  signal grp_vect_mul_add_fu_591_a2_V_address0                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_591_a2_V_ce0                                          : std_logic;
  signal grp_vect_mul_add_fu_591_a2_V_address1                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_591_a2_V_ce1                                          : std_logic;
  signal grp_vect_mul_add_fu_591_a2_V_we1                                          : std_logic;
  signal grp_vect_mul_add_fu_591_a2_V_d1                                           : std_logic_vector (7 downto 0);
  signal grp_vect_mul_add_fu_591_weight_V                                          : std_logic_vector (7 downto 0);
  signal grp_vect_mul_add_fu_591_a3_V_address0                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_591_a3_V_ce0                                          : std_logic;
  signal grp_reed_solomon_encode_fu_621_ap_start                                   : std_logic;
  signal grp_reed_solomon_encode_fu_621_ap_done                                    : std_logic;
  signal grp_reed_solomon_encode_fu_621_ap_idle                                    : std_logic;
  signal grp_reed_solomon_encode_fu_621_ap_ready                                   : std_logic;
  signal grp_reed_solomon_encode_fu_621_cdw_V_address0                             : std_logic_vector (5 downto 0);
  signal grp_reed_solomon_encode_fu_621_cdw_V_ce0                                  : std_logic;
  signal grp_reed_solomon_encode_fu_621_cdw_V_address1                             : std_logic_vector (5 downto 0);
  signal grp_reed_solomon_encode_fu_621_cdw_V_ce1                                  : std_logic;
  signal grp_reed_solomon_encode_fu_621_cdw_V_we1                                  : std_logic;
  signal grp_reed_solomon_encode_fu_621_cdw_V_d1                                   : std_logic_vector (7 downto 0);
  signal grp_reed_solomon_encode_fu_621_msg_V_address0                             : std_logic_vector (3 downto 0);
  signal grp_reed_solomon_encode_fu_621_msg_V_ce0                                  : std_logic;
  signal grp_reed_muller_encode_fu_639_ap_start                                    : std_logic;
  signal grp_reed_muller_encode_fu_639_ap_done                                     : std_logic;
  signal grp_reed_muller_encode_fu_639_ap_idle                                     : std_logic;
  signal grp_reed_muller_encode_fu_639_ap_ready                                    : std_logic;
  signal grp_reed_muller_encode_fu_639_cdw_V_address0                              : std_logic_vector (12 downto 0);
  signal grp_reed_muller_encode_fu_639_cdw_V_ce0                                   : std_logic;
  signal grp_reed_muller_encode_fu_639_cdw_V_address1                              : std_logic_vector (12 downto 0);
  signal grp_reed_muller_encode_fu_639_cdw_V_ce1                                   : std_logic;
  signal grp_reed_muller_encode_fu_639_cdw_V_we1                                   : std_logic;
  signal grp_reed_muller_encode_fu_639_cdw_V_d1                                    : std_logic_vector (7 downto 0);
  signal grp_reed_muller_encode_fu_639_msg_V_address0                              : std_logic_vector (5 downto 0);
  signal grp_reed_muller_encode_fu_639_msg_V_ce0                                   : std_logic;
  signal grp_vect_add_fu_667_ap_start                                              : std_logic;
  signal grp_vect_add_fu_667_ap_done                                               : std_logic;
  signal grp_vect_add_fu_667_ap_idle                                               : std_logic;
  signal grp_vect_add_fu_667_ap_ready                                              : std_logic;
  signal grp_vect_add_fu_667_o_V_address0                                          : std_logic_vector (12 downto 0);
  signal grp_vect_add_fu_667_o_V_ce0                                               : std_logic;
  signal grp_vect_add_fu_667_o_V_address1                                          : std_logic_vector (12 downto 0);
  signal grp_vect_add_fu_667_o_V_ce1                                               : std_logic;
  signal grp_vect_add_fu_667_o_V_we1                                               : std_logic;
  signal grp_vect_add_fu_667_o_V_d1                                                : std_logic_vector (7 downto 0);
  signal grp_vect_add_fu_667_v2_V_address0                                         : std_logic_vector (11 downto 0);
  signal grp_vect_add_fu_667_v2_V_ce0                                              : std_logic;
  signal grp_reed_solomon_decode_fu_684_ap_start                                   : std_logic;
  signal grp_reed_solomon_decode_fu_684_ap_done                                    : std_logic;
  signal grp_reed_solomon_decode_fu_684_ap_idle                                    : std_logic;
  signal grp_reed_solomon_decode_fu_684_ap_ready                                   : std_logic;
  signal grp_reed_solomon_decode_fu_684_msg_V_address1                             : std_logic_vector (12 downto 0);
  signal grp_reed_solomon_decode_fu_684_msg_V_ce1                                  : std_logic;
  signal grp_reed_solomon_decode_fu_684_msg_V_we1                                  : std_logic;
  signal grp_reed_solomon_decode_fu_684_msg_V_d1                                   : std_logic_vector (7 downto 0);
  signal grp_reed_solomon_decode_fu_684_cdw_V_address0                             : std_logic_vector (5 downto 0);
  signal grp_reed_solomon_decode_fu_684_cdw_V_ce0                                  : std_logic;
  signal grp_reed_solomon_decode_fu_684_cdw_V_address1                             : std_logic_vector (5 downto 0);
  signal grp_reed_solomon_decode_fu_684_cdw_V_ce1                                  : std_logic;
  signal grp_reed_solomon_decode_fu_684_cdw_V_we1                                  : std_logic;
  signal grp_reed_solomon_decode_fu_684_cdw_V_d1                                   : std_logic_vector (7 downto 0);
  signal grp_vect_set_random_fixe_fu_710_ap_start                                  : std_logic;
  signal grp_vect_set_random_fixe_fu_710_ap_idle                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_710_v_V_address0                              : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_fu_710_v_V_ce0                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_710_v_V_q0                                    : std_logic_vector (14 downto 0);
  signal grp_vect_set_random_fixe_fu_710_v_V_address1                              : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_fu_710_v_V_ce1                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_710_v_V_we1                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_710_v_V_d1                                    : std_logic_vector (14 downto 0);
  signal grp_vect_set_random_fixe_fu_710_weight_V                                  : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address0             : std_logic_vector (4 downto 0);
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce0                  : std_logic;
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address1             : std_logic_vector (4 downto 0);
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce1                  : std_logic;
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_we1                  : std_logic;
  signal grp_vect_set_random_fixe_fu_710_state_seedexpander_V_d1                   : std_logic_vector (63 downto 0);
  signal grp_shake256_512_ds_fu_733_ap_start                                       : std_logic;
  signal grp_shake256_512_ds_fu_733_ap_idle                                        : std_logic;
  signal grp_shake256_512_ds_fu_733_output_V_address0                              : std_logic_vector (2 downto 0);
  signal grp_shake256_512_ds_fu_733_output_V_ce0                                   : std_logic;
  signal grp_shake256_512_ds_fu_733_output_V_we0                                   : std_logic;
  signal grp_shake256_512_ds_fu_733_output_V_d0                                    : std_logic_vector (63 downto 0);
  signal grp_shake256_512_ds_fu_733_input_V_address0                               : std_logic_vector (12 downto 0);
  signal grp_shake256_512_ds_fu_733_input_V_ce0                                    : std_logic;
  signal grp_shake256_512_ds_fu_733_input_V_address1                               : std_logic_vector (12 downto 0);
  signal grp_shake256_512_ds_fu_733_input_V_ce1                                    : std_logic;
  signal grp_shake256_512_ds_fu_733_inlen_V                                        : std_logic_vector (13 downto 0);
  signal grp_shake256_512_ds_fu_733_domain_V                                       : std_logic_vector (3 downto 0);
  signal grp_seedexpander_mult_ty_fu_763_ap_start                                  : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_ap_done                                   : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_ap_idle                                   : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_ap_ready                                  : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_output_V_address1                         : std_logic_vector (11 downto 0);
  signal grp_seedexpander_mult_ty_fu_763_output_V_ce1                              : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_output_V_we1                              : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_output_V_d1                               : std_logic_vector (7 downto 0);
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_address0                        : std_logic_vector (4 downto 0);
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_ce0                             : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_address1                        : std_logic_vector (4 downto 0);
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_ce1                             : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_we1                             : std_logic;
  signal grp_seedexpander_mult_ty_fu_763_state_V_2_d1                              : std_logic_vector (63 downto 0);
  signal grp_seedexpander_init_fu_783_ap_start                                     : std_logic;
  signal grp_seedexpander_init_fu_783_ap_done                                      : std_logic;
  signal grp_seedexpander_init_fu_783_ap_idle                                      : std_logic;
  signal grp_seedexpander_init_fu_783_ap_ready                                     : std_logic;
  signal grp_seedexpander_init_fu_783_seed_V_address0                              : std_logic_vector (2 downto 0);
  signal grp_seedexpander_init_fu_783_seed_V_ce0                                   : std_logic;
  signal grp_seedexpander_init_fu_783_state_V_2_address0                           : std_logic_vector (4 downto 0);
  signal grp_seedexpander_init_fu_783_state_V_2_ce0                                : std_logic;
  signal grp_seedexpander_init_fu_783_state_V_2_address1                           : std_logic_vector (4 downto 0);
  signal grp_seedexpander_init_fu_783_state_V_2_ce1                                : std_logic;
  signal grp_seedexpander_init_fu_783_state_V_2_we1                                : std_logic;
  signal grp_seedexpander_init_fu_783_state_V_2_d1                                 : std_logic_vector (63 downto 0);
  signal grp_reed_muller_decode_fu_803_ap_start                                    : std_logic;
  signal grp_reed_muller_decode_fu_803_ap_done                                     : std_logic;
  signal grp_reed_muller_decode_fu_803_ap_idle                                     : std_logic;
  signal grp_reed_muller_decode_fu_803_ap_ready                                    : std_logic;
  signal grp_reed_muller_decode_fu_803_msg_V_address1                              : std_logic_vector (5 downto 0);
  signal grp_reed_muller_decode_fu_803_msg_V_ce1                                   : std_logic;
  signal grp_reed_muller_decode_fu_803_msg_V_we1                                   : std_logic;
  signal grp_reed_muller_decode_fu_803_msg_V_d1                                    : std_logic_vector (7 downto 0);
  signal grp_reed_muller_decode_fu_803_cdw_V_address0                              : std_logic_vector (11 downto 0);
  signal grp_reed_muller_decode_fu_803_cdw_V_ce0                                   : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_ap_start                                 : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_ap_idle                                  : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_u_V_address1                             : std_logic_vector (12 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_u_V_ce1                                  : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_u_V_we1                                  : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_u_V_d1                                   : std_logic_vector (7 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_d_V_address0                             : std_logic_vector (2 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_d_V_ce0                                  : std_logic;
  signal grp_hqc_ciphertext_from_s_fu_809_d_V_we0                                  : std_logic_vector (7 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_d_V_d0                                   : std_logic_vector (63 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_ct_V_address0                            : std_logic_vector (12 downto 0);
  signal grp_hqc_ciphertext_from_s_fu_809_ct_V_ce0                                 : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_ap_start                                 : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_ap_done                                  : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_ap_idle                                  : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_ap_ready                                 : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_s_V_address1                             : std_logic_vector (11 downto 0);
  signal grp_hqc_public_key_from_s_fu_817_s_V_ce1                                  : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_s_V_we1                                  : std_logic;
  signal grp_hqc_public_key_from_s_fu_817_s_V_d1                                   : std_logic_vector (7 downto 0);
  signal grp_hqc_public_key_from_s_fu_817_pk_V_address0                            : std_logic_vector (8 downto 0);
  signal grp_hqc_public_key_from_s_fu_817_pk_V_ce0                                 : std_logic;
  signal grp_vect_compare_fu_824_ap_start                                          : std_logic;
  signal grp_vect_compare_fu_824_ap_idle                                           : std_logic;
  signal grp_vect_compare_fu_824_v1_V_address0                                     : std_logic_vector (12 downto 0);
  signal grp_vect_compare_fu_824_v1_V_ce0                                          : std_logic;
  signal grp_vect_compare_fu_824_v1_V_offset                                       : std_logic_vector (12 downto 0);
  signal grp_vect_compare_fu_824_v2_V_address0                                     : std_logic_vector (12 downto 0);
  signal grp_vect_compare_fu_824_v2_V_ce0                                          : std_logic;
  signal grp_vect_compare_fu_824_v2_V_offset                                       : std_logic_vector (12 downto 0);
  signal grp_vect_compare_fu_824_size_V_offset                                     : std_logic_vector (11 downto 0);
  signal grp_vect_set_random_fixe_1_fu_840_ap_start                                : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_ap_done                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_ap_idle                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_ap_ready                                : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_v_V_address0                            : std_logic_vector (11 downto 0);
  signal grp_vect_set_random_fixe_1_fu_840_v_V_ce0                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_v_V_address1                            : std_logic_vector (11 downto 0);
  signal grp_vect_set_random_fixe_1_fu_840_v_V_ce1                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_v_V_we1                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_v_V_d1                                  : std_logic_vector (7 downto 0);
  signal grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0 : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0      : std_logic;
  signal grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0       : std_logic_vector (14 downto 0);
  signal grp_vect_copyresize_1_fu_846_ap_start                                     : std_logic;
  signal grp_vect_copyresize_1_fu_846_ap_done                                      : std_logic;
  signal grp_vect_copyresize_1_fu_846_ap_idle                                      : std_logic;
  signal grp_vect_copyresize_1_fu_846_ap_ready                                     : std_logic;
  signal grp_vect_copyresize_1_fu_846_o_V_address1                                 : std_logic_vector (3 downto 0);
  signal grp_vect_copyresize_1_fu_846_o_V_ce1                                      : std_logic;
  signal grp_vect_copyresize_1_fu_846_o_V_we1                                      : std_logic;
  signal grp_vect_copyresize_1_fu_846_o_V_d1                                       : std_logic_vector (7 downto 0);
  signal grp_vect_copyresize_1_fu_846_v_V_address0                                 : std_logic_vector (12 downto 0);
  signal grp_vect_copyresize_1_fu_846_v_V_ce0                                      : std_logic;
  signal grp_vect_copyresize_2_fu_852_ap_start                                     : std_logic;
  signal grp_vect_copyresize_2_fu_852_ap_done                                      : std_logic;
  signal grp_vect_copyresize_2_fu_852_ap_idle                                      : std_logic;
  signal grp_vect_copyresize_2_fu_852_ap_ready                                     : std_logic;
  signal grp_vect_copyresize_2_fu_852_o_V_address1                                 : std_logic_vector (11 downto 0);
  signal grp_vect_copyresize_2_fu_852_o_V_ce1                                      : std_logic;
  signal grp_vect_copyresize_2_fu_852_o_V_we1                                      : std_logic;
  signal grp_vect_copyresize_2_fu_852_o_V_d1                                       : std_logic_vector (7 downto 0);
  signal grp_vect_copyresize_2_fu_852_v_V_address0                                 : std_logic_vector (12 downto 0);
  signal grp_vect_copyresize_2_fu_852_v_V_ce0                                      : std_logic;
  signal grp_vect_copyresize_mult_fu_858_ap_start                                  : std_logic;
  signal grp_vect_copyresize_mult_fu_858_ap_done                                   : std_logic;
  signal grp_vect_copyresize_mult_fu_858_ap_idle                                   : std_logic;
  signal grp_vect_copyresize_mult_fu_858_ap_ready                                  : std_logic;
  signal grp_vect_copyresize_mult_fu_858_o_V_address1                              : std_logic_vector (11 downto 0);
  signal grp_vect_copyresize_mult_fu_858_o_V_ce1                                   : std_logic;
  signal grp_vect_copyresize_mult_fu_858_o_V_we1                                   : std_logic;
  signal grp_vect_copyresize_mult_fu_858_o_V_d1                                    : std_logic_vector (7 downto 0);
  signal grp_vect_copyresize_mult_fu_858_v_V_address0                              : std_logic_vector (12 downto 0);
  signal grp_vect_copyresize_mult_fu_858_v_V_ce0                                   : std_logic;
  signal grp_vect_copyresize_fu_864_ap_start                                       : std_logic;
  signal grp_vect_copyresize_fu_864_ap_done                                        : std_logic;
  signal grp_vect_copyresize_fu_864_ap_idle                                        : std_logic;
  signal grp_vect_copyresize_fu_864_ap_ready                                       : std_logic;
  signal grp_vect_copyresize_fu_864_o_V_address1                                   : std_logic_vector (12 downto 0);
  signal grp_vect_copyresize_fu_864_o_V_ce1                                        : std_logic;
  signal grp_vect_copyresize_fu_864_o_V_we1                                        : std_logic;
  signal grp_vect_copyresize_fu_864_o_V_d1                                         : std_logic_vector (7 downto 0);
  signal grp_vect_copyresize_fu_864_v_V_address0                                   : std_logic_vector (11 downto 0);
  signal grp_vect_copyresize_fu_864_v_V_ce0                                        : std_logic;
  signal grp_vect_compare_64_fu_871_ap_start                                       : std_logic;
  signal grp_vect_compare_64_fu_871_ap_idle                                        : std_logic;
  signal grp_vect_compare_64_fu_871_v1_V_address0                                  : std_logic_vector (2 downto 0);
  signal grp_vect_compare_64_fu_871_v1_V_ce0                                       : std_logic;
  signal grp_vect_compare_64_fu_871_v2_V_address0                                  : std_logic_vector (2 downto 0);
  signal grp_vect_compare_64_fu_871_v2_V_ce0                                       : std_logic;
  signal i_0_i31_reg_546                                                           : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state5                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state5                                       : signal is "none";
  signal i_0_i32_reg_557                                                           : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state20                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state20                                      : signal is "none";
  signal ap_CS_fsm_state22                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state22                                      : signal is "none";
  signal i_0_i40_reg_569                                                           : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state27                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state27                                      : signal is "none";
  signal ap_CS_fsm_state29                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state29                                      : signal is "none";
  signal i_0_i_reg_580                                                             : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state50                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state50                                      : signal is "none";
  signal grp_vect_mul_add_fu_591_ap_start_reg                                      : std_logic                      := '0';
  signal ap_CS_fsm_state11                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state11                                      : signal is "none";
  signal ap_CS_fsm_state37                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state37                                      : signal is "none";
  signal ap_CS_fsm_state41                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state41                                      : signal is "none";
  signal ap_CS_fsm_state12                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state12                                      : signal is "none";
  signal ap_CS_fsm_state38                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state38                                      : signal is "none";
  signal ap_CS_fsm_state42                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state42                                      : signal is "none";
  signal grp_reed_solomon_encode_fu_621_ap_start_reg                               : std_logic                      := '0';
  signal ap_CS_fsm_state30                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state30                                      : signal is "none";
  signal grp_reed_muller_encode_fu_639_ap_start_reg                                : std_logic                      := '0';
  signal grp_vect_add_fu_667_ap_start_reg                                          : std_logic                      := '0';
  signal ap_CS_fsm_state43                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state43                                      : signal is "none";
  signal ap_CS_fsm_state44                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state44                                      : signal is "none";
  signal grp_reed_solomon_decode_fu_684_ap_start_reg                               : std_logic                      := '0';
  signal ap_CS_fsm_state15                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state15                                      : signal is "none";
  signal ap_CS_fsm_state16                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state16                                      : signal is "none";
  signal grp_vect_set_random_fixe_fu_710_ap_start_reg                              : std_logic                      := '0';
  signal ap_CS_fsm_state7                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state7                                       : signal is "none";
  signal ap_CS_fsm_state9                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state9                                       : signal is "none";
  signal ap_CS_fsm_state31                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state31                                      : signal is "none";
  signal ap_CS_fsm_state35                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state35                                      : signal is "none";
  signal ap_CS_fsm_state8                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state8                                       : signal is "none";
  signal ap_CS_fsm_state10                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state10                                      : signal is "none";
  signal ap_CS_fsm_state36                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state36                                      : signal is "none";
  signal grp_shake256_512_ds_fu_733_ap_start_reg                                   : std_logic                      := '0';
  signal ap_CS_fsm_state19                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state19                                      : signal is "none";
  signal grp_seedexpander_mult_ty_fu_763_ap_start_reg                              : std_logic                      := '0';
  signal ap_CS_fsm_state24                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state24                                      : signal is "none";
  signal ap_CS_fsm_state25                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state25                                      : signal is "none";
  signal grp_seedexpander_init_fu_783_ap_start_reg                                 : std_logic                      := '0';
  signal ap_CS_fsm_state6                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state6                                       : signal is "none";
  signal ap_CS_fsm_state23                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state23                                      : signal is "none";
  signal grp_reed_muller_decode_fu_803_ap_start_reg                                : std_logic                      := '0';
  signal ap_CS_fsm_state13                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state13                                      : signal is "none";
  signal ap_CS_fsm_state14                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state14                                      : signal is "none";
  signal grp_hqc_ciphertext_from_s_fu_809_ap_start_reg                             : std_logic                      := '0';
  signal ap_CS_fsm_state2                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state2                                       : signal is "none";
  signal grp_hqc_public_key_from_s_fu_817_ap_start_reg                             : std_logic                      := '0';
  signal ap_CS_fsm_state39                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state39                                      : signal is "none";
  signal ap_CS_fsm_state40                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state40                                      : signal is "none";
  signal grp_vect_compare_fu_824_ap_start_reg                                      : std_logic                      := '0';
  signal ap_CS_fsm_state45                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state45                                      : signal is "none";
  signal ap_CS_fsm_state47                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state47                                      : signal is "none";
  signal grp_vect_set_random_fixe_1_fu_840_ap_start_reg                            : std_logic                      := '0';
  signal ap_CS_fsm_state33                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state33                                      : signal is "none";
  signal ap_CS_fsm_state34                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state34                                      : signal is "none";
  signal grp_vect_copyresize_1_fu_846_ap_start_reg                                 : std_logic                      := '0';
  signal ap_CS_fsm_state17                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state17                                      : signal is "none";
  signal ap_CS_fsm_state18                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state18                                      : signal is "none";
  signal grp_vect_copyresize_2_fu_852_ap_start_reg                                 : std_logic                      := '0';
  signal grp_vect_copyresize_mult_fu_858_ap_start_reg                              : std_logic                      := '0';
  signal grp_vect_copyresize_fu_864_ap_start_reg                                   : std_logic                      := '0';
  signal grp_vect_compare_64_fu_871_ap_start_reg                                   : std_logic                      := '0';
  signal zext_ln321_6_fu_916_p1                                                    : std_logic_vector (63 downto 0);
  signal zext_ln285_1_fu_921_p1                                                    : std_logic_vector (63 downto 0);
  signal zext_ln391_fu_988_p1                                                      : std_logic_vector (63 downto 0);
  signal zext_ln717_fu_930_p1                                                      : std_logic_vector (7 downto 0);
  signal ret_V_fu_996_p2                                                           : std_logic_vector (63 downto 0);
  signal zext_ln321_fu_906_p1                                                      : std_logic_vector (3 downto 0);
  signal add_ln321_fu_910_p2                                                       : std_logic_vector (3 downto 0);
  signal trunc_ln717_fu_926_p1                                                     : std_logic_vector (4 downto 0);
  signal or_ln387_fu_952_p2                                                        : std_logic_vector (0 downto 0);
  signal xor_ln1355_fu_962_p2                                                      : std_logic_vector (0 downto 0);
  signal ap_NS_fsm                                                                 : std_logic_vector (49 downto 0);
  signal ap_block_state6_on_subcall_done                                           : boolean;
  signal ap_block_state8_on_subcall_done                                           : boolean;
  signal ap_block_state30_on_subcall_done                                          : boolean;
  signal ap_block_state38_on_subcall_done                                          : boolean;
  signal ap_block_state40_on_subcall_done                                          : boolean;
  signal ap_block_state42_on_subcall_done                                          : boolean;
  
  constant zero1                                                                   : std_logic := '0';
  constant zero64                                                                  : std_logic_vector (63 downto 0) := (others => '0');
  -- Channel A
  signal ap_start_A         : std_logic;
  signal ap_done_A          : std_logic;
  signal ap_idle_A          : std_logic;
  signal ap_ready_A         : std_logic;
  signal state_V_address0_A : std_logic_vector (4 downto 0);
  signal state_V_ce0_A      : std_logic;
  signal state_V_q0_A       : std_logic_vector (63 downto 0);
  signal state_V_address1_A : std_logic_vector (4 downto 0);
  signal state_V_ce1_A      : std_logic;
  signal state_V_we1_A      : std_logic;
  signal state_V_d1_A       : std_logic_vector (63 downto 0);
  -- Channel B
  signal ap_start_B         : std_logic;
  signal ap_done_B          : std_logic;
  signal ap_idle_B          : std_logic;
  signal ap_ready_B         : std_logic;
  signal state_V_address0_B : std_logic_vector (4 downto 0);
  signal state_V_ce0_B      : std_logic;
  signal state_V_q0_B       : std_logic_vector (63 downto 0);
  signal state_V_address1_B : std_logic_vector (4 downto 0);
  signal state_V_ce1_B      : std_logic;
  signal state_V_we1_B      : std_logic;
  signal state_V_d1_B       : std_logic_vector (63 downto 0);
  -- Channel C
  signal ap_start_C         : std_logic;
  signal ap_done_C          : std_logic;
  signal ap_idle_C          : std_logic;
  signal ap_ready_C         : std_logic;
  signal state_V_address0_C : std_logic_vector (4 downto 0);
  signal state_V_ce0_C      : std_logic;
  signal state_V_q0_C       : std_logic_vector (63 downto 0);
  signal state_V_address1_C : std_logic_vector (4 downto 0);
  signal state_V_ce1_C      : std_logic;
  signal state_V_we1_C      : std_logic;
  signal state_V_d1_C       : std_logic_vector (63 downto 0);
  -- Channel D
  signal ap_start_D         : std_logic;
  signal ap_done_D          : std_logic;
  signal ap_idle_D          : std_logic;
  signal ap_ready_D         : std_logic;
  signal state_V_address0_D : std_logic_vector (4 downto 0);
  signal state_V_ce0_D      : std_logic;
  signal state_V_q0_D       : std_logic_vector (63 downto 0);
  signal state_V_address1_D : std_logic_vector (4 downto 0);
  signal state_V_ce1_D      : std_logic;
  signal state_V_we1_D      : std_logic;
  signal state_V_d1_D       : std_logic_vector (63 downto 0);
  -- Channel E
  signal ap_start_E         : std_logic;
  signal ap_done_E          : std_logic;
  signal ap_idle_E          : std_logic;
  signal ap_ready_E         : std_logic;
  signal state_V_address0_E : std_logic_vector (4 downto 0);
  signal state_V_ce0_E      : std_logic;
  signal state_V_q0_E       : std_logic_vector (63 downto 0);
  signal state_V_address1_E : std_logic_vector (4 downto 0);
  signal state_V_ce1_E      : std_logic;
  signal state_V_we1_E      : std_logic;
  signal state_V_d1_E       : std_logic_vector (63 downto 0);
  
  component KeccakF1600_StatePer is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      -- Channel A
      ap_start_A         : in  std_logic;
      ap_done_A          : out std_logic;
      ap_idle_A          : out std_logic;
      ap_ready_A         : out std_logic;
      state_V_address0_A : out std_logic_vector (4 downto 0);
      state_V_ce0_A      : out std_logic;
      state_V_q0_A       : in  std_logic_vector (63 downto 0);
      state_V_address1_A : out std_logic_vector (4 downto 0);
      state_V_ce1_A      : out std_logic;
      state_V_we1_A      : out std_logic;
      state_V_d1_A       : out std_logic_vector (63 downto 0);
      -- Channel B
      ap_start_B         : in  std_logic;
      ap_done_B          : out std_logic;
      ap_idle_B          : out std_logic;
      ap_ready_B         : out std_logic;
      state_V_address0_B : out std_logic_vector (4 downto 0);
      state_V_ce0_B      : out std_logic;
      state_V_q0_B       : in  std_logic_vector (63 downto 0);
      state_V_address1_B : out std_logic_vector (4 downto 0);
      state_V_ce1_B      : out std_logic;
      state_V_we1_B      : out std_logic;
      state_V_d1_B       : out std_logic_vector (63 downto 0);
      -- Channel C
      ap_start_C         : in  std_logic;
      ap_done_C          : out std_logic;
      ap_idle_C          : out std_logic;
      ap_ready_C         : out std_logic;
      state_V_address0_C : out std_logic_vector (4 downto 0);
      state_V_ce0_C      : out std_logic;
      state_V_q0_C       : in  std_logic_vector (63 downto 0);
      state_V_address1_C : out std_logic_vector (4 downto 0);
      state_V_ce1_C      : out std_logic;
      state_V_we1_C      : out std_logic;
      state_V_d1_C       : out std_logic_vector (63 downto 0);
      -- Channel D
      ap_start_D         : in  std_logic;
      ap_done_D          : out std_logic;
      ap_idle_D          : out std_logic;
      ap_ready_D         : out std_logic;
      state_V_address0_D : out std_logic_vector (4 downto 0);
      state_V_ce0_D      : out std_logic;
      state_V_q0_D       : in  std_logic_vector (63 downto 0);
      state_V_address1_D : out std_logic_vector (4 downto 0);
      state_V_ce1_D      : out std_logic;
      state_V_we1_D      : out std_logic;
      state_V_d1_D       : out std_logic_vector (63 downto 0);
      -- Channel E
      ap_start_E         : in  std_logic;
      ap_done_E          : out std_logic;
      ap_idle_E          : out std_logic;
      ap_ready_E         : out std_logic;
      state_V_address0_E : out std_logic_vector (4 downto 0);
      state_V_ce0_E      : out std_logic;
      state_V_q0_E       : in  std_logic_vector (63 downto 0);
      state_V_address1_E : out std_logic_vector (4 downto 0);
      state_V_ce1_E      : out std_logic;
      state_V_we1_E      : out std_logic;
      state_V_d1_E       : out std_logic_vector (63 downto 0)
      );
  end component;
  
  component vect_mul_add is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      o_V_address0  : out std_logic_vector (11 downto 0);
      o_V_ce0       : out std_logic;
      o_V_q0        : in  std_logic_vector (7 downto 0);
      o_V_address1  : out std_logic_vector (11 downto 0);
      o_V_ce1       : out std_logic;
      o_V_we1       : out std_logic;
      o_V_d1        : out std_logic_vector (7 downto 0);
      a1_V_address0 : out std_logic_vector (6 downto 0);
      a1_V_ce0      : out std_logic;
      a1_V_q0       : in  std_logic_vector (14 downto 0);
      a2_V_address0 : out std_logic_vector (11 downto 0);
      a2_V_ce0      : out std_logic;
      a2_V_q0       : in  std_logic_vector (7 downto 0);
      a2_V_address1 : out std_logic_vector (11 downto 0);
      a2_V_ce1      : out std_logic;
      a2_V_we1      : out std_logic;
      a2_V_d1       : out std_logic_vector (7 downto 0);
      weight_V      : in  std_logic_vector (7 downto 0);
      a3_V_address0 : out std_logic_vector (11 downto 0);
      a3_V_ce0      : out std_logic;
      a3_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component reed_solomon_encode is
    port (
      ap_clk         : in  std_logic;
      ap_rst         : in  std_logic;
      ap_start       : in  std_logic;
      ap_done        : out std_logic;
      ap_idle        : out std_logic;
      ap_ready       : out std_logic;
      cdw_V_address0 : out std_logic_vector (5 downto 0);
      cdw_V_ce0      : out std_logic;
      cdw_V_q0       : in  std_logic_vector (7 downto 0);
      cdw_V_address1 : out std_logic_vector (5 downto 0);
      cdw_V_ce1      : out std_logic;
      cdw_V_we1      : out std_logic;
      cdw_V_d1       : out std_logic_vector (7 downto 0);
      msg_V_address0 : out std_logic_vector (3 downto 0);
      msg_V_ce0      : out std_logic;
      msg_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component reed_muller_encode is
    port (
      ap_clk         : in  std_logic;
      ap_rst         : in  std_logic;
      ap_start       : in  std_logic;
      ap_done        : out std_logic;
      ap_idle        : out std_logic;
      ap_ready       : out std_logic;
      cdw_V_address0 : out std_logic_vector (12 downto 0);
      cdw_V_ce0      : out std_logic;
      cdw_V_q0       : in  std_logic_vector (7 downto 0);
      cdw_V_address1 : out std_logic_vector (12 downto 0);
      cdw_V_ce1      : out std_logic;
      cdw_V_we1      : out std_logic;
      cdw_V_d1       : out std_logic_vector (7 downto 0);
      msg_V_address0 : out std_logic_vector (5 downto 0);
      msg_V_ce0      : out std_logic;
      msg_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_add is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      o_V_address0  : out std_logic_vector (12 downto 0);
      o_V_ce0       : out std_logic;
      o_V_q0        : in  std_logic_vector (7 downto 0);
      o_V_address1  : out std_logic_vector (12 downto 0);
      o_V_ce1       : out std_logic;
      o_V_we1       : out std_logic;
      o_V_d1        : out std_logic_vector (7 downto 0);
      v2_V_address0 : out std_logic_vector (11 downto 0);
      v2_V_ce0      : out std_logic;
      v2_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component reed_solomon_decode is
    port (
      ap_clk         : in  std_logic;
      ap_rst         : in  std_logic;
      ap_start       : in  std_logic;
      ap_done        : out std_logic;
      ap_idle        : out std_logic;
      ap_ready       : out std_logic;
      msg_V_address1 : out std_logic_vector (12 downto 0);
      msg_V_ce1      : out std_logic;
      msg_V_we1      : out std_logic;
      msg_V_d1       : out std_logic_vector (7 downto 0);
      cdw_V_address0 : out std_logic_vector (5 downto 0);
      cdw_V_ce0      : out std_logic;
      cdw_V_q0       : in  std_logic_vector (7 downto 0);
      cdw_V_address1 : out std_logic_vector (5 downto 0);
      cdw_V_ce1      : out std_logic;
      cdw_V_we1      : out std_logic;
      cdw_V_d1       : out std_logic_vector (7 downto 0));
  end component;


  component vect_set_random_fixe is
    port (
      ap_clk                        : in  std_logic;
      ap_rst                        : in  std_logic;
      ap_start                      : in  std_logic;
      ap_done                       : out std_logic;
      ap_idle                       : out std_logic;
      ap_ready                      : out std_logic;
      v_V_address0                  : out std_logic_vector (6 downto 0);
      v_V_ce0                       : out std_logic;
      v_V_q0                        : in  std_logic_vector (14 downto 0);
      v_V_address1                  : out std_logic_vector (6 downto 0);
      v_V_ce1                       : out std_logic;
      v_V_we1                       : out std_logic;
      v_V_d1                        : out std_logic_vector (14 downto 0);
      weight_V                      : in  std_logic_vector (6 downto 0);
      state_seedexpander_V_address0 : out std_logic_vector (4 downto 0);
      state_seedexpander_V_ce0      : out std_logic;
      state_seedexpander_V_q0       : in  std_logic_vector (63 downto 0);
      state_seedexpander_V_address1 : out std_logic_vector (4 downto 0);
      state_seedexpander_V_ce1      : out std_logic;
      state_seedexpander_V_we1      : out std_logic;
      state_seedexpander_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component shake256_512_ds is
    port (
      ap_clk            : in  std_logic;
      ap_rst            : in  std_logic;
      ap_start          : in  std_logic;
      ap_done           : out std_logic;
      ap_idle           : out std_logic;
      ap_ready          : out std_logic;
      output_V_address0 : out std_logic_vector (2 downto 0);
      output_V_ce0      : out std_logic;
      output_V_we0      : out std_logic;
      output_V_d0       : out std_logic_vector (63 downto 0);
      input_V_address0  : out std_logic_vector (12 downto 0);
      input_V_ce0       : out std_logic;
      input_V_q0        : in  std_logic_vector (7 downto 0);
      input_V_address1  : out std_logic_vector (12 downto 0);
      input_V_ce1       : out std_logic;
      input_V_q1        : in  std_logic_vector (7 downto 0);
      inlen_V           : in  std_logic_vector (13 downto 0);
      domain_V          : in  std_logic_vector (3 downto 0));
  end component;


  component seedexpander_mult_ty is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      ap_start           : in  std_logic;
      ap_done            : out std_logic;
      ap_idle            : out std_logic;
      ap_ready           : out std_logic;
      output_V_address1  : out std_logic_vector (11 downto 0);
      output_V_ce1       : out std_logic;
      output_V_we1       : out std_logic;
      output_V_d1        : out std_logic_vector (7 downto 0);
      state_V_2_address0 : out std_logic_vector (4 downto 0);
      state_V_2_ce0      : out std_logic;
      state_V_2_q0       : in  std_logic_vector (63 downto 0);
      state_V_2_address1 : out std_logic_vector (4 downto 0);
      state_V_2_ce1      : out std_logic;
      state_V_2_we1      : out std_logic;
      state_V_2_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component seedexpander_init is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      ap_start           : in  std_logic;
      ap_done            : out std_logic;
      ap_idle            : out std_logic;
      ap_ready           : out std_logic;
      seed_V_address0    : out std_logic_vector (2 downto 0);
      seed_V_ce0         : out std_logic;
      seed_V_q0          : in  std_logic_vector (63 downto 0);
      state_V_2_address0 : out std_logic_vector (4 downto 0);
      state_V_2_ce0      : out std_logic;
      state_V_2_q0       : in  std_logic_vector (63 downto 0);
      state_V_2_address1 : out std_logic_vector (4 downto 0);
      state_V_2_ce1      : out std_logic;
      state_V_2_we1      : out std_logic;
      state_V_2_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component reed_muller_decode is
    port (
      ap_clk         : in  std_logic;
      ap_rst         : in  std_logic;
      ap_start       : in  std_logic;
      ap_done        : out std_logic;
      ap_idle        : out std_logic;
      ap_ready       : out std_logic;
      msg_V_address1 : out std_logic_vector (5 downto 0);
      msg_V_ce1      : out std_logic;
      msg_V_we1      : out std_logic;
      msg_V_d1       : out std_logic_vector (7 downto 0);
      cdw_V_address0 : out std_logic_vector (11 downto 0);
      cdw_V_ce0      : out std_logic;
      cdw_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component hqc_ciphertext_from_s is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      u_V_address1  : out std_logic_vector (12 downto 0);
      u_V_ce1       : out std_logic;
      u_V_we1       : out std_logic;
      u_V_d1        : out std_logic_vector (7 downto 0);
      d_V_address0  : out std_logic_vector (2 downto 0);
      d_V_ce0       : out std_logic;
      d_V_we0       : out std_logic_vector (7 downto 0);
      d_V_d0        : out std_logic_vector (63 downto 0);
      ct_V_address0 : out std_logic_vector (12 downto 0);
      ct_V_ce0      : out std_logic;
      ct_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component hqc_public_key_from_s is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      s_V_address1  : out std_logic_vector (11 downto 0);
      s_V_ce1       : out std_logic;
      s_V_we1       : out std_logic;
      s_V_d1        : out std_logic_vector (7 downto 0);
      pk_V_address0 : out std_logic_vector (8 downto 0);
      pk_V_ce0      : out std_logic;
      pk_V_q0       : in  std_logic_vector (63 downto 0));
  end component;


  component vect_compare is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      v1_V_address0 : out std_logic_vector (12 downto 0);
      v1_V_ce0      : out std_logic;
      v1_V_q0       : in  std_logic_vector (7 downto 0);
      v1_V_offset   : in  std_logic_vector (12 downto 0);
      v2_V_address0 : out std_logic_vector (12 downto 0);
      v2_V_ce0      : out std_logic;
      v2_V_q0       : in  std_logic_vector (7 downto 0);
      v2_V_offset   : in  std_logic_vector (12 downto 0);
      size_V_offset : in  std_logic_vector (11 downto 0);
      ap_return     : out std_logic_vector (0 downto 0));
  end component;


  component vect_set_random_fixe_1 is
    port (
      ap_clk                                  : in  std_logic;
      ap_rst                                  : in  std_logic;
      ap_start                                : in  std_logic;
      ap_done                                 : out std_logic;
      ap_idle                                 : out std_logic;
      ap_ready                                : out std_logic;
      v_V_address0                            : out std_logic_vector (11 downto 0);
      v_V_ce0                                 : out std_logic;
      v_V_q0                                  : in  std_logic_vector (7 downto 0);
      v_V_address1                            : out std_logic_vector (11 downto 0);
      v_V_ce1                                 : out std_logic;
      v_V_we1                                 : out std_logic;
      v_V_d1                                  : out std_logic_vector (7 downto 0);
      fixed_weight_by_coord_vector_V_address0 : out std_logic_vector (6 downto 0);
      fixed_weight_by_coord_vector_V_ce0      : out std_logic;
      fixed_weight_by_coord_vector_V_q0       : in  std_logic_vector (14 downto 0));
  end component;


  component vect_copyresize_1 is
    port (
      ap_clk       : in  std_logic;
      ap_rst       : in  std_logic;
      ap_start     : in  std_logic;
      ap_done      : out std_logic;
      ap_idle      : out std_logic;
      ap_ready     : out std_logic;
      o_V_address1 : out std_logic_vector (3 downto 0);
      o_V_ce1      : out std_logic;
      o_V_we1      : out std_logic;
      o_V_d1       : out std_logic_vector (7 downto 0);
      v_V_address0 : out std_logic_vector (12 downto 0);
      v_V_ce0      : out std_logic;
      v_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_copyresize_2 is
    port (
      ap_clk       : in  std_logic;
      ap_rst       : in  std_logic;
      ap_start     : in  std_logic;
      ap_done      : out std_logic;
      ap_idle      : out std_logic;
      ap_ready     : out std_logic;
      o_V_address1 : out std_logic_vector (11 downto 0);
      o_V_ce1      : out std_logic;
      o_V_we1      : out std_logic;
      o_V_d1       : out std_logic_vector (7 downto 0);
      v_V_address0 : out std_logic_vector (12 downto 0);
      v_V_ce0      : out std_logic;
      v_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_copyresize_mult is
    port (
      ap_clk       : in  std_logic;
      ap_rst       : in  std_logic;
      ap_start     : in  std_logic;
      ap_done      : out std_logic;
      ap_idle      : out std_logic;
      ap_ready     : out std_logic;
      o_V_address1 : out std_logic_vector (11 downto 0);
      o_V_ce1      : out std_logic;
      o_V_we1      : out std_logic;
      o_V_d1       : out std_logic_vector (7 downto 0);
      v_V_address0 : out std_logic_vector (12 downto 0);
      v_V_ce0      : out std_logic;
      v_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_copyresize is
    port (
      ap_clk       : in  std_logic;
      ap_rst       : in  std_logic;
      ap_start     : in  std_logic;
      ap_done      : out std_logic;
      ap_idle      : out std_logic;
      ap_ready     : out std_logic;
      o_V_address1 : out std_logic_vector (12 downto 0);
      o_V_ce1      : out std_logic;
      o_V_we1      : out std_logic;
      o_V_d1       : out std_logic_vector (7 downto 0);
      v_V_address0 : out std_logic_vector (11 downto 0);
      v_V_ce0      : out std_logic;
      v_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_compare_64 is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      v1_V_address0 : out std_logic_vector (2 downto 0);
      v1_V_ce0      : out std_logic;
      v1_V_q0       : in  std_logic_vector (63 downto 0);
      v2_V_address0 : out std_logic_vector (2 downto 0);
      v2_V_ce0      : out std_logic;
      v2_V_q0       : in  std_logic_vector (63 downto 0);
      ap_return     : out std_logic_vector (0 downto 0));
  end component;


  component crypto_kem_dec_hlHfu is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (12 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (12 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlIfE is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (5 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (5 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlKfY is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (4 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (63 downto 0);
      address1 : in  std_logic_vector (4 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (63 downto 0));
  end component;


  component crypto_kem_dec_hlLf8 is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (12 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (12 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0);
      q1       : out std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlMgi is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (2 downto 0);
      ce0      : in  std_logic;
      we0      : in  std_logic;
      d0       : in  std_logic_vector (63 downto 0);
      q0       : out std_logic_vector (63 downto 0));
  end component;


  component crypto_kem_dec_hlNgs is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (2 downto 0);
      ce0      : in  std_logic;
      we0      : in  std_logic_vector (7 downto 0);
      d0       : in  std_logic_vector (63 downto 0);
      q0       : out std_logic_vector (63 downto 0));
  end component;


  component crypto_kem_dec_hlOgC is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (11 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (11 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlQgW is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (3 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (3 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlRg6 is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (11 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (11 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_dec_hlShg is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (6 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (14 downto 0);
      address1 : in  std_logic_vector (6 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (14 downto 0));
  end component;


  component crypto_kem_dec_hlUhA is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (2 downto 0);
      ce0      : in  std_logic;
      we0      : in  std_logic;
      d0       : in  std_logic_vector (63 downto 0);
      q0       : out std_logic_vector (63 downto 0));
  end component;



begin

  KeccakF1600_StatePer_U : KeccakF1600_StatePer
    port map(
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      -- Channel A         
      ap_start_A         => ap_start_A,
      ap_done_A          => ap_done_A,
      ap_idle_A          => ap_idle_A,
      ap_ready_A         => ap_ready_A,
      state_V_address0_A => state_V_address0_A,
      state_V_ce0_A      => state_V_ce0_A,
      state_V_q0_A       => state_V_q0_A,
      state_V_address1_A => state_V_address1_A,
      state_V_ce1_A      => state_V_ce1_A,
      state_V_we1_A      => state_V_we1_A,
      state_V_d1_A       => state_V_d1_A,
      -- Channel B         
      ap_start_B         => ap_start_B,
      ap_done_B          => ap_done_B,
      ap_idle_B          => ap_idle_B,
      ap_ready_B         => ap_ready_B,
      state_V_address0_B => state_V_address0_B,
      state_V_ce0_B      => state_V_ce0_B,
      state_V_q0_B       => state_V_q0_B,
      state_V_address1_B => state_V_address1_B,
      state_V_ce1_B      => state_V_ce1_B,
      state_V_we1_B      => state_V_we1_B,
      state_V_d1_B       => state_V_d1_B,
      -- Channel C         
      ap_start_C         => ap_start_C,
      ap_done_C          => ap_done_C,
      ap_idle_C          => ap_idle_C,
      ap_ready_C         => ap_ready_C,
      state_V_address0_C => state_V_address0_C,
      state_V_ce0_C      => state_V_ce0_C,
      state_V_q0_C       => state_V_q0_C,
      state_V_address1_C => state_V_address1_C,
      state_V_ce1_C      => state_V_ce1_C,
      state_V_we1_C      => state_V_we1_C,
      state_V_d1_C       => state_V_d1_C,
      -- Channel D         
      ap_start_D         => zero1,
      ap_done_D          => open,
      ap_idle_D          => open,
      ap_ready_D         => open,
      state_V_address0_D => open,
      state_V_ce0_D      => open,
      state_V_q0_D       => zero64,
      state_V_address1_D => open,
      state_V_ce1_D      => open,
      state_V_we1_D      => open,
      state_V_d1_D       => open,
      -- Channel E         
      ap_start_E         => zero1,
      ap_done_E          => open,
      ap_idle_E          => open,
      ap_ready_E         => open,
      state_V_address0_E => open,
      state_V_ce0_E      => open,
      state_V_q0_E       => zero64,
      state_V_address1_E => open,
      state_V_ce1_E      => open,
      state_V_we1_E      => open,
      state_V_d1_E       => open
      );
	  
  uv2_V_U : component crypto_kem_dec_hlHfu
    generic map (
      DataWidth    => 8,
      AddressRange => 4433,
      AddressWidth => 13)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => uv2_V_address0,
      ce0      => uv2_V_ce0,
      q0       => uv2_V_q0,
      address1 => uv2_V_address1,
      ce1      => uv2_V_ce1,
      we1      => uv2_V_we1,
      d1       => uv2_V_d1);

  store_rs_encode_V_U : component crypto_kem_dec_hlIfE
    generic map (
      DataWidth    => 8,
      AddressRange => 46,
      AddressWidth => 6)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_rs_encode_V_address0,
      ce0      => store_rs_encode_V_ce0,
      q0       => store_rs_encode_V_q0,
      address1 => grp_reed_solomon_encode_fu_621_cdw_V_address1,
      ce1      => store_rs_encode_V_ce1,
      we1      => store_rs_encode_V_we1,
      d1       => grp_reed_solomon_encode_fu_621_cdw_V_d1);

  store_rs_decode_V_U : component crypto_kem_dec_hlIfE
    generic map (
      DataWidth    => 8,
      AddressRange => 46,
      AddressWidth => 6)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => grp_reed_solomon_decode_fu_684_cdw_V_address0,
      ce0      => store_rs_decode_V_ce0,
      q0       => store_rs_decode_V_q0,
      address1 => store_rs_decode_V_address1,
      ce1      => store_rs_decode_V_ce1,
      we1      => store_rs_decode_V_we1,
      d1       => store_rs_decode_V_d1);

  state_seedexpander_V_U : component crypto_kem_dec_hlKfY
    generic map (
      DataWidth    => 64,
      AddressRange => 26,
      AddressWidth => 5)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => state_seedexpander_V_address0,
      ce0      => state_seedexpander_V_ce0,
      q0       => state_seedexpander_V_q0,
      address1 => state_seedexpander_V_address1,
      ce1      => state_seedexpander_V_ce1,
      we1      => state_seedexpander_V_we1,
      d1       => state_seedexpander_V_d1);

  mc_V_U : component crypto_kem_dec_hlLf8
    generic map (
      DataWidth    => 8,
      AddressRange => 4433,
      AddressWidth => 13)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => mc_V_address0,
      ce0      => mc_V_ce0,
      q0       => mc_V_q0,
      address1 => mc_V_address1,
      ce1      => mc_V_ce1,
      we1      => mc_V_we1,
      d1       => mc_V_d1,
      q1       => mc_V_q1);

  theta_V_U : component crypto_kem_dec_hlMgi
    generic map (
      DataWidth    => 64,
      AddressRange => 8,
      AddressWidth => 3)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => theta_V_address0,
      ce0      => theta_V_ce0,
      we0      => theta_V_we0,
      d0       => theta_V_d0,
      q0       => theta_V_q0);

  d_V_U : component crypto_kem_dec_hlNgs
    generic map (
      DataWidth    => 64,
      AddressRange => 8,
      AddressWidth => 3)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => d_V_address0,
      ce0      => d_V_ce0,
      we0      => d_V_we0,
      d0       => d_V_d0,
      q0       => d_V_q0);

  store_A_V_U : component crypto_kem_dec_hlOgC
    generic map (
      DataWidth    => 8,
      AddressRange => 2209,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_A_V_address0,
      ce0      => store_A_V_ce0,
      q0       => store_A_V_q0,
      address1 => store_A_V_address1,
      ce1      => store_A_V_ce1,
      we1      => store_A_V_we1,
      d1       => store_A_V_d1);

  store_B_V_U : component crypto_kem_dec_hlOgC
    generic map (
      DataWidth    => 8,
      AddressRange => 2209,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_B_V_address0,
      ce0      => store_B_V_ce0,
      q0       => store_B_V_q0,
      address1 => store_B_V_address1,
      ce1      => store_B_V_ce1,
      we1      => store_B_V_we1,
      d1       => store_B_V_d1);

  store_C_V_U : component crypto_kem_dec_hlQgW
    generic map (
      DataWidth    => 8,
      AddressRange => 16,
      AddressWidth => 4)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => grp_reed_solomon_encode_fu_621_msg_V_address0,
      ce0      => store_C_V_ce0,
      q0       => store_C_V_q0,
      address1 => store_C_V_address1,
      ce1      => store_C_V_ce1,
      we1      => store_C_V_we1,
      d1       => store_C_V_d1);

  h_s_V_U : component crypto_kem_dec_hlRg6
    generic map (
      DataWidth    => 8,
      AddressRange => 2210,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => h_s_V_address0,
      ce0      => h_s_V_ce0,
      q0       => h_s_V_q0,
      address1 => h_s_V_address1,
      ce1      => h_s_V_ce1,
      we1      => h_s_V_we1,
      d1       => h_s_V_d1);

  random_vector_A_V_U : component crypto_kem_dec_hlShg
    generic map (
      DataWidth    => 15,
      AddressRange => 75,
      AddressWidth => 7)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => random_vector_A_V_address0,
      ce0      => random_vector_A_V_ce0,
      q0       => random_vector_A_V_q0,
      address1 => random_vector_A_V_address1,
      ce1      => random_vector_A_V_ce1,
      we1      => random_vector_A_V_we1,
      d1       => random_vector_A_V_d1);

  random_vector_B_V_U : component crypto_kem_dec_hlShg
    generic map (
      DataWidth    => 15,
      AddressRange => 75,
      AddressWidth => 7)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => random_vector_B_V_address0,
      ce0      => random_vector_B_V_ce0,
      q0       => random_vector_B_V_q0,
      address1 => random_vector_B_V_address1,
      ce1      => random_vector_B_V_ce1,
      we1      => random_vector_B_V_we1,
      d1       => random_vector_B_V_d1);

  store_seeds_V_U : component crypto_kem_dec_hlUhA
    generic map (
      DataWidth    => 64,
      AddressRange => 5,
      AddressWidth => 3)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_seeds_V_address0,
      ce0      => store_seeds_V_ce0,
      we0      => store_seeds_V_we0,
      d0       => store_seeds_V_d0,
      q0       => store_seeds_V_q0);

  grp_vect_mul_add_fu_591 : component vect_mul_add
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_vect_mul_add_fu_591_ap_start,
      ap_done       => grp_vect_mul_add_fu_591_ap_done,
      ap_idle       => grp_vect_mul_add_fu_591_ap_idle,
      ap_ready      => grp_vect_mul_add_fu_591_ap_ready,
      o_V_address0  => grp_vect_mul_add_fu_591_o_V_address0,
      o_V_ce0       => grp_vect_mul_add_fu_591_o_V_ce0,
      o_V_q0        => store_A_V_q0,
      o_V_address1  => grp_vect_mul_add_fu_591_o_V_address1,
      o_V_ce1       => grp_vect_mul_add_fu_591_o_V_ce1,
      o_V_we1       => grp_vect_mul_add_fu_591_o_V_we1,
      o_V_d1        => grp_vect_mul_add_fu_591_o_V_d1,
      a1_V_address0 => grp_vect_mul_add_fu_591_a1_V_address0,
      a1_V_ce0      => grp_vect_mul_add_fu_591_a1_V_ce0,
      a1_V_q0       => random_vector_A_V_q0,
      a2_V_address0 => grp_vect_mul_add_fu_591_a2_V_address0,
      a2_V_ce0      => grp_vect_mul_add_fu_591_a2_V_ce0,
      a2_V_q0       => h_s_V_q0,
      a2_V_address1 => grp_vect_mul_add_fu_591_a2_V_address1,
      a2_V_ce1      => grp_vect_mul_add_fu_591_a2_V_ce1,
      a2_V_we1      => grp_vect_mul_add_fu_591_a2_V_we1,
      a2_V_d1       => grp_vect_mul_add_fu_591_a2_V_d1,
      weight_V      => grp_vect_mul_add_fu_591_weight_V,
      a3_V_address0 => grp_vect_mul_add_fu_591_a3_V_address0,
      a3_V_ce0      => grp_vect_mul_add_fu_591_a3_V_ce0,
      a3_V_q0       => store_B_V_q0);

  grp_reed_solomon_encode_fu_621 : component reed_solomon_encode
    port map (
      ap_clk         => ap_clk,
      ap_rst         => ap_rst,
      ap_start       => grp_reed_solomon_encode_fu_621_ap_start,
      ap_done        => grp_reed_solomon_encode_fu_621_ap_done,
      ap_idle        => grp_reed_solomon_encode_fu_621_ap_idle,
      ap_ready       => grp_reed_solomon_encode_fu_621_ap_ready,
      cdw_V_address0 => grp_reed_solomon_encode_fu_621_cdw_V_address0,
      cdw_V_ce0      => grp_reed_solomon_encode_fu_621_cdw_V_ce0,
      cdw_V_q0       => store_rs_encode_V_q0,
      cdw_V_address1 => grp_reed_solomon_encode_fu_621_cdw_V_address1,
      cdw_V_ce1      => grp_reed_solomon_encode_fu_621_cdw_V_ce1,
      cdw_V_we1      => grp_reed_solomon_encode_fu_621_cdw_V_we1,
      cdw_V_d1       => grp_reed_solomon_encode_fu_621_cdw_V_d1,
      msg_V_address0 => grp_reed_solomon_encode_fu_621_msg_V_address0,
      msg_V_ce0      => grp_reed_solomon_encode_fu_621_msg_V_ce0,
      msg_V_q0       => store_C_V_q0);

  grp_reed_muller_encode_fu_639 : component reed_muller_encode
    port map (
      ap_clk         => ap_clk,
      ap_rst         => ap_rst,
      ap_start       => grp_reed_muller_encode_fu_639_ap_start,
      ap_done        => grp_reed_muller_encode_fu_639_ap_done,
      ap_idle        => grp_reed_muller_encode_fu_639_ap_idle,
      ap_ready       => grp_reed_muller_encode_fu_639_ap_ready,
      cdw_V_address0 => grp_reed_muller_encode_fu_639_cdw_V_address0,
      cdw_V_ce0      => grp_reed_muller_encode_fu_639_cdw_V_ce0,
      cdw_V_q0       => uv2_V_q0,
      cdw_V_address1 => grp_reed_muller_encode_fu_639_cdw_V_address1,
      cdw_V_ce1      => grp_reed_muller_encode_fu_639_cdw_V_ce1,
      cdw_V_we1      => grp_reed_muller_encode_fu_639_cdw_V_we1,
      cdw_V_d1       => grp_reed_muller_encode_fu_639_cdw_V_d1,
      msg_V_address0 => grp_reed_muller_encode_fu_639_msg_V_address0,
      msg_V_ce0      => grp_reed_muller_encode_fu_639_msg_V_ce0,
      msg_V_q0       => store_rs_encode_V_q0);

  grp_vect_add_fu_667 : component vect_add
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_vect_add_fu_667_ap_start,
      ap_done       => grp_vect_add_fu_667_ap_done,
      ap_idle       => grp_vect_add_fu_667_ap_idle,
      ap_ready      => grp_vect_add_fu_667_ap_ready,
      o_V_address0  => grp_vect_add_fu_667_o_V_address0,
      o_V_ce0       => grp_vect_add_fu_667_o_V_ce0,
      o_V_q0        => uv2_V_q0,
      o_V_address1  => grp_vect_add_fu_667_o_V_address1,
      o_V_ce1       => grp_vect_add_fu_667_o_V_ce1,
      o_V_we1       => grp_vect_add_fu_667_o_V_we1,
      o_V_d1        => grp_vect_add_fu_667_o_V_d1,
      v2_V_address0 => grp_vect_add_fu_667_v2_V_address0,
      v2_V_ce0      => grp_vect_add_fu_667_v2_V_ce0,
      v2_V_q0       => store_A_V_q0);

  grp_reed_solomon_decode_fu_684 : component reed_solomon_decode
    port map (
      ap_clk         => ap_clk,
      ap_rst         => ap_rst,
      ap_start       => grp_reed_solomon_decode_fu_684_ap_start,
      ap_done        => grp_reed_solomon_decode_fu_684_ap_done,
      ap_idle        => grp_reed_solomon_decode_fu_684_ap_idle,
      ap_ready       => grp_reed_solomon_decode_fu_684_ap_ready,
      msg_V_address1 => grp_reed_solomon_decode_fu_684_msg_V_address1,
      msg_V_ce1      => grp_reed_solomon_decode_fu_684_msg_V_ce1,
      msg_V_we1      => grp_reed_solomon_decode_fu_684_msg_V_we1,
      msg_V_d1       => grp_reed_solomon_decode_fu_684_msg_V_d1,
      cdw_V_address0 => grp_reed_solomon_decode_fu_684_cdw_V_address0,
      cdw_V_ce0      => grp_reed_solomon_decode_fu_684_cdw_V_ce0,
      cdw_V_q0       => store_rs_decode_V_q0,
      cdw_V_address1 => grp_reed_solomon_decode_fu_684_cdw_V_address1,
      cdw_V_ce1      => grp_reed_solomon_decode_fu_684_cdw_V_ce1,
      cdw_V_we1      => grp_reed_solomon_decode_fu_684_cdw_V_we1,
      cdw_V_d1       => grp_reed_solomon_decode_fu_684_cdw_V_d1);

  grp_vect_set_random_fixe_fu_710 : component vect_set_random_fixe
    port map (
      ap_clk                        => ap_clk,
      ap_rst                        => ap_rst,
      ap_start                      => grp_vect_set_random_fixe_fu_710_ap_start,
      ap_done                       => grp_vect_set_random_fixe_fu_710_ap_done,
      ap_idle                       => grp_vect_set_random_fixe_fu_710_ap_idle,
      ap_ready                      => grp_vect_set_random_fixe_fu_710_ap_ready,
      v_V_address0                  => grp_vect_set_random_fixe_fu_710_v_V_address0,
      v_V_ce0                       => grp_vect_set_random_fixe_fu_710_v_V_ce0,
      v_V_q0                        => grp_vect_set_random_fixe_fu_710_v_V_q0,
      v_V_address1                  => grp_vect_set_random_fixe_fu_710_v_V_address1,
      v_V_ce1                       => grp_vect_set_random_fixe_fu_710_v_V_ce1,
      v_V_we1                       => grp_vect_set_random_fixe_fu_710_v_V_we1,
      v_V_d1                        => grp_vect_set_random_fixe_fu_710_v_V_d1,
      weight_V                      => grp_vect_set_random_fixe_fu_710_weight_V,
      state_seedexpander_V_address0 => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address0,
      state_seedexpander_V_ce0      => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce0,
      state_seedexpander_V_q0       => state_seedexpander_V_q0,
      state_seedexpander_V_address1 => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address1,
      state_seedexpander_V_ce1      => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce1,
      state_seedexpander_V_we1      => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_we1,
      state_seedexpander_V_d1       => grp_vect_set_random_fixe_fu_710_state_seedexpander_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel A
      ap_start_permute         => ap_start_A,
      ap_done_permute          => ap_done_A,
      ap_idle_permute          => ap_idle_A,
      ap_ready_permute         => ap_ready_A,
      state_V_address0_permute => state_V_address0_A,
      state_V_ce0_permute      => state_V_ce0_A,
      state_V_q0_permute       => state_V_q0_A,
      state_V_address1_permute => state_V_address1_A,
      state_V_ce1_permute      => state_V_ce1_A,
      state_V_we1_permute      => state_V_we1_A,
      state_V_d1_permute       => state_V_d1_A
      );

  grp_shake256_512_ds_fu_733 : component shake256_512_ds
    port map (
      ap_clk            => ap_clk,
      ap_rst            => ap_rst,
      ap_start          => grp_shake256_512_ds_fu_733_ap_start,
      ap_done           => grp_shake256_512_ds_fu_733_ap_done,
      ap_idle           => grp_shake256_512_ds_fu_733_ap_idle,
      ap_ready          => grp_shake256_512_ds_fu_733_ap_ready,
      output_V_address0 => grp_shake256_512_ds_fu_733_output_V_address0,
      output_V_ce0      => grp_shake256_512_ds_fu_733_output_V_ce0,
      output_V_we0      => grp_shake256_512_ds_fu_733_output_V_we0,
      output_V_d0       => grp_shake256_512_ds_fu_733_output_V_d0,
      input_V_address0  => grp_shake256_512_ds_fu_733_input_V_address0,
      input_V_ce0       => grp_shake256_512_ds_fu_733_input_V_ce0,
      input_V_q0        => mc_V_q0,
      input_V_address1  => grp_shake256_512_ds_fu_733_input_V_address1,
      input_V_ce1       => grp_shake256_512_ds_fu_733_input_V_ce1,
      input_V_q1        => mc_V_q1,
      inlen_V           => grp_shake256_512_ds_fu_733_inlen_V,
      domain_V          => grp_shake256_512_ds_fu_733_domain_V);

  grp_seedexpander_mult_ty_fu_763 : component seedexpander_mult_ty
    port map (
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      ap_start           => grp_seedexpander_mult_ty_fu_763_ap_start,
      ap_done            => grp_seedexpander_mult_ty_fu_763_ap_done,
      ap_idle            => grp_seedexpander_mult_ty_fu_763_ap_idle,
      ap_ready           => grp_seedexpander_mult_ty_fu_763_ap_ready,
      output_V_address1  => grp_seedexpander_mult_ty_fu_763_output_V_address1,
      output_V_ce1       => grp_seedexpander_mult_ty_fu_763_output_V_ce1,
      output_V_we1       => grp_seedexpander_mult_ty_fu_763_output_V_we1,
      output_V_d1        => grp_seedexpander_mult_ty_fu_763_output_V_d1,
      state_V_2_address0 => grp_seedexpander_mult_ty_fu_763_state_V_2_address0,
      state_V_2_ce0      => grp_seedexpander_mult_ty_fu_763_state_V_2_ce0,
      state_V_2_q0       => state_seedexpander_V_q0,
      state_V_2_address1 => grp_seedexpander_mult_ty_fu_763_state_V_2_address1,
      state_V_2_ce1      => grp_seedexpander_mult_ty_fu_763_state_V_2_ce1,
      state_V_2_we1      => grp_seedexpander_mult_ty_fu_763_state_V_2_we1,
      state_V_2_d1       => grp_seedexpander_mult_ty_fu_763_state_V_2_d1,
	  -- Channel to KeccakF1600_StatePermute Channel B
	  ap_start_permute         => ap_start_B,
      ap_done_permute          => ap_done_B,
      ap_idle_permute          => ap_idle_B,
      ap_ready_permute         => ap_ready_B,
      state_V_address0_permute => state_V_address0_B,
      state_V_ce0_permute      => state_V_ce0_B,
      state_V_q0_permute       => state_V_q0_B,
      state_V_address1_permute => state_V_address1_B,
      state_V_ce1_permute      => state_V_ce1_B,
      state_V_we1_permute      => state_V_we1_B,
      state_V_d1_permute       => state_V_d1_B
	  );

  grp_seedexpander_init_fu_783 : component seedexpander_init
    port map (
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      ap_start           => grp_seedexpander_init_fu_783_ap_start,
      ap_done            => grp_seedexpander_init_fu_783_ap_done,
      ap_idle            => grp_seedexpander_init_fu_783_ap_idle,
      ap_ready           => grp_seedexpander_init_fu_783_ap_ready,
      seed_V_address0    => grp_seedexpander_init_fu_783_seed_V_address0,
      seed_V_ce0         => grp_seedexpander_init_fu_783_seed_V_ce0,
      seed_V_q0          => store_seeds_V_q0,
      state_V_2_address0 => grp_seedexpander_init_fu_783_state_V_2_address0,
      state_V_2_ce0      => grp_seedexpander_init_fu_783_state_V_2_ce0,
      state_V_2_q0       => state_seedexpander_V_q0,
      state_V_2_address1 => grp_seedexpander_init_fu_783_state_V_2_address1,
      state_V_2_ce1      => grp_seedexpander_init_fu_783_state_V_2_ce1,
      state_V_2_we1      => grp_seedexpander_init_fu_783_state_V_2_we1,
      state_V_2_d1       => grp_seedexpander_init_fu_783_state_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel D
      ap_start_permute         => ap_start_C,
      ap_done_permute          => ap_done_C,
      ap_idle_permute          => ap_idle_C,
      ap_ready_permute         => ap_ready_C,
      state_V_address0_permute => state_V_address0_C,
      state_V_ce0_permute      => state_V_ce0_C,
      state_V_q0_permute       => state_V_q0_C,
      state_V_address1_permute => state_V_address1_C,
      state_V_ce1_permute      => state_V_ce1_C,
      state_V_we1_permute      => state_V_we1_C,
      state_V_d1_permute       => state_V_d1_C
      );

  grp_reed_muller_decode_fu_803 : component reed_muller_decode
    port map (
      ap_clk         => ap_clk,
      ap_rst         => ap_rst,
      ap_start       => grp_reed_muller_decode_fu_803_ap_start,
      ap_done        => grp_reed_muller_decode_fu_803_ap_done,
      ap_idle        => grp_reed_muller_decode_fu_803_ap_idle,
      ap_ready       => grp_reed_muller_decode_fu_803_ap_ready,
      msg_V_address1 => grp_reed_muller_decode_fu_803_msg_V_address1,
      msg_V_ce1      => grp_reed_muller_decode_fu_803_msg_V_ce1,
      msg_V_we1      => grp_reed_muller_decode_fu_803_msg_V_we1,
      msg_V_d1       => grp_reed_muller_decode_fu_803_msg_V_d1,
      cdw_V_address0 => grp_reed_muller_decode_fu_803_cdw_V_address0,
      cdw_V_ce0      => grp_reed_muller_decode_fu_803_cdw_V_ce0,
      cdw_V_q0       => store_A_V_q0);

  grp_hqc_ciphertext_from_s_fu_809 : component hqc_ciphertext_from_s
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_hqc_ciphertext_from_s_fu_809_ap_start,
      ap_done       => grp_hqc_ciphertext_from_s_fu_809_ap_done,
      ap_idle       => grp_hqc_ciphertext_from_s_fu_809_ap_idle,
      ap_ready      => grp_hqc_ciphertext_from_s_fu_809_ap_ready,
      u_V_address1  => grp_hqc_ciphertext_from_s_fu_809_u_V_address1,
      u_V_ce1       => grp_hqc_ciphertext_from_s_fu_809_u_V_ce1,
      u_V_we1       => grp_hqc_ciphertext_from_s_fu_809_u_V_we1,
      u_V_d1        => grp_hqc_ciphertext_from_s_fu_809_u_V_d1,
      d_V_address0  => grp_hqc_ciphertext_from_s_fu_809_d_V_address0,
      d_V_ce0       => grp_hqc_ciphertext_from_s_fu_809_d_V_ce0,
      d_V_we0       => grp_hqc_ciphertext_from_s_fu_809_d_V_we0,
      d_V_d0        => grp_hqc_ciphertext_from_s_fu_809_d_V_d0,
      ct_V_address0 => grp_hqc_ciphertext_from_s_fu_809_ct_V_address0,
      ct_V_ce0      => grp_hqc_ciphertext_from_s_fu_809_ct_V_ce0,
      ct_V_q0       => ct_V_q0);

  grp_hqc_public_key_from_s_fu_817 : component hqc_public_key_from_s
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_hqc_public_key_from_s_fu_817_ap_start,
      ap_done       => grp_hqc_public_key_from_s_fu_817_ap_done,
      ap_idle       => grp_hqc_public_key_from_s_fu_817_ap_idle,
      ap_ready      => grp_hqc_public_key_from_s_fu_817_ap_ready,
      s_V_address1  => grp_hqc_public_key_from_s_fu_817_s_V_address1,
      s_V_ce1       => grp_hqc_public_key_from_s_fu_817_s_V_ce1,
      s_V_we1       => grp_hqc_public_key_from_s_fu_817_s_V_we1,
      s_V_d1        => grp_hqc_public_key_from_s_fu_817_s_V_d1,
      pk_V_address0 => grp_hqc_public_key_from_s_fu_817_pk_V_address0,
      pk_V_ce0      => grp_hqc_public_key_from_s_fu_817_pk_V_ce0,
      pk_V_q0       => sk_V_q0);

  grp_vect_compare_fu_824 : component vect_compare
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_vect_compare_fu_824_ap_start,
      ap_done       => grp_vect_compare_fu_824_ap_done,
      ap_idle       => grp_vect_compare_fu_824_ap_idle,
      ap_ready      => grp_vect_compare_fu_824_ap_ready,
      v1_V_address0 => grp_vect_compare_fu_824_v1_V_address0,
      v1_V_ce0      => grp_vect_compare_fu_824_v1_V_ce0,
      v1_V_q0       => mc_V_q0,
      v1_V_offset   => grp_vect_compare_fu_824_v1_V_offset,
      v2_V_address0 => grp_vect_compare_fu_824_v2_V_address0,
      v2_V_ce0      => grp_vect_compare_fu_824_v2_V_ce0,
      v2_V_q0       => uv2_V_q0,
      v2_V_offset   => grp_vect_compare_fu_824_v2_V_offset,
      size_V_offset => grp_vect_compare_fu_824_size_V_offset,
      ap_return     => grp_vect_compare_fu_824_ap_return);

  grp_vect_set_random_fixe_1_fu_840 : component vect_set_random_fixe_1
    port map (
      ap_clk                                  => ap_clk,
      ap_rst                                  => ap_rst,
      ap_start                                => grp_vect_set_random_fixe_1_fu_840_ap_start,
      ap_done                                 => grp_vect_set_random_fixe_1_fu_840_ap_done,
      ap_idle                                 => grp_vect_set_random_fixe_1_fu_840_ap_idle,
      ap_ready                                => grp_vect_set_random_fixe_1_fu_840_ap_ready,
      v_V_address0                            => grp_vect_set_random_fixe_1_fu_840_v_V_address0,
      v_V_ce0                                 => grp_vect_set_random_fixe_1_fu_840_v_V_ce0,
      v_V_q0                                  => store_B_V_q0,
      v_V_address1                            => grp_vect_set_random_fixe_1_fu_840_v_V_address1,
      v_V_ce1                                 => grp_vect_set_random_fixe_1_fu_840_v_V_ce1,
      v_V_we1                                 => grp_vect_set_random_fixe_1_fu_840_v_V_we1,
      v_V_d1                                  => grp_vect_set_random_fixe_1_fu_840_v_V_d1,
      fixed_weight_by_coord_vector_V_address0 => grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0,
      fixed_weight_by_coord_vector_V_ce0      => grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0,
      fixed_weight_by_coord_vector_V_q0       => grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0);

  grp_vect_copyresize_1_fu_846 : component vect_copyresize_1
    port map (
      ap_clk       => ap_clk,
      ap_rst       => ap_rst,
      ap_start     => grp_vect_copyresize_1_fu_846_ap_start,
      ap_done      => grp_vect_copyresize_1_fu_846_ap_done,
      ap_idle      => grp_vect_copyresize_1_fu_846_ap_idle,
      ap_ready     => grp_vect_copyresize_1_fu_846_ap_ready,
      o_V_address1 => grp_vect_copyresize_1_fu_846_o_V_address1,
      o_V_ce1      => grp_vect_copyresize_1_fu_846_o_V_ce1,
      o_V_we1      => grp_vect_copyresize_1_fu_846_o_V_we1,
      o_V_d1       => grp_vect_copyresize_1_fu_846_o_V_d1,
      v_V_address0 => grp_vect_copyresize_1_fu_846_v_V_address0,
      v_V_ce0      => grp_vect_copyresize_1_fu_846_v_V_ce0,
      v_V_q0       => mc_V_q0);

  grp_vect_copyresize_2_fu_852 : component vect_copyresize_2
    port map (
      ap_clk       => ap_clk,
      ap_rst       => ap_rst,
      ap_start     => grp_vect_copyresize_2_fu_852_ap_start,
      ap_done      => grp_vect_copyresize_2_fu_852_ap_done,
      ap_idle      => grp_vect_copyresize_2_fu_852_ap_idle,
      ap_ready     => grp_vect_copyresize_2_fu_852_ap_ready,
      o_V_address1 => grp_vect_copyresize_2_fu_852_o_V_address1,
      o_V_ce1      => grp_vect_copyresize_2_fu_852_o_V_ce1,
      o_V_we1      => grp_vect_copyresize_2_fu_852_o_V_we1,
      o_V_d1       => grp_vect_copyresize_2_fu_852_o_V_d1,
      v_V_address0 => grp_vect_copyresize_2_fu_852_v_V_address0,
      v_V_ce0      => grp_vect_copyresize_2_fu_852_v_V_ce0,
      v_V_q0       => mc_V_q0);

  grp_vect_copyresize_mult_fu_858 : component vect_copyresize_mult
    port map (
      ap_clk       => ap_clk,
      ap_rst       => ap_rst,
      ap_start     => grp_vect_copyresize_mult_fu_858_ap_start,
      ap_done      => grp_vect_copyresize_mult_fu_858_ap_done,
      ap_idle      => grp_vect_copyresize_mult_fu_858_ap_idle,
      ap_ready     => grp_vect_copyresize_mult_fu_858_ap_ready,
      o_V_address1 => grp_vect_copyresize_mult_fu_858_o_V_address1,
      o_V_ce1      => grp_vect_copyresize_mult_fu_858_o_V_ce1,
      o_V_we1      => grp_vect_copyresize_mult_fu_858_o_V_we1,
      o_V_d1       => grp_vect_copyresize_mult_fu_858_o_V_d1,
      v_V_address0 => grp_vect_copyresize_mult_fu_858_v_V_address0,
      v_V_ce0      => grp_vect_copyresize_mult_fu_858_v_V_ce0,
      v_V_q0       => mc_V_q0);

  grp_vect_copyresize_fu_864 : component vect_copyresize
    port map (
      ap_clk       => ap_clk,
      ap_rst       => ap_rst,
      ap_start     => grp_vect_copyresize_fu_864_ap_start,
      ap_done      => grp_vect_copyresize_fu_864_ap_done,
      ap_idle      => grp_vect_copyresize_fu_864_ap_idle,
      ap_ready     => grp_vect_copyresize_fu_864_ap_ready,
      o_V_address1 => grp_vect_copyresize_fu_864_o_V_address1,
      o_V_ce1      => grp_vect_copyresize_fu_864_o_V_ce1,
      o_V_we1      => grp_vect_copyresize_fu_864_o_V_we1,
      o_V_d1       => grp_vect_copyresize_fu_864_o_V_d1,
      v_V_address0 => grp_vect_copyresize_fu_864_v_V_address0,
      v_V_ce0      => grp_vect_copyresize_fu_864_v_V_ce0,
      v_V_q0       => store_A_V_q0);

  grp_vect_compare_64_fu_871 : component vect_compare_64
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_vect_compare_64_fu_871_ap_start,
      ap_done       => grp_vect_compare_64_fu_871_ap_done,
      ap_idle       => grp_vect_compare_64_fu_871_ap_idle,
      ap_ready      => grp_vect_compare_64_fu_871_ap_ready,
      v1_V_address0 => grp_vect_compare_64_fu_871_v1_V_address0,
      v1_V_ce0      => grp_vect_compare_64_fu_871_v1_V_ce0,
      v1_V_q0       => d_V_q0,
      v2_V_address0 => grp_vect_compare_64_fu_871_v2_V_address0,
      v2_V_ce0      => grp_vect_compare_64_fu_871_v2_V_ce0,
      v2_V_q0       => theta_V_q0,
      ap_return     => grp_vect_compare_64_fu_871_ap_return);





  ap_CS_fsm_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_CS_fsm <= ap_ST_fsm_state1;
      else
        ap_CS_fsm <= ap_NS_fsm;
      end if;
    end if;
  end process;


  grp_hqc_ciphertext_from_s_fu_809_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_hqc_ciphertext_from_s_fu_809_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
          grp_hqc_ciphertext_from_s_fu_809_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_hqc_ciphertext_from_s_fu_809_ap_ready = ap_const_logic_1)) then
          grp_hqc_ciphertext_from_s_fu_809_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_hqc_public_key_from_s_fu_817_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_hqc_public_key_from_s_fu_817_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
          grp_hqc_public_key_from_s_fu_817_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_hqc_public_key_from_s_fu_817_ap_ready = ap_const_logic_1)) then
          grp_hqc_public_key_from_s_fu_817_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_reed_muller_decode_fu_803_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_reed_muller_decode_fu_803_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
          grp_reed_muller_decode_fu_803_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_reed_muller_decode_fu_803_ap_ready = ap_const_logic_1)) then
          grp_reed_muller_decode_fu_803_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_reed_muller_encode_fu_639_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_reed_muller_encode_fu_639_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
          grp_reed_muller_encode_fu_639_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_reed_muller_encode_fu_639_ap_ready = ap_const_logic_1)) then
          grp_reed_muller_encode_fu_639_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_reed_solomon_decode_fu_684_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_reed_solomon_decode_fu_684_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
          grp_reed_solomon_decode_fu_684_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_reed_solomon_decode_fu_684_ap_ready = ap_const_logic_1)) then
          grp_reed_solomon_decode_fu_684_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_reed_solomon_encode_fu_621_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_reed_solomon_encode_fu_621_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_1))) then
          grp_reed_solomon_encode_fu_621_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_reed_solomon_encode_fu_621_ap_ready = ap_const_logic_1)) then
          grp_reed_solomon_encode_fu_621_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_seedexpander_init_fu_783_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_seedexpander_init_fu_783_ap_start_reg <= ap_const_logic_0;
      else
        if ((((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln284_1_fu_894_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln284_fu_877_p2 = ap_const_lv1_1)))) then
          grp_seedexpander_init_fu_783_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_seedexpander_init_fu_783_ap_ready = ap_const_logic_1)) then
          grp_seedexpander_init_fu_783_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_seedexpander_mult_ty_fu_763_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_seedexpander_mult_ty_fu_763_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
          grp_seedexpander_mult_ty_fu_763_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_seedexpander_mult_ty_fu_763_ap_ready = ap_const_logic_1)) then
          grp_seedexpander_mult_ty_fu_763_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_shake256_512_ds_fu_733_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_shake256_512_ds_fu_733_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_1)))) then
          grp_shake256_512_ds_fu_733_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_shake256_512_ds_fu_733_ap_ready = ap_const_logic_1)) then
          grp_shake256_512_ds_fu_733_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_add_fu_667_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_add_fu_667_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
          grp_vect_add_fu_667_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_add_fu_667_ap_ready = ap_const_logic_1)) then
          grp_vect_add_fu_667_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_compare_64_fu_871_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_compare_64_fu_871_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
          grp_vect_compare_64_fu_871_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_compare_64_fu_871_ap_ready = ap_const_logic_1)) then
          grp_vect_compare_64_fu_871_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_compare_fu_824_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_compare_fu_824_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
          grp_vect_compare_fu_824_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_compare_fu_824_ap_ready = ap_const_logic_1)) then
          grp_vect_compare_fu_824_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_copyresize_1_fu_846_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_copyresize_1_fu_846_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
          grp_vect_copyresize_1_fu_846_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_copyresize_1_fu_846_ap_ready = ap_const_logic_1)) then
          grp_vect_copyresize_1_fu_846_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_copyresize_2_fu_852_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_copyresize_2_fu_852_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
          grp_vect_copyresize_2_fu_852_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_copyresize_2_fu_852_ap_ready = ap_const_logic_1)) then
          grp_vect_copyresize_2_fu_852_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_copyresize_fu_864_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_copyresize_fu_864_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
          grp_vect_copyresize_fu_864_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_copyresize_fu_864_ap_ready = ap_const_logic_1)) then
          grp_vect_copyresize_fu_864_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_copyresize_mult_fu_858_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_copyresize_mult_fu_858_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln284_fu_877_p2 = ap_const_lv1_1))) then
          grp_vect_copyresize_mult_fu_858_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_copyresize_mult_fu_858_ap_ready = ap_const_logic_1)) then
          grp_vect_copyresize_mult_fu_858_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_mul_add_fu_591_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_mul_add_fu_591_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
          grp_vect_mul_add_fu_591_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_mul_add_fu_591_ap_ready = ap_const_logic_1)) then
          grp_vect_mul_add_fu_591_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_set_random_fixe_1_fu_840_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_set_random_fixe_1_fu_840_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
          grp_vect_set_random_fixe_1_fu_840_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_set_random_fixe_1_fu_840_ap_ready = ap_const_logic_1)) then
          grp_vect_set_random_fixe_1_fu_840_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_set_random_fixe_fu_710_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_set_random_fixe_fu_710_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
          grp_vect_set_random_fixe_fu_710_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_set_random_fixe_fu_710_ap_ready = ap_const_logic_1)) then
          grp_vect_set_random_fixe_fu_710_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  i_0_i31_reg_546_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
        i_0_i31_reg_546 <= i_4_reg_1013;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
        i_0_i31_reg_546 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  i_0_i32_reg_557_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
        i_0_i32_reg_557 <= i_5_reg_1031;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_shake256_512_ds_fu_733_ap_done = ap_const_logic_1))) then
        i_0_i32_reg_557 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  i_0_i40_reg_569_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
        i_0_i40_reg_569 <= i_6_reg_1050;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
        i_0_i40_reg_569 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  i_0_i_reg_580_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
        i_0_i_reg_580 <= i_reg_1088;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_vect_compare_fu_824_ap_done = ap_const_logic_1))) then
        i_0_i_reg_580 <= ap_const_lv4_0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_boolean_0 = ap_block_state32_on_subcall_done))) then
        cmp_d_d2_reg_1065 <= grp_vect_compare_64_fu_871_ap_return;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_vect_compare_fu_824_ap_done = ap_const_logic_1))) then
        cmp_u_u2_reg_1070 <= grp_vect_compare_fu_824_ap_return;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
        i_4_reg_1013 <= i_4_fu_883_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
        i_5_reg_1031 <= i_5_fu_900_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
        i_6_reg_1050 <= i_6_fu_941_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
        i_reg_1088 <= i_fu_982_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_vect_compare_fu_824_ap_done = ap_const_logic_1))) then
        lhs_V_reg_1080  <= lhs_V_fu_968_p3;
        result_reg_1075 <= result_fu_957_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln390_fu_976_p2 = ap_const_lv1_0))) then
        ss_V_addr_reg_1093 <= zext_ln391_fu_988_p1(3 - 1 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_0))) then
        zext_ln285_2_reg_1055(2 downto 0) <= zext_ln285_2_fu_947_p1(2 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln284_fu_877_p2 = ap_const_lv1_0))) then
        zext_ln285_reg_1018(2 downto 0) <= zext_ln285_fu_889_p1(2 downto 0);
      end if;
    end if;
  end process;
  zext_ln285_reg_1018(63 downto 3)   <= "0000000000000000000000000000000000000000000000000000000000000";
  zext_ln285_2_reg_1055(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

  ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state4, icmp_ln284_fu_877_p2, ap_CS_fsm_state21, icmp_ln284_1_fu_894_p2, ap_CS_fsm_state28, icmp_ln284_2_fu_935_p2, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_ap_done, grp_shake256_512_ds_fu_733_ap_done, ap_block_state32_on_subcall_done, ap_CS_fsm_state46, grp_vect_compare_fu_824_ap_done, ap_CS_fsm_state48, ap_CS_fsm_state49, icmp_ln390_fu_976_p2, grp_vect_mul_add_fu_591_ap_done, grp_vect_add_fu_667_ap_done, grp_reed_solomon_decode_fu_684_ap_done, grp_seedexpander_mult_ty_fu_763_ap_done, grp_seedexpander_init_fu_783_ap_done, grp_reed_muller_decode_fu_803_ap_done, grp_vect_set_random_fixe_1_fu_840_ap_done, grp_vect_copyresize_1_fu_846_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state16, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state40, ap_CS_fsm_state34, ap_CS_fsm_state18, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done, ap_block_state30_on_subcall_done, ap_block_state38_on_subcall_done, ap_block_state40_on_subcall_done, ap_block_state42_on_subcall_done)
  begin
    case ap_CS_fsm is
      when ap_ST_fsm_state1 =>
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state1;
        end if;
      when ap_ST_fsm_state2 =>
        ap_NS_fsm <= ap_ST_fsm_state3;
      when ap_ST_fsm_state3 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state4;
        else
          ap_NS_fsm <= ap_ST_fsm_state3;
        end if;
      when ap_ST_fsm_state4 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln284_fu_877_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state6;
        else
          ap_NS_fsm <= ap_ST_fsm_state5;
        end if;
      when ap_ST_fsm_state5 =>
        ap_NS_fsm <= ap_ST_fsm_state4;
      when ap_ST_fsm_state6 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state7;
        else
          ap_NS_fsm <= ap_ST_fsm_state6;
        end if;
      when ap_ST_fsm_state7 =>
        ap_NS_fsm <= ap_ST_fsm_state8;
      when ap_ST_fsm_state8 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state9;
        else
          ap_NS_fsm <= ap_ST_fsm_state8;
        end if;
      when ap_ST_fsm_state9 =>
        ap_NS_fsm <= ap_ST_fsm_state10;
      when ap_ST_fsm_state10 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_vect_set_random_fixe_fu_710_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state11;
        else
          ap_NS_fsm <= ap_ST_fsm_state10;
        end if;
      when ap_ST_fsm_state11 =>
        ap_NS_fsm <= ap_ST_fsm_state12;
      when ap_ST_fsm_state12 =>
        if (((grp_vect_mul_add_fu_591_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
          ap_NS_fsm <= ap_ST_fsm_state13;
        else
          ap_NS_fsm <= ap_ST_fsm_state12;
        end if;
      when ap_ST_fsm_state13 =>
        ap_NS_fsm <= ap_ST_fsm_state14;
      when ap_ST_fsm_state14 =>
        if (((grp_reed_muller_decode_fu_803_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
          ap_NS_fsm <= ap_ST_fsm_state15;
        else
          ap_NS_fsm <= ap_ST_fsm_state14;
        end if;
      when ap_ST_fsm_state15 =>
        ap_NS_fsm <= ap_ST_fsm_state16;
      when ap_ST_fsm_state16 =>
        if (((grp_reed_solomon_decode_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
          ap_NS_fsm <= ap_ST_fsm_state17;
        else
          ap_NS_fsm <= ap_ST_fsm_state16;
        end if;
      when ap_ST_fsm_state17 =>
        ap_NS_fsm <= ap_ST_fsm_state18;
      when ap_ST_fsm_state18 =>
        if (((grp_vect_copyresize_1_fu_846_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
          ap_NS_fsm <= ap_ST_fsm_state19;
        else
          ap_NS_fsm <= ap_ST_fsm_state18;
        end if;
      when ap_ST_fsm_state19 =>
        ap_NS_fsm <= ap_ST_fsm_state20;
      when ap_ST_fsm_state20 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_shake256_512_ds_fu_733_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state21;
        else
          ap_NS_fsm <= ap_ST_fsm_state20;
        end if;
      when ap_ST_fsm_state21 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln284_1_fu_894_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state23;
        else
          ap_NS_fsm <= ap_ST_fsm_state22;
        end if;
      when ap_ST_fsm_state22 =>
        ap_NS_fsm <= ap_ST_fsm_state21;
      when ap_ST_fsm_state23 =>
        if (((grp_seedexpander_init_fu_783_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
          ap_NS_fsm <= ap_ST_fsm_state24;
        else
          ap_NS_fsm <= ap_ST_fsm_state23;
        end if;
      when ap_ST_fsm_state24 =>
        ap_NS_fsm <= ap_ST_fsm_state25;
      when ap_ST_fsm_state25 =>
        if (((grp_seedexpander_mult_ty_fu_763_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
          ap_NS_fsm <= ap_ST_fsm_state26;
        else
          ap_NS_fsm <= ap_ST_fsm_state25;
        end if;
      when ap_ST_fsm_state26 =>
        ap_NS_fsm <= ap_ST_fsm_state27;
      when ap_ST_fsm_state27 =>
        ap_NS_fsm <= ap_ST_fsm_state28;
      when ap_ST_fsm_state28 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state30;
        else
          ap_NS_fsm <= ap_ST_fsm_state29;
        end if;
      when ap_ST_fsm_state29 =>
        ap_NS_fsm <= ap_ST_fsm_state28;
      when ap_ST_fsm_state30 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state31;
        else
          ap_NS_fsm <= ap_ST_fsm_state30;
        end if;
      when ap_ST_fsm_state31 =>
        ap_NS_fsm <= ap_ST_fsm_state32;
      when ap_ST_fsm_state32 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_boolean_0 = ap_block_state32_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state33;
        else
          ap_NS_fsm <= ap_ST_fsm_state32;
        end if;
      when ap_ST_fsm_state33 =>
        ap_NS_fsm <= ap_ST_fsm_state34;
      when ap_ST_fsm_state34 =>
        if (((grp_vect_set_random_fixe_1_fu_840_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
          ap_NS_fsm <= ap_ST_fsm_state35;
        else
          ap_NS_fsm <= ap_ST_fsm_state34;
        end if;
      when ap_ST_fsm_state35 =>
        ap_NS_fsm <= ap_ST_fsm_state36;
      when ap_ST_fsm_state36 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_vect_set_random_fixe_fu_710_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state37;
        else
          ap_NS_fsm <= ap_ST_fsm_state36;
        end if;
      when ap_ST_fsm_state37 =>
        ap_NS_fsm <= ap_ST_fsm_state38;
      when ap_ST_fsm_state38 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_boolean_0 = ap_block_state38_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state39;
        else
          ap_NS_fsm <= ap_ST_fsm_state38;
        end if;
      when ap_ST_fsm_state39 =>
        ap_NS_fsm <= ap_ST_fsm_state40;
      when ap_ST_fsm_state40 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state41;
        else
          ap_NS_fsm <= ap_ST_fsm_state40;
        end if;
      when ap_ST_fsm_state41 =>
        ap_NS_fsm <= ap_ST_fsm_state42;
      when ap_ST_fsm_state42 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_on_subcall_done))) then
          ap_NS_fsm <= ap_ST_fsm_state43;
        else
          ap_NS_fsm <= ap_ST_fsm_state42;
        end if;
      when ap_ST_fsm_state43 =>
        ap_NS_fsm <= ap_ST_fsm_state44;
      when ap_ST_fsm_state44 =>
        if (((grp_vect_add_fu_667_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
          ap_NS_fsm <= ap_ST_fsm_state45;
        else
          ap_NS_fsm <= ap_ST_fsm_state44;
        end if;
      when ap_ST_fsm_state45 =>
        ap_NS_fsm <= ap_ST_fsm_state46;
      when ap_ST_fsm_state46 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_vect_compare_fu_824_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state47;
        else
          ap_NS_fsm <= ap_ST_fsm_state46;
        end if;
      when ap_ST_fsm_state47 =>
        ap_NS_fsm <= ap_ST_fsm_state48;
      when ap_ST_fsm_state48 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_vect_compare_fu_824_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state49;
        else
          ap_NS_fsm <= ap_ST_fsm_state48;
        end if;
      when ap_ST_fsm_state49 =>
        if (((icmp_ln390_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
          ap_NS_fsm <= ap_ST_fsm_state1;
        else
          ap_NS_fsm <= ap_ST_fsm_state50;
        end if;
      when ap_ST_fsm_state50 =>
        ap_NS_fsm <= ap_ST_fsm_state49;
      when others =>
        ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end case;
  end process;
  add_ln321_fu_910_p2 <= std_logic_vector(unsigned(zext_ln321_fu_906_p1) + unsigned(ap_const_lv4_5));
  ap_CS_fsm_state1    <= ap_CS_fsm(0);
  ap_CS_fsm_state10   <= ap_CS_fsm(9);
  ap_CS_fsm_state11   <= ap_CS_fsm(10);
  ap_CS_fsm_state12   <= ap_CS_fsm(11);
  ap_CS_fsm_state13   <= ap_CS_fsm(12);
  ap_CS_fsm_state14   <= ap_CS_fsm(13);
  ap_CS_fsm_state15   <= ap_CS_fsm(14);
  ap_CS_fsm_state16   <= ap_CS_fsm(15);
  ap_CS_fsm_state17   <= ap_CS_fsm(16);
  ap_CS_fsm_state18   <= ap_CS_fsm(17);
  ap_CS_fsm_state19   <= ap_CS_fsm(18);
  ap_CS_fsm_state2    <= ap_CS_fsm(1);
  ap_CS_fsm_state20   <= ap_CS_fsm(19);
  ap_CS_fsm_state21   <= ap_CS_fsm(20);
  ap_CS_fsm_state22   <= ap_CS_fsm(21);
  ap_CS_fsm_state23   <= ap_CS_fsm(22);
  ap_CS_fsm_state24   <= ap_CS_fsm(23);
  ap_CS_fsm_state25   <= ap_CS_fsm(24);
  ap_CS_fsm_state26   <= ap_CS_fsm(25);
  ap_CS_fsm_state27   <= ap_CS_fsm(26);
  ap_CS_fsm_state28   <= ap_CS_fsm(27);
  ap_CS_fsm_state29   <= ap_CS_fsm(28);
  ap_CS_fsm_state3    <= ap_CS_fsm(2);
  ap_CS_fsm_state30   <= ap_CS_fsm(29);
  ap_CS_fsm_state31   <= ap_CS_fsm(30);
  ap_CS_fsm_state32   <= ap_CS_fsm(31);
  ap_CS_fsm_state33   <= ap_CS_fsm(32);
  ap_CS_fsm_state34   <= ap_CS_fsm(33);
  ap_CS_fsm_state35   <= ap_CS_fsm(34);
  ap_CS_fsm_state36   <= ap_CS_fsm(35);
  ap_CS_fsm_state37   <= ap_CS_fsm(36);
  ap_CS_fsm_state38   <= ap_CS_fsm(37);
  ap_CS_fsm_state39   <= ap_CS_fsm(38);
  ap_CS_fsm_state4    <= ap_CS_fsm(3);
  ap_CS_fsm_state40   <= ap_CS_fsm(39);
  ap_CS_fsm_state41   <= ap_CS_fsm(40);
  ap_CS_fsm_state42   <= ap_CS_fsm(41);
  ap_CS_fsm_state43   <= ap_CS_fsm(42);
  ap_CS_fsm_state44   <= ap_CS_fsm(43);
  ap_CS_fsm_state45   <= ap_CS_fsm(44);
  ap_CS_fsm_state46   <= ap_CS_fsm(45);
  ap_CS_fsm_state47   <= ap_CS_fsm(46);
  ap_CS_fsm_state48   <= ap_CS_fsm(47);
  ap_CS_fsm_state49   <= ap_CS_fsm(48);
  ap_CS_fsm_state5    <= ap_CS_fsm(4);
  ap_CS_fsm_state50   <= ap_CS_fsm(49);
  ap_CS_fsm_state6    <= ap_CS_fsm(5);
  ap_CS_fsm_state7    <= ap_CS_fsm(6);
  ap_CS_fsm_state8    <= ap_CS_fsm(7);
  ap_CS_fsm_state9    <= ap_CS_fsm(8);

  ap_block_state30_on_subcall_done_assign_proc : process(grp_shake256_512_ds_fu_733_ap_done, grp_reed_solomon_encode_fu_621_ap_done, grp_seedexpander_init_fu_783_ap_done)
  begin
    ap_block_state30_on_subcall_done <= ((grp_seedexpander_init_fu_783_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_621_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_733_ap_done = ap_const_logic_0));
  end process;


  ap_block_state32_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_710_ap_done, grp_shake256_512_ds_fu_733_ap_done, grp_vect_compare_64_fu_871_ap_done)
  begin
    ap_block_state32_on_subcall_done <= ((grp_vect_compare_64_fu_871_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_733_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_710_ap_done = ap_const_logic_0));
  end process;


  ap_block_state38_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_710_ap_done, grp_vect_mul_add_fu_591_ap_done)
  begin
    ap_block_state38_on_subcall_done <= ((grp_vect_mul_add_fu_591_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_710_ap_done = ap_const_logic_0));
  end process;


  ap_block_state40_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_s_fu_817_ap_done, grp_vect_set_random_fixe_1_fu_840_ap_done, grp_vect_copyresize_fu_864_ap_done)
  begin
    ap_block_state40_on_subcall_done <= ((grp_vect_copyresize_fu_864_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_840_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_s_fu_817_ap_done = ap_const_logic_0));
  end process;


  ap_block_state42_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_591_ap_done, grp_reed_muller_encode_fu_639_ap_done)
  begin
    ap_block_state42_on_subcall_done <= ((grp_reed_muller_encode_fu_639_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_591_ap_done = ap_const_logic_0));
  end process;


  ap_block_state6_on_subcall_done_assign_proc : process(grp_seedexpander_init_fu_783_ap_done, grp_vect_copyresize_mult_fu_858_ap_done)
  begin
    ap_block_state6_on_subcall_done <= ((grp_vect_copyresize_mult_fu_858_ap_done = ap_const_logic_0) or (grp_seedexpander_init_fu_783_ap_done = ap_const_logic_0));
  end process;


  ap_block_state8_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_710_ap_done, grp_vect_copyresize_2_fu_852_ap_done)
  begin
    ap_block_state8_on_subcall_done <= ((grp_vect_copyresize_2_fu_852_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_710_ap_done = ap_const_logic_0));
  end process;


  ap_done_assign_proc : process(ap_CS_fsm_state49, icmp_ln390_fu_976_p2)
  begin
    if (((icmp_ln390_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
      ap_done <= ap_const_logic_1;
    else
      ap_done <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
  begin
    if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      ap_idle <= ap_const_logic_1;
    else
      ap_idle <= ap_const_logic_0;
    end if;
  end process;


  ap_ready_assign_proc : process(ap_CS_fsm_state49, icmp_ln390_fu_976_p2)
  begin
    if (((icmp_ln390_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
      ap_ready <= ap_const_logic_1;
    else
      ap_ready <= ap_const_logic_0;
    end if;
  end process;

  ap_return     <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_reg_1075), 32));
  ct_V_address0 <= grp_hqc_ciphertext_from_s_fu_809_ct_V_address0;
  ct_V_ce0      <= grp_hqc_ciphertext_from_s_fu_809_ct_V_ce0;

  d_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state32, grp_hqc_ciphertext_from_s_fu_809_d_V_address0, grp_vect_compare_64_fu_871_v1_V_address0)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      d_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      d_V_address0 <= grp_vect_compare_64_fu_871_v1_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      d_V_address0 <= grp_hqc_ciphertext_from_s_fu_809_d_V_address0;
    else
      d_V_address0 <= "XXX";
    end if;
  end process;


  d_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state32, grp_hqc_ciphertext_from_s_fu_809_d_V_ce0, grp_vect_compare_64_fu_871_v1_V_ce0)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      d_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      d_V_ce0 <= grp_vect_compare_64_fu_871_v1_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      d_V_ce0 <= grp_hqc_ciphertext_from_s_fu_809_d_V_ce0;
    else
      d_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  d_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_d_V_d0)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      d_V_d0 <= ap_const_lv64_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      d_V_d0 <= grp_hqc_ciphertext_from_s_fu_809_d_V_d0;
    else
      d_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  d_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_d_V_we0)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      d_V_we0 <= ap_const_lv8_FF;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      d_V_we0 <= grp_hqc_ciphertext_from_s_fu_809_d_V_we0;
    else
      d_V_we0 <= ap_const_lv8_0;
    end if;
  end process;

  grp_hqc_ciphertext_from_s_fu_809_ap_start <= grp_hqc_ciphertext_from_s_fu_809_ap_start_reg;
  grp_hqc_public_key_from_s_fu_817_ap_start <= grp_hqc_public_key_from_s_fu_817_ap_start_reg;
  grp_reed_muller_decode_fu_803_ap_start    <= grp_reed_muller_decode_fu_803_ap_start_reg;
  grp_reed_muller_encode_fu_639_ap_start    <= grp_reed_muller_encode_fu_639_ap_start_reg;
  grp_reed_solomon_decode_fu_684_ap_start   <= grp_reed_solomon_decode_fu_684_ap_start_reg;
  grp_reed_solomon_encode_fu_621_ap_start   <= grp_reed_solomon_encode_fu_621_ap_start_reg;
  grp_seedexpander_init_fu_783_ap_start     <= grp_seedexpander_init_fu_783_ap_start_reg;
  grp_seedexpander_mult_ty_fu_763_ap_start  <= grp_seedexpander_mult_ty_fu_763_ap_start_reg;
  grp_shake256_512_ds_fu_733_ap_start       <= grp_shake256_512_ds_fu_733_ap_start_reg;

  grp_shake256_512_ds_fu_733_domain_V_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      grp_shake256_512_ds_fu_733_domain_V <= ap_const_lv4_5;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      grp_shake256_512_ds_fu_733_domain_V <= ap_const_lv4_4;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then
      grp_shake256_512_ds_fu_733_domain_V <= ap_const_lv4_3;
    else
      grp_shake256_512_ds_fu_733_domain_V <= "XXXX";
    end if;
  end process;


  grp_shake256_512_ds_fu_733_inlen_V_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      grp_shake256_512_ds_fu_733_inlen_V <= ap_const_lv14_1151;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
      grp_shake256_512_ds_fu_733_inlen_V <= ap_const_lv14_10;
    else
      grp_shake256_512_ds_fu_733_inlen_V <= "XXXXXXXXXXXXXX";
    end if;
  end process;

  grp_vect_add_fu_667_ap_start        <= grp_vect_add_fu_667_ap_start_reg;
  grp_vect_compare_64_fu_871_ap_start <= grp_vect_compare_64_fu_871_ap_start_reg;
  grp_vect_compare_fu_824_ap_start    <= grp_vect_compare_fu_824_ap_start_reg;

  grp_vect_compare_fu_824_size_V_offset_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state48)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
      grp_vect_compare_fu_824_size_V_offset <= ap_const_lv12_8A0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then
      grp_vect_compare_fu_824_size_V_offset <= ap_const_lv12_8A1;
    else
      grp_vect_compare_fu_824_size_V_offset <= "XXXXXXXXXXXX";
    end if;
  end process;


  grp_vect_compare_fu_824_v1_V_offset_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state48)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
      grp_vect_compare_fu_824_v1_V_offset <= ap_const_lv13_8B1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then
      grp_vect_compare_fu_824_v1_V_offset <= ap_const_lv13_10;
    else
      grp_vect_compare_fu_824_v1_V_offset <= "XXXXXXXXXXXXX";
    end if;
  end process;


  grp_vect_compare_fu_824_v2_V_offset_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state48)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
      grp_vect_compare_fu_824_v2_V_offset <= ap_const_lv13_8B1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then
      grp_vect_compare_fu_824_v2_V_offset <= ap_const_lv13_10;
    else
      grp_vect_compare_fu_824_v2_V_offset <= "XXXXXXXXXXXXX";
    end if;
  end process;

  grp_vect_copyresize_1_fu_846_ap_start    <= grp_vect_copyresize_1_fu_846_ap_start_reg;
  grp_vect_copyresize_2_fu_852_ap_start    <= grp_vect_copyresize_2_fu_852_ap_start_reg;
  grp_vect_copyresize_fu_864_ap_start      <= grp_vect_copyresize_fu_864_ap_start_reg;
  grp_vect_copyresize_mult_fu_858_ap_start <= grp_vect_copyresize_mult_fu_858_ap_start_reg;
  grp_vect_mul_add_fu_591_ap_start         <= grp_vect_mul_add_fu_591_ap_start_reg;

  grp_vect_mul_add_fu_591_weight_V_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
      grp_vect_mul_add_fu_591_weight_V <= ap_const_lv8_4B;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      grp_vect_mul_add_fu_591_weight_V <= ap_const_lv8_42;
    else
      grp_vect_mul_add_fu_591_weight_V <= "XXXXXXXX";
    end if;
  end process;

  grp_vect_set_random_fixe_1_fu_840_ap_start <= grp_vect_set_random_fixe_1_fu_840_ap_start_reg;

  grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0 <= random_vector_B_V_q0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then
      grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0 <= random_vector_A_V_q0;
    else
      grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_q0 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;

  grp_vect_set_random_fixe_fu_710_ap_start <= grp_vect_set_random_fixe_fu_710_ap_start_reg;

  grp_vect_set_random_fixe_fu_710_v_V_q0_assign_proc : process(ap_CS_fsm_state32, random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state38, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      grp_vect_set_random_fixe_fu_710_v_V_q0 <= random_vector_B_V_q0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      grp_vect_set_random_fixe_fu_710_v_V_q0 <= random_vector_A_V_q0;
    else
      grp_vect_set_random_fixe_fu_710_v_V_q0 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  grp_vect_set_random_fixe_fu_710_weight_V_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      grp_vect_set_random_fixe_fu_710_weight_V <= ap_const_lv7_4B;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
      grp_vect_set_random_fixe_fu_710_weight_V <= ap_const_lv7_42;
    else
      grp_vect_set_random_fixe_fu_710_weight_V <= "XXXXXXX";
    end if;
  end process;


  h_s_V_address0_assign_proc : process(ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
      h_s_V_address0 <= ap_const_lv64_8A0(12 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_address0 <= grp_vect_mul_add_fu_591_a2_V_address0;
    else
      h_s_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  h_s_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_address1, grp_seedexpander_mult_ty_fu_763_output_V_address1, grp_hqc_public_key_from_s_fu_817_s_V_address1, grp_vect_copyresize_mult_fu_858_o_V_address1, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
      h_s_V_address1 <= ap_const_lv64_8A0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then
      h_s_V_address1 <= ap_const_lv64_8A1(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      h_s_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      h_s_V_address1 <= grp_vect_copyresize_mult_fu_858_o_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      h_s_V_address1 <= grp_hqc_public_key_from_s_fu_817_s_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      h_s_V_address1 <= grp_seedexpander_mult_ty_fu_763_output_V_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_address1 <= grp_vect_mul_add_fu_591_a2_V_address1;
    else
      h_s_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  h_s_V_ce0_assign_proc : process(ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
      h_s_V_ce0 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_ce0 <= grp_vect_mul_add_fu_591_a2_V_ce0;
    else
      h_s_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  h_s_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_ce1, grp_seedexpander_mult_ty_fu_763_output_V_ce1, grp_hqc_public_key_from_s_fu_817_s_V_ce1, grp_vect_copyresize_mult_fu_858_o_V_ce1, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state40)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1)))) then
      h_s_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      h_s_V_ce1 <= grp_vect_copyresize_mult_fu_858_o_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      h_s_V_ce1 <= grp_hqc_public_key_from_s_fu_817_s_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      h_s_V_ce1 <= grp_seedexpander_mult_ty_fu_763_output_V_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_ce1 <= grp_vect_mul_add_fu_591_a2_V_ce1;
    else
      h_s_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  h_s_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_d1, grp_seedexpander_mult_ty_fu_763_output_V_d1, grp_hqc_public_key_from_s_fu_817_s_V_d1, grp_vect_copyresize_mult_fu_858_o_V_d1, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state40, zext_ln717_fu_930_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
      h_s_V_d1 <= zext_ln717_fu_930_p1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
      h_s_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      h_s_V_d1 <= grp_vect_copyresize_mult_fu_858_o_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      h_s_V_d1 <= grp_hqc_public_key_from_s_fu_817_s_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      h_s_V_d1 <= grp_seedexpander_mult_ty_fu_763_output_V_d1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_d1 <= grp_vect_mul_add_fu_591_a2_V_d1;
    else
      h_s_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  h_s_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state26, grp_vect_mul_add_fu_591_a2_V_we1, grp_seedexpander_mult_ty_fu_763_output_V_we1, grp_hqc_public_key_from_s_fu_817_s_V_we1, grp_vect_copyresize_mult_fu_858_o_V_we1, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state40)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1)))) then
      h_s_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      h_s_V_we1 <= grp_vect_copyresize_mult_fu_858_o_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      h_s_V_we1 <= grp_hqc_public_key_from_s_fu_817_s_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      h_s_V_we1 <= grp_seedexpander_mult_ty_fu_763_output_V_we1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      h_s_V_we1 <= grp_vect_mul_add_fu_591_a2_V_we1;
    else
      h_s_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  i_4_fu_883_p2          <= std_logic_vector(unsigned(i_0_i31_reg_546) + unsigned(ap_const_lv3_1));
  i_5_fu_900_p2          <= std_logic_vector(unsigned(i_0_i32_reg_557) + unsigned(ap_const_lv3_1));
  i_6_fu_941_p2          <= std_logic_vector(unsigned(i_0_i40_reg_569) + unsigned(ap_const_lv3_1));
  i_fu_982_p2            <= std_logic_vector(unsigned(i_0_i_reg_580) + unsigned(ap_const_lv4_1));
  icmp_ln284_1_fu_894_p2 <= "1" when (i_0_i32_reg_557 = ap_const_lv3_5) else "0";
  icmp_ln284_2_fu_935_p2 <= "1" when (i_0_i40_reg_569 = ap_const_lv3_5) else "0";
  icmp_ln284_fu_877_p2   <= "1" when (i_0_i31_reg_546 = ap_const_lv3_5) else "0";
  icmp_ln390_fu_976_p2   <= "1" when (i_0_i_reg_580 = ap_const_lv4_8)   else "0";
  lhs_V_fu_968_p3 <=
    ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln1355_fu_962_p2(0) = '1') else
    ap_const_lv64_0;

  mc_V_address0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state48, grp_shake256_512_ds_fu_733_input_V_address0, grp_vect_compare_fu_824_v1_V_address0, grp_vect_copyresize_1_fu_846_v_V_address0, grp_vect_copyresize_2_fu_852_v_V_address0, grp_vect_copyresize_mult_fu_858_v_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state18)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      mc_V_address0 <= grp_vect_copyresize_mult_fu_858_v_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      mc_V_address0 <= grp_vect_copyresize_2_fu_852_v_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      mc_V_address0 <= grp_vect_copyresize_1_fu_846_v_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
      mc_V_address0 <= grp_vect_compare_fu_824_v1_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      mc_V_address0 <= grp_shake256_512_ds_fu_733_input_V_address0;
    else
      mc_V_address0 <= "XXXXXXXXXXXXX";
    end if;
  end process;


  mc_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state32, grp_reed_solomon_decode_fu_684_msg_V_address1, grp_shake256_512_ds_fu_733_input_V_address1, grp_hqc_ciphertext_from_s_fu_809_u_V_address1, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state16)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      mc_V_address1 <= ap_const_lv64_0(13 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      mc_V_address1 <= grp_hqc_ciphertext_from_s_fu_809_u_V_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      mc_V_address1 <= grp_shake256_512_ds_fu_733_input_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      mc_V_address1 <= grp_reed_solomon_decode_fu_684_msg_V_address1;
    else
      mc_V_address1 <= "XXXXXXXXXXXXX";
    end if;
  end process;


  mc_V_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state48, grp_shake256_512_ds_fu_733_input_V_ce0, grp_vect_compare_fu_824_v1_V_ce0, grp_vect_copyresize_1_fu_846_v_V_ce0, grp_vect_copyresize_2_fu_852_v_V_ce0, grp_vect_copyresize_mult_fu_858_v_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state18)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      mc_V_ce0 <= grp_vect_copyresize_mult_fu_858_v_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      mc_V_ce0 <= grp_vect_copyresize_2_fu_852_v_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      mc_V_ce0 <= grp_vect_copyresize_1_fu_846_v_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
      mc_V_ce0 <= grp_vect_compare_fu_824_v1_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      mc_V_ce0 <= grp_shake256_512_ds_fu_733_input_V_ce0;
    else
      mc_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  mc_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state32, grp_reed_solomon_decode_fu_684_msg_V_ce1, grp_shake256_512_ds_fu_733_input_V_ce1, grp_hqc_ciphertext_from_s_fu_809_u_V_ce1, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state16)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      mc_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      mc_V_ce1 <= grp_hqc_ciphertext_from_s_fu_809_u_V_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      mc_V_ce1 <= grp_shake256_512_ds_fu_733_input_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      mc_V_ce1 <= grp_reed_solomon_decode_fu_684_msg_V_ce1;
    else
      mc_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  mc_V_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_reed_solomon_decode_fu_684_msg_V_d1, grp_hqc_ciphertext_from_s_fu_809_u_V_d1, ap_CS_fsm_state16)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      mc_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      mc_V_d1 <= grp_hqc_ciphertext_from_s_fu_809_u_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      mc_V_d1 <= grp_reed_solomon_decode_fu_684_msg_V_d1;
    else
      mc_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  mc_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_reed_solomon_decode_fu_684_msg_V_we1, grp_hqc_ciphertext_from_s_fu_809_u_V_we1, ap_CS_fsm_state16)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      mc_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      mc_V_we1 <= grp_hqc_ciphertext_from_s_fu_809_u_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      mc_V_we1 <= grp_reed_solomon_decode_fu_684_msg_V_we1;
    else
      mc_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  or_ln387_fu_952_p2 <= (grp_vect_compare_fu_824_ap_return or cmp_u_u2_reg_1070);

  random_vector_A_V_address0_assign_proc : process(ap_CS_fsm_state32, grp_vect_mul_add_fu_591_a1_V_address0, grp_vect_set_random_fixe_fu_710_v_V_address0, grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state34)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
      random_vector_A_V_address0 <= grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_address0 <= grp_vect_set_random_fixe_fu_710_v_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      random_vector_A_V_address0 <= grp_vect_mul_add_fu_591_a1_V_address0;
    else
      random_vector_A_V_address0 <= "XXXXXXX";
    end if;
  end process;


  random_vector_A_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_v_V_address1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      random_vector_A_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_address1 <= grp_vect_set_random_fixe_fu_710_v_V_address1;
    else
      random_vector_A_V_address1 <= "XXXXXXX";
    end if;
  end process;


  random_vector_A_V_ce0_assign_proc : process(ap_CS_fsm_state32, grp_vect_mul_add_fu_591_a1_V_ce0, grp_vect_set_random_fixe_fu_710_v_V_ce0, grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state34)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
      random_vector_A_V_ce0 <= grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_ce0 <= grp_vect_set_random_fixe_fu_710_v_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      random_vector_A_V_ce0 <= grp_vect_mul_add_fu_591_a1_V_ce0;
    else
      random_vector_A_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_A_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_v_V_ce1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      random_vector_A_V_ce1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_ce1 <= grp_vect_set_random_fixe_fu_710_v_V_ce1;
    else
      random_vector_A_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_A_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_v_V_d1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      random_vector_A_V_d1 <= ap_const_lv15_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_d1 <= grp_vect_set_random_fixe_fu_710_v_V_d1;
    else
      random_vector_A_V_d1 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  random_vector_A_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_v_V_we1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      random_vector_A_V_we1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      random_vector_A_V_we1 <= grp_vect_set_random_fixe_fu_710_v_V_we1;
    else
      random_vector_A_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_address0_assign_proc : process(grp_vect_set_random_fixe_fu_710_v_V_address0, grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state38, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      random_vector_B_V_address0 <= grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_address0 <= grp_vect_set_random_fixe_fu_710_v_V_address0;
    else
      random_vector_B_V_address0 <= "XXXXXXX";
    end if;
  end process;


  random_vector_B_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_fu_710_v_V_address1, ap_CS_fsm_state38)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      random_vector_B_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_address1 <= grp_vect_set_random_fixe_fu_710_v_V_address1;
    else
      random_vector_B_V_address1 <= "XXXXXXX";
    end if;
  end process;


  random_vector_B_V_ce0_assign_proc : process(grp_vect_set_random_fixe_fu_710_v_V_ce0, grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state38, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      random_vector_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_840_fixed_weight_by_coord_vector_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_ce0 <= grp_vect_set_random_fixe_fu_710_v_V_ce0;
    else
      random_vector_B_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_set_random_fixe_fu_710_v_V_ce1, ap_CS_fsm_state38)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      random_vector_B_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_ce1 <= grp_vect_set_random_fixe_fu_710_v_V_ce1;
    else
      random_vector_B_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_fu_710_v_V_d1, ap_CS_fsm_state38)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      random_vector_B_V_d1 <= ap_const_lv15_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_d1 <= grp_vect_set_random_fixe_fu_710_v_V_d1;
    else
      random_vector_B_V_d1 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  random_vector_B_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_set_random_fixe_fu_710_v_V_we1, ap_CS_fsm_state38)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      random_vector_B_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then
      random_vector_B_V_we1 <= grp_vect_set_random_fixe_fu_710_v_V_we1;
    else
      random_vector_B_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  result_fu_957_p2 <= (or_ln387_fu_952_p2 or cmp_d_d2_reg_1065);
  ret_V_fu_996_p2  <= (ss_V_q0 and lhs_V_reg_1080);

  sk_V_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln285_fu_889_p1, ap_CS_fsm_state21, grp_hqc_public_key_from_s_fu_817_pk_V_address0, ap_CS_fsm_state40, zext_ln321_6_fu_916_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      sk_V_address0 <= zext_ln321_6_fu_916_p1(9 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then
      sk_V_address0 <= zext_ln285_fu_889_p1(9 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      sk_V_address0 <= grp_hqc_public_key_from_s_fu_817_pk_V_address0;
    else
      sk_V_address0 <= "XXXXXXXXX";
    end if;
  end process;


  sk_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, grp_hqc_public_key_from_s_fu_817_pk_V_ce0, ap_CS_fsm_state40)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
      sk_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      sk_V_ce0 <= grp_hqc_public_key_from_s_fu_817_pk_V_ce0;
    else
      sk_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  ss_V_address0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state49, ss_V_addr_reg_1093, grp_shake256_512_ds_fu_733_output_V_address0, ap_CS_fsm_state50, zext_ln391_fu_988_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
      ss_V_address0 <= ss_V_addr_reg_1093;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then
      ss_V_address0 <= zext_ln391_fu_988_p1(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      ss_V_address0 <= grp_shake256_512_ds_fu_733_output_V_address0;
    else
      ss_V_address0 <= "XXX";
    end if;
  end process;


  ss_V_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state49, grp_shake256_512_ds_fu_733_output_V_ce0, ap_CS_fsm_state50)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
      ss_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      ss_V_ce0 <= grp_shake256_512_ds_fu_733_output_V_ce0;
    else
      ss_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  ss_V_d0_assign_proc : process(ap_CS_fsm_state32, grp_shake256_512_ds_fu_733_output_V_d0, ap_CS_fsm_state50, ret_V_fu_996_p2)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
      ss_V_d0 <= ret_V_fu_996_p2;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      ss_V_d0 <= grp_shake256_512_ds_fu_733_output_V_d0;
    else
      ss_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  ss_V_we0_assign_proc : process(ap_CS_fsm_state32, grp_shake256_512_ds_fu_733_output_V_we0, ap_CS_fsm_state50)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
      ss_V_we0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      ss_V_we0 <= grp_shake256_512_ds_fu_733_output_V_we0;
    else
      ss_V_we0 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address0, grp_seedexpander_mult_ty_fu_763_state_V_2_address0, grp_seedexpander_init_fu_783_state_V_2_address0, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_address0 <= grp_seedexpander_init_fu_783_state_V_2_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_address0 <= grp_seedexpander_mult_ty_fu_763_state_V_2_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_address0 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address0;
    else
      state_seedexpander_V_address0 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address1, grp_seedexpander_mult_ty_fu_763_state_V_2_address1, grp_seedexpander_init_fu_783_state_V_2_address1, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_seedexpander_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_address1 <= grp_seedexpander_init_fu_783_state_V_2_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_address1 <= grp_seedexpander_mult_ty_fu_763_state_V_2_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_address1 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_address1;
    else
      state_seedexpander_V_address1 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce0, grp_seedexpander_mult_ty_fu_763_state_V_2_ce0, grp_seedexpander_init_fu_783_state_V_2_ce0, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_ce0 <= grp_seedexpander_init_fu_783_state_V_2_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_ce0 <= grp_seedexpander_mult_ty_fu_763_state_V_2_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_ce0 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce0;
    else
      state_seedexpander_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce1, grp_seedexpander_mult_ty_fu_763_state_V_2_ce1, grp_seedexpander_init_fu_783_state_V_2_ce1, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      state_seedexpander_V_ce1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_ce1 <= grp_seedexpander_init_fu_783_state_V_2_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_ce1 <= grp_seedexpander_mult_ty_fu_763_state_V_2_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_ce1 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_ce1;
    else
      state_seedexpander_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_d1, grp_seedexpander_mult_ty_fu_763_state_V_2_d1, grp_seedexpander_init_fu_783_state_V_2_d1, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_seedexpander_V_d1 <= ap_const_lv64_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_d1 <= grp_seedexpander_init_fu_783_state_V_2_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_d1 <= grp_seedexpander_mult_ty_fu_763_state_V_2_d1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_d1 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_d1;
    else
      state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state32, grp_vect_set_random_fixe_fu_710_state_seedexpander_V_we1, grp_seedexpander_mult_ty_fu_763_state_V_2_we1, grp_seedexpander_init_fu_783_state_V_2_we1, ap_CS_fsm_state38, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state36, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      state_seedexpander_V_we1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      state_seedexpander_V_we1 <= grp_seedexpander_init_fu_783_state_V_2_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      state_seedexpander_V_we1 <= grp_seedexpander_mult_ty_fu_763_state_V_2_we1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
      state_seedexpander_V_we1 <= grp_vect_set_random_fixe_fu_710_state_seedexpander_V_we1;
    else
      state_seedexpander_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_address0_assign_proc : process(grp_vect_mul_add_fu_591_o_V_address0, grp_vect_add_fu_667_v2_V_address0, grp_reed_muller_decode_fu_803_cdw_V_address0, grp_vect_copyresize_fu_864_v_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state14, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      store_A_V_address0 <= grp_vect_copyresize_fu_864_v_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_A_V_address0 <= grp_reed_muller_decode_fu_803_cdw_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      store_A_V_address0 <= grp_vect_add_fu_667_v2_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_address0 <= grp_vect_mul_add_fu_591_o_V_address0;
    else
      store_A_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_A_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_mul_add_fu_591_o_V_address1, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_A_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_address1 <= grp_vect_mul_add_fu_591_o_V_address1;
    else
      store_A_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_A_V_ce0_assign_proc : process(grp_vect_mul_add_fu_591_o_V_ce0, grp_vect_add_fu_667_v2_V_ce0, grp_reed_muller_decode_fu_803_cdw_V_ce0, grp_vect_copyresize_fu_864_v_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state14, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      store_A_V_ce0 <= grp_vect_copyresize_fu_864_v_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_A_V_ce0 <= grp_reed_muller_decode_fu_803_cdw_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      store_A_V_ce0 <= grp_vect_add_fu_667_v2_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_ce0 <= grp_vect_mul_add_fu_591_o_V_ce0;
    else
      store_A_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_mul_add_fu_591_o_V_ce1, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_A_V_ce1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_ce1 <= grp_vect_mul_add_fu_591_o_V_ce1;
    else
      store_A_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_mul_add_fu_591_o_V_d1, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_A_V_d1 <= ap_const_lv8_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_d1 <= grp_vect_mul_add_fu_591_o_V_d1;
    else
      store_A_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_A_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_mul_add_fu_591_o_V_we1, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_A_V_we1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_A_V_we1 <= grp_vect_mul_add_fu_591_o_V_we1;
    else
      store_A_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_591_a3_V_address0, grp_vect_set_random_fixe_1_fu_840_v_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_address0 <= grp_vect_set_random_fixe_1_fu_840_v_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_B_V_address0 <= grp_vect_mul_add_fu_591_a3_V_address0;
    else
      store_B_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_B_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_1_fu_840_v_V_address1, grp_vect_copyresize_2_fu_852_o_V_address1, ap_CS_fsm_state8, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_B_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      store_B_V_address1 <= grp_vect_copyresize_2_fu_852_o_V_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_address1 <= grp_vect_set_random_fixe_1_fu_840_v_V_address1;
    else
      store_B_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_591_a3_V_ce0, grp_vect_set_random_fixe_1_fu_840_v_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_840_v_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
      store_B_V_ce0 <= grp_vect_mul_add_fu_591_a3_V_ce0;
    else
      store_B_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_set_random_fixe_1_fu_840_v_V_ce1, grp_vect_copyresize_2_fu_852_o_V_ce1, ap_CS_fsm_state8, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_B_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      store_B_V_ce1 <= grp_vect_copyresize_2_fu_852_o_V_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_ce1 <= grp_vect_set_random_fixe_1_fu_840_v_V_ce1;
    else
      store_B_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_1_fu_840_v_V_d1, grp_vect_copyresize_2_fu_852_o_V_d1, ap_CS_fsm_state8, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_B_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      store_B_V_d1 <= grp_vect_copyresize_2_fu_852_o_V_d1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_d1 <= grp_vect_set_random_fixe_1_fu_840_v_V_d1;
    else
      store_B_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_B_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_set_random_fixe_1_fu_840_v_V_we1, grp_vect_copyresize_2_fu_852_o_V_we1, ap_CS_fsm_state8, ap_CS_fsm_state40, ap_CS_fsm_state34)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_B_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      store_B_V_we1 <= grp_vect_copyresize_2_fu_852_o_V_we1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
      store_B_V_we1 <= grp_vect_set_random_fixe_1_fu_840_v_V_we1;
    else
      store_B_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_C_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_copyresize_1_fu_846_o_V_address1, ap_CS_fsm_state18)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_C_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      store_C_V_address1 <= grp_vect_copyresize_1_fu_846_o_V_address1;
    else
      store_C_V_address1 <= "XXXX";
    end if;
  end process;


  store_C_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_621_msg_V_ce0, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      store_C_V_ce0 <= grp_reed_solomon_encode_fu_621_msg_V_ce0;
    else
      store_C_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_C_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_copyresize_1_fu_846_o_V_ce1, ap_CS_fsm_state18)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_C_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      store_C_V_ce1 <= grp_vect_copyresize_1_fu_846_o_V_ce1;
    else
      store_C_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_C_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_copyresize_1_fu_846_o_V_d1, ap_CS_fsm_state18)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_C_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      store_C_V_d1 <= grp_vect_copyresize_1_fu_846_o_V_d1;
    else
      store_C_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_C_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_vect_copyresize_1_fu_846_o_V_we1, ap_CS_fsm_state18)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      store_C_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      store_C_V_we1 <= grp_vect_copyresize_1_fu_846_o_V_we1;
    else
      store_C_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_decode_V_address1_assign_proc : process(grp_reed_solomon_decode_fu_684_cdw_V_address1, grp_reed_muller_decode_fu_803_msg_V_address1, ap_CS_fsm_state16, ap_CS_fsm_state14)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_rs_decode_V_address1 <= grp_reed_muller_decode_fu_803_msg_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      store_rs_decode_V_address1 <= grp_reed_solomon_decode_fu_684_cdw_V_address1;
    else
      store_rs_decode_V_address1 <= "XXXXXX";
    end if;
  end process;


  store_rs_decode_V_ce0_assign_proc : process(grp_reed_solomon_decode_fu_684_cdw_V_ce0, ap_CS_fsm_state16)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      store_rs_decode_V_ce0 <= grp_reed_solomon_decode_fu_684_cdw_V_ce0;
    else
      store_rs_decode_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_decode_V_ce1_assign_proc : process(grp_reed_solomon_decode_fu_684_cdw_V_ce1, grp_reed_muller_decode_fu_803_msg_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state14)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_rs_decode_V_ce1 <= grp_reed_muller_decode_fu_803_msg_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      store_rs_decode_V_ce1 <= grp_reed_solomon_decode_fu_684_cdw_V_ce1;
    else
      store_rs_decode_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_decode_V_d1_assign_proc : process(grp_reed_solomon_decode_fu_684_cdw_V_d1, grp_reed_muller_decode_fu_803_msg_V_d1, ap_CS_fsm_state16, ap_CS_fsm_state14)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_rs_decode_V_d1 <= grp_reed_muller_decode_fu_803_msg_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      store_rs_decode_V_d1 <= grp_reed_solomon_decode_fu_684_cdw_V_d1;
    else
      store_rs_decode_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_rs_decode_V_we1_assign_proc : process(grp_reed_solomon_decode_fu_684_cdw_V_we1, grp_reed_muller_decode_fu_803_msg_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state14)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      store_rs_decode_V_we1 <= grp_reed_muller_decode_fu_803_msg_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      store_rs_decode_V_we1 <= grp_reed_solomon_decode_fu_684_cdw_V_we1;
    else
      store_rs_decode_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_encode_V_address0_assign_proc : process(grp_reed_solomon_encode_fu_621_cdw_V_address0, grp_reed_muller_encode_fu_639_msg_V_address0, ap_CS_fsm_state42, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      store_rs_encode_V_address0 <= grp_reed_muller_encode_fu_639_msg_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      store_rs_encode_V_address0 <= grp_reed_solomon_encode_fu_621_cdw_V_address0;
    else
      store_rs_encode_V_address0 <= "XXXXXX";
    end if;
  end process;


  store_rs_encode_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_621_cdw_V_ce0, grp_reed_muller_encode_fu_639_msg_V_ce0, ap_CS_fsm_state42, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      store_rs_encode_V_ce0 <= grp_reed_muller_encode_fu_639_msg_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      store_rs_encode_V_ce0 <= grp_reed_solomon_encode_fu_621_cdw_V_ce0;
    else
      store_rs_encode_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_encode_V_ce1_assign_proc : process(grp_reed_solomon_encode_fu_621_cdw_V_ce1, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      store_rs_encode_V_ce1 <= grp_reed_solomon_encode_fu_621_cdw_V_ce1;
    else
      store_rs_encode_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_rs_encode_V_we1_assign_proc : process(grp_reed_solomon_encode_fu_621_cdw_V_we1, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
      store_rs_encode_V_we1 <= grp_reed_solomon_encode_fu_621_cdw_V_we1;
    else
      store_rs_encode_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_seeds_V_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln285_reg_1018, zext_ln285_2_reg_1055, grp_seedexpander_init_fu_783_seed_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state23, zext_ln285_1_fu_921_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
      store_seeds_V_address0 <= zext_ln285_2_reg_1055(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then
      store_seeds_V_address0 <= zext_ln285_1_fu_921_p1(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      store_seeds_V_address0 <= zext_ln285_reg_1018(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_seeds_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      store_seeds_V_address0 <= grp_seedexpander_init_fu_783_seed_V_address0;
    else
      store_seeds_V_address0 <= "XXX";
    end if;
  end process;


  store_seeds_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_seedexpander_init_fu_783_seed_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state23)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1)))) then
      store_seeds_V_ce0 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      store_seeds_V_ce0 <= grp_seedexpander_init_fu_783_seed_V_ce0;
    else
      store_seeds_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_seeds_V_d0_assign_proc : process(sk_V_q0, ap_CS_fsm_state3, theta_V_q0, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state29)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
      store_seeds_V_d0 <= theta_V_q0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      store_seeds_V_d0 <= sk_V_q0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_seeds_V_d0 <= ap_const_lv64_0;
    else
      store_seeds_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  store_seeds_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state29)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1)))) then
      store_seeds_V_we0 <= ap_const_logic_1;
    else
      store_seeds_V_we0 <= ap_const_logic_0;
    end if;
  end process;


  theta_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, zext_ln285_2_fu_947_p1, icmp_ln284_2_fu_935_p2, ap_CS_fsm_state32, grp_shake256_512_ds_fu_733_output_V_address0, grp_vect_compare_64_fu_871_v2_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_0))) then
      theta_V_address0 <= zext_ln285_2_fu_947_p1(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      theta_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      theta_V_address0 <= grp_vect_compare_64_fu_871_v2_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
      theta_V_address0 <= grp_shake256_512_ds_fu_733_output_V_address0;
    else
      theta_V_address0 <= "XXX";
    end if;
  end process;


  theta_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, ap_CS_fsm_state28, icmp_ln284_2_fu_935_p2, ap_CS_fsm_state32, grp_shake256_512_ds_fu_733_output_V_ce0, grp_vect_compare_64_fu_871_v2_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if ((((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln284_2_fu_935_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1)))) then
      theta_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then
      theta_V_ce0 <= grp_vect_compare_64_fu_871_v2_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
      theta_V_ce0 <= grp_shake256_512_ds_fu_733_output_V_ce0;
    else
      theta_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  theta_V_d0_assign_proc : process(ap_CS_fsm_state3, grp_shake256_512_ds_fu_733_output_V_d0, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      theta_V_d0 <= ap_const_lv64_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
      theta_V_d0 <= grp_shake256_512_ds_fu_733_output_V_d0;
    else
      theta_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  theta_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_809_ap_done, grp_shake256_512_ds_fu_733_output_V_we0, ap_CS_fsm_state20, ap_CS_fsm_state30)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_809_ap_done = ap_const_logic_1))) then
      theta_V_we0 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
      theta_V_we0 <= grp_shake256_512_ds_fu_733_output_V_we0;
    else
      theta_V_we0 <= ap_const_logic_0;
    end if;
  end process;

  trunc_ln717_fu_926_p1 <= h_s_V_q0(5 - 1 downto 0);

  uv2_V_address0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state48, grp_reed_muller_encode_fu_639_cdw_V_address0, grp_vect_add_fu_667_o_V_address0, grp_vect_compare_fu_824_v2_V_address0, ap_CS_fsm_state42, ap_CS_fsm_state44)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
      uv2_V_address0 <= grp_vect_compare_fu_824_v2_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_address0 <= grp_vect_add_fu_667_o_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_address0 <= grp_reed_muller_encode_fu_639_cdw_V_address0;
    else
      uv2_V_address0 <= "XXXXXXXXXXXXX";
    end if;
  end process;


  uv2_V_address1_assign_proc : process(grp_reed_muller_encode_fu_639_cdw_V_address1, grp_vect_add_fu_667_o_V_address1, grp_vect_copyresize_fu_864_o_V_address1, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      uv2_V_address1 <= grp_vect_copyresize_fu_864_o_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_address1 <= grp_vect_add_fu_667_o_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_address1 <= grp_reed_muller_encode_fu_639_cdw_V_address1;
    else
      uv2_V_address1 <= "XXXXXXXXXXXXX";
    end if;
  end process;


  uv2_V_ce0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state48, grp_reed_muller_encode_fu_639_cdw_V_ce0, grp_vect_add_fu_667_o_V_ce0, grp_vect_compare_fu_824_v2_V_ce0, ap_CS_fsm_state42, ap_CS_fsm_state44)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
      uv2_V_ce0 <= grp_vect_compare_fu_824_v2_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_ce0 <= grp_vect_add_fu_667_o_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_ce0 <= grp_reed_muller_encode_fu_639_cdw_V_ce0;
    else
      uv2_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  uv2_V_ce1_assign_proc : process(grp_reed_muller_encode_fu_639_cdw_V_ce1, grp_vect_add_fu_667_o_V_ce1, grp_vect_copyresize_fu_864_o_V_ce1, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      uv2_V_ce1 <= grp_vect_copyresize_fu_864_o_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_ce1 <= grp_vect_add_fu_667_o_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_ce1 <= grp_reed_muller_encode_fu_639_cdw_V_ce1;
    else
      uv2_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  uv2_V_d1_assign_proc : process(grp_reed_muller_encode_fu_639_cdw_V_d1, grp_vect_add_fu_667_o_V_d1, grp_vect_copyresize_fu_864_o_V_d1, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      uv2_V_d1 <= grp_vect_copyresize_fu_864_o_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_d1 <= grp_vect_add_fu_667_o_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_d1 <= grp_reed_muller_encode_fu_639_cdw_V_d1;
    else
      uv2_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  uv2_V_we1_assign_proc : process(grp_reed_muller_encode_fu_639_cdw_V_we1, grp_vect_add_fu_667_o_V_we1, grp_vect_copyresize_fu_864_o_V_we1, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state40)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
      uv2_V_we1 <= grp_vect_copyresize_fu_864_o_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
      uv2_V_we1 <= grp_vect_add_fu_667_o_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then
      uv2_V_we1 <= grp_reed_muller_encode_fu_639_cdw_V_we1;
    else
      uv2_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  xor_ln1355_fu_962_p2   <= (result_fu_957_p2 xor ap_const_lv1_1);
  zext_ln285_1_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i32_reg_557), 64));
  zext_ln285_2_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i40_reg_569), 64));
  zext_ln285_fu_889_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i31_reg_546), 64));
  zext_ln321_6_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_910_p2), 64));
  zext_ln321_fu_906_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i32_reg_557), 4));
  zext_ln391_fu_988_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_580), 64));
  zext_ln717_fu_930_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_fu_926_p1), 8));
end behav;
