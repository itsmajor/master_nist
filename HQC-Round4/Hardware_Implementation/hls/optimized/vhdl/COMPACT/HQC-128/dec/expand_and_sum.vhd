-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expand_and_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dst_V_ce0 : OUT STD_LOGIC;
    dst_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dst_V_ce1 : OUT STD_LOGIC;
    dst_V_we1 : OUT STD_LOGIC;
    dst_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    src_V_ce0 : OUT STD_LOGIC;
    src_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    offset_V : IN STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of expand_and_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln215_fu_138_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_reg_270 : STD_LOGIC_VECTOR (16 downto 0);
    signal copies_V_fu_148_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal copies_V_reg_278 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln879_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_90_fu_172_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_90_reg_288 : STD_LOGIC_VECTOR (16 downto 0);
    signal part_V_fu_183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal part_V_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_fu_193_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln124_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_addr_reg_306 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln887_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln887_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bit_V_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_V_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_addr_reg_324 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_23_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_fu_250_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dst_V_load_reg_335 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0110_0_reg_101 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_5_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln544_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_60_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_V_cast_fu_134_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_89_fu_160_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_8_fu_168_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1352_fu_189_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_9_fu_201_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_91_fu_205_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_10_fu_231_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_92_fu_235_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0110_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0110_0_reg_101 <= copies_V_reg_278;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0110_0_reg_101 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_5_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_5_reg_123 <= bit_V_reg_319;
            elsif (((icmp_ln124_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_5_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_reg_112 <= part_V_reg_296;
            elsif (((icmp_ln887_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_112 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bit_V_reg_319 <= bit_V_fu_225_p2;
                    zext_ln887_reg_311(3 downto 0) <= zext_ln887_fu_215_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                copies_V_reg_278 <= copies_V_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_23_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                dst_V_addr_reg_324 <= zext_ln544_60_fu_240_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_reg_283 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                dst_V_load_reg_335 <= dst_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln879_reg_283 <= icmp_ln879_fu_154_p2;
                ret_V_90_reg_288 <= ret_V_90_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                part_V_reg_296 <= part_V_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ret_V_reg_301(6 downto 3) <= ret_V_fu_193_p3(6 downto 3);
                src_V_addr_reg_306 <= zext_ln544_fu_210_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln68_reg_330 <= trunc_ln68_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln215_reg_270(15 downto 0) <= zext_ln215_fu_138_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_reg_270(16) <= '0';
    ret_V_reg_301(2 downto 0) <= "000";
    zext_ln887_reg_311(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_142_p2, ap_CS_fsm_state3, icmp_ln124_fu_177_p2, ap_CS_fsm_state4, icmp_ln887_23_fu_219_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln124_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_23_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln700_fu_257_p2 <= std_logic_vector(unsigned(dst_V_load_reg_335) + unsigned(zext_ln68_fu_254_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_142_p2)
    begin
        if ((((icmp_ln887_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_142_p2)
    begin
        if (((icmp_ln887_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bit_V_fu_225_p2 <= std_logic_vector(unsigned(t_V_5_reg_123) + unsigned(ap_const_lv4_1));
    copies_V_fu_148_p2 <= std_logic_vector(unsigned(p_0110_0_reg_101) + unsigned(ap_const_lv2_1));
    dst_V_address0 <= zext_ln544_60_fu_240_p1(7 - 1 downto 0);
    dst_V_address1 <= dst_V_addr_reg_324;

    dst_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_V_ce0 <= ap_const_logic_1;
        else 
            dst_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_V_ce1 <= ap_const_logic_1;
        else 
            dst_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_d1 <= 
        zext_ln68_fu_254_p1 when (icmp_ln879_reg_283(0) = '1') else 
        add_ln700_fu_257_p2;

    dst_V_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_V_we1 <= ap_const_logic_1;
        else 
            dst_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln124_fu_177_p2 <= "1" when (t_V_reg_112 = ap_const_lv5_10) else "0";
    icmp_ln879_fu_154_p2 <= "1" when (p_0110_0_reg_101 = ap_const_lv2_0) else "0";
    icmp_ln887_23_fu_219_p2 <= "1" when (t_V_5_reg_123 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_142_p2 <= "1" when (p_0110_0_reg_101 = ap_const_lv2_3) else "0";
        offset_V_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset_V),16));

    part_V_fu_183_p2 <= std_logic_vector(unsigned(t_V_reg_112) + unsigned(ap_const_lv5_1));
    r_V_fu_245_p2 <= std_logic_vector(shift_right(unsigned(src_V_q0),to_integer(unsigned('0' & zext_ln887_reg_311(8-1 downto 0)))));
    ret_V_89_fu_160_p3 <= (p_0110_0_reg_101 & ap_const_lv4_0);
    ret_V_90_fu_172_p2 <= std_logic_vector(unsigned(zext_ln215_reg_270) + unsigned(zext_ln215_8_fu_168_p1));
    ret_V_91_fu_205_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_201_p1) + unsigned(ret_V_90_reg_288));
    ret_V_92_fu_235_p2 <= std_logic_vector(unsigned(ret_V_reg_301) + unsigned(zext_ln215_10_fu_231_p1));
    ret_V_fu_193_p3 <= (trunc_ln1352_fu_189_p1 & ap_const_lv3_0);
    src_V_address0 <= src_V_addr_reg_306;

    src_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_V_ce0 <= ap_const_logic_1;
        else 
            src_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1352_fu_189_p1 <= t_V_reg_112(4 - 1 downto 0);
    trunc_ln68_fu_250_p1 <= r_V_fu_245_p2(1 - 1 downto 0);
    zext_ln215_10_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_123),7));
    zext_ln215_8_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_89_fu_160_p3),17));
    zext_ln215_9_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_112),17));
    zext_ln215_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_V_cast_fu_134_p1),17));
    zext_ln544_60_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_92_fu_235_p2),64));
    zext_ln544_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_91_fu_205_p2),64));
    zext_ln68_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln68_reg_330),10));
    zext_ln887_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_123),8));
end behav;
