-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_keypair_hls is
  port (
    ap_clk               : in  std_logic;
    ap_rst               : in  std_logic;
    ap_start             : in  std_logic;
    ap_done              : out std_logic;
    ap_idle              : out std_logic;
    ap_ready             : out std_logic;
    pk_V_address0        : out std_logic_vector (8 downto 0);
    pk_V_ce0             : out std_logic;
    pk_V_we0             : out std_logic;
    pk_V_d0              : out std_logic_vector (63 downto 0);
    pk_V_q0              : in  std_logic_vector (63 downto 0);
    sk_V_address0        : out std_logic_vector (8 downto 0);
    sk_V_ce0             : out std_logic;
    sk_V_we0             : out std_logic;
    sk_V_d0              : out std_logic_vector (63 downto 0);
    prng_seed_V_address0 : out std_logic_vector (5 downto 0);
    prng_seed_V_ce0      : out std_logic;
    prng_seed_V_q0       : in  std_logic_vector (7 downto 0);
    seed_bytesize_V      : in  std_logic_vector (7 downto 0));
end;


architecture behav of crypto_kem_keypair_hls is
  attribute CORE_GENERATION_INFO          : string;
  attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_keypair_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-ftg256-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.489000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=5637,HLS_SYN_LUT=16653,HLS_VERSION=2020_1}";
  constant ap_const_logic_1               : std_logic                      := '1';
  constant ap_const_logic_0               : std_logic                      := '0';
  constant ap_ST_fsm_state1               : std_logic_vector (26 downto 0) := "000000000000000000000000001";
  constant ap_ST_fsm_state2               : std_logic_vector (26 downto 0) := "000000000000000000000000010";
  constant ap_ST_fsm_state3               : std_logic_vector (26 downto 0) := "000000000000000000000000100";
  constant ap_ST_fsm_state4               : std_logic_vector (26 downto 0) := "000000000000000000000001000";
  constant ap_ST_fsm_state5               : std_logic_vector (26 downto 0) := "000000000000000000000010000";
  constant ap_ST_fsm_state6               : std_logic_vector (26 downto 0) := "000000000000000000000100000";
  constant ap_ST_fsm_state7               : std_logic_vector (26 downto 0) := "000000000000000000001000000";
  constant ap_ST_fsm_state8               : std_logic_vector (26 downto 0) := "000000000000000000010000000";
  constant ap_ST_fsm_state9               : std_logic_vector (26 downto 0) := "000000000000000000100000000";
  constant ap_ST_fsm_state10              : std_logic_vector (26 downto 0) := "000000000000000001000000000";
  constant ap_ST_fsm_state11              : std_logic_vector (26 downto 0) := "000000000000000010000000000";
  constant ap_ST_fsm_state12              : std_logic_vector (26 downto 0) := "000000000000000100000000000";
  constant ap_ST_fsm_state13              : std_logic_vector (26 downto 0) := "000000000000001000000000000";
  constant ap_ST_fsm_state14              : std_logic_vector (26 downto 0) := "000000000000010000000000000";
  constant ap_ST_fsm_state15              : std_logic_vector (26 downto 0) := "000000000000100000000000000";
  constant ap_ST_fsm_state16              : std_logic_vector (26 downto 0) := "000000000001000000000000000";
  constant ap_ST_fsm_state17              : std_logic_vector (26 downto 0) := "000000000010000000000000000";
  constant ap_ST_fsm_state18              : std_logic_vector (26 downto 0) := "000000000100000000000000000";
  constant ap_ST_fsm_state19              : std_logic_vector (26 downto 0) := "000000001000000000000000000";
  constant ap_ST_fsm_state20              : std_logic_vector (26 downto 0) := "000000010000000000000000000";
  constant ap_ST_fsm_state21              : std_logic_vector (26 downto 0) := "000000100000000000000000000";
  constant ap_ST_fsm_state22              : std_logic_vector (26 downto 0) := "000001000000000000000000000";
  constant ap_ST_fsm_state23              : std_logic_vector (26 downto 0) := "000010000000000000000000000";
  constant ap_ST_fsm_state24              : std_logic_vector (26 downto 0) := "000100000000000000000000000";
  constant ap_ST_fsm_state25              : std_logic_vector (26 downto 0) := "001000000000000000000000000";
  constant ap_ST_fsm_state26              : std_logic_vector (26 downto 0) := "010000000000000000000000000";
  constant ap_ST_fsm_state27              : std_logic_vector (26 downto 0) := "100000000000000000000000000";
  constant ap_const_lv32_0                : std_logic_vector (31 downto 0) := "00000000000000000000000000000000";
  constant ap_const_lv32_1                : std_logic_vector (31 downto 0) := "00000000000000000000000000000001";
  constant ap_const_lv32_7                : std_logic_vector (31 downto 0) := "00000000000000000000000000000111";
  constant ap_const_lv1_0                 : std_logic_vector (0 downto 0)  := "0";
  constant ap_const_lv32_E                : std_logic_vector (31 downto 0) := "00000000000000000000000000001110";
  constant ap_const_lv32_11               : std_logic_vector (31 downto 0) := "00000000000000000000000000010001";
  constant ap_const_lv32_15               : std_logic_vector (31 downto 0) := "00000000000000000000000000010101";
  constant ap_const_lv32_16               : std_logic_vector (31 downto 0) := "00000000000000000000000000010110";
  constant ap_const_lv32_17               : std_logic_vector (31 downto 0) := "00000000000000000000000000010111";
  constant ap_const_lv32_19               : std_logic_vector (31 downto 0) := "00000000000000000000000000011001";
  constant ap_const_lv3_0                 : std_logic_vector (2 downto 0)  := "000";
  constant ap_const_lv32_6                : std_logic_vector (31 downto 0) := "00000000000000000000000000000110";
  constant ap_const_lv32_8                : std_logic_vector (31 downto 0) := "00000000000000000000000000001000";
  constant ap_const_lv32_D                : std_logic_vector (31 downto 0) := "00000000000000000000000000001101";
  constant ap_const_lv32_F                : std_logic_vector (31 downto 0) := "00000000000000000000000000001111";
  constant ap_const_lv9_0                 : std_logic_vector (8 downto 0)  := "000000000";
  constant ap_const_lv32_14               : std_logic_vector (31 downto 0) := "00000000000000000000000000010100";
  constant ap_const_lv1_1                 : std_logic_vector (0 downto 0)  := "1";
  constant ap_const_lv4_0                 : std_logic_vector (3 downto 0)  := "0000";
  constant ap_const_lv32_18               : std_logic_vector (31 downto 0) := "00000000000000000000000000011000";
  constant ap_const_lv32_1A               : std_logic_vector (31 downto 0) := "00000000000000000000000000011010";
  constant ap_const_lv32_3                : std_logic_vector (31 downto 0) := "00000000000000000000000000000011";
  constant ap_const_lv32_4                : std_logic_vector (31 downto 0) := "00000000000000000000000000000100";
  constant ap_const_lv32_9                : std_logic_vector (31 downto 0) := "00000000000000000000000000001001";
  constant ap_const_lv32_13               : std_logic_vector (31 downto 0) := "00000000000000000000000000010011";
  constant ap_const_lv32_A                : std_logic_vector (31 downto 0) := "00000000000000000000000000001010";
  constant ap_const_lv32_B                : std_logic_vector (31 downto 0) := "00000000000000000000000000001011";
  constant ap_const_lv32_2                : std_logic_vector (31 downto 0) := "00000000000000000000000000000010";
  constant ap_const_lv32_10               : std_logic_vector (31 downto 0) := "00000000000000000000000000010000";
  constant ap_const_lv32_5                : std_logic_vector (31 downto 0) := "00000000000000000000000000000101";
  constant ap_const_lv32_C                : std_logic_vector (31 downto 0) := "00000000000000000000000000001100";
  constant ap_const_lv64_0                : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant ap_const_lv64_8A0              : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100000";
  constant ap_const_lv64_8A1              : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000100010100001";
  constant ap_const_lv8_0                 : std_logic_vector (7 downto 0)  := "00000000";
  constant ap_const_lv32_12               : std_logic_vector (31 downto 0) := "00000000000000000000000000010010";
  constant ap_const_lv15_0                : std_logic_vector (14 downto 0) := "000000000000000";
  constant ap_const_lv3_5                 : std_logic_vector (2 downto 0)  := "101";
  constant ap_const_lv3_1                 : std_logic_vector (2 downto 0)  := "001";
  constant ap_const_lv9_115               : std_logic_vector (8 downto 0)  := "100010101";
  constant ap_const_lv9_1                 : std_logic_vector (8 downto 0)  := "000000001";
  constant ap_const_lv9_5                 : std_logic_vector (8 downto 0)  := "000000101";
  constant ap_const_lv4_8                 : std_logic_vector (3 downto 0)  := "1000";
  constant ap_const_lv4_1                 : std_logic_vector (3 downto 0)  := "0001";
  constant ap_const_lv6_7                 : std_logic_vector (5 downto 0)  := "000111";
  constant ap_const_lv7_3F                : std_logic_vector (6 downto 0)  := "0111111";
  constant ap_const_lv32_3F               : std_logic_vector (31 downto 0) := "00000000000000000000000000111111";
  constant ap_const_lv64_FFFFFFFFFFFFFFFF : std_logic_vector (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
  constant ap_const_lv9_11A               : std_logic_vector (8 downto 0)  := "100011010";
  constant ap_const_boolean_0             : boolean                        := false;
  constant ap_const_boolean_1             : boolean                        := true;

  signal ap_CS_fsm                                                                 : std_logic_vector (26 downto 0) := "000000000000000000000000001";
  attribute fsm_encoding                                                           : string;
  attribute fsm_encoding of ap_CS_fsm                                              : signal is "none";
  signal ap_CS_fsm_state1                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state1                                       : signal is "none";
  signal trunc_ln93_fu_618_p1                                                      : std_logic_vector (6 downto 0);
  signal trunc_ln93_reg_900                                                        : std_logic_vector (6 downto 0);
  signal ap_CS_fsm_state2                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state2                                       : signal is "none";
  signal i_fu_629_p2                                                               : std_logic_vector (2 downto 0);
  signal i_reg_908                                                                 : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state8                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state8                                       : signal is "none";
  signal zext_ln285_fu_635_p1                                                      : std_logic_vector (63 downto 0);
  signal zext_ln285_reg_913                                                        : std_logic_vector (63 downto 0);
  signal icmp_ln284_fu_623_p2                                                      : std_logic_vector (0 downto 0);
  signal i_2_fu_646_p2                                                             : std_logic_vector (2 downto 0);
  signal i_2_reg_926                                                               : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state15                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state15                                      : signal is "none";
  signal zext_ln285_1_fu_652_p1                                                    : std_logic_vector (63 downto 0);
  signal zext_ln285_1_reg_931                                                      : std_logic_vector (63 downto 0);
  signal icmp_ln284_1_fu_640_p2                                                    : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state18                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state18                                      : signal is "none";
  signal i_V_5_fu_672_p2                                                           : std_logic_vector (8 downto 0);
  signal i_V_5_reg_950                                                             : std_logic_vector (8 downto 0);
  signal ap_CS_fsm_state22                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state22                                      : signal is "none";
  signal ret_V_31_fu_689_p3                                                        : std_logic_vector (11 downto 0);
  signal ret_V_31_reg_955                                                          : std_logic_vector (11 downto 0);
  signal icmp_ln887_fu_666_p2                                                      : std_logic_vector (0 downto 0);
  signal pk_V_addr_1_reg_960                                                       : std_logic_vector (8 downto 0);
  signal j_V_fu_703_p2                                                             : std_logic_vector (3 downto 0);
  signal j_V_reg_968                                                               : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state23                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state23                                      : signal is "none";
  signal trunc_ln555_fu_709_p1                                                     : std_logic_vector (2 downto 0);
  signal trunc_ln555_reg_973                                                       : std_logic_vector (2 downto 0);
  signal icmp_ln887_10_fu_697_p2                                                   : std_logic_vector (0 downto 0);
  signal p_Result_s_fu_866_p2                                                      : std_logic_vector (63 downto 0);
  signal p_Result_s_reg_983                                                        : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state24                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state24                                      : signal is "none";
  signal i_V_fu_878_p2                                                             : std_logic_vector (8 downto 0);
  signal i_V_reg_991                                                               : std_logic_vector (8 downto 0);
  signal ap_CS_fsm_state26                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state26                                      : signal is "none";
  signal icmp_ln887_9_fu_872_p2                                                    : std_logic_vector (0 downto 0);
  signal state_seedexpander_V_address0                                             : std_logic_vector (4 downto 0);
  signal state_seedexpander_V_ce0                                                  : std_logic;
  signal state_seedexpander_V_q0                                                   : std_logic_vector (63 downto 0);
  signal state_seedexpander_V_address1                                             : std_logic_vector (4 downto 0);
  signal state_seedexpander_V_ce1                                                  : std_logic;
  signal state_seedexpander_V_we1                                                  : std_logic;
  signal state_seedexpander_V_d1                                                   : std_logic_vector (63 downto 0);
  signal state_prng_V_address0                                                     : std_logic_vector (4 downto 0);
  signal state_prng_V_ce0                                                          : std_logic;
  signal state_prng_V_q0                                                           : std_logic_vector (63 downto 0);
  signal state_prng_V_address1                                                     : std_logic_vector (4 downto 0);
  signal state_prng_V_ce1                                                          : std_logic;
  signal state_prng_V_we1                                                          : std_logic;
  signal state_prng_V_d1                                                           : std_logic_vector (63 downto 0);
  signal store_A_V_address0                                                        : std_logic_vector (11 downto 0);
  signal store_A_V_ce0                                                             : std_logic;
  signal store_A_V_q0                                                              : std_logic_vector (7 downto 0);
  signal store_A_V_address1                                                        : std_logic_vector (11 downto 0);
  signal store_A_V_ce1                                                             : std_logic;
  signal store_A_V_we1                                                             : std_logic;
  signal store_A_V_d1                                                              : std_logic_vector (7 downto 0);
  signal store_B_V_address0                                                        : std_logic_vector (11 downto 0);
  signal store_B_V_ce0                                                             : std_logic;
  signal store_B_V_q0                                                              : std_logic_vector (7 downto 0);
  signal store_B_V_address1                                                        : std_logic_vector (11 downto 0);
  signal store_B_V_ce1                                                             : std_logic;
  signal store_B_V_we1                                                             : std_logic;
  signal store_B_V_d1                                                              : std_logic_vector (7 downto 0);
  signal h_s_V_address0                                                            : std_logic_vector (11 downto 0);
  signal h_s_V_ce0                                                                 : std_logic;
  signal h_s_V_q0                                                                  : std_logic_vector (7 downto 0);
  signal h_s_V_address1                                                            : std_logic_vector (11 downto 0);
  signal h_s_V_ce1                                                                 : std_logic;
  signal h_s_V_we1                                                                 : std_logic;
  signal h_s_V_d1                                                                  : std_logic_vector (7 downto 0);
  signal random_vector_A_V_address0                                                : std_logic_vector (6 downto 0);
  signal random_vector_A_V_ce0                                                     : std_logic;
  signal random_vector_A_V_q0                                                      : std_logic_vector (14 downto 0);
  signal random_vector_A_V_address1                                                : std_logic_vector (6 downto 0);
  signal random_vector_A_V_ce1                                                     : std_logic;
  signal random_vector_A_V_we1                                                     : std_logic;
  signal random_vector_A_V_d1                                                      : std_logic_vector (14 downto 0);
  signal random_vector_B_V_address0                                                : std_logic_vector (6 downto 0);
  signal random_vector_B_V_ce0                                                     : std_logic;
  signal random_vector_B_V_q0                                                      : std_logic_vector (14 downto 0);
  signal random_vector_B_V_address1                                                : std_logic_vector (6 downto 0);
  signal random_vector_B_V_ce1                                                     : std_logic;
  signal random_vector_B_V_we1                                                     : std_logic;
  signal random_vector_B_V_d1                                                      : std_logic_vector (14 downto 0);
  signal store_seeds_V_address0                                                    : std_logic_vector (2 downto 0);
  signal store_seeds_V_ce0                                                         : std_logic;
  signal store_seeds_V_we0                                                         : std_logic;
  signal store_seeds_V_d0                                                          : std_logic_vector (63 downto 0);
  signal store_seeds_V_q0                                                          : std_logic_vector (63 downto 0);
  signal grp_shake_prng_fu_466_ap_start                                            : std_logic;
  signal grp_shake_prng_fu_466_ap_done                                             : std_logic;
  signal grp_shake_prng_fu_466_ap_idle                                             : std_logic;
  signal grp_shake_prng_fu_466_ap_ready                                            : std_logic;
  signal grp_shake_prng_fu_466_output_V_address0                                   : std_logic_vector (2 downto 0);
  signal grp_shake_prng_fu_466_output_V_ce0                                        : std_logic;
  signal grp_shake_prng_fu_466_output_V_we0                                        : std_logic;
  signal grp_shake_prng_fu_466_output_V_d0                                         : std_logic_vector (63 downto 0);
  signal grp_shake_prng_fu_466_state_prng_V_address0                               : std_logic_vector (4 downto 0);
  signal grp_shake_prng_fu_466_state_prng_V_ce0                                    : std_logic;
  signal grp_shake_prng_fu_466_state_prng_V_address1                               : std_logic_vector (4 downto 0);
  signal grp_shake_prng_fu_466_state_prng_V_ce1                                    : std_logic;
  signal grp_shake_prng_fu_466_state_prng_V_we1                                    : std_logic;
  signal grp_shake_prng_fu_466_state_prng_V_d1                                     : std_logic_vector (63 downto 0);
  signal grp_vect_mul_add_fu_511_ap_start                                          : std_logic;
  signal grp_vect_mul_add_fu_511_ap_done                                           : std_logic;
  signal grp_vect_mul_add_fu_511_ap_idle                                           : std_logic;
  signal grp_vect_mul_add_fu_511_ap_ready                                          : std_logic;
  signal grp_vect_mul_add_fu_511_o_V_address0                                      : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_511_o_V_ce0                                           : std_logic;
  signal grp_vect_mul_add_fu_511_o_V_address1                                      : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_511_o_V_ce1                                           : std_logic;
  signal grp_vect_mul_add_fu_511_o_V_we1                                           : std_logic;
  signal grp_vect_mul_add_fu_511_o_V_d1                                            : std_logic_vector (7 downto 0);
  signal grp_vect_mul_add_fu_511_a1_V_address0                                     : std_logic_vector (6 downto 0);
  signal grp_vect_mul_add_fu_511_a1_V_ce0                                          : std_logic;
  signal grp_vect_mul_add_fu_511_a2_V_address0                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_511_a2_V_ce0                                          : std_logic;
  signal grp_vect_mul_add_fu_511_a2_V_address1                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_511_a2_V_ce1                                          : std_logic;
  signal grp_vect_mul_add_fu_511_a2_V_we1                                          : std_logic;
  signal grp_vect_mul_add_fu_511_a2_V_d1                                           : std_logic_vector (7 downto 0);
  signal grp_vect_mul_add_fu_511_a3_V_address0                                     : std_logic_vector (11 downto 0);
  signal grp_vect_mul_add_fu_511_a3_V_ce0                                          : std_logic;
  signal grp_vect_set_random_fixe_fu_530_ap_start                                  : std_logic;
  signal grp_vect_set_random_fixe_fu_530_ap_done                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_530_ap_idle                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_530_ap_ready                                  : std_logic;
  signal grp_vect_set_random_fixe_fu_530_v_V_address0                              : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_fu_530_v_V_ce0                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_530_v_V_q0                                    : std_logic_vector (14 downto 0);
  signal grp_vect_set_random_fixe_fu_530_v_V_address1                              : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_fu_530_v_V_ce1                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_530_v_V_we1                                   : std_logic;
  signal grp_vect_set_random_fixe_fu_530_v_V_d1                                    : std_logic_vector (14 downto 0);
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address0             : std_logic_vector (4 downto 0);
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce0                  : std_logic;
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address1             : std_logic_vector (4 downto 0);
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce1                  : std_logic;
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_we1                  : std_logic;
  signal grp_vect_set_random_fixe_fu_530_state_seedexpander_V_d1                   : std_logic_vector (63 downto 0);
  signal grp_shake_prng_init_fu_550_ap_start                                       : std_logic;
  signal grp_shake_prng_init_fu_550_ap_done                                        : std_logic;
  signal grp_shake_prng_init_fu_550_ap_idle                                        : std_logic;
  signal grp_shake_prng_init_fu_550_ap_ready                                       : std_logic;
  signal grp_shake_prng_init_fu_550_entropy_input_V_address0                       : std_logic_vector (5 downto 0);
  signal grp_shake_prng_init_fu_550_entropy_input_V_ce0                            : std_logic;
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_address0              : std_logic_vector (4 downto 0);
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce0                   : std_logic;
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_address1              : std_logic_vector (4 downto 0);
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce1                   : std_logic;
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_we1                   : std_logic;
  signal grp_shake_prng_init_fu_550_shake_prng_state_array_V_d1                    : std_logic_vector (63 downto 0);
  signal grp_seedexpander_mult_ty_fu_572_ap_start                                  : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_ap_done                                   : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_ap_idle                                   : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_ap_ready                                  : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_output_V_address1                         : std_logic_vector (11 downto 0);
  signal grp_seedexpander_mult_ty_fu_572_output_V_ce1                              : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_output_V_we1                              : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_output_V_d1                               : std_logic_vector (7 downto 0);
  signal grp_seedexpander_mult_ty_fu_572_state_V_address0                          : std_logic_vector (4 downto 0);
  signal grp_seedexpander_mult_ty_fu_572_state_V_ce0                               : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_state_V_address1                          : std_logic_vector (4 downto 0);
  signal grp_seedexpander_mult_ty_fu_572_state_V_ce1                               : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_state_V_we1                               : std_logic;
  signal grp_seedexpander_mult_ty_fu_572_state_V_d1                                : std_logic_vector (63 downto 0);
  signal grp_seedexpander_init_fu_592_ap_start                                     : std_logic;
  signal grp_seedexpander_init_fu_592_ap_done                                      : std_logic;
  signal grp_seedexpander_init_fu_592_ap_idle                                      : std_logic;
  signal grp_seedexpander_init_fu_592_ap_ready                                     : std_logic;
  signal grp_seedexpander_init_fu_592_seed_V_address0                              : std_logic_vector (2 downto 0);
  signal grp_seedexpander_init_fu_592_seed_V_ce0                                   : std_logic;
  signal grp_seedexpander_init_fu_592_state_V_address0                             : std_logic_vector (4 downto 0);
  signal grp_seedexpander_init_fu_592_state_V_ce0                                  : std_logic;
  signal grp_seedexpander_init_fu_592_state_V_address1                             : std_logic_vector (4 downto 0);
  signal grp_seedexpander_init_fu_592_state_V_ce1                                  : std_logic;
  signal grp_seedexpander_init_fu_592_state_V_we1                                  : std_logic;
  signal grp_seedexpander_init_fu_592_state_V_d1                                   : std_logic_vector (63 downto 0);
  signal grp_vect_set_random_fixe_1_fu_612_ap_start                                : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_ap_done                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_ap_idle                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_ap_ready                                : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_v_V_address0                            : std_logic_vector (11 downto 0);
  signal grp_vect_set_random_fixe_1_fu_612_v_V_ce0                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_v_V_address1                            : std_logic_vector (11 downto 0);
  signal grp_vect_set_random_fixe_1_fu_612_v_V_ce1                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_v_V_we1                                 : std_logic;
  signal grp_vect_set_random_fixe_1_fu_612_v_V_d1                                  : std_logic_vector (7 downto 0);
  signal grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_address0 : std_logic_vector (6 downto 0);
  signal grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_ce0      : std_logic;
  signal i_0_i_reg_410                                                             : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state7                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state7                                       : signal is "none";
  signal ap_CS_fsm_state9                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state9                                       : signal is "none";
  signal i_0_i10_reg_421                                                           : std_logic_vector (2 downto 0);
  signal ap_CS_fsm_state14                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state14                                      : signal is "none";
  signal ap_CS_fsm_state16                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state16                                      : signal is "none";
  signal p_0189_0_i_reg_432                                                        : std_logic_vector (8 downto 0);
  signal ap_CS_fsm_state21                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state21                                      : signal is "none";
  signal p_095_0_i_reg_443                                                         : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state25                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state25                                      : signal is "none";
  signal p_047_0_i_reg_454                                                         : std_logic_vector (8 downto 0);
  signal ap_CS_fsm_state27                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state27                                      : signal is "none";
  signal grp_shake_prng_fu_466_ap_start_reg                                        : std_logic                      := '0';
  signal ap_CS_fsm_state4                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state4                                       : signal is "none";
  signal ap_CS_fsm_state5                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state5                                       : signal is "none";
  signal ap_CS_fsm_state10                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state10                                      : signal is "none";
  signal grp_vect_mul_add_fu_511_ap_start_reg                                      : std_logic                      := '0';
  signal ap_CS_fsm_state20                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state20                                      : signal is "none";
  signal grp_vect_set_random_fixe_fu_530_ap_start_reg                              : std_logic                      := '0';
  signal ap_CS_fsm_state11                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state11                                      : signal is "none";
  signal ap_CS_fsm_state12                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state12                                      : signal is "none";
  signal grp_shake_prng_init_fu_550_ap_start_reg                                   : std_logic                      := '0';
  signal ap_CS_fsm_state3                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state3                                       : signal is "none";
  signal grp_seedexpander_mult_ty_fu_572_ap_start_reg                              : std_logic                      := '0';
  signal ap_CS_fsm_state17                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state17                                      : signal is "none";
  signal grp_seedexpander_init_fu_592_ap_start_reg                                 : std_logic                      := '0';
  signal ap_CS_fsm_state6                                                          : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state6                                       : signal is "none";
  signal ap_CS_fsm_state13                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state13                                      : signal is "none";
  signal grp_vect_set_random_fixe_1_fu_612_ap_start_reg                            : std_logic                      := '0';
  signal zext_ln544_fu_684_p1                                                      : std_logic_vector (63 downto 0);
  signal zext_ln544_32_fu_722_p1                                                   : std_logic_vector (63 downto 0);
  signal zext_ln544_31_fu_884_p1                                                   : std_logic_vector (63 downto 0);
  signal zext_ln544_30_fu_895_p1                                                   : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state19                                                         : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state19                                      : signal is "none";
  signal zext_ln717_fu_661_p1                                                      : std_logic_vector (7 downto 0);
  signal trunc_ln717_fu_657_p1                                                     : std_logic_vector (4 downto 0);
  signal ret_V_29_fu_678_p2                                                        : std_logic_vector (8 downto 0);
  signal zext_ln215_fu_713_p1                                                      : std_logic_vector (11 downto 0);
  signal ret_V_32_fu_717_p2                                                        : std_logic_vector (11 downto 0);
  signal Lo_fu_727_p3                                                              : std_logic_vector (5 downto 0);
  signal Hi_fu_734_p2                                                              : std_logic_vector (5 downto 0);
  signal zext_ln414_fu_750_p1                                                      : std_logic_vector (6 downto 0);
  signal icmp_ln414_fu_744_p2                                                      : std_logic_vector (0 downto 0);
  signal zext_ln414_1_fu_754_p1                                                    : std_logic_vector (6 downto 0);
  signal xor_ln414_fu_758_p2                                                       : std_logic_vector (6 downto 0);
  signal select_ln414_fu_764_p3                                                    : std_logic_vector (6 downto 0);
  signal select_ln414_2_fu_780_p3                                                  : std_logic_vector (6 downto 0);
  signal select_ln414_1_fu_772_p3                                                  : std_logic_vector (6 downto 0);
  signal xor_ln414_1_fu_788_p2                                                     : std_logic_vector (6 downto 0);
  signal tmp_V_fu_740_p1                                                           : std_logic_vector (63 downto 0);
  signal zext_ln414_2_fu_794_p1                                                    : std_logic_vector (63 downto 0);
  signal shl_ln414_fu_806_p2                                                       : std_logic_vector (63 downto 0);
  signal tmp_fu_812_p4                                                             : std_logic_vector (63 downto 0);
  signal zext_ln414_3_fu_798_p1                                                    : std_logic_vector (63 downto 0);
  signal zext_ln414_4_fu_802_p1                                                    : std_logic_vector (63 downto 0);
  signal shl_ln414_1_fu_830_p2                                                     : std_logic_vector (63 downto 0);
  signal lshr_ln414_fu_836_p2                                                      : std_logic_vector (63 downto 0);
  signal and_ln414_fu_842_p2                                                       : std_logic_vector (63 downto 0);
  signal xor_ln414_2_fu_848_p2                                                     : std_logic_vector (63 downto 0);
  signal select_ln414_3_fu_822_p3                                                  : std_logic_vector (63 downto 0);
  signal and_ln414_1_fu_854_p2                                                     : std_logic_vector (63 downto 0);
  signal and_ln414_2_fu_860_p2                                                     : std_logic_vector (63 downto 0);
  signal ret_V_fu_889_p2                                                           : std_logic_vector (8 downto 0);
  signal ap_NS_fsm                                                                 : std_logic_vector (26 downto 0);
  signal ap_block_state10_on_subcall_done                                          : boolean;
  signal ap_block_state12_on_subcall_done                                          : boolean;

  constant zero1                                                                   : std_logic := '0';
  constant zero64                                                                  : std_logic_vector (63 downto 0) := (others => '0');
  -- Channel A
  signal ap_start_A         : std_logic;
  signal ap_done_A          : std_logic;
  signal ap_idle_A          : std_logic;
  signal ap_ready_A         : std_logic;
  signal state_V_address0_A : std_logic_vector (4 downto 0);
  signal state_V_ce0_A      : std_logic;
  signal state_V_q0_A       : std_logic_vector (63 downto 0);
  signal state_V_address1_A : std_logic_vector (4 downto 0);
  signal state_V_ce1_A      : std_logic;
  signal state_V_we1_A      : std_logic;
  signal state_V_d1_A       : std_logic_vector (63 downto 0);
  -- Channel B
  signal ap_start_B         : std_logic;
  signal ap_done_B          : std_logic;
  signal ap_idle_B          : std_logic;
  signal ap_ready_B         : std_logic;
  signal state_V_address0_B : std_logic_vector (4 downto 0);
  signal state_V_ce0_B      : std_logic;
  signal state_V_q0_B       : std_logic_vector (63 downto 0);
  signal state_V_address1_B : std_logic_vector (4 downto 0);
  signal state_V_ce1_B      : std_logic;
  signal state_V_we1_B      : std_logic;
  signal state_V_d1_B       : std_logic_vector (63 downto 0);
  -- Channel C
  signal ap_start_C         : std_logic;
  signal ap_done_C          : std_logic;
  signal ap_idle_C          : std_logic;
  signal ap_ready_C         : std_logic;
  signal state_V_address0_C : std_logic_vector (4 downto 0);
  signal state_V_ce0_C      : std_logic;
  signal state_V_q0_C       : std_logic_vector (63 downto 0);
  signal state_V_address1_C : std_logic_vector (4 downto 0);
  signal state_V_ce1_C      : std_logic;
  signal state_V_we1_C      : std_logic;
  signal state_V_d1_C       : std_logic_vector (63 downto 0);
  -- Channel D
  signal ap_start_D         : std_logic;
  signal ap_done_D          : std_logic;
  signal ap_idle_D          : std_logic;
  signal ap_ready_D         : std_logic;
  signal state_V_address0_D : std_logic_vector (4 downto 0);
  signal state_V_ce0_D      : std_logic;
  signal state_V_q0_D       : std_logic_vector (63 downto 0);
  signal state_V_address1_D : std_logic_vector (4 downto 0);
  signal state_V_ce1_D      : std_logic;
  signal state_V_we1_D      : std_logic;
  signal state_V_d1_D       : std_logic_vector (63 downto 0);
  -- Channel E
  signal ap_start_E         : std_logic;
  signal ap_done_E          : std_logic;
  signal ap_idle_E          : std_logic;
  signal ap_ready_E         : std_logic;
  signal state_V_address0_E : std_logic_vector (4 downto 0);
  signal state_V_ce0_E      : std_logic;
  signal state_V_q0_E       : std_logic_vector (63 downto 0);
  signal state_V_address1_E : std_logic_vector (4 downto 0);
  signal state_V_ce1_E      : std_logic;
  signal state_V_we1_E      : std_logic;
  signal state_V_d1_E       : std_logic_vector (63 downto 0);
  
  component KeccakF1600_StatePer is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      -- Channel A
      ap_start_A         : in  std_logic;
      ap_done_A          : out std_logic;
      ap_idle_A          : out std_logic;
      ap_ready_A         : out std_logic;
      state_V_address0_A : out std_logic_vector (4 downto 0);
      state_V_ce0_A      : out std_logic;
      state_V_q0_A       : in  std_logic_vector (63 downto 0);
      state_V_address1_A : out std_logic_vector (4 downto 0);
      state_V_ce1_A      : out std_logic;
      state_V_we1_A      : out std_logic;
      state_V_d1_A       : out std_logic_vector (63 downto 0);
      -- Channel B
      ap_start_B         : in  std_logic;
      ap_done_B          : out std_logic;
      ap_idle_B          : out std_logic;
      ap_ready_B         : out std_logic;
      state_V_address0_B : out std_logic_vector (4 downto 0);
      state_V_ce0_B      : out std_logic;
      state_V_q0_B       : in  std_logic_vector (63 downto 0);
      state_V_address1_B : out std_logic_vector (4 downto 0);
      state_V_ce1_B      : out std_logic;
      state_V_we1_B      : out std_logic;
      state_V_d1_B       : out std_logic_vector (63 downto 0);
      -- Channel C
      ap_start_C         : in  std_logic;
      ap_done_C          : out std_logic;
      ap_idle_C          : out std_logic;
      ap_ready_C         : out std_logic;
      state_V_address0_C : out std_logic_vector (4 downto 0);
      state_V_ce0_C      : out std_logic;
      state_V_q0_C       : in  std_logic_vector (63 downto 0);
      state_V_address1_C : out std_logic_vector (4 downto 0);
      state_V_ce1_C      : out std_logic;
      state_V_we1_C      : out std_logic;
      state_V_d1_C       : out std_logic_vector (63 downto 0);
      -- Channel D
      ap_start_D         : in  std_logic;
      ap_done_D          : out std_logic;
      ap_idle_D          : out std_logic;
      ap_ready_D         : out std_logic;
      state_V_address0_D : out std_logic_vector (4 downto 0);
      state_V_ce0_D      : out std_logic;
      state_V_q0_D       : in  std_logic_vector (63 downto 0);
      state_V_address1_D : out std_logic_vector (4 downto 0);
      state_V_ce1_D      : out std_logic;
      state_V_we1_D      : out std_logic;
      state_V_d1_D       : out std_logic_vector (63 downto 0);
      -- Channel E
      ap_start_E         : in  std_logic;
      ap_done_E          : out std_logic;
      ap_idle_E          : out std_logic;
      ap_ready_E         : out std_logic;
      state_V_address0_E : out std_logic_vector (4 downto 0);
      state_V_ce0_E      : out std_logic;
      state_V_q0_E       : in  std_logic_vector (63 downto 0);
      state_V_address1_E : out std_logic_vector (4 downto 0);
      state_V_ce1_E      : out std_logic;
      state_V_we1_E      : out std_logic;
      state_V_d1_E       : out std_logic_vector (63 downto 0)
      );
  end component;
  
  component shake_prng is
    port (
      ap_clk                : in  std_logic;
      ap_rst                : in  std_logic;
      ap_start              : in  std_logic;
      ap_done               : out std_logic;
      ap_idle               : out std_logic;
      ap_ready              : out std_logic;
      output_V_address0     : out std_logic_vector (2 downto 0);
      output_V_ce0          : out std_logic;
      output_V_we0          : out std_logic;
      output_V_d0           : out std_logic_vector (63 downto 0);
      state_prng_V_address0 : out std_logic_vector (4 downto 0);
      state_prng_V_ce0      : out std_logic;
      state_prng_V_q0       : in  std_logic_vector (63 downto 0);
      state_prng_V_address1 : out std_logic_vector (4 downto 0);
      state_prng_V_ce1      : out std_logic;
      state_prng_V_we1      : out std_logic;
      state_prng_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component vect_mul_add is
    port (
      ap_clk        : in  std_logic;
      ap_rst        : in  std_logic;
      ap_start      : in  std_logic;
      ap_done       : out std_logic;
      ap_idle       : out std_logic;
      ap_ready      : out std_logic;
      o_V_address0  : out std_logic_vector (11 downto 0);
      o_V_ce0       : out std_logic;
      o_V_q0        : in  std_logic_vector (7 downto 0);
      o_V_address1  : out std_logic_vector (11 downto 0);
      o_V_ce1       : out std_logic;
      o_V_we1       : out std_logic;
      o_V_d1        : out std_logic_vector (7 downto 0);
      a1_V_address0 : out std_logic_vector (6 downto 0);
      a1_V_ce0      : out std_logic;
      a1_V_q0       : in  std_logic_vector (14 downto 0);
      a2_V_address0 : out std_logic_vector (11 downto 0);
      a2_V_ce0      : out std_logic;
      a2_V_q0       : in  std_logic_vector (7 downto 0);
      a2_V_address1 : out std_logic_vector (11 downto 0);
      a2_V_ce1      : out std_logic;
      a2_V_we1      : out std_logic;
      a2_V_d1       : out std_logic_vector (7 downto 0);
      a3_V_address0 : out std_logic_vector (11 downto 0);
      a3_V_ce0      : out std_logic;
      a3_V_q0       : in  std_logic_vector (7 downto 0));
  end component;


  component vect_set_random_fixe is
    port (
      ap_clk                        : in  std_logic;
      ap_rst                        : in  std_logic;
      ap_start                      : in  std_logic;
      ap_done                       : out std_logic;
      ap_idle                       : out std_logic;
      ap_ready                      : out std_logic;
      v_V_address0                  : out std_logic_vector (6 downto 0);
      v_V_ce0                       : out std_logic;
      v_V_q0                        : in  std_logic_vector (14 downto 0);
      v_V_address1                  : out std_logic_vector (6 downto 0);
      v_V_ce1                       : out std_logic;
      v_V_we1                       : out std_logic;
      v_V_d1                        : out std_logic_vector (14 downto 0);
      state_seedexpander_V_address0 : out std_logic_vector (4 downto 0);
      state_seedexpander_V_ce0      : out std_logic;
      state_seedexpander_V_q0       : in  std_logic_vector (63 downto 0);
      state_seedexpander_V_address1 : out std_logic_vector (4 downto 0);
      state_seedexpander_V_ce1      : out std_logic;
      state_seedexpander_V_we1      : out std_logic;
      state_seedexpander_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component shake_prng_init is
    port (
      ap_clk                            : in  std_logic;
      ap_rst                            : in  std_logic;
      ap_start                          : in  std_logic;
      ap_done                           : out std_logic;
      ap_idle                           : out std_logic;
      ap_ready                          : out std_logic;
      entropy_input_V_address0          : out std_logic_vector (5 downto 0);
      entropy_input_V_ce0               : out std_logic;
      entropy_input_V_q0                : in  std_logic_vector (7 downto 0);
      enlen_V                           : in  std_logic_vector (6 downto 0);
      shake_prng_state_array_V_address0 : out std_logic_vector (4 downto 0);
      shake_prng_state_array_V_ce0      : out std_logic;
      shake_prng_state_array_V_q0       : in  std_logic_vector (63 downto 0);
      shake_prng_state_array_V_address1 : out std_logic_vector (4 downto 0);
      shake_prng_state_array_V_ce1      : out std_logic;
      shake_prng_state_array_V_we1      : out std_logic;
      shake_prng_state_array_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component seedexpander_mult_ty is
    port (
      ap_clk            : in  std_logic;
      ap_rst            : in  std_logic;
      ap_start          : in  std_logic;
      ap_done           : out std_logic;
      ap_idle           : out std_logic;
      ap_ready          : out std_logic;
      output_V_address1 : out std_logic_vector (11 downto 0);
      output_V_ce1      : out std_logic;
      output_V_we1      : out std_logic;
      output_V_d1       : out std_logic_vector (7 downto 0);
      state_V_address0  : out std_logic_vector (4 downto 0);
      state_V_ce0       : out std_logic;
      state_V_q0        : in  std_logic_vector (63 downto 0);
      state_V_address1  : out std_logic_vector (4 downto 0);
      state_V_ce1       : out std_logic;
      state_V_we1       : out std_logic;
      state_V_d1        : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component seedexpander_init is
    port (
      ap_clk           : in  std_logic;
      ap_rst           : in  std_logic;
      ap_start         : in  std_logic;
      ap_done          : out std_logic;
      ap_idle          : out std_logic;
      ap_ready         : out std_logic;
      seed_V_address0  : out std_logic_vector (2 downto 0);
      seed_V_ce0       : out std_logic;
      seed_V_q0        : in  std_logic_vector (63 downto 0);
      state_V_address0 : out std_logic_vector (4 downto 0);
      state_V_ce0      : out std_logic;
      state_V_q0       : in  std_logic_vector (63 downto 0);
      state_V_address1 : out std_logic_vector (4 downto 0);
      state_V_ce1      : out std_logic;
      state_V_we1      : out std_logic;
      state_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
  end component;


  component vect_set_random_fixe_1 is
    port (
      ap_clk                                  : in  std_logic;
      ap_rst                                  : in  std_logic;
      ap_start                                : in  std_logic;
      ap_done                                 : out std_logic;
      ap_idle                                 : out std_logic;
      ap_ready                                : out std_logic;
      v_V_address0                            : out std_logic_vector (11 downto 0);
      v_V_ce0                                 : out std_logic;
      v_V_q0                                  : in  std_logic_vector (7 downto 0);
      v_V_address1                            : out std_logic_vector (11 downto 0);
      v_V_ce1                                 : out std_logic;
      v_V_we1                                 : out std_logic;
      v_V_d1                                  : out std_logic_vector (7 downto 0);
      fixed_weight_by_coord_vector_V_address0 : out std_logic_vector (6 downto 0);
      fixed_weight_by_coord_vector_V_ce0      : out std_logic;
      fixed_weight_by_coord_vector_V_q0       : in  std_logic_vector (14 downto 0));
  end component;


  component crypto_kem_keypaiocq is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (4 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (63 downto 0);
      address1 : in  std_logic_vector (4 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (63 downto 0));
  end component;


  component crypto_kem_keypaiqcK is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (11 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (11 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_keypaisc4 is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (11 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (11 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0));
  end component;


  component crypto_kem_keypaitde is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (6 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (14 downto 0);
      address1 : in  std_logic_vector (6 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (14 downto 0));
  end component;


  component crypto_kem_keypaivdy is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (2 downto 0);
      ce0      : in  std_logic;
      we0      : in  std_logic;
      d0       : in  std_logic_vector (63 downto 0);
      q0       : out std_logic_vector (63 downto 0));
  end component;



begin

  KeccakF1600_StatePer_U : KeccakF1600_StatePer
    port map(
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      -- Channel A         
      ap_start_A         => ap_start_A,
      ap_done_A          => ap_done_A,
      ap_idle_A          => ap_idle_A,
      ap_ready_A         => ap_ready_A,
      state_V_address0_A => state_V_address0_A,
      state_V_ce0_A      => state_V_ce0_A,
      state_V_q0_A       => state_V_q0_A,
      state_V_address1_A => state_V_address1_A,
      state_V_ce1_A      => state_V_ce1_A,
      state_V_we1_A      => state_V_we1_A,
      state_V_d1_A       => state_V_d1_A,
      -- Channel B         
      ap_start_B         => ap_start_B,
      ap_done_B          => ap_done_B,
      ap_idle_B          => ap_idle_B,
      ap_ready_B         => ap_ready_B,
      state_V_address0_B => state_V_address0_B,
      state_V_ce0_B      => state_V_ce0_B,
      state_V_q0_B       => state_V_q0_B,
      state_V_address1_B => state_V_address1_B,
      state_V_ce1_B      => state_V_ce1_B,
      state_V_we1_B      => state_V_we1_B,
      state_V_d1_B       => state_V_d1_B,
      -- Channel C         
      ap_start_C         => ap_start_C,
      ap_done_C          => ap_done_C,
      ap_idle_C          => ap_idle_C,
      ap_ready_C         => ap_ready_C,
      state_V_address0_C => state_V_address0_C,
      state_V_ce0_C      => state_V_ce0_C,
      state_V_q0_C       => state_V_q0_C,
      state_V_address1_C => state_V_address1_C,
      state_V_ce1_C      => state_V_ce1_C,
      state_V_we1_C      => state_V_we1_C,
      state_V_d1_C       => state_V_d1_C,
      -- Channel D         
      ap_start_D         => ap_start_D,
      ap_done_D          => ap_done_D,
      ap_idle_D          => ap_idle_D,
      ap_ready_D         => ap_ready_D,
      state_V_address0_D => state_V_address0_D,
      state_V_ce0_D      => state_V_ce0_D,
      state_V_q0_D       => state_V_q0_D,
      state_V_address1_D => state_V_address1_D,
      state_V_ce1_D      => state_V_ce1_D,
      state_V_we1_D      => state_V_we1_D,
      state_V_d1_D       => state_V_d1_D,
      -- Channel E         
      ap_start_E         => ap_start_E,
      ap_done_E          => ap_done_E,
      ap_idle_E          => ap_idle_E,
      ap_ready_E         => ap_ready_E,
      state_V_address0_E => state_V_address0_E,
      state_V_ce0_E      => state_V_ce0_E,
      state_V_q0_E       => state_V_q0_E,
      state_V_address1_E => state_V_address1_E,
      state_V_ce1_E      => state_V_ce1_E,
      state_V_we1_E      => state_V_we1_E,
      state_V_d1_E       => state_V_d1_E
      );
	  
  state_seedexpander_V_U : component crypto_kem_keypaiocq
    generic map (
      DataWidth    => 64,
      AddressRange => 26,
      AddressWidth => 5)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => state_seedexpander_V_address0,
      ce0      => state_seedexpander_V_ce0,
      q0       => state_seedexpander_V_q0,
      address1 => state_seedexpander_V_address1,
      ce1      => state_seedexpander_V_ce1,
      we1      => state_seedexpander_V_we1,
      d1       => state_seedexpander_V_d1);

  state_prng_V_U : component crypto_kem_keypaiocq
    generic map (
      DataWidth    => 64,
      AddressRange => 26,
      AddressWidth => 5)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => state_prng_V_address0,
      ce0      => state_prng_V_ce0,
      q0       => state_prng_V_q0,
      address1 => state_prng_V_address1,
      ce1      => state_prng_V_ce1,
      we1      => state_prng_V_we1,
      d1       => state_prng_V_d1);

  store_A_V_U : component crypto_kem_keypaiqcK
    generic map (
      DataWidth    => 8,
      AddressRange => 2209,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_A_V_address0,
      ce0      => store_A_V_ce0,
      q0       => store_A_V_q0,
      address1 => store_A_V_address1,
      ce1      => store_A_V_ce1,
      we1      => store_A_V_we1,
      d1       => store_A_V_d1);

  store_B_V_U : component crypto_kem_keypaiqcK
    generic map (
      DataWidth    => 8,
      AddressRange => 2209,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_B_V_address0,
      ce0      => store_B_V_ce0,
      q0       => store_B_V_q0,
      address1 => store_B_V_address1,
      ce1      => store_B_V_ce1,
      we1      => store_B_V_we1,
      d1       => store_B_V_d1);

  h_s_V_U : component crypto_kem_keypaisc4
    generic map (
      DataWidth    => 8,
      AddressRange => 2210,
      AddressWidth => 12)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => h_s_V_address0,
      ce0      => h_s_V_ce0,
      q0       => h_s_V_q0,
      address1 => h_s_V_address1,
      ce1      => h_s_V_ce1,
      we1      => h_s_V_we1,
      d1       => h_s_V_d1);

  random_vector_A_V_U : component crypto_kem_keypaitde
    generic map (
      DataWidth    => 15,
      AddressRange => 75,
      AddressWidth => 7)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => random_vector_A_V_address0,
      ce0      => random_vector_A_V_ce0,
      q0       => random_vector_A_V_q0,
      address1 => random_vector_A_V_address1,
      ce1      => random_vector_A_V_ce1,
      we1      => random_vector_A_V_we1,
      d1       => random_vector_A_V_d1);

  random_vector_B_V_U : component crypto_kem_keypaitde
    generic map (
      DataWidth    => 15,
      AddressRange => 75,
      AddressWidth => 7)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => random_vector_B_V_address0,
      ce0      => random_vector_B_V_ce0,
      q0       => random_vector_B_V_q0,
      address1 => random_vector_B_V_address1,
      ce1      => random_vector_B_V_ce1,
      we1      => random_vector_B_V_we1,
      d1       => random_vector_B_V_d1);

  store_seeds_V_U : component crypto_kem_keypaivdy
    generic map (
      DataWidth    => 64,
      AddressRange => 5,
      AddressWidth => 3)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => store_seeds_V_address0,
      ce0      => store_seeds_V_ce0,
      we0      => store_seeds_V_we0,
      d0       => store_seeds_V_d0,
      q0       => store_seeds_V_q0);

  grp_shake_prng_fu_466 : component shake_prng
    port map (
      ap_clk                => ap_clk,
      ap_rst                => ap_rst,
      ap_start              => grp_shake_prng_fu_466_ap_start,
      ap_done               => grp_shake_prng_fu_466_ap_done,
      ap_idle               => grp_shake_prng_fu_466_ap_idle,
      ap_ready              => grp_shake_prng_fu_466_ap_ready,
      output_V_address0     => grp_shake_prng_fu_466_output_V_address0,
      output_V_ce0          => grp_shake_prng_fu_466_output_V_ce0,
      output_V_we0          => grp_shake_prng_fu_466_output_V_we0,
      output_V_d0           => grp_shake_prng_fu_466_output_V_d0,
      state_prng_V_address0 => grp_shake_prng_fu_466_state_prng_V_address0,
      state_prng_V_ce0      => grp_shake_prng_fu_466_state_prng_V_ce0,
      state_prng_V_q0       => state_prng_V_q0,
      state_prng_V_address1 => grp_shake_prng_fu_466_state_prng_V_address1,
      state_prng_V_ce1      => grp_shake_prng_fu_466_state_prng_V_ce1,
      state_prng_V_we1      => grp_shake_prng_fu_466_state_prng_V_we1,
      state_prng_V_d1       => grp_shake_prng_fu_466_state_prng_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel A
      ap_start_permute         => ap_start_A,
      ap_done_permute          => ap_done_A,
      ap_idle_permute          => ap_idle_A,
      ap_ready_permute         => ap_ready_A,
      state_V_address0_permute => state_V_address0_A,
      state_V_ce0_permute      => state_V_ce0_A,
      state_V_q0_permute       => state_V_q0_A,
      state_V_address1_permute => state_V_address1_A,
      state_V_ce1_permute      => state_V_ce1_A,
      state_V_we1_permute      => state_V_we1_A,
      state_V_d1_permute       => state_V_d1_A
      );

  grp_vect_mul_add_fu_511 : component vect_mul_add
    port map (
      ap_clk        => ap_clk,
      ap_rst        => ap_rst,
      ap_start      => grp_vect_mul_add_fu_511_ap_start,
      ap_done       => grp_vect_mul_add_fu_511_ap_done,
      ap_idle       => grp_vect_mul_add_fu_511_ap_idle,
      ap_ready      => grp_vect_mul_add_fu_511_ap_ready,
      o_V_address0  => grp_vect_mul_add_fu_511_o_V_address0,
      o_V_ce0       => grp_vect_mul_add_fu_511_o_V_ce0,
      o_V_q0        => store_A_V_q0,
      o_V_address1  => grp_vect_mul_add_fu_511_o_V_address1,
      o_V_ce1       => grp_vect_mul_add_fu_511_o_V_ce1,
      o_V_we1       => grp_vect_mul_add_fu_511_o_V_we1,
      o_V_d1        => grp_vect_mul_add_fu_511_o_V_d1,
      a1_V_address0 => grp_vect_mul_add_fu_511_a1_V_address0,
      a1_V_ce0      => grp_vect_mul_add_fu_511_a1_V_ce0,
      a1_V_q0       => random_vector_B_V_q0,
      a2_V_address0 => grp_vect_mul_add_fu_511_a2_V_address0,
      a2_V_ce0      => grp_vect_mul_add_fu_511_a2_V_ce0,
      a2_V_q0       => h_s_V_q0,
      a2_V_address1 => grp_vect_mul_add_fu_511_a2_V_address1,
      a2_V_ce1      => grp_vect_mul_add_fu_511_a2_V_ce1,
      a2_V_we1      => grp_vect_mul_add_fu_511_a2_V_we1,
      a2_V_d1       => grp_vect_mul_add_fu_511_a2_V_d1,
      a3_V_address0 => grp_vect_mul_add_fu_511_a3_V_address0,
      a3_V_ce0      => grp_vect_mul_add_fu_511_a3_V_ce0,
      a3_V_q0       => store_B_V_q0);

  grp_vect_set_random_fixe_fu_530 : component vect_set_random_fixe
    port map (
      ap_clk                        => ap_clk,
      ap_rst                        => ap_rst,
      ap_start                      => grp_vect_set_random_fixe_fu_530_ap_start,
      ap_done                       => grp_vect_set_random_fixe_fu_530_ap_done,
      ap_idle                       => grp_vect_set_random_fixe_fu_530_ap_idle,
      ap_ready                      => grp_vect_set_random_fixe_fu_530_ap_ready,
      v_V_address0                  => grp_vect_set_random_fixe_fu_530_v_V_address0,
      v_V_ce0                       => grp_vect_set_random_fixe_fu_530_v_V_ce0,
      v_V_q0                        => grp_vect_set_random_fixe_fu_530_v_V_q0,
      v_V_address1                  => grp_vect_set_random_fixe_fu_530_v_V_address1,
      v_V_ce1                       => grp_vect_set_random_fixe_fu_530_v_V_ce1,
      v_V_we1                       => grp_vect_set_random_fixe_fu_530_v_V_we1,
      v_V_d1                        => grp_vect_set_random_fixe_fu_530_v_V_d1,
      state_seedexpander_V_address0 => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address0,
      state_seedexpander_V_ce0      => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce0,
      state_seedexpander_V_q0       => state_seedexpander_V_q0,
      state_seedexpander_V_address1 => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address1,
      state_seedexpander_V_ce1      => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce1,
      state_seedexpander_V_we1      => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_we1,
      state_seedexpander_V_d1       => grp_vect_set_random_fixe_fu_530_state_seedexpander_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel B
      ap_start_permute              => ap_start_B,
      ap_done_permute               => ap_done_B,
      ap_idle_permute               => ap_idle_B,
      ap_ready_permute              => ap_ready_B,
      state_V_address0_permute      => state_V_address0_B,
      state_V_ce0_permute           => state_V_ce0_B,
      state_V_q0_permute            => state_V_q0_B,
      state_V_address1_permute      => state_V_address1_B,
      state_V_ce1_permute           => state_V_ce1_B,
      state_V_we1_permute           => state_V_we1_B,
      state_V_d1_permute            => state_V_d1_B
      );

  grp_shake_prng_init_fu_550 : component shake_prng_init
    port map (
      ap_clk                            => ap_clk,
      ap_rst                            => ap_rst,
      ap_start                          => grp_shake_prng_init_fu_550_ap_start,
      ap_done                           => grp_shake_prng_init_fu_550_ap_done,
      ap_idle                           => grp_shake_prng_init_fu_550_ap_idle,
      ap_ready                          => grp_shake_prng_init_fu_550_ap_ready,
      entropy_input_V_address0          => grp_shake_prng_init_fu_550_entropy_input_V_address0,
      entropy_input_V_ce0               => grp_shake_prng_init_fu_550_entropy_input_V_ce0,
      entropy_input_V_q0                => prng_seed_V_q0,
      enlen_V                           => trunc_ln93_reg_900,
      shake_prng_state_array_V_address0 => grp_shake_prng_init_fu_550_shake_prng_state_array_V_address0,
      shake_prng_state_array_V_ce0      => grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce0,
      shake_prng_state_array_V_q0       => state_prng_V_q0,
      shake_prng_state_array_V_address1 => grp_shake_prng_init_fu_550_shake_prng_state_array_V_address1,
      shake_prng_state_array_V_ce1      => grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce1,
      shake_prng_state_array_V_we1      => grp_shake_prng_init_fu_550_shake_prng_state_array_V_we1,
      shake_prng_state_array_V_d1       => grp_shake_prng_init_fu_550_shake_prng_state_array_V_d1,
	  -- Channel to KeccakF1600_StatePermute Channel C
	  ap_start_permute         => ap_start_C,
      ap_done_permute          => ap_done_C,
      ap_idle_permute          => ap_idle_C,
      ap_ready_permute         => ap_ready_C,
      state_V_address0_permute => state_V_address0_C,
      state_V_ce0_permute      => state_V_ce0_C,
      state_V_q0_permute       => state_V_q0_C,
      state_V_address1_permute => state_V_address1_C,
      state_V_ce1_permute      => state_V_ce1_C,
      state_V_we1_permute      => state_V_we1_C,
      state_V_d1_permute       => state_V_d1_C
	  );

  grp_seedexpander_mult_ty_fu_572 : component seedexpander_mult_ty
    port map (
      ap_clk            => ap_clk,
      ap_rst            => ap_rst,
      ap_start          => grp_seedexpander_mult_ty_fu_572_ap_start,
      ap_done           => grp_seedexpander_mult_ty_fu_572_ap_done,
      ap_idle           => grp_seedexpander_mult_ty_fu_572_ap_idle,
      ap_ready          => grp_seedexpander_mult_ty_fu_572_ap_ready,
      output_V_address1 => grp_seedexpander_mult_ty_fu_572_output_V_address1,
      output_V_ce1      => grp_seedexpander_mult_ty_fu_572_output_V_ce1,
      output_V_we1      => grp_seedexpander_mult_ty_fu_572_output_V_we1,
      output_V_d1       => grp_seedexpander_mult_ty_fu_572_output_V_d1,
      state_V_address0  => grp_seedexpander_mult_ty_fu_572_state_V_address0,
      state_V_ce0       => grp_seedexpander_mult_ty_fu_572_state_V_ce0,
      state_V_q0        => state_seedexpander_V_q0,
      state_V_address1  => grp_seedexpander_mult_ty_fu_572_state_V_address1,
      state_V_ce1       => grp_seedexpander_mult_ty_fu_572_state_V_ce1,
      state_V_we1       => grp_seedexpander_mult_ty_fu_572_state_V_we1,
      state_V_d1        => grp_seedexpander_mult_ty_fu_572_state_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel D
      ap_start_permute         => ap_start_D,
      ap_done_permute          => ap_done_D,
      ap_idle_permute          => ap_idle_D,
      ap_ready_permute         => ap_ready_D,
      state_V_address0_permute => state_V_address0_D,
      state_V_ce0_permute      => state_V_ce0_D,
      state_V_q0_permute       => state_V_q0_D,
      state_V_address1_permute => state_V_address1_D,
      state_V_ce1_permute      => state_V_ce1_D,
      state_V_we1_permute      => state_V_we1_D,
      state_V_d1_permute       => state_V_d1_D
      );

  grp_seedexpander_init_fu_592 : component seedexpander_init
    port map (
      ap_clk           => ap_clk,
      ap_rst           => ap_rst,
      ap_start         => grp_seedexpander_init_fu_592_ap_start,
      ap_done          => grp_seedexpander_init_fu_592_ap_done,
      ap_idle          => grp_seedexpander_init_fu_592_ap_idle,
      ap_ready         => grp_seedexpander_init_fu_592_ap_ready,
      seed_V_address0  => grp_seedexpander_init_fu_592_seed_V_address0,
      seed_V_ce0       => grp_seedexpander_init_fu_592_seed_V_ce0,
      seed_V_q0        => store_seeds_V_q0,
      state_V_address0 => grp_seedexpander_init_fu_592_state_V_address0,
      state_V_ce0      => grp_seedexpander_init_fu_592_state_V_ce0,
      state_V_q0       => state_seedexpander_V_q0,
      state_V_address1 => grp_seedexpander_init_fu_592_state_V_address1,
      state_V_ce1      => grp_seedexpander_init_fu_592_state_V_ce1,
      state_V_we1      => grp_seedexpander_init_fu_592_state_V_we1,
      state_V_d1       => grp_seedexpander_init_fu_592_state_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel E
      ap_start_permute         => ap_start_E,
      ap_done_permute          => ap_done_E,
      ap_idle_permute          => ap_idle_E,
      ap_ready_permute         => ap_ready_E,
      state_V_address0_permute => state_V_address0_E,
      state_V_ce0_permute      => state_V_ce0_E,
      state_V_q0_permute       => state_V_q0_E,
      state_V_address1_permute => state_V_address1_E,
      state_V_ce1_permute      => state_V_ce1_E,
      state_V_we1_permute      => state_V_we1_E,
      state_V_d1_permute       => state_V_d1_E
      );

  grp_vect_set_random_fixe_1_fu_612 : component vect_set_random_fixe_1
    port map (
      ap_clk                                  => ap_clk,
      ap_rst                                  => ap_rst,
      ap_start                                => grp_vect_set_random_fixe_1_fu_612_ap_start,
      ap_done                                 => grp_vect_set_random_fixe_1_fu_612_ap_done,
      ap_idle                                 => grp_vect_set_random_fixe_1_fu_612_ap_idle,
      ap_ready                                => grp_vect_set_random_fixe_1_fu_612_ap_ready,
      v_V_address0                            => grp_vect_set_random_fixe_1_fu_612_v_V_address0,
      v_V_ce0                                 => grp_vect_set_random_fixe_1_fu_612_v_V_ce0,
      v_V_q0                                  => store_B_V_q0,
      v_V_address1                            => grp_vect_set_random_fixe_1_fu_612_v_V_address1,
      v_V_ce1                                 => grp_vect_set_random_fixe_1_fu_612_v_V_ce1,
      v_V_we1                                 => grp_vect_set_random_fixe_1_fu_612_v_V_we1,
      v_V_d1                                  => grp_vect_set_random_fixe_1_fu_612_v_V_d1,
      fixed_weight_by_coord_vector_V_address0 => grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_address0,
      fixed_weight_by_coord_vector_V_ce0      => grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_ce0,
      fixed_weight_by_coord_vector_V_q0       => random_vector_A_V_q0);





  ap_CS_fsm_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_CS_fsm <= ap_ST_fsm_state1;
      else
        ap_CS_fsm <= ap_NS_fsm;
      end if;
    end if;
  end process;


  grp_seedexpander_init_fu_592_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_seedexpander_init_fu_592_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
          grp_seedexpander_init_fu_592_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_seedexpander_init_fu_592_ap_ready = ap_const_logic_1)) then
          grp_seedexpander_init_fu_592_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_seedexpander_mult_ty_fu_572_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_seedexpander_mult_ty_fu_572_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln284_1_fu_640_p2 = ap_const_lv1_1))) then
          grp_seedexpander_mult_ty_fu_572_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_seedexpander_mult_ty_fu_572_ap_ready = ap_const_logic_1)) then
          grp_seedexpander_mult_ty_fu_572_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_shake_prng_fu_466_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_shake_prng_fu_466_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln284_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
          grp_shake_prng_fu_466_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_shake_prng_fu_466_ap_ready = ap_const_logic_1)) then
          grp_shake_prng_fu_466_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_shake_prng_init_fu_550_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_shake_prng_init_fu_550_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
          grp_shake_prng_init_fu_550_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_shake_prng_init_fu_550_ap_ready = ap_const_logic_1)) then
          grp_shake_prng_init_fu_550_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_mul_add_fu_511_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_mul_add_fu_511_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
          grp_vect_mul_add_fu_511_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_mul_add_fu_511_ap_ready = ap_const_logic_1)) then
          grp_vect_mul_add_fu_511_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_set_random_fixe_1_fu_612_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_set_random_fixe_1_fu_612_ap_start_reg <= ap_const_logic_0;
      else
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
          grp_vect_set_random_fixe_1_fu_612_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_set_random_fixe_1_fu_612_ap_ready = ap_const_logic_1)) then
          grp_vect_set_random_fixe_1_fu_612_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_vect_set_random_fixe_fu_530_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_vect_set_random_fixe_fu_530_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln284_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
          grp_vect_set_random_fixe_fu_530_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_vect_set_random_fixe_fu_530_ap_ready = ap_const_logic_1)) then
          grp_vect_set_random_fixe_fu_530_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  i_0_i10_reg_421_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
        i_0_i10_reg_421 <= i_2_reg_926;
      elsif (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
        i_0_i10_reg_421 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  i_0_i_reg_410_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
        i_0_i_reg_410 <= i_reg_908;
      elsif (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
        i_0_i_reg_410 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  p_0189_0_i_reg_432_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln887_10_fu_697_p2 = ap_const_lv1_1))) then
        p_0189_0_i_reg_432 <= i_V_5_reg_950;
      elsif (((grp_vect_mul_add_fu_511_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
        p_0189_0_i_reg_432 <= ap_const_lv9_0;
      end if;
    end if;
  end process;

  p_047_0_i_reg_454_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln887_fu_666_p2 = ap_const_lv1_1))) then
        p_047_0_i_reg_454 <= ap_const_lv9_0;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
        p_047_0_i_reg_454 <= i_V_reg_991;
      end if;
    end if;
  end process;

  p_095_0_i_reg_443_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
        p_095_0_i_reg_443 <= j_V_reg_968;
      elsif (((icmp_ln887_fu_666_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
        p_095_0_i_reg_443 <= ap_const_lv4_0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
        i_2_reg_926 <= i_2_fu_646_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
        i_V_5_reg_950 <= i_V_5_fu_672_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
        i_V_reg_991 <= i_V_fu_878_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
        i_reg_908 <= i_fu_629_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
        j_V_reg_968 <= j_V_fu_703_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
        p_Result_s_reg_983 <= p_Result_s_fu_866_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln887_fu_666_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
        pk_V_addr_1_reg_960           <= zext_ln544_fu_684_p1(9 - 1 downto 0);
        ret_V_31_reg_955(11 downto 3) <= ret_V_31_fu_689_p3(11 downto 3);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln887_10_fu_697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
        trunc_ln555_reg_973 <= trunc_ln555_fu_709_p1;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
        trunc_ln93_reg_900 <= trunc_ln93_fu_618_p1;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln284_1_fu_640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
        zext_ln285_1_reg_931(2 downto 0) <= zext_ln285_1_fu_652_p1(2 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln284_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
        zext_ln285_reg_913(2 downto 0) <= zext_ln285_fu_635_p1(2 downto 0);
      end if;
    end if;
  end process;
  zext_ln285_reg_913(63 downto 3)   <= "0000000000000000000000000000000000000000000000000000000000000";
  zext_ln285_1_reg_931(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
  ret_V_31_reg_955(2 downto 0)      <= "000";

  ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln284_fu_623_p2, ap_CS_fsm_state15, icmp_ln284_1_fu_640_p2, ap_CS_fsm_state22, icmp_ln887_fu_666_p2, ap_CS_fsm_state23, icmp_ln887_10_fu_697_p2, ap_CS_fsm_state26, icmp_ln887_9_fu_872_p2, grp_shake_prng_fu_466_ap_done, grp_vect_mul_add_fu_511_ap_done, grp_shake_prng_init_fu_550_ap_done, grp_seedexpander_mult_ty_fu_572_ap_done, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_block_state10_on_subcall_done, ap_block_state12_on_subcall_done)
  begin
    case ap_CS_fsm is
      when ap_ST_fsm_state1 =>
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state1;
        end if;
      when ap_ST_fsm_state2 =>
        ap_NS_fsm <= ap_ST_fsm_state3;
      when ap_ST_fsm_state3 =>
        if (((grp_shake_prng_init_fu_550_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
          ap_NS_fsm <= ap_ST_fsm_state4;
        else
          ap_NS_fsm <= ap_ST_fsm_state3;
        end if;
      when ap_ST_fsm_state4 =>
        ap_NS_fsm <= ap_ST_fsm_state5;
      when ap_ST_fsm_state5 =>
        if (((grp_shake_prng_fu_466_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
          ap_NS_fsm <= ap_ST_fsm_state6;
        else
          ap_NS_fsm <= ap_ST_fsm_state5;
        end if;
      when ap_ST_fsm_state6 =>
        ap_NS_fsm <= ap_ST_fsm_state7;
      when ap_ST_fsm_state7 =>
        if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
          ap_NS_fsm <= ap_ST_fsm_state8;
        else
          ap_NS_fsm <= ap_ST_fsm_state7;
        end if;
      when ap_ST_fsm_state8 =>
        if (((icmp_ln284_fu_623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
          ap_NS_fsm <= ap_ST_fsm_state10;
        else
          ap_NS_fsm <= ap_ST_fsm_state9;
        end if;
      when ap_ST_fsm_state9 =>
        ap_NS_fsm <= ap_ST_fsm_state8;
      when ap_ST_fsm_state10 =>
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
          ap_NS_fsm <= ap_ST_fsm_state11;
        else
          ap_NS_fsm <= ap_ST_fsm_state10;
        end if;
      when ap_ST_fsm_state11 =>
        ap_NS_fsm <= ap_ST_fsm_state12;
      when ap_ST_fsm_state12 =>
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
          ap_NS_fsm <= ap_ST_fsm_state13;
        else
          ap_NS_fsm <= ap_ST_fsm_state12;
        end if;
      when ap_ST_fsm_state13 =>
        ap_NS_fsm <= ap_ST_fsm_state14;
      when ap_ST_fsm_state14 =>
        if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
          ap_NS_fsm <= ap_ST_fsm_state15;
        else
          ap_NS_fsm <= ap_ST_fsm_state14;
        end if;
      when ap_ST_fsm_state15 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln284_1_fu_640_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state17;
        else
          ap_NS_fsm <= ap_ST_fsm_state16;
        end if;
      when ap_ST_fsm_state16 =>
        ap_NS_fsm <= ap_ST_fsm_state15;
      when ap_ST_fsm_state17 =>
        if (((grp_seedexpander_mult_ty_fu_572_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
          ap_NS_fsm <= ap_ST_fsm_state18;
        else
          ap_NS_fsm <= ap_ST_fsm_state17;
        end if;
      when ap_ST_fsm_state18 =>
        ap_NS_fsm <= ap_ST_fsm_state19;
      when ap_ST_fsm_state19 =>
        ap_NS_fsm <= ap_ST_fsm_state20;
      when ap_ST_fsm_state20 =>
        ap_NS_fsm <= ap_ST_fsm_state21;
      when ap_ST_fsm_state21 =>
        if (((grp_vect_mul_add_fu_511_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
          ap_NS_fsm <= ap_ST_fsm_state22;
        else
          ap_NS_fsm <= ap_ST_fsm_state21;
        end if;
      when ap_ST_fsm_state22 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln887_fu_666_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state26;
        else
          ap_NS_fsm <= ap_ST_fsm_state23;
        end if;
      when ap_ST_fsm_state23 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln887_10_fu_697_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state22;
        else
          ap_NS_fsm <= ap_ST_fsm_state24;
        end if;
      when ap_ST_fsm_state24 =>
        ap_NS_fsm <= ap_ST_fsm_state25;
      when ap_ST_fsm_state25 =>
        ap_NS_fsm <= ap_ST_fsm_state23;
      when ap_ST_fsm_state26 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln887_9_fu_872_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state1;
        else
          ap_NS_fsm <= ap_ST_fsm_state27;
        end if;
      when ap_ST_fsm_state27 =>
        ap_NS_fsm <= ap_ST_fsm_state26;
      when others =>
        ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end case;
  end process;
  Hi_fu_734_p2          <= (ap_const_lv6_7 or Lo_fu_727_p3);
  Lo_fu_727_p3          <= (trunc_ln555_reg_973 & ap_const_lv3_0);
  and_ln414_1_fu_854_p2 <= (xor_ln414_2_fu_848_p2 and pk_V_q0);
  and_ln414_2_fu_860_p2 <= (select_ln414_3_fu_822_p3 and and_ln414_fu_842_p2);
  and_ln414_fu_842_p2   <= (shl_ln414_1_fu_830_p2 and lshr_ln414_fu_836_p2);
  ap_CS_fsm_state1      <= ap_CS_fsm(0);
  ap_CS_fsm_state10     <= ap_CS_fsm(9);
  ap_CS_fsm_state11     <= ap_CS_fsm(10);
  ap_CS_fsm_state12     <= ap_CS_fsm(11);
  ap_CS_fsm_state13     <= ap_CS_fsm(12);
  ap_CS_fsm_state14     <= ap_CS_fsm(13);
  ap_CS_fsm_state15     <= ap_CS_fsm(14);
  ap_CS_fsm_state16     <= ap_CS_fsm(15);
  ap_CS_fsm_state17     <= ap_CS_fsm(16);
  ap_CS_fsm_state18     <= ap_CS_fsm(17);
  ap_CS_fsm_state19     <= ap_CS_fsm(18);
  ap_CS_fsm_state2      <= ap_CS_fsm(1);
  ap_CS_fsm_state20     <= ap_CS_fsm(19);
  ap_CS_fsm_state21     <= ap_CS_fsm(20);
  ap_CS_fsm_state22     <= ap_CS_fsm(21);
  ap_CS_fsm_state23     <= ap_CS_fsm(22);
  ap_CS_fsm_state24     <= ap_CS_fsm(23);
  ap_CS_fsm_state25     <= ap_CS_fsm(24);
  ap_CS_fsm_state26     <= ap_CS_fsm(25);
  ap_CS_fsm_state27     <= ap_CS_fsm(26);
  ap_CS_fsm_state3      <= ap_CS_fsm(2);
  ap_CS_fsm_state4      <= ap_CS_fsm(3);
  ap_CS_fsm_state5      <= ap_CS_fsm(4);
  ap_CS_fsm_state6      <= ap_CS_fsm(5);
  ap_CS_fsm_state7      <= ap_CS_fsm(6);
  ap_CS_fsm_state8      <= ap_CS_fsm(7);
  ap_CS_fsm_state9      <= ap_CS_fsm(8);

  ap_block_state10_on_subcall_done_assign_proc : process(grp_shake_prng_fu_466_ap_done, grp_vect_set_random_fixe_fu_530_ap_done)
  begin
    ap_block_state10_on_subcall_done <= ((grp_vect_set_random_fixe_fu_530_ap_done = ap_const_logic_0) or (grp_shake_prng_fu_466_ap_done = ap_const_logic_0));
  end process;


  ap_block_state12_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_530_ap_done, grp_vect_set_random_fixe_1_fu_612_ap_done)
  begin
    ap_block_state12_on_subcall_done <= ((grp_vect_set_random_fixe_1_fu_612_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_530_ap_done = ap_const_logic_0));
  end process;


  ap_done_assign_proc : process(ap_CS_fsm_state26, icmp_ln887_9_fu_872_p2)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln887_9_fu_872_p2 = ap_const_lv1_1))) then
      ap_done <= ap_const_logic_1;
    else
      ap_done <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
  begin
    if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      ap_idle <= ap_const_logic_1;
    else
      ap_idle <= ap_const_logic_0;
    end if;
  end process;


  ap_ready_assign_proc : process(ap_CS_fsm_state26, icmp_ln887_9_fu_872_p2)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln887_9_fu_872_p2 = ap_const_lv1_1))) then
      ap_ready <= ap_const_logic_1;
    else
      ap_ready <= ap_const_logic_0;
    end if;
  end process;

  grp_seedexpander_init_fu_592_ap_start      <= grp_seedexpander_init_fu_592_ap_start_reg;
  grp_seedexpander_mult_ty_fu_572_ap_start   <= grp_seedexpander_mult_ty_fu_572_ap_start_reg;
  grp_shake_prng_fu_466_ap_start             <= grp_shake_prng_fu_466_ap_start_reg;
  grp_shake_prng_init_fu_550_ap_start        <= grp_shake_prng_init_fu_550_ap_start_reg;
  grp_vect_mul_add_fu_511_ap_start           <= grp_vect_mul_add_fu_511_ap_start_reg;
  grp_vect_set_random_fixe_1_fu_612_ap_start <= grp_vect_set_random_fixe_1_fu_612_ap_start_reg;
  grp_vect_set_random_fixe_fu_530_ap_start   <= grp_vect_set_random_fixe_fu_530_ap_start_reg;

  grp_vect_set_random_fixe_fu_530_v_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state10, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      grp_vect_set_random_fixe_fu_530_v_V_q0 <= random_vector_B_V_q0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      grp_vect_set_random_fixe_fu_530_v_V_q0 <= random_vector_A_V_q0;
    else
      grp_vect_set_random_fixe_fu_530_v_V_q0 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  h_s_V_address0_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_address0, ap_CS_fsm_state21)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      h_s_V_address0 <= ap_const_lv64_8A0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_address0 <= grp_vect_mul_add_fu_511_a2_V_address0;
    else
      h_s_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  h_s_V_address1_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_address1, grp_seedexpander_mult_ty_fu_572_output_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state19)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
      h_s_V_address1 <= ap_const_lv64_8A0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      h_s_V_address1 <= ap_const_lv64_8A1(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      h_s_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      h_s_V_address1 <= grp_seedexpander_mult_ty_fu_572_output_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_address1 <= grp_vect_mul_add_fu_511_a2_V_address1;
    else
      h_s_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  h_s_V_ce0_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_ce0, ap_CS_fsm_state21)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
      h_s_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_ce0 <= grp_vect_mul_add_fu_511_a2_V_ce0;
    else
      h_s_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  h_s_V_ce1_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_ce1, grp_seedexpander_mult_ty_fu_572_output_V_ce1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state19)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
      h_s_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      h_s_V_ce1 <= grp_seedexpander_mult_ty_fu_572_output_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_ce1 <= grp_vect_mul_add_fu_511_a2_V_ce1;
    else
      h_s_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  h_s_V_d1_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_d1, grp_seedexpander_mult_ty_fu_572_output_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state19, zext_ln717_fu_661_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
      h_s_V_d1 <= zext_ln717_fu_661_p1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
      h_s_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      h_s_V_d1 <= grp_seedexpander_mult_ty_fu_572_output_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_d1 <= grp_vect_mul_add_fu_511_a2_V_d1;
    else
      h_s_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  h_s_V_we1_assign_proc : process(ap_CS_fsm_state18, grp_vect_mul_add_fu_511_a2_V_we1, grp_seedexpander_mult_ty_fu_572_output_V_we1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state19)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
      h_s_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      h_s_V_we1 <= grp_seedexpander_mult_ty_fu_572_output_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      h_s_V_we1 <= grp_vect_mul_add_fu_511_a2_V_we1;
    else
      h_s_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  i_2_fu_646_p2           <= std_logic_vector(unsigned(i_0_i10_reg_421) + unsigned(ap_const_lv3_1));
  i_V_5_fu_672_p2         <= std_logic_vector(unsigned(p_0189_0_i_reg_432) + unsigned(ap_const_lv9_1));
  i_V_fu_878_p2           <= std_logic_vector(unsigned(p_047_0_i_reg_454) + unsigned(ap_const_lv9_1));
  i_fu_629_p2             <= std_logic_vector(unsigned(i_0_i_reg_410) + unsigned(ap_const_lv3_1));
  icmp_ln284_1_fu_640_p2  <= "1" when (i_0_i10_reg_421 = ap_const_lv3_5)                else "0";
  icmp_ln284_fu_623_p2    <= "1" when (i_0_i_reg_410 = ap_const_lv3_5)                  else "0";
  icmp_ln414_fu_744_p2    <= "1" when (unsigned(Lo_fu_727_p3) > unsigned(Hi_fu_734_p2)) else "0";
  icmp_ln887_10_fu_697_p2 <= "1" when (p_095_0_i_reg_443 = ap_const_lv4_8)              else "0";
  icmp_ln887_9_fu_872_p2  <= "1" when (p_047_0_i_reg_454 = ap_const_lv9_11A)            else "0";
  icmp_ln887_fu_666_p2    <= "1" when (p_0189_0_i_reg_432 = ap_const_lv9_115)           else "0";
  j_V_fu_703_p2           <= std_logic_vector(unsigned(p_095_0_i_reg_443) + unsigned(ap_const_lv4_1));
  lshr_ln414_fu_836_p2    <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF), to_integer(unsigned('0' & zext_ln414_4_fu_802_p1(31-1 downto 0)))));
  p_Result_s_fu_866_p2    <= (and_ln414_2_fu_860_p2 or and_ln414_1_fu_854_p2);

  pk_V_address0_assign_proc : process(zext_ln285_1_reg_931, pk_V_addr_1_reg_960, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state16, ap_CS_fsm_state25, zext_ln544_31_fu_884_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
      pk_V_address0 <= zext_ln544_31_fu_884_p1(9 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
      pk_V_address0 <= pk_V_addr_1_reg_960;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      pk_V_address0 <= zext_ln285_1_reg_931(9 - 1 downto 0);
    else
      pk_V_address0 <= "XXXXXXXXX";
    end if;
  end process;


  pk_V_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state16, ap_CS_fsm_state25)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
      pk_V_ce0 <= ap_const_logic_1;
    else
      pk_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  pk_V_d0_assign_proc : process(p_Result_s_reg_983, store_seeds_V_q0, ap_CS_fsm_state16, ap_CS_fsm_state25)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
      pk_V_d0 <= p_Result_s_reg_983;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      pk_V_d0 <= store_seeds_V_q0;
    else
      pk_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  pk_V_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state25)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
      pk_V_we0 <= ap_const_logic_1;
    else
      pk_V_we0 <= ap_const_logic_0;
    end if;
  end process;

  prng_seed_V_address0 <= grp_shake_prng_init_fu_550_entropy_input_V_address0;
  prng_seed_V_ce0      <= grp_shake_prng_init_fu_550_entropy_input_V_ce0;

  random_vector_A_V_address0_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_address0, grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_A_V_address0 <= grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_address0 <= grp_vect_set_random_fixe_fu_530_v_V_address0;
    else
      random_vector_A_V_address0 <= "XXXXXXX";
    end if;
  end process;


  random_vector_A_V_address1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state10)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      random_vector_A_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_address1 <= grp_vect_set_random_fixe_fu_530_v_V_address1;
    else
      random_vector_A_V_address1 <= "XXXXXXX";
    end if;
  end process;


  random_vector_A_V_ce0_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_ce0, grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_A_V_ce0 <= grp_vect_set_random_fixe_1_fu_612_fixed_weight_by_coord_vector_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_ce0 <= grp_vect_set_random_fixe_fu_530_v_V_ce0;
    else
      random_vector_A_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_A_V_ce1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_ce1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state10)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      random_vector_A_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_ce1 <= grp_vect_set_random_fixe_fu_530_v_V_ce1;
    else
      random_vector_A_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_A_V_d1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state10)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      random_vector_A_V_d1 <= ap_const_lv15_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_d1 <= grp_vect_set_random_fixe_fu_530_v_V_d1;
    else
      random_vector_A_V_d1 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  random_vector_A_V_we1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_we1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state10)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      random_vector_A_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      random_vector_A_V_we1 <= grp_vect_set_random_fixe_fu_530_v_V_we1;
    else
      random_vector_A_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_511_a1_V_address0, grp_vect_set_random_fixe_fu_530_v_V_address0, ap_CS_fsm_state21, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_address0 <= grp_vect_set_random_fixe_fu_530_v_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      random_vector_B_V_address0 <= grp_vect_mul_add_fu_511_a1_V_address0;
    else
      random_vector_B_V_address0 <= "XXXXXXX";
    end if;
  end process;


  random_vector_B_V_address1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      random_vector_B_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_address1 <= grp_vect_set_random_fixe_fu_530_v_V_address1;
    else
      random_vector_B_V_address1 <= "XXXXXXX";
    end if;
  end process;


  random_vector_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_511_a1_V_ce0, grp_vect_set_random_fixe_fu_530_v_V_ce0, ap_CS_fsm_state21, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_ce0 <= grp_vect_set_random_fixe_fu_530_v_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      random_vector_B_V_ce0 <= grp_vect_mul_add_fu_511_a1_V_ce0;
    else
      random_vector_B_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_ce1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_ce1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      random_vector_B_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_ce1 <= grp_vect_set_random_fixe_fu_530_v_V_ce1;
    else
      random_vector_B_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  random_vector_B_V_d1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      random_vector_B_V_d1 <= ap_const_lv15_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_d1 <= grp_vect_set_random_fixe_fu_530_v_V_d1;
    else
      random_vector_B_V_d1 <= "XXXXXXXXXXXXXXX";
    end if;
  end process;


  random_vector_B_V_we1_assign_proc : process(grp_vect_set_random_fixe_fu_530_v_V_we1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      random_vector_B_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      random_vector_B_V_we1 <= grp_vect_set_random_fixe_fu_530_v_V_we1;
    else
      random_vector_B_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  ret_V_29_fu_678_p2 <= std_logic_vector(unsigned(p_0189_0_i_reg_432) + unsigned(ap_const_lv9_5));
  ret_V_31_fu_689_p3 <= (p_0189_0_i_reg_432 & ap_const_lv3_0);
  ret_V_32_fu_717_p2 <= std_logic_vector(unsigned(zext_ln215_fu_713_p1) + unsigned(ret_V_31_reg_955));
  ret_V_fu_889_p2    <= std_logic_vector(unsigned(p_047_0_i_reg_454) + unsigned(ap_const_lv9_5));
  select_ln414_1_fu_772_p3 <=
    zext_ln414_1_fu_754_p1 when (icmp_ln414_fu_744_p2(0) = '1') else
    zext_ln414_fu_750_p1;
  select_ln414_2_fu_780_p3 <=
    xor_ln414_fu_758_p2 when (icmp_ln414_fu_744_p2(0) = '1') else
    zext_ln414_fu_750_p1;
  select_ln414_3_fu_822_p3 <=
    tmp_fu_812_p4 when (icmp_ln414_fu_744_p2(0) = '1') else
    shl_ln414_fu_806_p2;
  select_ln414_fu_764_p3 <=
    zext_ln414_fu_750_p1 when (icmp_ln414_fu_744_p2(0) = '1') else
    zext_ln414_1_fu_754_p1;
  shl_ln414_1_fu_830_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF), to_integer(unsigned('0' & zext_ln414_3_fu_798_p1(31-1 downto 0)))));
  shl_ln414_fu_806_p2   <= std_logic_vector(shift_left(unsigned(tmp_V_fu_740_p1), to_integer(unsigned('0' & zext_ln414_2_fu_794_p1(31-1 downto 0)))));

  sk_V_address0_assign_proc : process(zext_ln285_reg_913, ap_CS_fsm_state9, ap_CS_fsm_state27, zext_ln544_30_fu_895_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
      sk_V_address0 <= zext_ln544_30_fu_895_p1(9 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
      sk_V_address0 <= zext_ln285_reg_913(9 - 1 downto 0);
    else
      sk_V_address0 <= "XXXXXXXXX";
    end if;
  end process;


  sk_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state27)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
      sk_V_ce0 <= ap_const_logic_1;
    else
      sk_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  sk_V_d0_assign_proc : process(pk_V_q0, store_seeds_V_q0, ap_CS_fsm_state9, ap_CS_fsm_state27)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
      sk_V_d0 <= pk_V_q0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
      sk_V_d0 <= store_seeds_V_q0;
    else
      sk_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  sk_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state27)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
      sk_V_we0 <= ap_const_logic_1;
    else
      sk_V_we0 <= ap_const_logic_0;
    end if;
  end process;


  state_prng_V_address0_assign_proc : process(grp_shake_prng_fu_466_state_prng_V_address0, grp_shake_prng_init_fu_550_shake_prng_state_array_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_address0 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_address0 <= grp_shake_prng_fu_466_state_prng_V_address0;
    else
      state_prng_V_address0 <= "XXXXX";
    end if;
  end process;


  state_prng_V_address1_assign_proc : process(ap_CS_fsm_state1, grp_shake_prng_fu_466_state_prng_V_address1, grp_shake_prng_init_fu_550_shake_prng_state_array_V_address1, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      state_prng_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_address1 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_address1 <= grp_shake_prng_fu_466_state_prng_V_address1;
    else
      state_prng_V_address1 <= "XXXXX";
    end if;
  end process;


  state_prng_V_ce0_assign_proc : process(grp_shake_prng_fu_466_state_prng_V_ce0, grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_ce0 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_ce0 <= grp_shake_prng_fu_466_state_prng_V_ce0;
    else
      state_prng_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_prng_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shake_prng_fu_466_state_prng_V_ce1, grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce1, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      state_prng_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_ce1 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_ce1 <= grp_shake_prng_fu_466_state_prng_V_ce1;
    else
      state_prng_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_prng_V_d1_assign_proc : process(ap_CS_fsm_state1, grp_shake_prng_fu_466_state_prng_V_d1, grp_shake_prng_init_fu_550_shake_prng_state_array_V_d1, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      state_prng_V_d1 <= ap_const_lv64_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_d1 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_d1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_d1 <= grp_shake_prng_fu_466_state_prng_V_d1;
    else
      state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_prng_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shake_prng_fu_466_state_prng_V_we1, grp_shake_prng_init_fu_550_shake_prng_state_array_V_we1, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      state_prng_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      state_prng_V_we1 <= grp_shake_prng_init_fu_550_shake_prng_state_array_V_we1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_prng_V_we1 <= grp_shake_prng_fu_466_state_prng_V_we1;
    else
      state_prng_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_address0_assign_proc : process(grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address0, grp_seedexpander_mult_ty_fu_572_state_V_address0, grp_seedexpander_init_fu_592_state_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_address0 <= grp_seedexpander_init_fu_592_state_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_address0 <= grp_seedexpander_mult_ty_fu_572_state_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_address0 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address0;
    else
      state_seedexpander_V_address0 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_address1_assign_proc : process(grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address1, grp_seedexpander_mult_ty_fu_572_state_V_address1, grp_seedexpander_init_fu_592_state_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      state_seedexpander_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_address1 <= grp_seedexpander_init_fu_592_state_V_address1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_address1 <= grp_seedexpander_mult_ty_fu_572_state_V_address1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_address1 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_address1;
    else
      state_seedexpander_V_address1 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_ce0_assign_proc : process(grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce0, grp_seedexpander_mult_ty_fu_572_state_V_ce0, grp_seedexpander_init_fu_592_state_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_ce0 <= grp_seedexpander_init_fu_592_state_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_ce0 <= grp_seedexpander_mult_ty_fu_572_state_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_ce0 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce0;
    else
      state_seedexpander_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_ce1_assign_proc : process(grp_shake_prng_fu_466_ap_done, grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce1, grp_seedexpander_mult_ty_fu_572_state_V_ce1, grp_seedexpander_init_fu_592_state_V_ce1, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if (((grp_shake_prng_fu_466_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_seedexpander_V_ce1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_ce1 <= grp_seedexpander_init_fu_592_state_V_ce1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_ce1 <= grp_seedexpander_mult_ty_fu_572_state_V_ce1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_ce1 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_ce1;
    else
      state_seedexpander_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_d1_assign_proc : process(grp_vect_set_random_fixe_fu_530_state_seedexpander_V_d1, grp_seedexpander_mult_ty_fu_572_state_V_d1, grp_seedexpander_init_fu_592_state_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      state_seedexpander_V_d1 <= ap_const_lv64_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_d1 <= grp_seedexpander_init_fu_592_state_V_d1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_d1 <= grp_seedexpander_mult_ty_fu_572_state_V_d1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_d1 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_d1;
    else
      state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_seedexpander_V_we1_assign_proc : process(grp_shake_prng_fu_466_ap_done, grp_vect_set_random_fixe_fu_530_state_seedexpander_V_we1, grp_seedexpander_mult_ty_fu_572_state_V_we1, grp_seedexpander_init_fu_592_state_V_we1, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state17)
  begin
    if (((grp_shake_prng_fu_466_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_seedexpander_V_we1 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      state_seedexpander_V_we1 <= grp_seedexpander_init_fu_592_state_V_we1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then
      state_seedexpander_V_we1 <= grp_seedexpander_mult_ty_fu_572_state_V_we1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_seedexpander_V_we1 <= grp_vect_set_random_fixe_fu_530_state_seedexpander_V_we1;
    else
      state_seedexpander_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_address0_assign_proc : process(ap_CS_fsm_state23, grp_vect_mul_add_fu_511_o_V_address0, ap_CS_fsm_state21, zext_ln544_32_fu_722_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
      store_A_V_address0 <= zext_ln544_32_fu_722_p1(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_address0 <= grp_vect_mul_add_fu_511_o_V_address0;
    else
      store_A_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_A_V_address1_assign_proc : process(grp_vect_mul_add_fu_511_o_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state21)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      store_A_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_address1 <= grp_vect_mul_add_fu_511_o_V_address1;
    else
      store_A_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_A_V_ce0_assign_proc : process(ap_CS_fsm_state23, grp_vect_mul_add_fu_511_o_V_ce0, ap_CS_fsm_state21)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
      store_A_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_ce0 <= grp_vect_mul_add_fu_511_o_V_ce0;
    else
      store_A_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_ce1_assign_proc : process(grp_vect_mul_add_fu_511_o_V_ce1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state21)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_A_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_ce1 <= grp_vect_mul_add_fu_511_o_V_ce1;
    else
      store_A_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_A_V_d1_assign_proc : process(grp_vect_mul_add_fu_511_o_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state21)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      store_A_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_d1 <= grp_vect_mul_add_fu_511_o_V_d1;
    else
      store_A_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_A_V_we1_assign_proc : process(grp_vect_mul_add_fu_511_o_V_we1, grp_seedexpander_init_fu_592_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state21)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_A_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_A_V_we1 <= grp_vect_mul_add_fu_511_o_V_we1;
    else
      store_A_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_511_a3_V_address0, grp_vect_set_random_fixe_1_fu_612_v_V_address0, ap_CS_fsm_state21, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_address0 <= grp_vect_set_random_fixe_1_fu_612_v_V_address0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_B_V_address0 <= grp_vect_mul_add_fu_511_a3_V_address0;
    else
      store_B_V_address0 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_B_V_address1_assign_proc : process(grp_vect_set_random_fixe_1_fu_612_v_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      store_B_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_address1 <= grp_vect_set_random_fixe_1_fu_612_v_V_address1;
    else
      store_B_V_address1 <= "XXXXXXXXXXXX";
    end if;
  end process;


  store_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_511_a3_V_ce0, grp_vect_set_random_fixe_1_fu_612_v_V_ce0, ap_CS_fsm_state21, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_612_v_V_ce0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then
      store_B_V_ce0 <= grp_vect_mul_add_fu_511_a3_V_ce0;
    else
      store_B_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_ce1_assign_proc : process(grp_seedexpander_init_fu_592_ap_done, grp_vect_set_random_fixe_1_fu_612_v_V_ce1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_B_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_ce1 <= grp_vect_set_random_fixe_1_fu_612_v_V_ce1;
    else
      store_B_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  store_B_V_d1_assign_proc : process(grp_vect_set_random_fixe_1_fu_612_v_V_d1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      store_B_V_d1 <= ap_const_lv8_0;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_d1 <= grp_vect_set_random_fixe_1_fu_612_v_V_d1;
    else
      store_B_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  store_B_V_we1_assign_proc : process(grp_seedexpander_init_fu_592_ap_done, grp_vect_set_random_fixe_1_fu_612_v_V_we1, ap_CS_fsm_state7, ap_CS_fsm_state12)
  begin
    if (((grp_seedexpander_init_fu_592_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_B_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then
      store_B_V_we1 <= grp_vect_set_random_fixe_1_fu_612_v_V_we1;
    else
      store_B_V_we1 <= ap_const_logic_0;
    end if;
  end process;


  store_seeds_V_address0_assign_proc : process(ap_CS_fsm_state8, zext_ln285_fu_635_p1, icmp_ln284_fu_623_p2, ap_CS_fsm_state15, zext_ln285_1_fu_652_p1, grp_shake_prng_fu_466_output_V_address0, grp_seedexpander_init_fu_592_seed_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
      store_seeds_V_address0 <= zext_ln285_1_fu_652_p1(3 - 1 downto 0);
    elsif (((icmp_ln284_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
      store_seeds_V_address0 <= zext_ln285_fu_635_p1(3 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_seeds_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_seeds_V_address0 <= grp_seedexpander_init_fu_592_seed_V_address0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      store_seeds_V_address0 <= grp_shake_prng_fu_466_output_V_address0;
    else
      store_seeds_V_address0 <= "XXX";
    end if;
  end process;


  store_seeds_V_ce0_assign_proc : process(ap_CS_fsm_state8, icmp_ln284_fu_623_p2, ap_CS_fsm_state15, grp_shake_prng_fu_466_output_V_ce0, grp_shake_prng_init_fu_550_ap_done, grp_seedexpander_init_fu_592_seed_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln284_fu_623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_shake_prng_init_fu_550_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
      store_seeds_V_ce0 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
      store_seeds_V_ce0 <= grp_seedexpander_init_fu_592_seed_V_ce0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      store_seeds_V_ce0 <= grp_shake_prng_fu_466_output_V_ce0;
    else
      store_seeds_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  store_seeds_V_d0_assign_proc : process(grp_shake_prng_fu_466_output_V_d0, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
      store_seeds_V_d0 <= ap_const_lv64_0;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      store_seeds_V_d0 <= grp_shake_prng_fu_466_output_V_d0;
    else
      store_seeds_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  store_seeds_V_we0_assign_proc : process(grp_shake_prng_fu_466_output_V_we0, grp_shake_prng_init_fu_550_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state3)
  begin
    if (((grp_shake_prng_init_fu_550_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
      store_seeds_V_we0 <= ap_const_logic_1;
    elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      store_seeds_V_we0 <= grp_shake_prng_fu_466_output_V_we0;
    else
      store_seeds_V_we0 <= ap_const_logic_0;
    end if;
  end process;

  tmp_V_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(store_A_V_q0), 64));

  tmp_fu_812_p4_proc : process(shl_ln414_fu_806_p2)
    variable vlo_cpy                       : std_logic_vector(64+32 - 1 downto 0);
    variable vhi_cpy                       : std_logic_vector(64+32 - 1 downto 0);
    variable v0_cpy                        : std_logic_vector(64 - 1 downto 0);
    variable tmp_fu_812_p4_i               : integer;
    variable section                       : std_logic_vector(64 - 1 downto 0);
    variable tmp_mask                      : std_logic_vector(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : std_logic_vector(64 - 1 downto 0);
  begin
    vlo_cpy                 := (others => '0');
    vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
    vhi_cpy                 := (others => '0');
    vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
    v0_cpy                  := shl_ln414_fu_806_p2;
    if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
      vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
      vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
      for tmp_fu_812_p4_i in 0 to 64-1 loop
        v0_cpy(tmp_fu_812_p4_i) := shl_ln414_fu_806_p2(64-1-tmp_fu_812_p4_i);
      end loop;
    end if;
    res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

    section               := (others => '0');
    section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
    tmp_mask              := (others => '1');
    res_mask              := std_logic_vector(shift_left(unsigned(tmp_mask), to_integer(unsigned('0' & section(31-1 downto 0)))));
    res_mask              := res_mask(64-2 downto 0) & '0';
    resvalue              := res_value and not res_mask;
    tmp_fu_812_p4         <= resvalue(64-1 downto 0);
  end process;

  trunc_ln555_fu_709_p1   <= p_095_0_i_reg_443(3 - 1 downto 0);
  trunc_ln717_fu_657_p1   <= h_s_V_q0(5 - 1 downto 0);
  trunc_ln93_fu_618_p1    <= seed_bytesize_V(7 - 1 downto 0);
  xor_ln414_1_fu_788_p2   <= (select_ln414_fu_764_p3 xor ap_const_lv7_3F);
  xor_ln414_2_fu_848_p2   <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor and_ln414_fu_842_p2);
  xor_ln414_fu_758_p2     <= (zext_ln414_fu_750_p1 xor ap_const_lv7_3F);
  zext_ln215_fu_713_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_095_0_i_reg_443), 12));
  zext_ln285_1_fu_652_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i10_reg_421), 64));
  zext_ln285_fu_635_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_410), 64));
  zext_ln414_1_fu_754_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_fu_734_p2), 7));
  zext_ln414_2_fu_794_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_780_p3), 64));
  zext_ln414_3_fu_798_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_772_p3), 64));
  zext_ln414_4_fu_802_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln414_1_fu_788_p2), 64));
  zext_ln414_fu_750_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_fu_727_p3), 7));
  zext_ln544_30_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_889_p2), 64));
  zext_ln544_31_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_047_0_i_reg_454), 64));
  zext_ln544_32_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_32_fu_717_p2), 64));
  zext_ln544_fu_684_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_29_fu_678_p2), 64));
  zext_ln717_fu_661_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_fu_657_p1), 8));
end behav;
