-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_set_random_fixe is
  port (
    ap_clk                        : in  std_logic;
    ap_rst                        : in  std_logic;
    ap_start                      : in  std_logic;
    ap_done                       : out std_logic;
    ap_idle                       : out std_logic;
    ap_ready                      : out std_logic;
    v_V_address0                  : out std_logic_vector (6 downto 0);
    v_V_ce0                       : out std_logic;
    v_V_q0                        : in  std_logic_vector (14 downto 0);
    v_V_address1                  : out std_logic_vector (6 downto 0);
    v_V_ce1                       : out std_logic;
    v_V_we1                       : out std_logic;
    v_V_d1                        : out std_logic_vector (14 downto 0);
    state_seedexpander_V_address0 : out std_logic_vector (4 downto 0);
    state_seedexpander_V_ce0      : out std_logic;
    state_seedexpander_V_q0       : in  std_logic_vector (63 downto 0);
    state_seedexpander_V_address1 : out std_logic_vector (4 downto 0);
    state_seedexpander_V_ce1      : out std_logic;
    state_seedexpander_V_we1      : out std_logic;
    state_seedexpander_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of vect_set_random_fixe is
  constant ap_const_logic_1     : std_logic                      := '1';
  constant ap_const_logic_0     : std_logic                      := '0';
  constant ap_ST_fsm_state1     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000000001";
  constant ap_ST_fsm_state2     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000000010";
  constant ap_ST_fsm_state3     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000000100";
  constant ap_ST_fsm_state4     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000001000";
  constant ap_ST_fsm_state5     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000010000";
  constant ap_ST_fsm_state6     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000100000";
  constant ap_ST_fsm_state7     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000001000000";
  constant ap_ST_fsm_state8     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000010000000";
  constant ap_ST_fsm_state9     : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000100000000";
  constant ap_ST_fsm_state10    : std_logic_vector (43 downto 0) := "00000000000000000000000000000000001000000000";
  constant ap_ST_fsm_state11    : std_logic_vector (43 downto 0) := "00000000000000000000000000000000010000000000";
  constant ap_ST_fsm_state12    : std_logic_vector (43 downto 0) := "00000000000000000000000000000000100000000000";
  constant ap_ST_fsm_state13    : std_logic_vector (43 downto 0) := "00000000000000000000000000000001000000000000";
  constant ap_ST_fsm_state14    : std_logic_vector (43 downto 0) := "00000000000000000000000000000010000000000000";
  constant ap_ST_fsm_state15    : std_logic_vector (43 downto 0) := "00000000000000000000000000000100000000000000";
  constant ap_ST_fsm_state16    : std_logic_vector (43 downto 0) := "00000000000000000000000000001000000000000000";
  constant ap_ST_fsm_state17    : std_logic_vector (43 downto 0) := "00000000000000000000000000010000000000000000";
  constant ap_ST_fsm_state18    : std_logic_vector (43 downto 0) := "00000000000000000000000000100000000000000000";
  constant ap_ST_fsm_state19    : std_logic_vector (43 downto 0) := "00000000000000000000000001000000000000000000";
  constant ap_ST_fsm_state20    : std_logic_vector (43 downto 0) := "00000000000000000000000010000000000000000000";
  constant ap_ST_fsm_state21    : std_logic_vector (43 downto 0) := "00000000000000000000000100000000000000000000";
  constant ap_ST_fsm_state22    : std_logic_vector (43 downto 0) := "00000000000000000000001000000000000000000000";
  constant ap_ST_fsm_state23    : std_logic_vector (43 downto 0) := "00000000000000000000010000000000000000000000";
  constant ap_ST_fsm_state24    : std_logic_vector (43 downto 0) := "00000000000000000000100000000000000000000000";
  constant ap_ST_fsm_state25    : std_logic_vector (43 downto 0) := "00000000000000000001000000000000000000000000";
  constant ap_ST_fsm_state26    : std_logic_vector (43 downto 0) := "00000000000000000010000000000000000000000000";
  constant ap_ST_fsm_state27    : std_logic_vector (43 downto 0) := "00000000000000000100000000000000000000000000";
  constant ap_ST_fsm_state28    : std_logic_vector (43 downto 0) := "00000000000000001000000000000000000000000000";
  constant ap_ST_fsm_state29    : std_logic_vector (43 downto 0) := "00000000000000010000000000000000000000000000";
  constant ap_ST_fsm_state30    : std_logic_vector (43 downto 0) := "00000000000000100000000000000000000000000000";
  constant ap_ST_fsm_state31    : std_logic_vector (43 downto 0) := "00000000000001000000000000000000000000000000";
  constant ap_ST_fsm_state32    : std_logic_vector (43 downto 0) := "00000000000010000000000000000000000000000000";
  constant ap_ST_fsm_state33    : std_logic_vector (43 downto 0) := "00000000000100000000000000000000000000000000";
  constant ap_ST_fsm_state34    : std_logic_vector (43 downto 0) := "00000000001000000000000000000000000000000000";
  constant ap_ST_fsm_state35    : std_logic_vector (43 downto 0) := "00000000010000000000000000000000000000000000";
  constant ap_ST_fsm_state36    : std_logic_vector (43 downto 0) := "00000000100000000000000000000000000000000000";
  constant ap_ST_fsm_state37    : std_logic_vector (43 downto 0) := "00000001000000000000000000000000000000000000";
  constant ap_ST_fsm_state38    : std_logic_vector (43 downto 0) := "00000010000000000000000000000000000000000000";
  constant ap_ST_fsm_state39    : std_logic_vector (43 downto 0) := "00000100000000000000000000000000000000000000";
  constant ap_ST_fsm_state40    : std_logic_vector (43 downto 0) := "00001000000000000000000000000000000000000000";
  constant ap_ST_fsm_state41    : std_logic_vector (43 downto 0) := "00010000000000000000000000000000000000000000";
  constant ap_ST_fsm_state42    : std_logic_vector (43 downto 0) := "00100000000000000000000000000000000000000000";
  constant ap_ST_fsm_state43    : std_logic_vector (43 downto 0) := "01000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state44    : std_logic_vector (43 downto 0) := "10000000000000000000000000000000000000000000";
  constant ap_const_lv32_0      : std_logic_vector (31 downto 0) := "00000000000000000000000000000000";
  constant ap_const_lv32_1      : std_logic_vector (31 downto 0) := "00000000000000000000000000000001";
  constant ap_const_lv1_1       : std_logic_vector (0 downto 0)  := "1";
  constant ap_const_lv32_2      : std_logic_vector (31 downto 0) := "00000000000000000000000000000010";
  constant ap_const_lv32_3      : std_logic_vector (31 downto 0) := "00000000000000000000000000000011";
  constant ap_const_lv32_4      : std_logic_vector (31 downto 0) := "00000000000000000000000000000100";
  constant ap_const_lv1_0       : std_logic_vector (0 downto 0)  := "0";
  constant ap_const_lv32_5      : std_logic_vector (31 downto 0) := "00000000000000000000000000000101";
  constant ap_const_lv32_6      : std_logic_vector (31 downto 0) := "00000000000000000000000000000110";
  constant ap_const_lv32_7      : std_logic_vector (31 downto 0) := "00000000000000000000000000000111";
  constant ap_const_lv32_A      : std_logic_vector (31 downto 0) := "00000000000000000000000000001010";
  constant ap_const_lv32_B      : std_logic_vector (31 downto 0) := "00000000000000000000000000001011";
  constant ap_const_lv32_C      : std_logic_vector (31 downto 0) := "00000000000000000000000000001100";
  constant ap_const_lv32_D      : std_logic_vector (31 downto 0) := "00000000000000000000000000001101";
  constant ap_const_lv32_E      : std_logic_vector (31 downto 0) := "00000000000000000000000000001110";
  constant ap_const_lv32_29     : std_logic_vector (31 downto 0) := "00000000000000000000000000101001";
  constant ap_const_lv32_2A     : std_logic_vector (31 downto 0) := "00000000000000000000000000101010";
  constant ap_const_lv32_2B     : std_logic_vector (31 downto 0) := "00000000000000000000000000101011";
  constant ap_const_lv8_0       : std_logic_vector (7 downto 0)  := "00000000";
  constant ap_const_lv8_C6      : std_logic_vector (7 downto 0)  := "11000110";
  constant ap_const_lv32_9      : std_logic_vector (31 downto 0) := "00000000000000000000000000001001";
  constant ap_const_lv5_0       : std_logic_vector (4 downto 0)  := "00000";
  constant ap_const_lv4_0       : std_logic_vector (3 downto 0)  := "0000";
  constant ap_const_lv32_8      : std_logic_vector (31 downto 0) := "00000000000000000000000000001000";
  constant ap_const_lv7_0       : std_logic_vector (6 downto 0)  := "0000000";
  constant ap_const_lv64_19     : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
  constant ap_const_lv8_E1      : std_logic_vector (7 downto 0)  := "11100001";
  constant ap_const_lv8_1       : std_logic_vector (7 downto 0)  := "00000001";
  constant ap_const_lv8_42      : std_logic_vector (7 downto 0)  := "01000010";
  constant ap_const_lv8_11      : std_logic_vector (7 downto 0)  := "00010001";
  constant ap_const_lv5_11      : std_logic_vector (4 downto 0)  := "10001";
  constant ap_const_lv5_1       : std_logic_vector (4 downto 0)  := "00001";
  constant ap_const_lv4_8       : std_logic_vector (3 downto 0)  := "1000";
  constant ap_const_lv4_1       : std_logic_vector (3 downto 0)  := "0001";
  constant ap_const_lv3_0       : std_logic_vector (2 downto 0)  := "000";
  constant ap_const_lv8_8       : std_logic_vector (7 downto 0)  := "00001000";
  constant ap_const_lv8_2       : std_logic_vector (7 downto 0)  := "00000010";
  constant ap_const_lv8_3       : std_logic_vector (7 downto 0)  := "00000011";
  constant ap_const_lv24_FFDB88 : std_logic_vector (23 downto 0) := "111111111101101110001000";
  constant ap_const_lv24_4505   : std_logic_vector (23 downto 0) := "000000000100010100000101";
  constant ap_const_lv7_1       : std_logic_vector (6 downto 0)  := "0000001";
  constant ap_const_boolean_1   : boolean                        := true;

  signal ap_CS_fsm                                        : std_logic_vector (43 downto 0) := "00000000000000000000000000000000000000000001";
  attribute fsm_encoding                                  : string;
  attribute fsm_encoding of ap_CS_fsm                     : signal is "none";
  signal ap_CS_fsm_state1                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state1              : signal is "none";
  signal i_V_fu_493_p2                                    : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state2                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state2              : signal is "none";
  signal icmp_ln887_fu_487_p2                             : std_logic_vector (0 downto 0);
  signal t_V_5_reg_822                                    : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state3                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state3              : signal is "none";
  signal icmp_ln879_fu_518_p2                             : std_logic_vector (0 downto 0);
  signal icmp_ln879_reg_832                               : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state4                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state4              : signal is "none";
  signal ap_CS_fsm_state5                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state5              : signal is "none";
  signal icmp_ln887_2_fu_524_p2                           : std_logic_vector (0 downto 0);
  signal cnt_fu_535_p1                                    : std_logic_vector (7 downto 0);
  signal cnt_reg_844                                      : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state6                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state6              : signal is "none";
  signal tmp_0_V_reg_855                                  : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state7                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state7              : signal is "none";
  signal zext_ln53_fu_565_p1                              : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state8                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state8              : signal is "none";
  signal ap_phi_mux_op2_assign_phi_fu_366_p4              : std_logic_vector (0 downto 0);
  signal icmp_ln44_fu_554_p2                              : std_logic_vector (0 downto 0);
  signal i_fu_603_p2                                      : std_logic_vector (4 downto 0);
  signal i_reg_874                                        : std_logic_vector (4 downto 0);
  signal ap_CS_fsm_state11                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state11             : signal is "none";
  signal icmp_ln887_4_fu_597_p2                           : std_logic_vector (0 downto 0);
  signal icmp_ln63_fu_609_p2                              : std_logic_vector (0 downto 0);
  signal sub_ln69_fu_620_p2                               : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state12                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state12             : signal is "none";
  signal k_V_1_fu_647_p2                                  : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state13                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state13             : signal is "none";
  signal i_V_2_fu_697_p2                                  : std_logic_vector (7 downto 0);
  signal icmp_ln887_3_fu_641_p2                           : std_logic_vector (0 downto 0);
  signal rand_bytes_V_q0                                  : std_logic_vector (7 downto 0);
  signal rand_bytes_V_load_reg_913                        : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state14                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state14             : signal is "none";
  signal j_V_fu_720_p2                                    : std_logic_vector (7 downto 0);
  signal j_V_reg_923                                      : std_logic_vector (7 downto 0);
  signal random_data_V_fu_731_p4                          : std_logic_vector (23 downto 0);
  signal ap_CS_fsm_state15                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state15             : signal is "none";
  signal trunc_ln61_fu_752_p1                             : std_logic_vector (14 downto 0);
  signal trunc_ln61_reg_942                               : std_logic_vector (14 downto 0);
  signal ap_CS_fsm_state42                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state42             : signal is "none";
  signal k_V_fu_765_p2                                    : std_logic_vector (6 downto 0);
  signal k_V_reg_951                                      : std_logic_vector (6 downto 0);
  signal ap_CS_fsm_state43                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state43             : signal is "none";
  signal icmp_ln61_fu_760_p2                              : std_logic_vector (0 downto 0);
  signal or_ln62_fu_795_p2                                : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state44                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state44             : signal is "none";
  signal rand_bytes_V_address0                            : std_logic_vector (7 downto 0);
  signal rand_bytes_V_ce0                                 : std_logic;
  signal rand_bytes_V_address1                            : std_logic_vector (7 downto 0);
  signal rand_bytes_V_ce1                                 : std_logic;
  signal rand_bytes_V_we1                                 : std_logic;
  signal rand_bytes_V_d1                                  : std_logic_vector (7 downto 0);
  signal rand_bytes_V_q1                                  : std_logic_vector (7 downto 0);
  signal grp_KeccakF1600_StatePer_fu_467_ap_start         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_ap_done          : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_ap_idle          : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_ap_ready         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_state_V_address0 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_467_state_V_ce0      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_state_V_address1 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_467_state_V_ce1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_state_V_we1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_467_state_V_d1       : std_logic_vector (63 downto 0);
  signal p_080_0_reg_259                                  : std_logic_vector (7 downto 0);
  signal tmp_V_0_6_reg_430                                : std_logic_vector (63 downto 0);
  signal tmp_V_0_0_reg_270                                : std_logic_vector (63 downto 0);
  signal p_072_0_reg_282                                  : std_logic_vector (7 downto 0);
  signal tmp_V_0_1_reg_294                                : std_logic_vector (63 downto 0);
  signal icmp_ln887_1_fu_512_p2                           : std_logic_vector (0 downto 0);
  signal icmp_ln891_fu_740_p2                             : std_logic_vector (0 downto 0);
  signal p_072_1_reg_305                                  : std_logic_vector (7 downto 0);
  signal tmp_V_0_4_reg_374                                : std_logic_vector (63 downto 0);
  signal tmp_V_0_2_reg_316                                : std_logic_vector (63 downto 0);
  signal p_0292_0_i_reg_327                               : std_logic_vector (7 downto 0);
  signal ap_phi_mux_t_V_phi_fu_342_p4                     : std_logic_vector (7 downto 0);
  signal t_V_reg_339                                      : std_logic_vector (7 downto 0);
  signal tmp_V_0_3_reg_351                                : std_logic_vector (63 downto 0);
  signal op2_assign_reg_362                               : std_logic_vector (0 downto 0);
  signal p_0201_i_i_reg_386                               : std_logic_vector (7 downto 0);
  signal tmp_V_0_5_reg_396                                : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state10                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state10             : signal is "none";
  signal i_op_assign_reg_408                              : std_logic_vector (4 downto 0);
  signal p_093_0_i_reg_419                                : std_logic_vector (3 downto 0);
  signal ap_CS_fsm_state9                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state9              : signal is "none";
  signal icmp_ln58_fu_587_p2                              : std_logic_vector (0 downto 0);
  signal t_V_3_reg_444                                    : std_logic_vector (6 downto 0);
  signal ap_phi_mux_exist_0_phi_fu_459_p4                 : std_logic_vector (0 downto 0);
  signal exist_0_reg_455                                  : std_logic_vector (0 downto 0);
  signal grp_KeccakF1600_StatePer_fu_467_ap_start_reg     : std_logic                      := '0';
  signal zext_ln544_fu_499_p1                             : std_logic_vector (63 downto 0);
  signal zext_ln544_1_fu_530_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln49_fu_545_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln65_fu_615_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln544_6_fu_665_p1                           : std_logic_vector (63 downto 0);
  signal icmp_ln887_5_fu_659_p2                           : std_logic_vector (0 downto 0);
  signal zext_ln544_2_fu_715_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_3_fu_726_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_4_fu_771_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_5_fu_776_p1                           : std_logic_vector (63 downto 0);
  signal t_V_1_fu_152                                     : std_logic_vector (7 downto 0);
  signal i_V_1_fu_780_p2                                  : std_logic_vector (7 downto 0);
  signal trunc_ln802_fu_692_p1                            : std_logic_vector (7 downto 0);
  signal sext_ln301_fu_582_p1                             : std_logic_vector (63 downto 0);
  signal zext_ln214_fu_632_p1                             : std_logic_vector (63 downto 0);
  signal offset_state_fu_539_p2                           : std_logic_vector (7 downto 0);
  signal zext_ln44_fu_550_p1                              : std_logic_vector (7 downto 0);
  signal xor_ln53_fu_559_p2                               : std_logic_vector (0 downto 0);
  signal zext_ln54_fu_569_p1                              : std_logic_vector (8 downto 0);
  signal zext_ln54_1_fu_572_p1                            : std_logic_vector (8 downto 0);
  signal sub_ln54_fu_576_p2                               : std_logic_vector (8 downto 0);
  signal zext_ln1595_fu_593_p1                            : std_logic_vector (7 downto 0);
  signal ret_V_2_fu_626_p2                                : std_logic_vector (4 downto 0);
  signal zext_ln887_fu_637_p1                             : std_logic_vector (7 downto 0);
  signal ret_V_fu_653_p2                                  : std_logic_vector (7 downto 0);
  signal trunc_ln556_fu_670_p1                            : std_logic_vector (2 downto 0);
  signal shl_ln_fu_674_p3                                 : std_logic_vector (5 downto 0);
  signal zext_ln808_fu_682_p1                             : std_logic_vector (63 downto 0);
  signal r_V_fu_686_p2                                    : std_logic_vector (63 downto 0);
  signal j_V_3_fu_703_p2                                  : std_logic_vector (7 downto 0);
  signal j_V_4_fu_709_p2                                  : std_logic_vector (7 downto 0);
  signal grp_fu_746_p1                                    : std_logic_vector (15 downto 0);
  signal grp_fu_746_p2                                    : std_logic_vector (14 downto 0);
  signal zext_ln61_fu_756_p1                              : std_logic_vector (7 downto 0);
  signal icmp_ln879_1_fu_790_p2                           : std_logic_vector (0 downto 0);
  signal grp_fu_746_ap_start                              : std_logic;
  signal grp_fu_746_ap_done                               : std_logic;
  signal ap_NS_fsm                                        : std_logic_vector (43 downto 0);

  -- component KeccakF1600_StatePer is
    -- port (
      -- ap_clk           : in  std_logic;
      -- ap_rst           : in  std_logic;
      -- ap_start         : in  std_logic;
      -- ap_done          : out std_logic;
      -- ap_idle          : out std_logic;
      -- ap_ready         : out std_logic;
      -- state_V_address0 : out std_logic_vector (4 downto 0);
      -- state_V_ce0      : out std_logic;
      -- state_V_q0       : in  std_logic_vector (63 downto 0);
      -- state_V_address1 : out std_logic_vector (4 downto 0);
      -- state_V_ce1      : out std_logic;
      -- state_V_we1      : out std_logic;
      -- state_V_d1       : out std_logic_vector (63 downto 0));
  -- end component;


  component crypto_kem_keypaimb6 is
    generic (
      ID         : integer;
      NUM_STAGE  : integer;
      din0_WIDTH : integer;
      din1_WIDTH : integer;
      dout_WIDTH : integer);
    port (
      clk   : in  std_logic;
      reset : in  std_logic;
      start : in  std_logic;
      done  : out std_logic;
      din0  : in  std_logic_vector (23 downto 0);
      din1  : in  std_logic_vector (15 downto 0);
      ce    : in  std_logic;
      dout  : out std_logic_vector (14 downto 0));
  end component;


  component vect_set_random_flbW is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (7 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (7 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0);
      q1       : out std_logic_vector (7 downto 0));
  end component;



begin
  rand_bytes_V_U : component vect_set_random_flbW
    generic map (
      DataWidth    => 8,
      AddressRange => 225,
      AddressWidth => 8)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => rand_bytes_V_address0,
      ce0      => rand_bytes_V_ce0,
      q0       => rand_bytes_V_q0,
      address1 => rand_bytes_V_address1,
      ce1      => rand_bytes_V_ce1,
      we1      => rand_bytes_V_we1,
      d1       => rand_bytes_V_d1,
      q1       => rand_bytes_V_q1);

  -- grp_KeccakF1600_StatePer_fu_467 : component KeccakF1600_StatePer
    -- port map (
      -- ap_clk           => ap_clk,
      -- ap_rst           => ap_rst,
      -- ap_start         => grp_KeccakF1600_StatePer_fu_467_ap_start,
      -- ap_done          => grp_KeccakF1600_StatePer_fu_467_ap_done,
      -- ap_idle          => grp_KeccakF1600_StatePer_fu_467_ap_idle,
      -- ap_ready         => grp_KeccakF1600_StatePer_fu_467_ap_ready,
      -- state_V_address0 => grp_KeccakF1600_StatePer_fu_467_state_V_address0,
      -- state_V_ce0      => grp_KeccakF1600_StatePer_fu_467_state_V_ce0,
      -- state_V_q0       => state_seedexpander_V_q0,
      -- state_V_address1 => grp_KeccakF1600_StatePer_fu_467_state_V_address1,
      -- state_V_ce1      => grp_KeccakF1600_StatePer_fu_467_state_V_ce1,
      -- state_V_we1      => grp_KeccakF1600_StatePer_fu_467_state_V_we1,
      -- state_V_d1       => grp_KeccakF1600_StatePer_fu_467_state_V_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_467_ap_start;
  state_V_q0_permute <= state_seedexpander_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_467_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_467_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_467_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_467_state_V_d1       <= state_V_d1_permute;


  crypto_kem_keypaimb6_U19 : component crypto_kem_keypaimb6
    generic map (
      ID         => 1,
      NUM_STAGE  => 28,
      din0_WIDTH => 24,
      din1_WIDTH => 16,
      dout_WIDTH => 15)
    port map (
      clk   => ap_clk,
      reset => ap_rst,
      start => grp_fu_746_ap_start,
      done  => grp_fu_746_ap_done,
      din0  => random_data_V_fu_731_p4,
      din1  => grp_fu_746_p1,
      ce    => ap_const_logic_1,
      dout  => grp_fu_746_p2);





  ap_CS_fsm_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_CS_fsm <= ap_ST_fsm_state1;
      else
        ap_CS_fsm <= ap_NS_fsm;
      end if;
    end if;
  end process;


  grp_KeccakF1600_StatePer_fu_467_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_KeccakF1600_StatePer_fu_467_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln58_fu_587_p2 = ap_const_lv1_0))) then
          grp_KeccakF1600_StatePer_fu_467_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_KeccakF1600_StatePer_fu_467_ap_ready = ap_const_logic_1)) then
          grp_KeccakF1600_StatePer_fu_467_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  exist_0_reg_455_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
        exist_0_reg_455 <= ap_const_lv1_0;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
        exist_0_reg_455 <= or_ln62_fu_795_p2;
      end if;
    end if;
  end process;

  i_op_assign_reg_408_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
        i_op_assign_reg_408 <= i_reg_874;
      elsif (((grp_KeccakF1600_StatePer_fu_467_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
        i_op_assign_reg_408 <= ap_const_lv5_0;
      end if;
    end if;
  end process;

  op2_assign_reg_362_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln44_fu_554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_0))) then
        op2_assign_reg_362 <= ap_const_lv1_1;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
        op2_assign_reg_362 <= ap_const_lv1_0;
      end if;
    end if;
  end process;

  p_0201_i_i_reg_386_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln63_fu_609_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_597_p2 = ap_const_lv1_0)))) then
        p_0201_i_i_reg_386 <= sub_ln69_fu_620_p2;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and ((ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_1) or (icmp_ln44_fu_554_p2 = ap_const_lv1_0)))) then
        p_0201_i_i_reg_386 <= zext_ln53_fu_565_p1;
      end if;
    end if;
  end process;

  p_0292_0_i_reg_327_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln879_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
        p_0292_0_i_reg_327 <= ap_const_lv8_0;
      elsif (((icmp_ln887_3_fu_641_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
        p_0292_0_i_reg_327 <= i_V_2_fu_697_p2;
      end if;
    end if;
  end process;

  p_072_0_reg_282_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln887_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
        p_072_0_reg_282 <= ap_const_lv8_C6;
      elsif (((icmp_ln61_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
        p_072_0_reg_282 <= j_V_reg_923;
      end if;
    end if;
  end process;

  p_072_1_reg_305_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln891_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
        p_072_1_reg_305 <= j_V_reg_923;
      elsif (((icmp_ln887_1_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
        p_072_1_reg_305 <= p_072_0_reg_282;
      end if;
    end if;
  end process;

  p_080_0_reg_259_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln887_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
        p_080_0_reg_259 <= i_V_fu_493_p2;
      elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
        p_080_0_reg_259 <= ap_const_lv8_0;
      end if;
    end if;
  end process;

  p_093_0_i_reg_419_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_3_fu_641_p2 = ap_const_lv1_0))) then
        p_093_0_i_reg_419 <= k_V_1_fu_647_p2;
      elsif (((icmp_ln58_fu_587_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
        p_093_0_i_reg_419 <= ap_const_lv4_0;
      end if;
    end if;
  end process;

  t_V_1_fu_152_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln61_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43) and (ap_phi_mux_exist_0_phi_fu_459_p4 = ap_const_lv1_0))) then
        t_V_1_fu_152 <= i_V_1_fu_780_p2;
      elsif (((icmp_ln887_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
        t_V_1_fu_152 <= ap_const_lv8_0;
      end if;
    end if;
  end process;

  t_V_3_reg_444_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
        t_V_3_reg_444 <= ap_const_lv7_0;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then
        t_V_3_reg_444 <= k_V_reg_951;
      end if;
    end if;
  end process;

  t_V_reg_339_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln879_reg_832 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_2_fu_524_p2 = ap_const_lv1_0))) then
        t_V_reg_339 <= ap_const_lv8_0;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_fu_518_p2 = ap_const_lv1_0))) then
        t_V_reg_339 <= p_072_1_reg_305;
      end if;
    end if;
  end process;

  tmp_V_0_1_reg_294_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln891_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
        tmp_V_0_1_reg_294 <= tmp_V_0_6_reg_430;
      elsif (((icmp_ln887_1_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
        tmp_V_0_1_reg_294 <= tmp_V_0_0_reg_270;
      end if;
    end if;
  end process;

  tmp_V_0_2_reg_316_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln879_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
        tmp_V_0_2_reg_316 <= tmp_V_0_1_reg_294;
      elsif (((icmp_ln887_3_fu_641_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
        tmp_V_0_2_reg_316 <= tmp_V_0_4_reg_374;
      end if;
    end if;
  end process;

  tmp_V_0_3_reg_351_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln44_fu_554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_0))) then
        tmp_V_0_3_reg_351 <= tmp_0_V_reg_855;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
        tmp_V_0_3_reg_351 <= tmp_V_0_2_reg_316;
      end if;
    end if;
  end process;

  tmp_V_0_4_reg_374_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln63_fu_609_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_597_p2 = ap_const_lv1_0)))) then
        tmp_V_0_4_reg_374 <= tmp_V_0_5_reg_396;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and ((ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_1) or (icmp_ln44_fu_554_p2 = ap_const_lv1_0)))) then
        tmp_V_0_4_reg_374 <= tmp_V_0_3_reg_351;
      end if;
    end if;
  end process;

  tmp_V_0_5_reg_396_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
        tmp_V_0_5_reg_396 <= state_seedexpander_V_q0;
      elsif (((grp_KeccakF1600_StatePer_fu_467_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
        tmp_V_0_5_reg_396 <= tmp_V_0_4_reg_374;
      end if;
    end if;
  end process;

  tmp_V_0_6_reg_430_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln879_reg_832 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_2_fu_524_p2 = ap_const_lv1_0))) then
        tmp_V_0_6_reg_430 <= tmp_V_0_2_reg_316;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln879_fu_518_p2 = ap_const_lv1_0))) then
        tmp_V_0_6_reg_430 <= tmp_V_0_1_reg_294;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
        cnt_reg_844 <= cnt_fu_535_p1;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
        i_reg_874 <= i_fu_603_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
        icmp_ln879_reg_832 <= icmp_ln879_fu_518_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
        j_V_reg_923               <= j_V_fu_720_p2;
        rand_bytes_V_load_reg_913 <= rand_bytes_V_q0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
        k_V_reg_951 <= k_V_fu_765_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
        t_V_5_reg_822 <= t_V_1_fu_152;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
        tmp_0_V_reg_855 <= state_seedexpander_V_q0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln61_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
        tmp_V_0_0_reg_270 <= tmp_V_0_6_reg_430;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
        trunc_ln61_reg_942 <= trunc_ln61_fu_752_p1;
      end if;
    end if;
  end process;

  ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_487_p2, ap_CS_fsm_state3, icmp_ln879_reg_832, ap_CS_fsm_state5, icmp_ln887_2_fu_524_p2, ap_CS_fsm_state8, ap_phi_mux_op2_assign_phi_fu_366_p4, icmp_ln44_fu_554_p2, ap_CS_fsm_state11, icmp_ln887_4_fu_597_p2, icmp_ln63_fu_609_p2, ap_CS_fsm_state13, icmp_ln887_3_fu_641_p2, ap_CS_fsm_state15, ap_CS_fsm_state43, icmp_ln61_fu_760_p2, grp_KeccakF1600_StatePer_fu_467_ap_done, icmp_ln887_1_fu_512_p2, icmp_ln891_fu_740_p2, ap_CS_fsm_state10, ap_CS_fsm_state9, icmp_ln58_fu_587_p2)
  begin
    case ap_CS_fsm is
      when ap_ST_fsm_state1 =>
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state1;
        end if;
      when ap_ST_fsm_state2 =>
        if (((icmp_ln887_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
          ap_NS_fsm <= ap_ST_fsm_state3;
        else
          ap_NS_fsm <= ap_ST_fsm_state2;
        end if;
      when ap_ST_fsm_state3 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_512_p2 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state1;
        else
          ap_NS_fsm <= ap_ST_fsm_state4;
        end if;
      when ap_ST_fsm_state4 =>
        ap_NS_fsm <= ap_ST_fsm_state5;
      when ap_ST_fsm_state5 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln887_2_fu_524_p2 = ap_const_lv1_0) or (icmp_ln879_reg_832 = ap_const_lv1_0)))) then
          ap_NS_fsm <= ap_ST_fsm_state14;
        else
          ap_NS_fsm <= ap_ST_fsm_state6;
        end if;
      when ap_ST_fsm_state6 =>
        ap_NS_fsm <= ap_ST_fsm_state7;
      when ap_ST_fsm_state7 =>
        ap_NS_fsm <= ap_ST_fsm_state8;
      when ap_ST_fsm_state8 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_1) or (icmp_ln44_fu_554_p2 = ap_const_lv1_0)))) then
          ap_NS_fsm <= ap_ST_fsm_state9;
        else
          ap_NS_fsm <= ap_ST_fsm_state8;
        end if;
      when ap_ST_fsm_state9 =>
        if (((icmp_ln58_fu_587_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
          ap_NS_fsm <= ap_ST_fsm_state13;
        else
          ap_NS_fsm <= ap_ST_fsm_state10;
        end if;
      when ap_ST_fsm_state10 =>
        if (((grp_KeccakF1600_StatePer_fu_467_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
          ap_NS_fsm <= ap_ST_fsm_state11;
        else
          ap_NS_fsm <= ap_ST_fsm_state10;
        end if;
      when ap_ST_fsm_state11 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln63_fu_609_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_597_p2 = ap_const_lv1_0)))) then
          ap_NS_fsm <= ap_ST_fsm_state9;
        else
          ap_NS_fsm <= ap_ST_fsm_state12;
        end if;
      when ap_ST_fsm_state12 =>
        ap_NS_fsm <= ap_ST_fsm_state11;
      when ap_ST_fsm_state13 =>
        if (((icmp_ln887_3_fu_641_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
          ap_NS_fsm <= ap_ST_fsm_state5;
        else
          ap_NS_fsm <= ap_ST_fsm_state13;
        end if;
      when ap_ST_fsm_state14 =>
        ap_NS_fsm <= ap_ST_fsm_state15;
      when ap_ST_fsm_state15 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln891_fu_740_p2 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state16;
        else
          ap_NS_fsm <= ap_ST_fsm_state4;
        end if;
      when ap_ST_fsm_state16 =>
        ap_NS_fsm <= ap_ST_fsm_state17;
      when ap_ST_fsm_state17 =>
        ap_NS_fsm <= ap_ST_fsm_state18;
      when ap_ST_fsm_state18 =>
        ap_NS_fsm <= ap_ST_fsm_state19;
      when ap_ST_fsm_state19 =>
        ap_NS_fsm <= ap_ST_fsm_state20;
      when ap_ST_fsm_state20 =>
        ap_NS_fsm <= ap_ST_fsm_state21;
      when ap_ST_fsm_state21 =>
        ap_NS_fsm <= ap_ST_fsm_state22;
      when ap_ST_fsm_state22 =>
        ap_NS_fsm <= ap_ST_fsm_state23;
      when ap_ST_fsm_state23 =>
        ap_NS_fsm <= ap_ST_fsm_state24;
      when ap_ST_fsm_state24 =>
        ap_NS_fsm <= ap_ST_fsm_state25;
      when ap_ST_fsm_state25 =>
        ap_NS_fsm <= ap_ST_fsm_state26;
      when ap_ST_fsm_state26 =>
        ap_NS_fsm <= ap_ST_fsm_state27;
      when ap_ST_fsm_state27 =>
        ap_NS_fsm <= ap_ST_fsm_state28;
      when ap_ST_fsm_state28 =>
        ap_NS_fsm <= ap_ST_fsm_state29;
      when ap_ST_fsm_state29 =>
        ap_NS_fsm <= ap_ST_fsm_state30;
      when ap_ST_fsm_state30 =>
        ap_NS_fsm <= ap_ST_fsm_state31;
      when ap_ST_fsm_state31 =>
        ap_NS_fsm <= ap_ST_fsm_state32;
      when ap_ST_fsm_state32 =>
        ap_NS_fsm <= ap_ST_fsm_state33;
      when ap_ST_fsm_state33 =>
        ap_NS_fsm <= ap_ST_fsm_state34;
      when ap_ST_fsm_state34 =>
        ap_NS_fsm <= ap_ST_fsm_state35;
      when ap_ST_fsm_state35 =>
        ap_NS_fsm <= ap_ST_fsm_state36;
      when ap_ST_fsm_state36 =>
        ap_NS_fsm <= ap_ST_fsm_state37;
      when ap_ST_fsm_state37 =>
        ap_NS_fsm <= ap_ST_fsm_state38;
      when ap_ST_fsm_state38 =>
        ap_NS_fsm <= ap_ST_fsm_state39;
      when ap_ST_fsm_state39 =>
        ap_NS_fsm <= ap_ST_fsm_state40;
      when ap_ST_fsm_state40 =>
        ap_NS_fsm <= ap_ST_fsm_state41;
      when ap_ST_fsm_state41 =>
        ap_NS_fsm <= ap_ST_fsm_state42;
      when ap_ST_fsm_state42 =>
        ap_NS_fsm <= ap_ST_fsm_state43;
      when ap_ST_fsm_state43 =>
        if (((icmp_ln61_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
          ap_NS_fsm <= ap_ST_fsm_state3;
        else
          ap_NS_fsm <= ap_ST_fsm_state44;
        end if;
      when ap_ST_fsm_state44 =>
        ap_NS_fsm <= ap_ST_fsm_state43;
      when others =>
        ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end case;
  end process;
  ap_CS_fsm_state1  <= ap_CS_fsm(0);
  ap_CS_fsm_state10 <= ap_CS_fsm(9);
  ap_CS_fsm_state11 <= ap_CS_fsm(10);
  ap_CS_fsm_state12 <= ap_CS_fsm(11);
  ap_CS_fsm_state13 <= ap_CS_fsm(12);
  ap_CS_fsm_state14 <= ap_CS_fsm(13);
  ap_CS_fsm_state15 <= ap_CS_fsm(14);
  ap_CS_fsm_state2  <= ap_CS_fsm(1);
  ap_CS_fsm_state3  <= ap_CS_fsm(2);
  ap_CS_fsm_state4  <= ap_CS_fsm(3);
  ap_CS_fsm_state42 <= ap_CS_fsm(41);
  ap_CS_fsm_state43 <= ap_CS_fsm(42);
  ap_CS_fsm_state44 <= ap_CS_fsm(43);
  ap_CS_fsm_state5  <= ap_CS_fsm(4);
  ap_CS_fsm_state6  <= ap_CS_fsm(5);
  ap_CS_fsm_state7  <= ap_CS_fsm(6);
  ap_CS_fsm_state8  <= ap_CS_fsm(7);
  ap_CS_fsm_state9  <= ap_CS_fsm(8);

  ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln887_1_fu_512_p2)
  begin
    if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_512_p2 = ap_const_lv1_0)))) then
      ap_done <= ap_const_logic_1;
    else
      ap_done <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
  begin
    if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      ap_idle <= ap_const_logic_1;
    else
      ap_idle <= ap_const_logic_0;
    end if;
  end process;

  ap_phi_mux_exist_0_phi_fu_459_p4    <= exist_0_reg_455;
  ap_phi_mux_op2_assign_phi_fu_366_p4 <= op2_assign_reg_362;

  ap_phi_mux_t_V_phi_fu_342_p4_assign_proc : process(icmp_ln879_reg_832, ap_CS_fsm_state5, icmp_ln887_2_fu_524_p2, t_V_reg_339)
  begin
    if (((icmp_ln879_reg_832 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_2_fu_524_p2 = ap_const_lv1_0))) then
      ap_phi_mux_t_V_phi_fu_342_p4 <= ap_const_lv8_0;
    else
      ap_phi_mux_t_V_phi_fu_342_p4 <= t_V_reg_339;
    end if;
  end process;


  ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln887_1_fu_512_p2)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_512_p2 = ap_const_lv1_0))) then
      ap_ready <= ap_const_logic_1;
    else
      ap_ready <= ap_const_logic_0;
    end if;
  end process;

  cnt_fu_535_p1                            <= state_seedexpander_V_q0(8 - 1 downto 0);
  grp_KeccakF1600_StatePer_fu_467_ap_start <= grp_KeccakF1600_StatePer_fu_467_ap_start_reg;

  grp_fu_746_ap_start_assign_proc : process(ap_CS_fsm_state15, icmp_ln891_fu_740_p2)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln891_fu_740_p2 = ap_const_lv1_0))) then
      grp_fu_746_ap_start <= ap_const_logic_1;
    else
      grp_fu_746_ap_start <= ap_const_logic_0;
    end if;
  end process;

  grp_fu_746_p1          <= ap_const_lv24_4505(16 - 1 downto 0);
  i_V_1_fu_780_p2        <= std_logic_vector(unsigned(t_V_5_reg_822) + unsigned(ap_const_lv8_1));
  i_V_2_fu_697_p2        <= std_logic_vector(unsigned(p_0292_0_i_reg_327) + unsigned(ap_const_lv8_8));
  i_V_fu_493_p2          <= std_logic_vector(unsigned(p_080_0_reg_259) + unsigned(ap_const_lv8_1));
  i_fu_603_p2            <= std_logic_vector(unsigned(i_op_assign_reg_408) + unsigned(ap_const_lv5_1));
  icmp_ln44_fu_554_p2    <= "1" when (unsigned(zext_ln44_fu_550_p1) < unsigned(cnt_reg_844))              else "0";
  icmp_ln58_fu_587_p2    <= "1" when (p_0201_i_i_reg_386 = ap_const_lv8_0)                                else "0";
  icmp_ln61_fu_760_p2    <= "1" when (zext_ln61_fu_756_p1 = t_V_5_reg_822)                                else "0";
  icmp_ln63_fu_609_p2    <= "1" when (unsigned(zext_ln1595_fu_593_p1) < unsigned(p_0201_i_i_reg_386))     else "0";
  icmp_ln879_1_fu_790_p2 <= "1" when (v_V_q0 = trunc_ln61_reg_942)                                        else "0";
  icmp_ln879_fu_518_p2   <= "1" when (p_072_1_reg_305 = ap_const_lv8_C6)                                  else "0";
  icmp_ln887_1_fu_512_p2 <= "1" when (unsigned(t_V_1_fu_152) < unsigned(ap_const_lv8_42))                 else "0";
  icmp_ln887_2_fu_524_p2 <= "1" when (unsigned(p_0292_0_i_reg_327) < unsigned(ap_const_lv8_C6))           else "0";
  icmp_ln887_3_fu_641_p2 <= "1" when (p_093_0_i_reg_419 = ap_const_lv4_8)                                 else "0";
  icmp_ln887_4_fu_597_p2 <= "1" when (unsigned(i_op_assign_reg_408) < unsigned(ap_const_lv5_11))          else "0";
  icmp_ln887_5_fu_659_p2 <= "1" when (unsigned(ret_V_fu_653_p2) < unsigned(ap_const_lv8_C6))              else "0";
  icmp_ln887_fu_487_p2   <= "1" when (p_080_0_reg_259 = ap_const_lv8_E1)                                  else "0";
  icmp_ln891_fu_740_p2   <= "1" when (unsigned(random_data_V_fu_731_p4) > unsigned(ap_const_lv24_FFDB88)) else "0";
  j_V_3_fu_703_p2        <= std_logic_vector(unsigned(t_V_reg_339) + unsigned(ap_const_lv8_1));
  j_V_4_fu_709_p2        <= std_logic_vector(unsigned(t_V_reg_339) + unsigned(ap_const_lv8_2));
  j_V_fu_720_p2          <= std_logic_vector(unsigned(t_V_reg_339) + unsigned(ap_const_lv8_3));
  k_V_1_fu_647_p2        <= std_logic_vector(unsigned(p_093_0_i_reg_419) + unsigned(ap_const_lv4_1));
  k_V_fu_765_p2          <= std_logic_vector(unsigned(t_V_3_reg_444) + unsigned(ap_const_lv7_1));
  offset_state_fu_539_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_fu_535_p1));
  or_ln62_fu_795_p2      <= (icmp_ln879_1_fu_790_p2 or exist_0_reg_455);
  r_V_fu_686_p2          <= std_logic_vector(shift_right(unsigned(tmp_V_0_4_reg_374), to_integer(unsigned('0' & zext_ln808_fu_682_p1(31-1 downto 0)))));

  rand_bytes_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14, zext_ln544_1_fu_530_p1, zext_ln544_2_fu_715_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      rand_bytes_V_address0 <= zext_ln544_2_fu_715_p1(8 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      rand_bytes_V_address0 <= zext_ln544_1_fu_530_p1(8 - 1 downto 0);
    else
      rand_bytes_V_address0 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln544_fu_499_p1, zext_ln544_6_fu_665_p1, zext_ln544_3_fu_726_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
      rand_bytes_V_address1 <= zext_ln544_3_fu_726_p1(8 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      rand_bytes_V_address1 <= zext_ln544_6_fu_665_p1(8 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
      rand_bytes_V_address1 <= zext_ln544_fu_499_p1(8 - 1 downto 0);
    else
      rand_bytes_V_address1 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      rand_bytes_V_ce0 <= ap_const_logic_1;
    else
      rand_bytes_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  rand_bytes_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state14)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
      rand_bytes_V_ce1 <= ap_const_logic_1;
    else
      rand_bytes_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  rand_bytes_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, trunc_ln802_fu_692_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      rand_bytes_V_d1 <= trunc_ln802_fu_692_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
      rand_bytes_V_d1 <= ap_const_lv8_0;
    else
      rand_bytes_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_487_p2, ap_CS_fsm_state13, icmp_ln887_3_fu_641_p2, icmp_ln887_5_fu_659_p2)
  begin
    if ((((icmp_ln887_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln887_5_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln887_3_fu_641_p2 = ap_const_lv1_0)))) then
      rand_bytes_V_we1 <= ap_const_logic_1;
    else
      rand_bytes_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  random_data_V_fu_731_p4 <= ((rand_bytes_V_load_reg_913 & rand_bytes_V_q0) & rand_bytes_V_q1);
  ret_V_2_fu_626_p2       <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_408));
  ret_V_fu_653_p2         <= std_logic_vector(unsigned(p_0292_0_i_reg_327) + unsigned(zext_ln887_fu_637_p1));
  sext_ln301_fu_582_p1    <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_576_p2), 64));

  shl_ln_fu_674_p3 <= (trunc_ln556_fu_670_p1 & ap_const_lv3_0);

  state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_467_state_V_address0, ap_CS_fsm_state10, zext_ln49_fu_545_p1, zext_ln65_fu_615_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
      state_seedexpander_V_address0 <= zext_ln65_fu_615_p1(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      state_seedexpander_V_address0 <= zext_ln49_fu_545_p1(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      state_seedexpander_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_address0 <= grp_KeccakF1600_StatePer_fu_467_state_V_address0;
    else
      state_seedexpander_V_address0 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_467_state_V_address1, ap_CS_fsm_state10)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
      state_seedexpander_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_address1 <= grp_KeccakF1600_StatePer_fu_467_state_V_address1;
    else
      state_seedexpander_V_address1 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_467_state_V_ce0, ap_CS_fsm_state10)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
      state_seedexpander_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_ce0 <= grp_KeccakF1600_StatePer_fu_467_state_V_ce0;
    else
      state_seedexpander_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_467_state_V_ce1, ap_CS_fsm_state10)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
      state_seedexpander_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_ce1 <= grp_KeccakF1600_StatePer_fu_467_state_V_ce1;
    else
      state_seedexpander_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_467_state_V_d1, ap_CS_fsm_state10, sext_ln301_fu_582_p1, zext_ln214_fu_632_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
      state_seedexpander_V_d1 <= zext_ln214_fu_632_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      state_seedexpander_V_d1 <= sext_ln301_fu_582_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_d1 <= grp_KeccakF1600_StatePer_fu_467_state_V_d1;
    else
      state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_phi_mux_op2_assign_phi_fu_366_p4, icmp_ln44_fu_554_p2, ap_CS_fsm_state11, icmp_ln887_4_fu_597_p2, icmp_ln63_fu_609_p2, grp_KeccakF1600_StatePer_fu_467_state_V_we1, ap_CS_fsm_state10)
  begin
    if ((((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln63_fu_609_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_597_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state8) and ((ap_phi_mux_op2_assign_phi_fu_366_p4 = ap_const_lv1_1) or (icmp_ln44_fu_554_p2 = ap_const_lv1_0))))) then
      state_seedexpander_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_seedexpander_V_we1 <= grp_KeccakF1600_StatePer_fu_467_state_V_we1;
    else
      state_seedexpander_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  sub_ln54_fu_576_p2    <= std_logic_vector(unsigned(zext_ln54_fu_569_p1) - unsigned(zext_ln54_1_fu_572_p1));
  sub_ln69_fu_620_p2    <= std_logic_vector(unsigned(p_0201_i_i_reg_386) - unsigned(zext_ln1595_fu_593_p1));
  trunc_ln556_fu_670_p1 <= p_093_0_i_reg_419(3 - 1 downto 0);
  trunc_ln61_fu_752_p1  <= grp_fu_746_p2(15 - 1 downto 0);
  trunc_ln802_fu_692_p1 <= r_V_fu_686_p2(8 - 1 downto 0);
  v_V_address0          <= zext_ln544_4_fu_771_p1(7 - 1 downto 0);
  v_V_address1          <= zext_ln544_5_fu_776_p1(7 - 1 downto 0);

  v_V_ce0_assign_proc : process(ap_CS_fsm_state43)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
      v_V_ce0 <= ap_const_logic_1;
    else
      v_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  v_V_ce1_assign_proc : process(ap_CS_fsm_state43)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
      v_V_ce1 <= ap_const_logic_1;
    else
      v_V_ce1 <= ap_const_logic_0;
    end if;
  end process;

  v_V_d1 <= trunc_ln61_reg_942;

  v_V_we1_assign_proc : process(ap_CS_fsm_state43, icmp_ln61_fu_760_p2, ap_phi_mux_exist_0_phi_fu_459_p4)
  begin
    if (((icmp_ln61_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43) and (ap_phi_mux_exist_0_phi_fu_459_p4 = ap_const_lv1_0))) then
      v_V_we1 <= ap_const_logic_1;
    else
      v_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  xor_ln53_fu_559_p2     <= (op2_assign_reg_362 xor ap_const_lv1_1);
  zext_ln1595_fu_593_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_408), 8));
  zext_ln214_fu_632_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_626_p2), 64));
  zext_ln44_fu_550_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_362), 8));
  zext_ln49_fu_545_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_539_p2), 64));
  zext_ln53_fu_565_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln53_fu_559_p2), 8));
  zext_ln544_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_342_p4), 64));
  zext_ln544_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_3_fu_703_p2), 64));
  zext_ln544_3_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_4_fu_709_p2), 64));
  zext_ln544_4_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_444), 64));
  zext_ln544_5_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_822), 64));
  zext_ln544_6_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_653_p2), 64));
  zext_ln544_fu_499_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_080_0_reg_259), 64));
  zext_ln54_1_fu_572_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_362), 9));
  zext_ln54_fu_569_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_844), 9));
  zext_ln61_fu_756_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_444), 8));
  zext_ln65_fu_615_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_408), 64));
  zext_ln808_fu_682_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_674_p3), 64));
  zext_ln887_fu_637_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_093_0_i_reg_419), 8));
end behav;
