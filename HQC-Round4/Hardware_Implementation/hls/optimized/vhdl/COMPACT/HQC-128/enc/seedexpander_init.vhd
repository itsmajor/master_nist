-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seedexpander_init is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seed_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    seed_V_ce0 : OUT STD_LOGIC;
    seed_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_2_ce0 : OUT STD_LOGIC;
    state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_2_ce1 : OUT STD_LOGIC;
    state_V_2_we1 : OUT STD_LOGIC;
    state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of seedexpander_init is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_87 : STD_LOGIC_VECTOR (8 downto 0) := "010000111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv25_1F00 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001111100000000";
    constant ap_const_lv25_1F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000011111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1F0000 : STD_LOGIC_VECTOR (24 downto 0) := "0000111110000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv41_10000000000 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv41_1F00000000 : STD_LOGIC_VECTOR (40 downto 0) := "00001111100000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv57_100000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv57_1F000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "000011111000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_260 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln891_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_reg_546 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_V_1_addr_2_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_V_1_addr_1_reg_565 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln891_6_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_6_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cnt_V_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln891_5_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_5_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_V_1_addr_3_reg_584 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_V_44_fu_366_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_44_reg_589 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_V_1_addr_4_reg_605 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_222_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_222_state_V_6_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_0_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0260_0_i_reg_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal p_01676_2_i_reg_211 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln544_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_46_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_47_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_45_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_48_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_V_6_fu_112 : STD_LOGIC_VECTOR (8 downto 0);
    signal cnt_V_7_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln719_3_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_fu_348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln719_6_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln719_7_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_s_fu_293_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_250_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_14_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_13_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_9_fu_407_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_fu_389_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_10_fu_421_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln21_fu_429_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln21_16_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_15_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_3_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_11_fu_447_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln21_fu_433_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal select_ln21_12_fu_461_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln21_3_fu_469_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln21_18_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_17_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_5_i_fu_487_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln21_3_fu_473_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_fu_501_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_cast1_fu_509_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_0186_0_i_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce0 : OUT STD_LOGIC;
        -- state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce1 : OUT STD_LOGIC;
        -- state_V_6_we1 : OUT STD_LOGIC;
        -- state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;



begin
    -- grp_KeccakF1600_StatePer_fu_222 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_222_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_222_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_222_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_222_ap_ready,
        -- state_V_6_address0 => grp_KeccakF1600_StatePer_fu_222_state_V_6_address0,
        -- state_V_6_ce0 => grp_KeccakF1600_StatePer_fu_222_state_V_6_ce0,
        -- state_V_6_q0 => state_V_2_q0,
        -- state_V_6_address1 => grp_KeccakF1600_StatePer_fu_222_state_V_6_address1,
        -- state_V_6_ce1 => grp_KeccakF1600_StatePer_fu_222_state_V_6_ce1,
        -- state_V_6_we1 => grp_KeccakF1600_StatePer_fu_222_state_V_6_we1,
        -- state_V_6_d1 => grp_KeccakF1600_StatePer_fu_222_state_V_6_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_222_ap_start;
  state_V_q0_permute <= state_V_2_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_222_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_222_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_222_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_222_state_V_6_d1       <= state_V_d1_permute;



    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_KeccakF1600_StatePer_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cnt_V_6_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_6_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                cnt_V_6_fu_112 <= cnt_V_7_fu_318_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                cnt_V_6_fu_112 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_01676_2_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_5_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_01676_2_i_reg_211 <= cnt_V_fu_342_p2;
            elsif (((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                p_01676_2_i_reg_211 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                p_0260_0_i_reg_200 <= i_V_reg_546;
            elsif (((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0260_0_i_reg_200 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_0_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_0_reg_189 <= ap_const_lv5_0;
            elsif (((icmp_ln887_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_0_reg_189 <= j_V_fu_270_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_V_reg_546 <= i_V_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln891_5_reg_580 <= icmp_ln891_5_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln891_6_reg_571 <= icmp_ln891_6_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                r_V_reg_600 <= p_01676_2_i_reg_211(7 downto 3);
                ret_V_44_reg_589 <= ret_V_44_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln891_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln891_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_260 <= cnt_V_6_fu_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_V_1_addr_1_reg_565 <= zext_ln544_45_fu_313_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_V_1_addr_2_reg_559 <= zext_ln544_47_fu_308_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                state_V_1_addr_4_reg_605 <= zext_ln544_48_fu_380_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln891_fu_287_p2, ap_CS_fsm_state2, icmp_ln891_6_fu_331_p2, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln891_5_fu_355_p2, icmp_ln887_fu_264_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done, ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln891_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln891_6_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln891_5_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state6_on_subcall_done_assign_proc : process(icmp_ln891_6_reg_571, grp_KeccakF1600_StatePer_fu_222_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (grp_KeccakF1600_StatePer_fu_222_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(icmp_ln891_5_reg_580, grp_KeccakF1600_StatePer_fu_222_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (grp_KeccakF1600_StatePer_fu_222_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_V_7_fu_318_p2 <= std_logic_vector(unsigned(reg_260) + unsigned(ap_const_lv9_8));
    cnt_V_fu_342_p2 <= std_logic_vector(unsigned(reg_260) + unsigned(ap_const_lv9_1));
    empty_fu_495_p2 <= (icmp_ln21_18_fu_482_p2 or icmp_ln21_17_fu_477_p2);
    grp_KeccakF1600_StatePer_fu_222_ap_start <= grp_KeccakF1600_StatePer_fu_222_ap_start_reg;
    grp_fu_250_p4 <= cnt_V_6_fu_112(7 downto 3);
    i_V_fu_281_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_200) + unsigned(ap_const_lv6_8));
    icmp_ln21_13_fu_397_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_2) else "0";
    icmp_ln21_14_fu_402_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_3) else "0";
    icmp_ln21_15_fu_437_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_4) else "0";
    icmp_ln21_16_fu_442_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_5) else "0";
    icmp_ln21_17_fu_477_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_6) else "0";
    icmp_ln21_18_fu_482_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_7) else "0";
    icmp_ln21_fu_384_p2 <= "1" when (ret_V_44_reg_589 = ap_const_lv3_1) else "0";
    icmp_ln887_fu_264_p2 <= "1" when (p_0_0_reg_189 = ap_const_lv5_1A) else "0";
    icmp_ln891_5_fu_355_p2 <= "1" when (unsigned(cnt_V_fu_342_p2) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_6_fu_331_p2 <= "1" when (unsigned(cnt_V_7_fu_318_p2) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_fu_287_p2 <= "1" when (unsigned(i_V_fu_281_p2) > unsigned(ap_const_lv6_28)) else "0";
    j_V_fu_270_p2 <= std_logic_vector(unsigned(p_0_0_reg_189) + unsigned(ap_const_lv5_1));
    or_ln21_3_fu_455_p2 <= (icmp_ln21_16_fu_442_p2 or icmp_ln21_15_fu_437_p2);
    or_ln21_fu_415_p2 <= (icmp_ln21_14_fu_402_p2 or icmp_ln21_13_fu_397_p2);
        p_0186_0_i_cast1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0186_0_i_fu_501_p3),61));

    p_0186_0_i_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0186_0_i_cast1_fu_509_p1),64));
    p_0186_0_i_fu_501_p3 <= 
        select_ln21_5_i_fu_487_p3 when (empty_fu_495_p2(0) = '1') else 
        zext_ln21_3_fu_473_p1;
    ret_V_44_fu_366_p1 <= p_01676_2_i_reg_211(3 - 1 downto 0);
    ret_V_s_fu_293_p4 <= p_0260_0_i_reg_200(5 downto 3);
    seed_V_address0 <= zext_ln544_46_fu_303_p1(3 - 1 downto 0);

    seed_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_V_ce0 <= ap_const_logic_1;
        else 
            seed_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln21_10_fu_421_p3 <= 
        select_ln21_9_fu_407_p3 when (or_ln21_fu_415_p2(0) = '1') else 
        select_ln21_fu_389_p3;
    select_ln21_11_fu_447_p3 <= 
        ap_const_lv41_10000000000 when (icmp_ln21_16_fu_442_p2(0) = '1') else 
        ap_const_lv41_1F00000000;
    select_ln21_12_fu_461_p3 <= 
        select_ln21_11_fu_447_p3 when (or_ln21_3_fu_455_p2(0) = '1') else 
        zext_ln21_fu_433_p1;
    select_ln21_5_i_fu_487_p3 <= 
        ap_const_lv57_100000000000000 when (icmp_ln21_18_fu_482_p2(0) = '1') else 
        ap_const_lv57_1F000000000000;
    select_ln21_9_fu_407_p3 <= 
        ap_const_lv25_1000000 when (icmp_ln21_14_fu_402_p2(0) = '1') else 
        ap_const_lv25_1F0000;
    select_ln21_fu_389_p3 <= 
        ap_const_lv25_1F00 when (icmp_ln21_fu_384_p2(0) = '1') else 
        ap_const_lv25_1F;
        sext_ln21_3_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_12_fu_461_p3),45));

        sext_ln21_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_10_fu_421_p3),29));

    state_V_1_addr_3_reg_584 <= ap_const_lv64_19(5 - 1 downto 0);

    state_V_2_address0_assign_proc : process(ap_CS_fsm_state3, icmp_ln891_fu_287_p2, icmp_ln891_6_reg_571, icmp_ln891_5_reg_580, ap_CS_fsm_state11, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_address0, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln544_47_fu_308_p1, zext_ln544_45_fu_313_p1, zext_ln544_48_fu_380_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_2_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_2_address0 <= zext_ln544_48_fu_380_p1(5 - 1 downto 0);
        elsif (((icmp_ln891_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_2_address0 <= zext_ln544_45_fu_313_p1(5 - 1 downto 0);
        elsif (((icmp_ln891_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_2_address0 <= zext_ln544_47_fu_308_p1(5 - 1 downto 0);
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_address0 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_address0;
        else 
            state_V_2_address0 <= "XXXXX";
        end if; 
    end process;


    state_V_2_address1_assign_proc : process(ap_CS_fsm_state2, state_V_1_addr_2_reg_559, state_V_1_addr_1_reg_565, icmp_ln891_6_reg_571, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln891_5_reg_580, state_V_1_addr_3_reg_584, ap_CS_fsm_state10, state_V_1_addr_4_reg_605, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_address1, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln544_fu_276_p1, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_2_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_2_address1 <= state_V_1_addr_3_reg_584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_2_address1 <= state_V_1_addr_4_reg_605;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_2_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_address1 <= state_V_1_addr_1_reg_565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_2_address1 <= state_V_1_addr_2_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_2_address1 <= zext_ln544_fu_276_p1(5 - 1 downto 0);
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_address1 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_address1;
        else 
            state_V_2_address1 <= "XXXXX";
        end if; 
    end process;


    state_V_2_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln891_fu_287_p2, icmp_ln891_6_reg_571, icmp_ln891_5_reg_580, ap_CS_fsm_state11, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_ce0, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln891_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln891_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            state_V_2_ce0 <= ap_const_logic_1;
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_ce0 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_ce0;
        else 
            state_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_2_ce1_assign_proc : process(ap_CS_fsm_state2, icmp_ln891_6_reg_571, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln891_5_reg_580, ap_CS_fsm_state10, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_ce1, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_V_2_ce1 <= ap_const_logic_1;
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_ce1 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_ce1;
        else 
            state_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_2_d1_assign_proc : process(ap_CS_fsm_state2, icmp_ln891_6_reg_571, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln891_5_reg_580, ap_CS_fsm_state10, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_d1, ap_CS_fsm_state6, ap_CS_fsm_state9, xor_ln719_3_fu_324_p2, xor_ln719_fu_348_p2, zext_ln209_fu_361_p1, ap_CS_fsm_state12, xor_ln719_6_fu_517_p2, ap_CS_fsm_state14, xor_ln719_7_fu_524_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_2_d1 <= xor_ln719_7_fu_524_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_2_d1 <= xor_ln719_6_fu_517_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_2_d1 <= zext_ln209_fu_361_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_d1 <= xor_ln719_fu_348_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_2_d1 <= xor_ln719_3_fu_324_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_V_2_d1 <= ap_const_lv64_0;
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_d1 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_d1;
        else 
            state_V_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_2_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln891_6_reg_571, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln891_5_reg_580, ap_CS_fsm_state10, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_222_state_V_6_we1, icmp_ln887_fu_264_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln887_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_V_2_we1 <= ap_const_logic_1;
        elsif ((((icmp_ln891_5_reg_580 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln891_6_reg_571 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            state_V_2_we1 <= grp_KeccakF1600_StatePer_fu_222_state_V_6_we1;
        else 
            state_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln719_3_fu_324_p2 <= (state_V_2_q0 xor seed_V_q0);
    xor_ln719_6_fu_517_p2 <= (state_V_2_q0 xor p_0186_0_i_cast_fu_513_p1);
    xor_ln719_7_fu_524_p2 <= (state_V_2_q0 xor ap_const_lv64_8000000000000000);
    xor_ln719_fu_348_p2 <= (state_V_2_q0 xor ap_const_lv64_2);
    zext_ln209_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01676_2_i_reg_211),64));
    zext_ln21_3_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_3_fu_469_p1),57));
    zext_ln21_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_fu_429_p1),41));
    zext_ln544_45_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_250_p4),64));
    zext_ln544_46_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_s_fu_293_p4),64));
    zext_ln544_47_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_250_p4),64));
    zext_ln544_48_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_600),64));
    zext_ln544_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_reg_189),64));
end behav;
