-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_prng_init is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    entropy_input_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    entropy_input_V_ce0 : OUT STD_LOGIC;
    entropy_input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    enlen_V : IN STD_LOGIC_VECTOR (6 downto 0);
    shake_prng_state_array_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    shake_prng_state_array_V_ce0 : OUT STD_LOGIC;
    shake_prng_state_array_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    shake_prng_state_array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    shake_prng_state_array_V_ce1 : OUT STD_LOGIC;
    shake_prng_state_array_V_we1 : OUT STD_LOGIC;
    shake_prng_state_array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of shake_prng_init is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_87 : STD_LOGIC_VECTOR (8 downto 0) := "010000111";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv25_1F00 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001111100000000";
    constant ap_const_lv25_1F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000011111";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1F0000 : STD_LOGIC_VECTOR (24 downto 0) := "0000111110000000000000000";
    constant ap_const_lv41_10000000000 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv41_1F00000000 : STD_LOGIC_VECTOR (40 downto 0) := "00001111100000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv57_100000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv57_1F000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "000011111000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_buffer_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_buffer_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_497 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_fu_516_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_reg_1140 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln544_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_1145 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_527_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_reg_1162 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_vector_init_64_fu_417_ap_ready : STD_LOGIC;
    signal grp_vector_init_64_fu_417_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln891_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_V_fu_560_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal len_V_reg_1185 : STD_LOGIC_VECTOR (2 downto 0);
    signal shake_prng_state_arr_reg_1227 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln891_1_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_1_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_V_4_fu_648_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_397_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_ap_done : STD_LOGIC;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal temp_buffer_V_load_6_reg_1272 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln117_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal shake_prng_state_arr_2_reg_1282 : STD_LOGIC_VECTOR (4 downto 0);
    signal cnt_V_3_fu_941_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln891_2_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_2_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal shake_prng_state_arr_4_reg_1297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ret_V_23_fu_965_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_23_reg_1302 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_reg_1313 : STD_LOGIC_VECTOR (4 downto 0);
    signal shake_prng_state_arr_5_reg_1318 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal temp_buffer_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buffer_V_ce0 : STD_LOGIC;
    signal temp_buffer_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buffer_V_ce1 : STD_LOGIC;
    signal temp_buffer_V_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_397_state_V_6_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vector_init_64_fu_417_ap_start : STD_LOGIC;
    signal grp_vector_init_64_fu_417_ap_idle : STD_LOGIC;
    signal grp_vector_init_64_fu_417_array_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vector_init_64_fu_417_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_64_fu_417_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_64_fu_417_array_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_reg_363 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_p_0260_0_i_phi_fu_378_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0260_0_i_reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_01676_2_i_reg_386 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_397_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_vector_init_64_fu_417_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_17_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_18_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_10_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_19_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_20_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_21_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_22_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_23_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_24_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_25_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_11_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_12_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_13_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_14_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_15_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_16_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_26_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_27_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_V_2_fu_166 : STD_LOGIC_VECTOR (8 downto 0);
    signal cnt_V_fu_624_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln719_fu_630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_1_fu_947_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln719_2_fu_1116_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln719_3_fu_1123_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_2_fu_530_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_534_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_21_fu_588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_468_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_24_fu_604_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_masked_V_1_fu_702_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_25_fu_728_p6 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_masked_V_5_fu_762_p8 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp_ln117_6_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_masked_V_fu_694_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln117_fu_833_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln117_5_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_4_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln214_fu_712_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal m_masked_V_2_fu_716_p5 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln117_3_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_2_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1356_fu_742_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal m_masked_V_4_fu_746_p7 : STD_LOGIC_VECTOR (40 downto 0);
    signal select_ln117_2_fu_865_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln117_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln214_1_fu_780_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal m_masked_V_6_fu_784_p9 : STD_LOGIC_VECTOR (56 downto 0);
    signal or_ln117_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_fu_841_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln117_1_fu_851_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln117_4_fu_890_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln117_1_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_2_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_1_fu_873_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_3_fu_883_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal or_ln117_3_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_2_fu_898_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_5_fu_908_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_6_fu_916_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln700_fu_928_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_fu_931_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln700_1_fu_937_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln117_3_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_fu_1006_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_fu_988_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_2_fu_1020_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln21_fu_1028_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln21_4_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_3_fu_1046_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln21_fu_1032_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal select_ln21_4_fu_1060_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln21_1_fu_1068_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln21_6_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_5_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_5_i_fu_1086_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln21_1_fu_1072_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_fu_1100_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_cast30_fu_1108_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_0186_0_i_cast_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce0 : OUT STD_LOGIC;
        -- state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce1 : OUT STD_LOGIC;
        -- state_V_6_we1 : OUT STD_LOGIC;
        -- state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;


    component vector_init_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component shake_prng_init_tkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_buffer_V_U : component shake_prng_init_tkbM
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_buffer_V_address0,
        ce0 => temp_buffer_V_ce0,
        q0 => temp_buffer_V_q0,
        address1 => temp_buffer_V_address1,
        ce1 => temp_buffer_V_ce1,
        we1 => temp_buffer_V_we1,
        d1 => entropy_input_V_q0,
        q1 => temp_buffer_V_q1);

    -- grp_KeccakF1600_StatePer_fu_397 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_397_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_397_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_397_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_397_ap_ready,
        -- state_V_6_address0 => grp_KeccakF1600_StatePer_fu_397_state_V_6_address0,
        -- state_V_6_ce0 => grp_KeccakF1600_StatePer_fu_397_state_V_6_ce0,
        -- state_V_6_q0 => shake_prng_state_array_V_q0,
        -- state_V_6_address1 => grp_KeccakF1600_StatePer_fu_397_state_V_6_address1,
        -- state_V_6_ce1 => grp_KeccakF1600_StatePer_fu_397_state_V_6_ce1,
        -- state_V_6_we1 => grp_KeccakF1600_StatePer_fu_397_state_V_6_we1,
        -- state_V_6_d1 => grp_KeccakF1600_StatePer_fu_397_state_V_6_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_397_ap_start;
  state_V_q0_permute <= shake_prng_state_array_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_397_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_397_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_397_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_397_state_V_6_d1       <= state_V_d1_permute;
  
    grp_vector_init_64_fu_417 : component vector_init_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_64_fu_417_ap_start,
        ap_done => grp_vector_init_64_fu_417_ap_done,
        ap_idle => grp_vector_init_64_fu_417_ap_idle,
        ap_ready => grp_vector_init_64_fu_417_ap_ready,
        array_V_address1 => grp_vector_init_64_fu_417_array_V_address1,
        array_V_ce1 => grp_vector_init_64_fu_417_array_V_ce1,
        array_V_we1 => grp_vector_init_64_fu_417_array_V_we1,
        array_V_d1 => grp_vector_init_64_fu_417_array_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_397_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_397_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_KeccakF1600_StatePer_fu_397_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_397_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_397_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_64_fu_417_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_64_fu_417_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_511_p2 = ap_const_lv1_1))) then 
                    grp_vector_init_64_fu_417_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_64_fu_417_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_64_fu_417_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cnt_V_2_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln891_1_fu_637_p2 = ap_const_lv1_0))) then 
                cnt_V_2_fu_166 <= cnt_V_fu_624_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_511_p2 = ap_const_lv1_1)))) then 
                cnt_V_2_fu_166 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_01676_2_i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln891_2_fu_954_p2 = ap_const_lv1_0))) then 
                p_01676_2_i_reg_386 <= cnt_V_3_fu_941_p2;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1))) then 
                p_01676_2_i_reg_386 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_417_ap_done = ap_const_logic_1))) then 
                p_0260_0_i_reg_374 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then 
                p_0260_0_i_reg_374 <= i_V_4_fu_648_p2;
            end if; 
        end if;
    end process;

    reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_482 <= temp_buffer_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_482 <= temp_buffer_V_q1;
            end if; 
        end if;
    end process;

    reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_487 <= temp_buffer_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_487 <= temp_buffer_V_q0;
            end if; 
        end if;
    end process;

    reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_492 <= temp_buffer_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_492 <= temp_buffer_V_q1;
            end if; 
        end if;
    end process;

    reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_501 <= temp_buffer_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_501 <= temp_buffer_V_q0;
            end if; 
        end if;
    end process;

    reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_506 <= temp_buffer_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_506 <= temp_buffer_V_q1;
            end if; 
        end if;
    end process;

    t_V_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_363 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_363 <= i_V_reg_1140;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_1140 <= i_V_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln117_reg_1277 <= icmp_ln117_fu_684_p2;
                shake_prng_state_arr_2_reg_1282 <= zext_ln544_26_fu_689_p1(5 - 1 downto 0);
                temp_buffer_V_load_6_reg_1272 <= temp_buffer_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln891_1_reg_1233 <= icmp_ln891_1_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                icmp_ln891_2_reg_1293 <= icmp_ln891_2_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_1))) then
                len_V_reg_1185 <= len_V_fu_560_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                r_V_reg_1313 <= p_01676_2_i_reg_386(7 downto 3);
                ret_V_23_reg_1302 <= ret_V_23_fu_965_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_478 <= temp_buffer_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_497 <= cnt_V_2_fu_166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                shake_prng_state_arr_5_reg_1318 <= zext_ln544_27_fu_979_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                shake_prng_state_arr_reg_1227 <= zext_ln544_25_fu_599_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_417_ap_done = ap_const_logic_1))) then
                    zext_ln215_reg_1162(6 downto 0) <= zext_ln215_fu_527_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_511_p2 = ap_const_lv1_0))) then
                    zext_ln544_reg_1145(6 downto 0) <= zext_ln544_fu_522_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_reg_1145(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln215_reg_1162(16 downto 7) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_511_p2, ap_CS_fsm_state4, grp_vector_init_64_fu_417_ap_done, ap_CS_fsm_state5, icmp_ln891_fu_540_p2, icmp_ln891_1_fu_637_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_block_state11_on_subcall_done, ap_CS_fsm_state16, icmp_ln891_2_fu_954_p2, ap_CS_fsm_state18, ap_block_state18_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_511_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_417_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln891_1_fu_637_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln891_2_fu_954_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln700_fu_931_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(zext_ln700_fu_928_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(icmp_ln891_1_reg_1233, grp_KeccakF1600_StatePer_fu_397_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_KeccakF1600_StatePer_fu_397_ap_done = ap_const_logic_0) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_fu_397_ap_done, icmp_ln891_2_reg_1293)
    begin
                ap_block_state18_on_subcall_done <= ((grp_KeccakF1600_StatePer_fu_397_ap_done = ap_const_logic_0) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_p_0260_0_i_phi_fu_378_p4 <= p_0260_0_i_reg_374;

    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_V_3_fu_941_p2 <= std_logic_vector(unsigned(zext_ln700_1_fu_937_p1) + unsigned(reg_497));
    cnt_V_fu_624_p2 <= std_logic_vector(unsigned(reg_497) + unsigned(ap_const_lv9_8));
    empty_17_fu_1094_p2 <= (icmp_ln21_6_fu_1081_p2 or icmp_ln21_5_fu_1076_p2);
    entropy_input_V_address0 <= zext_ln544_fu_522_p1(6 - 1 downto 0);

    entropy_input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            entropy_input_V_ce0 <= ap_const_logic_1;
        else 
            entropy_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_fu_397_ap_start <= grp_KeccakF1600_StatePer_fu_397_ap_start_reg;

    grp_fu_428_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state5, ap_phi_mux_p_0260_0_i_phi_fu_378_p4, p_0260_0_i_reg_374)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_428_p0 <= p_0260_0_i_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_428_p0 <= ap_phi_mux_p_0260_0_i_phi_fu_378_p4;
        else 
            grp_fu_428_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_428_p2 <= (grp_fu_428_p0 or ap_const_lv16_1);
    grp_fu_435_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_2);
    grp_fu_441_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_3);
    grp_fu_447_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_4);
    grp_fu_453_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_5);
    grp_fu_462_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_6);
    grp_fu_468_p4 <= cnt_V_2_fu_166(7 downto 3);
    grp_vector_init_64_fu_417_ap_start <= grp_vector_init_64_fu_417_ap_start_reg;
    i_V_4_fu_648_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_374) + unsigned(ap_const_lv16_8));
    i_V_fu_516_p2 <= std_logic_vector(unsigned(t_V_reg_363) + unsigned(ap_const_lv7_1));
    icmp_ln117_1_fu_803_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_5) else "0";
    icmp_ln117_2_fu_808_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_4) else "0";
    icmp_ln117_3_fu_813_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_3) else "0";
    icmp_ln117_4_fu_818_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_2) else "0";
    icmp_ln117_5_fu_823_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_1) else "0";
    icmp_ln117_6_fu_828_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_0) else "0";
    icmp_ln117_fu_684_p2 <= "1" when (len_V_reg_1185 = ap_const_lv3_6) else "0";
    icmp_ln21_1_fu_996_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_2) else "0";
    icmp_ln21_2_fu_1001_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_3) else "0";
    icmp_ln21_3_fu_1036_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_4) else "0";
    icmp_ln21_4_fu_1041_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_5) else "0";
    icmp_ln21_5_fu_1076_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_6) else "0";
    icmp_ln21_6_fu_1081_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_7) else "0";
    icmp_ln21_fu_983_p2 <= "1" when (ret_V_23_reg_1302 = ap_const_lv3_1) else "0";
    icmp_ln24_fu_511_p2 <= "1" when (t_V_reg_363 = enlen_V) else "0";
    icmp_ln891_1_fu_637_p2 <= "1" when (unsigned(cnt_V_fu_624_p2) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_2_fu_954_p2 <= "1" when (unsigned(cnt_V_3_fu_941_p2) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_fu_540_p2 <= "1" when (unsigned(zext_ln215_reg_1162) < unsigned(ret_V_fu_534_p2)) else "0";
    len_V_fu_560_p1 <= enlen_V(3 - 1 downto 0);
    m_masked_V_1_fu_702_p4 <= ((ap_const_lv1_1 & reg_482) & reg_478);
    m_masked_V_2_fu_716_p5 <= (((ap_const_lv1_1 & reg_487) & reg_482) & reg_478);
    m_masked_V_4_fu_746_p7 <= (((((ap_const_lv1_1 & reg_501) & reg_492) & reg_487) & reg_482) & reg_478);
    m_masked_V_5_fu_762_p8 <= ((((((ap_const_lv1_1 & reg_506) & reg_501) & reg_492) & reg_487) & reg_482) & reg_478);
    m_masked_V_6_fu_784_p9 <= (((((((ap_const_lv1_1 & temp_buffer_V_load_6_reg_1272) & reg_506) & reg_501) & reg_492) & reg_487) & reg_482) & reg_478);
    m_masked_V_fu_694_p3 <= (ap_const_lv1_1 & reg_478);
    or_ln117_1_fu_859_p2 <= (icmp_ln117_4_fu_818_p2 or icmp_ln117_3_fu_813_p2);
    or_ln117_2_fu_877_p2 <= (icmp_ln117_2_fu_808_p2 or icmp_ln117_1_fu_803_p2);
    or_ln117_3_fu_902_p2 <= (or_ln117_fu_845_p2 or or_ln117_1_fu_859_p2);
    or_ln117_fu_845_p2 <= (icmp_ln117_6_fu_828_p2 or icmp_ln117_5_fu_823_p2);
    or_ln21_1_fu_1054_p2 <= (icmp_ln21_4_fu_1041_p2 or icmp_ln21_3_fu_1036_p2);
    or_ln21_fu_1014_p2 <= (icmp_ln21_2_fu_1001_p2 or icmp_ln21_1_fu_996_p2);
        p_0186_0_i_cast30_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0186_0_i_fu_1100_p3),61));

    p_0186_0_i_cast_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0186_0_i_cast30_fu_1108_p1),64));
    p_0186_0_i_fu_1100_p3 <= 
        select_ln21_5_i_fu_1086_p3 when (empty_17_fu_1094_p2(0) = '1') else 
        zext_ln21_1_fu_1072_p1;
    ret_V_21_fu_588_p2 <= (p_0260_0_i_reg_374 or ap_const_lv16_7);
    ret_V_23_fu_965_p1 <= p_01676_2_i_reg_386(3 - 1 downto 0);
    ret_V_24_fu_604_p9 <= (((((((temp_buffer_V_q1 & temp_buffer_V_q0) & reg_506) & reg_501) & reg_492) & reg_487) & reg_482) & reg_478);
    ret_V_25_fu_728_p6 <= ((((ap_const_lv1_1 & reg_492) & reg_487) & reg_482) & reg_478);
    ret_V_fu_534_p2 <= std_logic_vector(unsigned(zext_ln215_2_fu_530_p1) + unsigned(ap_const_lv17_8));
    select_ln117_1_fu_851_p3 <= 
        zext_ln214_fu_712_p1 when (icmp_ln117_4_fu_818_p2(0) = '1') else 
        m_masked_V_2_fu_716_p5;
    select_ln117_2_fu_865_p3 <= 
        zext_ln1356_fu_742_p1 when (icmp_ln117_2_fu_808_p2(0) = '1') else 
        m_masked_V_4_fu_746_p7;
    select_ln117_3_fu_883_p3 <= 
        zext_ln214_1_fu_780_p1 when (icmp_ln117_reg_1277(0) = '1') else 
        m_masked_V_6_fu_784_p9;
    select_ln117_4_fu_890_p3 <= 
        zext_ln117_fu_841_p1 when (or_ln117_fu_845_p2(0) = '1') else 
        select_ln117_1_fu_851_p3;
    select_ln117_5_fu_908_p3 <= 
        zext_ln117_1_fu_873_p1 when (or_ln117_2_fu_877_p2(0) = '1') else 
        select_ln117_3_fu_883_p3;
    select_ln117_6_fu_916_p3 <= 
        zext_ln117_2_fu_898_p1 when (or_ln117_3_fu_902_p2(0) = '1') else 
        select_ln117_5_fu_908_p3;
    select_ln117_fu_833_p3 <= 
        ap_const_lv9_1 when (icmp_ln117_6_fu_828_p2(0) = '1') else 
        m_masked_V_fu_694_p3;
    select_ln21_1_fu_1006_p3 <= 
        ap_const_lv25_1000000 when (icmp_ln21_2_fu_1001_p2(0) = '1') else 
        ap_const_lv25_1F0000;
    select_ln21_2_fu_1020_p3 <= 
        select_ln21_1_fu_1006_p3 when (or_ln21_fu_1014_p2(0) = '1') else 
        select_ln21_fu_988_p3;
    select_ln21_3_fu_1046_p3 <= 
        ap_const_lv41_10000000000 when (icmp_ln21_4_fu_1041_p2(0) = '1') else 
        ap_const_lv41_1F00000000;
    select_ln21_4_fu_1060_p3 <= 
        select_ln21_3_fu_1046_p3 when (or_ln21_1_fu_1054_p2(0) = '1') else 
        zext_ln21_fu_1032_p1;
    select_ln21_5_i_fu_1086_p3 <= 
        ap_const_lv57_100000000000000 when (icmp_ln21_6_fu_1081_p2(0) = '1') else 
        ap_const_lv57_1F000000000000;
    select_ln21_fu_988_p3 <= 
        ap_const_lv25_1F00 when (icmp_ln21_fu_983_p2(0) = '1') else 
        ap_const_lv25_1F;
        sext_ln21_1_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_4_fu_1060_p3),45));

        sext_ln21_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_2_fu_1020_p3),29));

    shake_prng_state_arr_4_reg_1297 <= ap_const_lv64_19(5 - 1 downto 0);

    shake_prng_state_array_V_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, icmp_ln891_1_reg_1233, ap_CS_fsm_state11, icmp_ln891_2_reg_1293, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_address0, ap_CS_fsm_state18, zext_ln544_25_fu_599_p1, zext_ln544_26_fu_689_p1, zext_ln544_27_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_27_fu_979_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_26_fu_689_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_25_fu_599_p1(5 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_address0 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_address0;
        else 
            shake_prng_state_array_V_address0 <= "XXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_address1_assign_proc : process(ap_CS_fsm_state4, shake_prng_state_arr_reg_1227, icmp_ln891_1_reg_1233, ap_CS_fsm_state9, ap_CS_fsm_state11, shake_prng_state_arr_2_reg_1282, ap_CS_fsm_state16, icmp_ln891_2_reg_1293, shake_prng_state_arr_4_reg_1297, ap_CS_fsm_state19, shake_prng_state_arr_5_reg_1318, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_address1, grp_vector_init_64_fu_417_array_V_address1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            shake_prng_state_array_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_4_reg_1297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_5_reg_1318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            shake_prng_state_array_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_2_reg_1282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_reg_1227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_address1 <= grp_vector_init_64_fu_417_array_V_address1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_address1 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_address1;
        else 
            shake_prng_state_array_V_address1 <= "XXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, icmp_ln891_1_reg_1233, ap_CS_fsm_state11, icmp_ln891_2_reg_1293, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            shake_prng_state_array_V_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_ce0 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_ce0;
        else 
            shake_prng_state_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_prng_state_array_V_ce1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1233, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state16, icmp_ln891_2_reg_1293, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_ce1, grp_vector_init_64_fu_417_array_V_ce1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            shake_prng_state_array_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_ce1 <= grp_vector_init_64_fu_417_array_V_ce1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_ce1 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_ce1;
        else 
            shake_prng_state_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_prng_state_array_V_d1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1233, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state16, icmp_ln891_2_reg_1293, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_d1, grp_vector_init_64_fu_417_array_V_d1, ap_CS_fsm_state18, xor_ln719_fu_630_p2, xor_ln719_1_fu_947_p2, zext_ln209_fu_960_p1, ap_CS_fsm_state21, xor_ln719_2_fu_1116_p2, ap_CS_fsm_state23, xor_ln719_3_fu_1123_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_3_fu_1123_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_2_fu_1116_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            shake_prng_state_array_V_d1 <= zext_ln209_fu_960_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_1_fu_947_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_fu_630_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_d1 <= grp_vector_init_64_fu_417_array_V_d1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_d1 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_d1;
        else 
            shake_prng_state_array_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_we1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1233, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state16, icmp_ln891_2_reg_1293, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_397_state_V_6_we1, grp_vector_init_64_fu_417_array_V_we1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            shake_prng_state_array_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_we1 <= grp_vector_init_64_fu_417_array_V_we1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1293 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1233 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_we1 <= grp_KeccakF1600_StatePer_fu_397_state_V_6_we1;
        else 
            shake_prng_state_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, icmp_ln891_fu_540_p2, zext_ln544_17_fu_545_p1, zext_ln544_10_fu_555_p1, zext_ln544_19_fu_563_p1, zext_ln544_21_fu_573_p1, zext_ln544_23_fu_583_p1, zext_ln544_11_fu_654_p1, zext_ln544_13_fu_664_p1, zext_ln544_15_fu_674_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_buffer_V_address0 <= zext_ln544_15_fu_674_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buffer_V_address0 <= zext_ln544_13_fu_664_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buffer_V_address0 <= zext_ln544_11_fu_654_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buffer_V_address0 <= zext_ln544_23_fu_583_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_buffer_V_address0 <= zext_ln544_21_fu_573_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_buffer_V_address0 <= zext_ln544_19_fu_563_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_1))) then 
            temp_buffer_V_address0 <= zext_ln544_10_fu_555_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_0))) then 
            temp_buffer_V_address0 <= zext_ln544_17_fu_545_p1(7 - 1 downto 0);
        else 
            temp_buffer_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_buffer_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, zext_ln544_reg_1145, ap_CS_fsm_state5, ap_CS_fsm_state3, zext_ln544_18_fu_550_p1, zext_ln544_20_fu_568_p1, zext_ln544_22_fu_578_p1, zext_ln544_24_fu_594_p1, zext_ln544_12_fu_659_p1, zext_ln544_14_fu_669_p1, zext_ln544_16_fu_679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_buffer_V_address1 <= zext_ln544_16_fu_679_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buffer_V_address1 <= zext_ln544_14_fu_669_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buffer_V_address1 <= zext_ln544_12_fu_659_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buffer_V_address1 <= zext_ln544_24_fu_594_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_buffer_V_address1 <= zext_ln544_22_fu_578_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_buffer_V_address1 <= zext_ln544_20_fu_568_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_buffer_V_address1 <= zext_ln544_18_fu_550_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_buffer_V_address1 <= zext_ln544_reg_1145(7 - 1 downto 0);
        else 
            temp_buffer_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, icmp_ln891_fu_540_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_540_p2 = ap_const_lv1_0)))) then 
            temp_buffer_V_ce0 <= ap_const_logic_1;
        else 
            temp_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_buffer_V_ce1 <= ap_const_logic_1;
        else 
            temp_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_buffer_V_we1 <= ap_const_logic_1;
        else 
            temp_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln719_1_fu_947_p2 <= (zext_ln117_3_fu_924_p1 xor shake_prng_state_array_V_q0);
    xor_ln719_2_fu_1116_p2 <= (shake_prng_state_array_V_q0 xor p_0186_0_i_cast_fu_1112_p1);
    xor_ln719_3_fu_1123_p2 <= (shake_prng_state_array_V_q0 xor ap_const_lv64_8000000000000000);
    xor_ln719_fu_630_p2 <= (shake_prng_state_array_V_q0 xor ret_V_24_fu_604_p9);
    zext_ln117_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_2_fu_865_p3),57));
    zext_ln117_2_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_4_fu_890_p3),57));
    zext_ln117_3_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_6_fu_916_p3),64));
    zext_ln117_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_fu_833_p3),25));
    zext_ln1356_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_25_fu_728_p6),41));
    zext_ln209_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01676_2_i_reg_386),64));
    zext_ln214_1_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_masked_V_5_fu_762_p8),57));
    zext_ln214_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_masked_V_1_fu_702_p4),25));
    zext_ln215_2_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_374),17));
    zext_ln215_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(enlen_V),17));
    zext_ln21_1_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_1_fu_1068_p1),57));
    zext_ln21_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_fu_1028_p1),41));
    zext_ln544_10_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_374),64));
    zext_ln544_11_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_428_p2),64));
    zext_ln544_12_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_435_p2),64));
    zext_ln544_13_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p2),64));
    zext_ln544_14_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_447_p2),64));
    zext_ln544_15_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_453_p2),64));
    zext_ln544_16_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_462_p2),64));
    zext_ln544_17_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_374),64));
    zext_ln544_18_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_428_p2),64));
    zext_ln544_19_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_435_p2),64));
    zext_ln544_20_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_441_p2),64));
    zext_ln544_21_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_447_p2),64));
    zext_ln544_22_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_453_p2),64));
    zext_ln544_23_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_462_p2),64));
    zext_ln544_24_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_21_fu_588_p2),64));
    zext_ln544_25_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_468_p4),64));
    zext_ln544_26_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_468_p4),64));
    zext_ln544_27_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1313),64));
    zext_ln544_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_363),64));
    zext_ln700_1_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_931_p2),9));
    zext_ln700_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_V_reg_1185),4));
end behav;
