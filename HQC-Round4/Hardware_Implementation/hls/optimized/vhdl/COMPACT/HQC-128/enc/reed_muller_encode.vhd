-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_muller_encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    msg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    msg_V_ce0 : OUT STD_LOGIC;
    msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_muller_encode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_8B1 : STD_LOGIC_VECTOR (11 downto 0) := "100010110001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv14_8B1 : STD_LOGIC_VECTOR (13 downto 0) := "00100010110001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_message_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_message_ce0 : STD_LOGIC;
    signal shift_message_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mask_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_ce0 : STD_LOGIC;
    signal mask_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_adress_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal word_adress_ce0 : STD_LOGIC;
    signal word_adress_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_7_fu_235_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_7_reg_447 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_270_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_reg_457 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal msg_V_load_reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_word_V_fu_284_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_fu_298_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_476 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln887_9_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_word_V_1_fu_338_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_word_V_1_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln321_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_reg_502 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_V_fu_373_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_V_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln188_fu_387_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln188_reg_515 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_10_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_reg_523 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal adr2_fu_407_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal adr2_reg_528 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln187_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal adr1_fu_412_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal adr1_reg_534 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal t_V_reg_174 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0410_0_i_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_0290_0_i_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_095_0_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_050_0_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln544_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_53_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_2_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln321_1_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln321_2_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_246_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1352_1_fu_258_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1352_fu_254_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1352_1_fu_266_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_276_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln556_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln808_fu_320_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_324_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1355_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln321_1_fu_354_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln321_1_fu_357_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln188_2_fu_379_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln188_1_fu_403_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln321_fu_416_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_2_fu_419_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln190_fu_430_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_3_fu_433_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component reed_muller_encodqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component reed_muller_encodrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_encodsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    shift_message_U : component reed_muller_encodqcK
    generic map (
        DataWidth => 3,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_message_address0,
        ce0 => shift_message_ce0,
        q0 => shift_message_q0);

    mask_U : component reed_muller_encodrcU
    generic map (
        DataWidth => 8,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_address0,
        ce0 => mask_ce0,
        q0 => mask_q0);

    word_adress_U : component reed_muller_encodsc4
    generic map (
        DataWidth => 4,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => word_adress_address0,
        ce0 => word_adress_ce0,
        q0 => word_adress_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0290_0_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0290_0_i_reg_196 <= i_V_reg_476;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0290_0_i_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0410_0_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0410_0_i_reg_186 <= first_word_V_1_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0410_0_i_reg_186 <= first_word_V_fu_284_p3;
            end if; 
        end if;
    end process;

    p_050_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_050_0_reg_218 <= j_V_reg_523;
            elsif (((icmp_ln887_10_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_050_0_reg_218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_095_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_095_0_reg_207 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_391_p2 = ap_const_lv1_1))) then 
                p_095_0_reg_207 <= k_V_reg_510;
            end if; 
        end if;
    end process;

    t_V_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_10_fu_367_p2 = ap_const_lv1_1))) then 
                t_V_reg_174 <= i_V_7_reg_447;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_174 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln321_reg_502 <= add_ln321_fu_348_p2;
                first_word_V_1_reg_496 <= first_word_V_1_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                adr1_reg_534 <= adr1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln187_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                adr2_reg_528 <= adr2_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_7_reg_447 <= i_V_7_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_reg_476 <= i_V_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_V_reg_523 <= j_V_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_V_reg_510 <= k_V_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                msg_V_load_reg_463 <= msg_V_q0;
                    ret_V_reg_457(12 downto 4) <= ret_V_fu_270_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln188_reg_515(5 downto 4) <= zext_ln188_fu_387_p1(5 downto 4);
            end if;
        end if;
    end process;
    ret_V_reg_457(3 downto 0) <= "0000";
    zext_ln188_reg_515(3 downto 0) <= "0000";
    zext_ln188_reg_515(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_229_p2, ap_CS_fsm_state4, icmp_ln887_9_fu_292_p2, ap_CS_fsm_state7, icmp_ln887_10_fu_367_p2, ap_CS_fsm_state8, icmp_ln187_fu_391_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_9_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_10_fu_367_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln187_fu_391_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln321_1_fu_357_p2 <= std_logic_vector(unsigned(ret_V_reg_457) + unsigned(zext_ln321_1_fu_354_p1));
    add_ln321_2_fu_419_p2 <= std_logic_vector(signed(sext_ln321_fu_416_p1) + signed(ap_const_lv14_8B1));
    add_ln321_3_fu_433_p2 <= std_logic_vector(signed(sext_ln190_fu_430_p1) + signed(ap_const_lv14_8B1));
    add_ln321_fu_348_p2 <= std_logic_vector(signed(ap_const_lv12_8B1) + signed(zext_ln321_fu_344_p1));
    adr1_fu_412_p2 <= std_logic_vector(signed(adr2_reg_528) + signed(zext_ln188_reg_515));
    adr2_fu_407_p2 <= std_logic_vector(unsigned(ret_V_reg_457) + unsigned(zext_ln188_1_fu_403_p1));
    and_ln1355_fu_332_p2 <= (select_ln41_fu_324_p3 and mask_q0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_229_p2)
    begin
        if ((((icmp_ln887_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_229_p2)
    begin
        if (((icmp_ln887_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cdw_V_address0 <= sext_ln321_1_fu_425_p1(13 - 1 downto 0);

    cdw_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, zext_ln321_2_fu_362_p1, sext_ln321_2_fu_439_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cdw_V_address1 <= sext_ln321_2_fu_439_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cdw_V_address1 <= zext_ln321_2_fu_362_p1(13 - 1 downto 0);
        else 
            cdw_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cdw_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_d1_assign_proc : process(cdw_V_q0, first_word_V_1_reg_496, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cdw_V_d1 <= cdw_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cdw_V_d1 <= first_word_V_1_reg_496;
        else 
            cdw_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    cdw_V_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    first_word_V_1_fu_338_p2 <= (p_0410_0_i_reg_186 xor and_ln1355_fu_332_p2);
    first_word_V_fu_284_p3 <= 
        ap_const_lv8_FF when (tmp_4_fu_276_p3(0) = '1') else 
        ap_const_lv8_0;
    i_V_7_fu_235_p2 <= std_logic_vector(unsigned(t_V_reg_174) + unsigned(ap_const_lv6_1));
    i_V_fu_298_p2 <= std_logic_vector(unsigned(p_0290_0_i_reg_196) + unsigned(ap_const_lv5_1));
    icmp_ln187_fu_391_p2 <= "1" when (p_050_0_reg_218 = ap_const_lv5_10) else "0";
    icmp_ln887_10_fu_367_p2 <= "1" when (p_095_0_reg_207 = ap_const_lv2_3) else "0";
    icmp_ln887_9_fu_292_p2 <= "1" when (p_0290_0_i_reg_196 = ap_const_lv5_12) else "0";
    icmp_ln887_fu_229_p2 <= "1" when (t_V_reg_174 = ap_const_lv6_2E) else "0";
    j_V_fu_397_p2 <= std_logic_vector(unsigned(p_050_0_reg_218) + unsigned(ap_const_lv5_1));
    k_V_fu_373_p2 <= std_logic_vector(unsigned(p_095_0_reg_207) + unsigned(ap_const_lv2_1));
    mask_address0 <= zext_ln544_53_fu_304_p1(5 - 1 downto 0);

    mask_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mask_ce0 <= ap_const_logic_1;
        else 
            mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_address0 <= zext_ln544_fu_241_p1(6 - 1 downto 0);

    msg_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            msg_V_ce0 <= ap_const_logic_1;
        else 
            msg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_315_p2 <= std_logic_vector(shift_right(unsigned(msg_V_load_reg_463),to_integer(unsigned('0' & zext_ln556_fu_311_p1(8-1 downto 0)))));
    ret_V_fu_270_p2 <= std_logic_vector(unsigned(zext_ln1352_fu_254_p1) - unsigned(zext_ln1352_1_fu_266_p1));
    select_ln41_fu_324_p3 <= 
        ap_const_lv8_FF when (trunc_ln808_fu_320_p1(0) = '1') else 
        ap_const_lv8_0;
        sext_ln190_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(adr1_reg_534),14));

        sext_ln321_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_2_fu_419_p2),64));

        sext_ln321_2_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_3_fu_433_p2),64));

        sext_ln321_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(adr2_reg_528),14));

    shift_message_address0 <= zext_ln544_53_fu_304_p1(5 - 1 downto 0);

    shift_message_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_message_ce0 <= ap_const_logic_1;
        else 
            shift_message_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1352_1_fu_258_p3 <= (t_V_reg_174 & ap_const_lv4_0);
    shl_ln188_2_fu_379_p3 <= (p_095_0_reg_207 & ap_const_lv4_0);
    shl_ln_fu_246_p3 <= (t_V_reg_174 & ap_const_lv6_0);
    tmp_4_fu_276_p3 <= msg_V_q0(7 downto 7);
    trunc_ln808_fu_320_p1 <= r_V_fu_315_p2(1 - 1 downto 0);
    word_adress_address0 <= zext_ln544_53_fu_304_p1(5 - 1 downto 0);

    word_adress_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_adress_ce0 <= ap_const_logic_1;
        else 
            word_adress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1352_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_1_fu_258_p3),13));
    zext_ln1352_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_246_p3),13));
    zext_ln188_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_050_0_reg_218),13));
    zext_ln188_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln188_2_fu_379_p3),13));
    zext_ln321_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_502),13));
    zext_ln321_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_357_p2),64));
    zext_ln321_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_adress_q0),12));
    zext_ln544_53_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0290_0_i_reg_196),64));
    zext_ln544_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_174),64));
    zext_ln556_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_message_q0),8));
end behav;
