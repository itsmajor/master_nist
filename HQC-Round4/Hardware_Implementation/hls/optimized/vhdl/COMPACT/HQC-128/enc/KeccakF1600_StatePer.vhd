-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakF1600_StatePer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    -- Channel A
    ap_start_A         : in  std_logic;
    ap_done_A          : out std_logic;
    ap_idle_A          : out std_logic;
    ap_ready_A         : out std_logic;
    state_V_address0_A : out std_logic_vector (4 downto 0);
    state_V_ce0_A      : out std_logic;
    state_V_q0_A       : in  std_logic_vector (63 downto 0);
    state_V_address1_A : out std_logic_vector (4 downto 0);
    state_V_ce1_A      : out std_logic;
    state_V_we1_A      : out std_logic;
    state_V_d1_A       : out std_logic_vector (63 downto 0);
    -- Channel B
    ap_start_B         : in  std_logic;
    ap_done_B          : out std_logic;
    ap_idle_B          : out std_logic;
    ap_ready_B         : out std_logic;
    state_V_address0_B : out std_logic_vector (4 downto 0);
    state_V_ce0_B      : out std_logic;
    state_V_q0_B       : in  std_logic_vector (63 downto 0);
    state_V_address1_B : out std_logic_vector (4 downto 0);
    state_V_ce1_B      : out std_logic;
    state_V_we1_B      : out std_logic;
    state_V_d1_B       : out std_logic_vector (63 downto 0);
    -- Channel C
    ap_start_C         : in  std_logic;
    ap_done_C          : out std_logic;
    ap_idle_C          : out std_logic;
    ap_ready_C         : out std_logic;
    state_V_address0_C : out std_logic_vector (4 downto 0);
    state_V_ce0_C      : out std_logic;
    state_V_q0_C       : in  std_logic_vector (63 downto 0);
    state_V_address1_C : out std_logic_vector (4 downto 0);
    state_V_ce1_C      : out std_logic;
    state_V_we1_C      : out std_logic;
    state_V_d1_C       : out std_logic_vector (63 downto 0);
    -- Channel D
    ap_start_D         : in  std_logic;
    ap_done_D          : out std_logic;
    ap_idle_D          : out std_logic;
    ap_ready_D         : out std_logic;
    state_V_address0_D : out std_logic_vector (4 downto 0);
    state_V_ce0_D      : out std_logic;
    state_V_q0_D       : in  std_logic_vector (63 downto 0);
    state_V_address1_D : out std_logic_vector (4 downto 0);
    state_V_ce1_D      : out std_logic;
    state_V_we1_D      : out std_logic;
    state_V_d1_D       : out std_logic_vector (63 downto 0);
    -- Channel E
    ap_start_E         : in  std_logic;
    ap_done_E          : out std_logic;
    ap_idle_E          : out std_logic;
    ap_ready_E         : out std_logic;
    state_V_address0_E : out std_logic_vector (4 downto 0);
    state_V_ce0_E      : out std_logic;
    state_V_q0_E       : in  std_logic_vector (63 downto 0);
    state_V_address1_E : out std_logic_vector (4 downto 0);
    state_V_ce1_E      : out std_logic;
    state_V_we1_E      : out std_logic;
    state_V_d1_E       : out std_logic_vector (63 downto 0)
	);
end;


architecture behav of KeccakF1600_StatePer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indice_D13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D13_ce0 : STD_LOGIC;
    signal indice_D13_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D24_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D24_ce0 : STD_LOGIC;
    signal indice_D24_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice2_ce0 : STD_LOGIC;
    signal indice2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_table1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_table1_ce0 : STD_LOGIC;
    signal shift_table1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal indice_E15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E15_ce0 : STD_LOGIC;
    signal indice_E15_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E26_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E26_ce0 : STD_LOGIC;
    signal indice_E26_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal KeccakF_RoundConstan_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakF_RoundConstan_ce0 : STD_LOGIC;
    signal KeccakF_RoundConstan_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_V_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal round_V_reg_912 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal BCl_it_V_fu_477_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BCl_it_V_reg_920 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln103_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCD_V_addr_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln111_fu_489_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln111_reg_936 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln111_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCl_it_2_V_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BCl_it_2_V_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_it_V_fu_539_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_it_V_reg_957 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln887_13_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_V_fu_609_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_V_reg_985 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln887_14_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rolling_V_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ret_V_57_fu_641_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_57_reg_1005 : STD_LOGIC_VECTOR (4 downto 0);
    signal BC_it_V_fu_653_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BC_it_V_reg_1014 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln887_16_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln145_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_56_reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal shift_table1_load_reg_1045 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln646_fu_741_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln646_reg_1050 : STD_LOGIC_VECTOR (6 downto 0);
    signal E_it_V_fu_791_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal E_it_V_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ret_V_59_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_59_reg_1063 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_17_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal BCD_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_4_reg_1093 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_fu_892_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_1101 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln544_63_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_63_reg_1106 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_15_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCD_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal BCD_V_ce0 : STD_LOGIC;
    signal BCD_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal BCD_V_ce1 : STD_LOGIC;
    signal BCD_V_we1 : STD_LOGIC;
    signal BCD_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCD_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_ce1 : STD_LOGIC;
    signal E_we1 : STD_LOGIC;
    signal E_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_045_0_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0136_0_i_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln887_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0132_0_i_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_0168_0_i_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0253_0_i_reg_397 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0580_0_i_reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_0232_0_i_reg_418 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0568_0_i_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_051_0_reg_441 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln544_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_61_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_60_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_1_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_59_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_62_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_65_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_66_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_67_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_64_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_70_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_69_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_1_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_68_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_49_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_fu_778_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_62_fu_873_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_8_fu_879_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_499_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_2_fu_503_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_50_fu_511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_51_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_561_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_565_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1503_fu_576_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_63_fu_588_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1352_fu_629_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_633_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_7_fu_659_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_3_fu_663_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_53_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_9_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_8_fu_677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_54_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_55_fu_696_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_58_fu_707_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rolling_V_1_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln879_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_737_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_6_fu_747_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_52_fu_751_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln645_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln646_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_p_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_p_fu_765_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_10_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_11_fu_806_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_60_fu_810_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln149_2_fu_827_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_fu_831_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln149_3_fu_842_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_1_fu_846_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_861_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_64_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
  
  signal ap_start         : std_logic;
  signal ap_done          : std_logic;
  signal ap_idle          : std_logic;
  signal ap_ready         : std_logic;
  signal state_V_6_address0 : std_logic_vector (4 downto 0);
  signal state_V_6_ce0      : std_logic;
  signal state_V_6_q0       : std_logic_vector (63 downto 0);
  signal state_V_6_address1 : std_logic_vector (4 downto 0);
  signal state_V_6_ce1      : std_logic;
  signal state_V_6_we1      : std_logic;
  signal state_V_6_d1       : std_logic_vector (63 downto 0);
  
    component KeccakF1600_Statebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_Statecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_StatedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_StateeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakF1600_Stateg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_Statehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_Stateibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_StatejbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;

  signal ap_start_vect : std_logic_vector(4 downto 0);

begin

  ap_start      <= ap_start_A or ap_start_B or ap_start_C or ap_start_D or ap_start_E;
  ap_start_vect <= ap_start_A & ap_start_B & ap_start_C & ap_start_D & ap_start_E;

  process(state_V_q0_A, state_V_q0_B, state_V_q0_C, state_V_q0_D, state_V_q0_E, ap_start_vect)
  begin
    case (ap_start_vect) is
      when "10000" => state_V_6_q0 <= state_V_q0_A;
      when "01000" => state_V_6_q0 <= state_V_q0_B;
      when "00100" => state_V_6_q0 <= state_V_q0_C;
      when "00010" => state_V_6_q0 <= state_V_q0_D;
      when "00001" => state_V_6_q0 <= state_V_q0_E;
      when others   => state_V_6_q0 <= (others => '0');
    end case;
  end process;

  -- Channel A
  ap_done_A          <= ap_done;
  ap_idle_A          <= ap_idle;
  ap_ready_A         <= ap_ready;
  state_V_address0_A <= state_V_6_address0;
  state_V_ce0_A      <= state_V_6_ce0 when ap_start_A = '1' else '0';
  state_V_address1_A <= state_V_6_address1;
  state_V_ce1_A      <= state_V_6_ce1 when ap_start_A = '1' else '0';
  state_V_we1_A      <= state_V_6_we1 when ap_start_A = '1' else '0';
  state_V_d1_A       <= state_V_6_d1;
  -- Channel B
  ap_done_B          <= ap_done;
  ap_idle_B          <= ap_idle;
  ap_ready_B         <= ap_ready;
  state_V_address0_B <= state_V_6_address0;
  state_V_ce0_B      <= state_V_6_ce0 when ap_start_B = '1' else '0';
  state_V_address1_B <= state_V_6_address1;
  state_V_ce1_B      <= state_V_6_ce1 when ap_start_B = '1' else '0';
  state_V_we1_B      <= state_V_6_we1 when ap_start_B = '1' else '0';
  state_V_d1_B       <= state_V_6_d1;
  -- Channel C
  ap_done_C          <= ap_done;
  ap_idle_C          <= ap_idle;
  ap_ready_C         <= ap_ready;
  state_V_address0_C <= state_V_6_address0;
  state_V_ce0_C      <= state_V_6_ce0 when ap_start_C = '1' else '0';
  state_V_address1_C <= state_V_6_address1;
  state_V_ce1_C      <= state_V_6_ce1 when ap_start_C = '1' else '0';
  state_V_we1_C      <= state_V_6_we1 when ap_start_C = '1' else '0';
  state_V_d1_C       <= state_V_6_d1;
  -- Channel D
  ap_done_D          <= ap_done;
  ap_idle_D          <= ap_idle;
  ap_ready_D         <= ap_ready;
  state_V_address0_D <= state_V_6_address0;
  state_V_ce0_D      <= state_V_6_ce0 when ap_start_D = '1' else '0';
  state_V_address1_D <= state_V_6_address1;
  state_V_ce1_D      <= state_V_6_ce1 when ap_start_D = '1' else '0';
  state_V_we1_D      <= state_V_6_we1 when ap_start_D = '1' else '0';
  state_V_d1_D       <= state_V_6_d1;
  -- Channel E
  ap_done_E          <= ap_done;
  ap_idle_E          <= ap_idle;
  ap_ready_E         <= ap_ready;
  state_V_address0_E <= state_V_6_address0;
  state_V_ce0_E      <= state_V_6_ce0 when ap_start_E = '1' else '0';
  state_V_address1_E <= state_V_6_address1;
  state_V_ce1_E      <= state_V_6_ce1 when ap_start_E = '1' else '0';
  state_V_we1_E      <= state_V_6_we1 when ap_start_E = '1' else '0';
  state_V_d1_E       <= state_V_6_d1;

  
    indice_D13_U : component KeccakF1600_Statebkb
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_D13_address0,
        ce0 => indice_D13_ce0,
        q0 => indice_D13_q0);

    indice_D24_U : component KeccakF1600_Statecud
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_D24_address0,
        ce0 => indice_D24_ce0,
        q0 => indice_D24_q0);

    indice2_U : component KeccakF1600_StatedEe
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice2_address0,
        ce0 => indice2_ce0,
        q0 => indice2_q0);

    shift_table1_U : component KeccakF1600_StateeOg
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_table1_address0,
        ce0 => shift_table1_ce0,
        q0 => shift_table1_q0);

    indice_E15_U : component KeccakF1600_Statecud
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_E15_address0,
        ce0 => indice_E15_ce0,
        q0 => indice_E15_q0);

    indice_E26_U : component KeccakF1600_Stateg8j
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_E26_address0,
        ce0 => indice_E26_ce0,
        q0 => indice_E26_q0);

    KeccakF_RoundConstan_U : component KeccakF1600_Statehbi
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakF_RoundConstan_address0,
        ce0 => KeccakF_RoundConstan_ce0,
        q0 => KeccakF_RoundConstan_q0);

    BCD_V_U : component KeccakF1600_Stateibs
    generic map (
        DataWidth => 64,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BCD_V_address0,
        ce0 => BCD_V_ce0,
        q0 => BCD_V_q0,
        address1 => BCD_V_address1,
        ce1 => BCD_V_ce1,
        we1 => BCD_V_we1,
        d1 => BCD_V_d1,
        q1 => BCD_V_q1);

    E_U : component KeccakF1600_StatejbC
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0,
        address1 => E_address1,
        ce1 => E_ce1,
        we1 => E_we1,
        d1 => E_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0132_0_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0132_0_i_reg_374 <= BCl_it_2_V_reg_949;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0132_0_i_reg_374 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    p_0136_0_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_1))) then 
                p_0136_0_i_reg_362 <= BCl_it_V_reg_920;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_0))) then 
                p_0136_0_i_reg_362 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0168_0_i_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_1))) then 
                p_0168_0_i_reg_385 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0168_0_i_reg_385 <= D_it_V_reg_957;
            end if; 
        end if;
    end process;

    p_0232_0_i_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0232_0_i_reg_418 <= BC_it_V_reg_1014;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0232_0_i_reg_418 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0253_0_i_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_13_fu_533_p2 = ap_const_lv1_1))) then 
                p_0253_0_i_reg_397 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_1))) then 
                p_0253_0_i_reg_397 <= m_V_reg_985;
            end if; 
        end if;
    end process;

    p_045_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_1))) then 
                p_045_0_reg_350 <= round_V_reg_912;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_045_0_reg_350 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_051_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_051_0_reg_441 <= i_V_reg_1101;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                p_051_0_reg_441 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0568_0_i_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_1))) then 
                p_0568_0_i_reg_430 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_0568_0_i_reg_430 <= E_it_V_reg_1058;
            end if; 
        end if;
    end process;

    p_0580_0_i_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0580_0_i_reg_409 <= select_ln145_reg_1034;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0580_0_i_reg_409 <= rolling_V_fu_625_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_0))) then
                    BCD_V_addr_reg_930(2 downto 0) <= zext_ln544_fu_483_p1(4 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                BC_it_V_reg_1014 <= BC_it_V_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_0))) then
                BCl_it_2_V_reg_949 <= BCl_it_2_V_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                BCl_it_V_reg_920 <= BCl_it_V_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                D_it_V_reg_957 <= D_it_V_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                E_it_V_reg_1058 <= E_it_V_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_V_reg_1101 <= i_V_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                lhs_V_4_reg_1093 <= BCD_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                m_V_reg_985 <= m_V_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ret_V_56_reg_1039 <= grp_fu_452_p2;
                shift_table1_load_reg_1045 <= shift_table1_q0;
                sub_ln646_reg_1050 <= sub_ln646_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ret_V_57_reg_1005 <= ret_V_57_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_0))) then
                ret_V_59_reg_1063 <= ret_V_59_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                round_V_reg_912 <= round_V_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_0))) then
                select_ln145_reg_1034 <= select_ln145_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln111_reg_936(2 downto 0) <= zext_ln111_fu_489_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_0))) then
                    zext_ln544_63_reg_1106(4 downto 0) <= zext_ln544_63_fu_898_p1(4 downto 0);
            end if;
        end if;
    end process;
    BCD_V_addr_reg_930(3) <= '0';
    zext_ln111_reg_936(4 downto 3) <= "00";
    zext_ln544_63_reg_1106(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln103_fu_471_p2, ap_CS_fsm_state5, icmp_ln111_fu_493_p2, ap_CS_fsm_state7, icmp_ln887_13_fu_533_p2, ap_CS_fsm_state10, icmp_ln887_14_fu_603_p2, ap_CS_fsm_state12, icmp_ln887_16_fu_647_p2, ap_CS_fsm_state15, icmp_ln887_17_fu_785_p2, ap_CS_fsm_state19, icmp_ln887_15_fu_886_p2, icmp_ln887_fu_459_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_13_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln887_14_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    BCD_V_address0_assign_proc : process(BCD_V_addr_reg_930, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16, zext_ln122_1_fu_556_p1, zext_ln544_66_fu_702_p1, zext_ln544_69_fu_816_p1, zext_ln149_fu_837_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            BCD_V_address0 <= zext_ln149_fu_837_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            BCD_V_address0 <= zext_ln544_69_fu_816_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            BCD_V_address0 <= zext_ln544_66_fu_702_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            BCD_V_address0 <= zext_ln122_1_fu_556_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            BCD_V_address0 <= BCD_V_addr_reg_930;
        else 
            BCD_V_address0 <= "XXXX";
        end if; 
    end process;


    BCD_V_address1_assign_proc : process(BCD_V_addr_reg_930, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln122_fu_551_p1, zext_ln544_59_fu_571_p1, zext_ln544_64_fu_757_p1, zext_ln149_1_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            BCD_V_address1 <= zext_ln149_1_fu_852_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            BCD_V_address1 <= zext_ln544_64_fu_757_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            BCD_V_address1 <= zext_ln544_59_fu_571_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            BCD_V_address1 <= zext_ln122_fu_551_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_address1 <= BCD_V_addr_reg_930;
        else 
            BCD_V_address1 <= "XXXX";
        end if; 
    end process;


    BCD_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            BCD_V_ce0 <= ap_const_logic_1;
        else 
            BCD_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    BCD_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_ce1 <= ap_const_logic_1;
        else 
            BCD_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    BCD_V_d1_assign_proc : process(state_V_6_q0, ap_CS_fsm_state4, grp_fu_452_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, ret_V_49_fu_596_p2, or_ln647_fu_778_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            BCD_V_d1 <= or_ln647_fu_778_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            BCD_V_d1 <= ret_V_49_fu_596_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            BCD_V_d1 <= grp_fu_452_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            BCD_V_d1 <= state_V_6_q0;
        else 
            BCD_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BCD_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_we1 <= ap_const_logic_1;
        else 
            BCD_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    BC_it_V_fu_653_p2 <= std_logic_vector(unsigned(p_0232_0_i_reg_418) + unsigned(ap_const_lv3_1));
    BCl_it_2_V_fu_527_p2 <= std_logic_vector(unsigned(p_0132_0_i_reg_374) + unsigned(ap_const_lv3_1));
    BCl_it_V_fu_477_p2 <= std_logic_vector(unsigned(p_0136_0_i_reg_362) + unsigned(ap_const_lv3_1));
    D_it_V_fu_539_p2 <= std_logic_vector(unsigned(p_0168_0_i_reg_385) + unsigned(ap_const_lv3_1));

    E_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19, zext_ln544_63_fu_898_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            E_address0 <= zext_ln544_63_fu_898_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            E_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            E_address0 <= "XXXXX";
        end if; 
    end process;


    E_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln544_68_fu_857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            E_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            E_address1 <= zext_ln544_68_fu_857_p1(5 - 1 downto 0);
        else 
            E_address1 <= "XXXXX";
        end if; 
    end process;


    E_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            E_ce1 <= ap_const_logic_1;
        else 
            E_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    E_d1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ret_V_62_fu_873_p2, xor_ln719_8_fu_879_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            E_d1 <= xor_ln719_8_fu_879_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            E_d1 <= ret_V_62_fu_873_p2;
        else 
            E_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    E_it_V_fu_791_p2 <= std_logic_vector(unsigned(p_0568_0_i_reg_430) + unsigned(ap_const_lv3_1));

    E_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            E_we1 <= ap_const_logic_1;
        else 
            E_we1 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakF_RoundConstan_address0 <= zext_ln156_fu_620_p1(5 - 1 downto 0);

    KeccakF_RoundConstan_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_1;
        else 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln149_1_fu_846_p2 <= std_logic_vector(unsigned(zext_ln149_3_fu_842_p1) + unsigned(ap_const_lv4_A));
    add_ln149_fu_831_p2 <= std_logic_vector(unsigned(zext_ln149_2_fu_827_p1) + unsigned(ap_const_lv4_A));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_459_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_459_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_452_p2 <= (state_V_6_q0 xor BCD_V_q0);
    i_V_fu_892_p2 <= std_logic_vector(unsigned(p_051_0_reg_441) + unsigned(ap_const_lv5_1));
    icmp_ln103_fu_471_p2 <= "1" when (p_0136_0_i_reg_362 = ap_const_lv3_5) else "0";
    icmp_ln111_fu_493_p2 <= "1" when (p_0132_0_i_reg_374 = ap_const_lv3_5) else "0";
    icmp_ln879_fu_723_p2 <= "1" when (rolling_V_1_fu_717_p2 = ap_const_lv8_5) else "0";
    icmp_ln887_13_fu_533_p2 <= "1" when (p_0168_0_i_reg_385 = ap_const_lv3_5) else "0";
    icmp_ln887_14_fu_603_p2 <= "1" when (p_0253_0_i_reg_397 = ap_const_lv3_5) else "0";
    icmp_ln887_15_fu_886_p2 <= "1" when (p_051_0_reg_441 = ap_const_lv5_19) else "0";
    icmp_ln887_16_fu_647_p2 <= "1" when (p_0232_0_i_reg_418 = ap_const_lv3_5) else "0";
    icmp_ln887_17_fu_785_p2 <= "1" when (p_0568_0_i_reg_430 = ap_const_lv3_5) else "0";
    icmp_ln887_fu_459_p2 <= "1" when (p_045_0_reg_350 = ap_const_lv5_18) else "0";
    indice2_address0 <= zext_ln544_62_fu_615_p1(3 - 1 downto 0);

    indice2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indice2_ce0 <= ap_const_logic_1;
        else 
            indice2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_D13_address0 <= zext_ln544_60_fu_545_p1(3 - 1 downto 0);

    indice_D13_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indice_D13_ce0 <= ap_const_logic_1;
        else 
            indice_D13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_D24_address0 <= zext_ln544_60_fu_545_p1(3 - 1 downto 0);

    indice_D24_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indice_D24_ce0 <= ap_const_logic_1;
        else 
            indice_D24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_E15_address0 <= zext_ln544_70_fu_821_p1(3 - 1 downto 0);

    indice_E15_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            indice_E15_ce0 <= ap_const_logic_1;
        else 
            indice_E15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_E26_address0 <= zext_ln544_70_fu_821_p1(3 - 1 downto 0);

    indice_E26_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            indice_E26_ce0 <= ap_const_logic_1;
        else 
            indice_E26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_p_fu_765_p2 <= std_logic_vector(shift_left(unsigned(ret_V_56_reg_1039),to_integer(unsigned('0' & zext_ln645_fu_762_p1(31-1 downto 0)))));
    m_V_fu_609_p2 <= std_logic_vector(unsigned(p_0253_0_i_reg_397) + unsigned(ap_const_lv3_1));
    or_ln647_fu_778_p2 <= (r_p_fu_773_p2 or l_p_fu_765_p2);
    r_V_fu_861_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCD_V_q0);
    r_p_fu_773_p2 <= std_logic_vector(shift_right(unsigned(ret_V_56_reg_1039),to_integer(unsigned('0' & zext_ln646_fu_770_p1(31-1 downto 0)))));
    ret_V_49_fu_596_p2 <= (ret_V_63_fu_588_p3 xor BCD_V_q1);
    ret_V_50_fu_511_p2 <= std_logic_vector(unsigned(zext_ln215_5_fu_499_p1) + unsigned(shl_ln1352_2_fu_503_p3));
    ret_V_51_fu_517_p2 <= std_logic_vector(unsigned(zext_ln111_reg_936) + unsigned(ret_V_50_fu_511_p2));
    ret_V_52_fu_751_p2 <= std_logic_vector(unsigned(zext_ln215_6_fu_747_p1) + unsigned(ap_const_lv4_A));
    ret_V_53_fu_671_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_659_p1) + unsigned(shl_ln1352_3_fu_663_p3));
    ret_V_54_fu_685_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_681_p1) + unsigned(zext_ln215_8_fu_677_p1));
    ret_V_55_fu_696_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_681_p1) + unsigned(ap_const_lv9_5));
    ret_V_57_fu_641_p2 <= std_logic_vector(unsigned(zext_ln1352_fu_629_p1) + unsigned(shl_ln_fu_633_p3));
    ret_V_58_fu_707_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_659_p1) + unsigned(ret_V_57_reg_1005));
    ret_V_59_fu_801_p2 <= std_logic_vector(unsigned(ret_V_57_reg_1005) + unsigned(zext_ln215_10_fu_797_p1));
    ret_V_60_fu_810_p2 <= std_logic_vector(unsigned(zext_ln215_11_fu_806_p1) + unsigned(ap_const_lv4_A));
    ret_V_62_fu_873_p2 <= (ret_V_64_fu_867_p2 xor lhs_V_4_reg_1093);
    ret_V_63_fu_588_p3 <= (trunc_ln1503_fu_576_p1 & tmp_5_fu_580_p3);
    ret_V_64_fu_867_p2 <= (r_V_fu_861_p2 and BCD_V_q1);
    ret_V_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(zext_ln215_fu_561_p1));
    rolling_V_1_fu_717_p2 <= std_logic_vector(unsigned(p_0580_0_i_reg_409) + unsigned(ap_const_lv8_1));
    rolling_V_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice2_q0),8));
    round_V_fu_465_p2 <= std_logic_vector(unsigned(p_045_0_reg_350) + unsigned(ap_const_lv5_1));
    select_ln145_fu_729_p3 <= 
        ap_const_lv8_0 when (icmp_ln879_fu_723_p2(0) = '1') else 
        rolling_V_1_fu_717_p2;
    shift_table1_address0 <= zext_ln544_67_fu_712_p1(5 - 1 downto 0);

    shift_table1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            shift_table1_ce0 <= ap_const_logic_1;
        else 
            shift_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1352_2_fu_503_p3 <= (p_0132_0_i_reg_374 & ap_const_lv2_0);
    shl_ln1352_3_fu_663_p3 <= (p_0232_0_i_reg_418 & ap_const_lv2_0);
    shl_ln_fu_633_p3 <= (p_0253_0_i_reg_397 & ap_const_lv2_0);

    state_V_6_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln544_fu_483_p1, zext_ln544_61_fu_522_p1, zext_ln544_65_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_6_address0 <= zext_ln544_65_fu_691_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_V_6_address0 <= zext_ln544_61_fu_522_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_6_address0 <= zext_ln544_fu_483_p1(5 - 1 downto 0);
        else 
            state_V_6_address0 <= "XXXXX";
        end if; 
    end process;

    state_V_6_address1 <= zext_ln544_63_reg_1106(5 - 1 downto 0);

    state_V_6_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_6_ce0 <= ap_const_logic_1;
        else 
            state_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_6_ce1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_V_6_ce1 <= ap_const_logic_1;
        else 
            state_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_6_d1 <= E_q0;

    state_V_6_we1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_V_6_we1 <= ap_const_logic_1;
        else 
            state_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln646_fu_741_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln133_fu_737_p1));
    tmp_5_fu_580_p3 <= BCD_V_q0(63 downto 63);
    trunc_ln1503_fu_576_p1 <= BCD_V_q0(63 - 1 downto 0);
    xor_ln719_8_fu_879_p2 <= (KeccakF_RoundConstan_q0 xor E_q0);
    zext_ln111_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_i_reg_362),5));
    zext_ln122_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_D24_q0),64));
    zext_ln122_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_D13_q0),64));
    zext_ln133_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_table1_q0),7));
    zext_ln1352_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0253_0_i_reg_397),5));
    zext_ln149_1_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_1_fu_846_p2),64));
    zext_ln149_2_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_E15_q0),4));
    zext_ln149_3_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_E26_q0),4));
    zext_ln149_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_fu_831_p2),64));
    zext_ln156_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_045_0_reg_350),64));
    zext_ln215_10_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),5));
    zext_ln215_11_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),4));
    zext_ln215_5_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0132_0_i_reg_374),5));
    zext_ln215_6_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0232_0_i_reg_418),4));
    zext_ln215_7_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0232_0_i_reg_418),5));
    zext_ln215_8_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_53_fu_671_p2),9));
    zext_ln215_9_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0580_0_i_reg_409),9));
    zext_ln215_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0168_0_i_reg_385),4));
    zext_ln544_59_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_565_p2),64));
    zext_ln544_60_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0168_0_i_reg_385),64));
    zext_ln544_61_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_51_fu_517_p2),64));
    zext_ln544_62_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0253_0_i_reg_397),64));
    zext_ln544_63_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_051_0_reg_441),64));
    zext_ln544_64_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_52_fu_751_p2),64));
    zext_ln544_65_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_54_fu_685_p2),64));
    zext_ln544_66_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_55_fu_696_p2),64));
    zext_ln544_67_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_58_fu_707_p2),64));
    zext_ln544_68_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_59_reg_1063),64));
    zext_ln544_69_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_60_fu_810_p2),64));
    zext_ln544_70_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),64));
    zext_ln544_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_i_reg_362),64));
    zext_ln645_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_table1_load_reg_1045),64));
    zext_ln646_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln646_reg_1050),64));
end behav;


-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakF1600_SoloPer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_6_ce0 : OUT STD_LOGIC;
    state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_6_ce1 : OUT STD_LOGIC;
    state_V_6_we1 : OUT STD_LOGIC;
    state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of KeccakF1600_SoloPer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indice_D13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D13_ce0 : STD_LOGIC;
    signal indice_D13_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D24_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_D24_ce0 : STD_LOGIC;
    signal indice_D24_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice2_ce0 : STD_LOGIC;
    signal indice2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_table1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_table1_ce0 : STD_LOGIC;
    signal shift_table1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal indice_E15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E15_ce0 : STD_LOGIC;
    signal indice_E15_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E26_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal indice_E26_ce0 : STD_LOGIC;
    signal indice_E26_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal KeccakF_RoundConstan_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakF_RoundConstan_ce0 : STD_LOGIC;
    signal KeccakF_RoundConstan_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_V_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal round_V_reg_912 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal BCl_it_V_fu_477_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BCl_it_V_reg_920 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln103_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCD_V_addr_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln111_fu_489_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln111_reg_936 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln111_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCl_it_2_V_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BCl_it_2_V_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_it_V_fu_539_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_it_V_reg_957 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln887_13_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_V_fu_609_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_V_reg_985 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln887_14_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rolling_V_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ret_V_57_fu_641_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_57_reg_1005 : STD_LOGIC_VECTOR (4 downto 0);
    signal BC_it_V_fu_653_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal BC_it_V_reg_1014 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln887_16_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln145_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_56_reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal shift_table1_load_reg_1045 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln646_fu_741_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln646_reg_1050 : STD_LOGIC_VECTOR (6 downto 0);
    signal E_it_V_fu_791_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal E_it_V_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ret_V_59_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_59_reg_1063 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_17_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal BCD_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_4_reg_1093 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_fu_892_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_1101 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln544_63_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_63_reg_1106 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_15_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCD_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal BCD_V_ce0 : STD_LOGIC;
    signal BCD_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal BCD_V_ce1 : STD_LOGIC;
    signal BCD_V_we1 : STD_LOGIC;
    signal BCD_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCD_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_ce1 : STD_LOGIC;
    signal E_we1 : STD_LOGIC;
    signal E_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_045_0_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0136_0_i_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln887_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0132_0_i_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_0168_0_i_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0253_0_i_reg_397 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0580_0_i_reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_0232_0_i_reg_418 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0568_0_i_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_051_0_reg_441 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln544_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_61_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_60_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_1_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_59_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_62_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_65_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_66_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_67_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_64_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_70_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_69_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_1_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_68_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_49_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_fu_778_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_62_fu_873_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_8_fu_879_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_499_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_2_fu_503_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_50_fu_511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_51_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_561_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_565_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1503_fu_576_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_63_fu_588_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1352_fu_629_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_633_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_7_fu_659_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1352_3_fu_663_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_53_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_9_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_8_fu_677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_54_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_55_fu_696_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_58_fu_707_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rolling_V_1_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln879_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_737_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_6_fu_747_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_52_fu_751_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln645_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln646_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_p_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_p_fu_765_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_10_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_11_fu_806_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_60_fu_810_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln149_2_fu_827_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_fu_831_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln149_3_fu_842_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_1_fu_846_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_861_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_64_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component KeccakF1600_Statebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_Statecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_StatedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_StateeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakF1600_Stateg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component KeccakF1600_Statehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_Stateibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_StatejbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    indice_D13_U : component KeccakF1600_Statebkb
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_D13_address0,
        ce0 => indice_D13_ce0,
        q0 => indice_D13_q0);

    indice_D24_U : component KeccakF1600_Statecud
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_D24_address0,
        ce0 => indice_D24_ce0,
        q0 => indice_D24_q0);

    indice2_U : component KeccakF1600_StatedEe
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice2_address0,
        ce0 => indice2_ce0,
        q0 => indice2_q0);

    shift_table1_U : component KeccakF1600_StateeOg
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_table1_address0,
        ce0 => shift_table1_ce0,
        q0 => shift_table1_q0);

    indice_E15_U : component KeccakF1600_Statecud
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_E15_address0,
        ce0 => indice_E15_ce0,
        q0 => indice_E15_q0);

    indice_E26_U : component KeccakF1600_Stateg8j
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indice_E26_address0,
        ce0 => indice_E26_ce0,
        q0 => indice_E26_q0);

    KeccakF_RoundConstan_U : component KeccakF1600_Statehbi
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakF_RoundConstan_address0,
        ce0 => KeccakF_RoundConstan_ce0,
        q0 => KeccakF_RoundConstan_q0);

    BCD_V_U : component KeccakF1600_Stateibs
    generic map (
        DataWidth => 64,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BCD_V_address0,
        ce0 => BCD_V_ce0,
        q0 => BCD_V_q0,
        address1 => BCD_V_address1,
        ce1 => BCD_V_ce1,
        we1 => BCD_V_we1,
        d1 => BCD_V_d1,
        q1 => BCD_V_q1);

    E_U : component KeccakF1600_StatejbC
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0,
        address1 => E_address1,
        ce1 => E_ce1,
        we1 => E_we1,
        d1 => E_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0132_0_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0132_0_i_reg_374 <= BCl_it_2_V_reg_949;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0132_0_i_reg_374 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    p_0136_0_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_1))) then 
                p_0136_0_i_reg_362 <= BCl_it_V_reg_920;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_0))) then 
                p_0136_0_i_reg_362 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0168_0_i_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_1))) then 
                p_0168_0_i_reg_385 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0168_0_i_reg_385 <= D_it_V_reg_957;
            end if; 
        end if;
    end process;

    p_0232_0_i_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0232_0_i_reg_418 <= BC_it_V_reg_1014;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0232_0_i_reg_418 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0253_0_i_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_13_fu_533_p2 = ap_const_lv1_1))) then 
                p_0253_0_i_reg_397 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_1))) then 
                p_0253_0_i_reg_397 <= m_V_reg_985;
            end if; 
        end if;
    end process;

    p_045_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_1))) then 
                p_045_0_reg_350 <= round_V_reg_912;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_045_0_reg_350 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_051_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_051_0_reg_441 <= i_V_reg_1101;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                p_051_0_reg_441 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0568_0_i_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_1))) then 
                p_0568_0_i_reg_430 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_0568_0_i_reg_430 <= E_it_V_reg_1058;
            end if; 
        end if;
    end process;

    p_0580_0_i_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0580_0_i_reg_409 <= select_ln145_reg_1034;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0580_0_i_reg_409 <= rolling_V_fu_625_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_0))) then
                    BCD_V_addr_reg_930(2 downto 0) <= zext_ln544_fu_483_p1(4 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                BC_it_V_reg_1014 <= BC_it_V_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_0))) then
                BCl_it_2_V_reg_949 <= BCl_it_2_V_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                BCl_it_V_reg_920 <= BCl_it_V_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                D_it_V_reg_957 <= D_it_V_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                E_it_V_reg_1058 <= E_it_V_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_V_reg_1101 <= i_V_fu_892_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                lhs_V_4_reg_1093 <= BCD_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                m_V_reg_985 <= m_V_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ret_V_56_reg_1039 <= grp_fu_452_p2;
                shift_table1_load_reg_1045 <= shift_table1_q0;
                sub_ln646_reg_1050 <= sub_ln646_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ret_V_57_reg_1005 <= ret_V_57_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_0))) then
                ret_V_59_reg_1063 <= ret_V_59_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                round_V_reg_912 <= round_V_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_0))) then
                select_ln145_reg_1034 <= select_ln145_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln111_reg_936(2 downto 0) <= zext_ln111_fu_489_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_0))) then
                    zext_ln544_63_reg_1106(4 downto 0) <= zext_ln544_63_fu_898_p1(4 downto 0);
            end if;
        end if;
    end process;
    BCD_V_addr_reg_930(3) <= '0';
    zext_ln111_reg_936(4 downto 3) <= "00";
    zext_ln544_63_reg_1106(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln103_fu_471_p2, ap_CS_fsm_state5, icmp_ln111_fu_493_p2, ap_CS_fsm_state7, icmp_ln887_13_fu_533_p2, ap_CS_fsm_state10, icmp_ln887_14_fu_603_p2, ap_CS_fsm_state12, icmp_ln887_16_fu_647_p2, ap_CS_fsm_state15, icmp_ln887_17_fu_785_p2, ap_CS_fsm_state19, icmp_ln887_15_fu_886_p2, icmp_ln887_fu_459_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_471_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_13_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln887_14_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln887_16_fu_647_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln887_17_fu_785_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln887_15_fu_886_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    BCD_V_address0_assign_proc : process(BCD_V_addr_reg_930, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16, zext_ln122_1_fu_556_p1, zext_ln544_66_fu_702_p1, zext_ln544_69_fu_816_p1, zext_ln149_fu_837_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            BCD_V_address0 <= zext_ln149_fu_837_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            BCD_V_address0 <= zext_ln544_69_fu_816_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            BCD_V_address0 <= zext_ln544_66_fu_702_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            BCD_V_address0 <= zext_ln122_1_fu_556_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            BCD_V_address0 <= BCD_V_addr_reg_930;
        else 
            BCD_V_address0 <= "XXXX";
        end if; 
    end process;


    BCD_V_address1_assign_proc : process(BCD_V_addr_reg_930, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln122_fu_551_p1, zext_ln544_59_fu_571_p1, zext_ln544_64_fu_757_p1, zext_ln149_1_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            BCD_V_address1 <= zext_ln149_1_fu_852_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            BCD_V_address1 <= zext_ln544_64_fu_757_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            BCD_V_address1 <= zext_ln544_59_fu_571_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            BCD_V_address1 <= zext_ln122_fu_551_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_address1 <= BCD_V_addr_reg_930;
        else 
            BCD_V_address1 <= "XXXX";
        end if; 
    end process;


    BCD_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            BCD_V_ce0 <= ap_const_logic_1;
        else 
            BCD_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    BCD_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_ce1 <= ap_const_logic_1;
        else 
            BCD_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    BCD_V_d1_assign_proc : process(state_V_6_q0, ap_CS_fsm_state4, grp_fu_452_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, ret_V_49_fu_596_p2, or_ln647_fu_778_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            BCD_V_d1 <= or_ln647_fu_778_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            BCD_V_d1 <= ret_V_49_fu_596_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            BCD_V_d1 <= grp_fu_452_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            BCD_V_d1 <= state_V_6_q0;
        else 
            BCD_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BCD_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            BCD_V_we1 <= ap_const_logic_1;
        else 
            BCD_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    BC_it_V_fu_653_p2 <= std_logic_vector(unsigned(p_0232_0_i_reg_418) + unsigned(ap_const_lv3_1));
    BCl_it_2_V_fu_527_p2 <= std_logic_vector(unsigned(p_0132_0_i_reg_374) + unsigned(ap_const_lv3_1));
    BCl_it_V_fu_477_p2 <= std_logic_vector(unsigned(p_0136_0_i_reg_362) + unsigned(ap_const_lv3_1));
    D_it_V_fu_539_p2 <= std_logic_vector(unsigned(p_0168_0_i_reg_385) + unsigned(ap_const_lv3_1));

    E_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19, zext_ln544_63_fu_898_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            E_address0 <= zext_ln544_63_fu_898_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            E_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            E_address0 <= "XXXXX";
        end if; 
    end process;


    E_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln544_68_fu_857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            E_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            E_address1 <= zext_ln544_68_fu_857_p1(5 - 1 downto 0);
        else 
            E_address1 <= "XXXXX";
        end if; 
    end process;


    E_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            E_ce1 <= ap_const_logic_1;
        else 
            E_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    E_d1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ret_V_62_fu_873_p2, xor_ln719_8_fu_879_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            E_d1 <= xor_ln719_8_fu_879_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            E_d1 <= ret_V_62_fu_873_p2;
        else 
            E_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    E_it_V_fu_791_p2 <= std_logic_vector(unsigned(p_0568_0_i_reg_430) + unsigned(ap_const_lv3_1));

    E_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            E_we1 <= ap_const_logic_1;
        else 
            E_we1 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakF_RoundConstan_address0 <= zext_ln156_fu_620_p1(5 - 1 downto 0);

    KeccakF_RoundConstan_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_1;
        else 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln149_1_fu_846_p2 <= std_logic_vector(unsigned(zext_ln149_3_fu_842_p1) + unsigned(ap_const_lv4_A));
    add_ln149_fu_831_p2 <= std_logic_vector(unsigned(zext_ln149_2_fu_827_p1) + unsigned(ap_const_lv4_A));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_459_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_459_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_459_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_452_p2 <= (state_V_6_q0 xor BCD_V_q0);
    i_V_fu_892_p2 <= std_logic_vector(unsigned(p_051_0_reg_441) + unsigned(ap_const_lv5_1));
    icmp_ln103_fu_471_p2 <= "1" when (p_0136_0_i_reg_362 = ap_const_lv3_5) else "0";
    icmp_ln111_fu_493_p2 <= "1" when (p_0132_0_i_reg_374 = ap_const_lv3_5) else "0";
    icmp_ln879_fu_723_p2 <= "1" when (rolling_V_1_fu_717_p2 = ap_const_lv8_5) else "0";
    icmp_ln887_13_fu_533_p2 <= "1" when (p_0168_0_i_reg_385 = ap_const_lv3_5) else "0";
    icmp_ln887_14_fu_603_p2 <= "1" when (p_0253_0_i_reg_397 = ap_const_lv3_5) else "0";
    icmp_ln887_15_fu_886_p2 <= "1" when (p_051_0_reg_441 = ap_const_lv5_19) else "0";
    icmp_ln887_16_fu_647_p2 <= "1" when (p_0232_0_i_reg_418 = ap_const_lv3_5) else "0";
    icmp_ln887_17_fu_785_p2 <= "1" when (p_0568_0_i_reg_430 = ap_const_lv3_5) else "0";
    icmp_ln887_fu_459_p2 <= "1" when (p_045_0_reg_350 = ap_const_lv5_18) else "0";
    indice2_address0 <= zext_ln544_62_fu_615_p1(3 - 1 downto 0);

    indice2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indice2_ce0 <= ap_const_logic_1;
        else 
            indice2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_D13_address0 <= zext_ln544_60_fu_545_p1(3 - 1 downto 0);

    indice_D13_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indice_D13_ce0 <= ap_const_logic_1;
        else 
            indice_D13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_D24_address0 <= zext_ln544_60_fu_545_p1(3 - 1 downto 0);

    indice_D24_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indice_D24_ce0 <= ap_const_logic_1;
        else 
            indice_D24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_E15_address0 <= zext_ln544_70_fu_821_p1(3 - 1 downto 0);

    indice_E15_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            indice_E15_ce0 <= ap_const_logic_1;
        else 
            indice_E15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indice_E26_address0 <= zext_ln544_70_fu_821_p1(3 - 1 downto 0);

    indice_E26_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            indice_E26_ce0 <= ap_const_logic_1;
        else 
            indice_E26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_p_fu_765_p2 <= std_logic_vector(shift_left(unsigned(ret_V_56_reg_1039),to_integer(unsigned('0' & zext_ln645_fu_762_p1(31-1 downto 0)))));
    m_V_fu_609_p2 <= std_logic_vector(unsigned(p_0253_0_i_reg_397) + unsigned(ap_const_lv3_1));
    or_ln647_fu_778_p2 <= (r_p_fu_773_p2 or l_p_fu_765_p2);
    r_V_fu_861_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCD_V_q0);
    r_p_fu_773_p2 <= std_logic_vector(shift_right(unsigned(ret_V_56_reg_1039),to_integer(unsigned('0' & zext_ln646_fu_770_p1(31-1 downto 0)))));
    ret_V_49_fu_596_p2 <= (ret_V_63_fu_588_p3 xor BCD_V_q1);
    ret_V_50_fu_511_p2 <= std_logic_vector(unsigned(zext_ln215_5_fu_499_p1) + unsigned(shl_ln1352_2_fu_503_p3));
    ret_V_51_fu_517_p2 <= std_logic_vector(unsigned(zext_ln111_reg_936) + unsigned(ret_V_50_fu_511_p2));
    ret_V_52_fu_751_p2 <= std_logic_vector(unsigned(zext_ln215_6_fu_747_p1) + unsigned(ap_const_lv4_A));
    ret_V_53_fu_671_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_659_p1) + unsigned(shl_ln1352_3_fu_663_p3));
    ret_V_54_fu_685_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_681_p1) + unsigned(zext_ln215_8_fu_677_p1));
    ret_V_55_fu_696_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_681_p1) + unsigned(ap_const_lv9_5));
    ret_V_57_fu_641_p2 <= std_logic_vector(unsigned(zext_ln1352_fu_629_p1) + unsigned(shl_ln_fu_633_p3));
    ret_V_58_fu_707_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_659_p1) + unsigned(ret_V_57_reg_1005));
    ret_V_59_fu_801_p2 <= std_logic_vector(unsigned(ret_V_57_reg_1005) + unsigned(zext_ln215_10_fu_797_p1));
    ret_V_60_fu_810_p2 <= std_logic_vector(unsigned(zext_ln215_11_fu_806_p1) + unsigned(ap_const_lv4_A));
    ret_V_62_fu_873_p2 <= (ret_V_64_fu_867_p2 xor lhs_V_4_reg_1093);
    ret_V_63_fu_588_p3 <= (trunc_ln1503_fu_576_p1 & tmp_5_fu_580_p3);
    ret_V_64_fu_867_p2 <= (r_V_fu_861_p2 and BCD_V_q1);
    ret_V_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(zext_ln215_fu_561_p1));
    rolling_V_1_fu_717_p2 <= std_logic_vector(unsigned(p_0580_0_i_reg_409) + unsigned(ap_const_lv8_1));
    rolling_V_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice2_q0),8));
    round_V_fu_465_p2 <= std_logic_vector(unsigned(p_045_0_reg_350) + unsigned(ap_const_lv5_1));
    select_ln145_fu_729_p3 <= 
        ap_const_lv8_0 when (icmp_ln879_fu_723_p2(0) = '1') else 
        rolling_V_1_fu_717_p2;
    shift_table1_address0 <= zext_ln544_67_fu_712_p1(5 - 1 downto 0);

    shift_table1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            shift_table1_ce0 <= ap_const_logic_1;
        else 
            shift_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1352_2_fu_503_p3 <= (p_0132_0_i_reg_374 & ap_const_lv2_0);
    shl_ln1352_3_fu_663_p3 <= (p_0232_0_i_reg_418 & ap_const_lv2_0);
    shl_ln_fu_633_p3 <= (p_0253_0_i_reg_397 & ap_const_lv2_0);

    state_V_6_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln544_fu_483_p1, zext_ln544_61_fu_522_p1, zext_ln544_65_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_6_address0 <= zext_ln544_65_fu_691_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_V_6_address0 <= zext_ln544_61_fu_522_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_6_address0 <= zext_ln544_fu_483_p1(5 - 1 downto 0);
        else 
            state_V_6_address0 <= "XXXXX";
        end if; 
    end process;

    state_V_6_address1 <= zext_ln544_63_reg_1106(5 - 1 downto 0);

    state_V_6_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_V_6_ce0 <= ap_const_logic_1;
        else 
            state_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_6_ce1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_V_6_ce1 <= ap_const_logic_1;
        else 
            state_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_6_d1 <= E_q0;

    state_V_6_we1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_V_6_we1 <= ap_const_logic_1;
        else 
            state_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln646_fu_741_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln133_fu_737_p1));
    tmp_5_fu_580_p3 <= BCD_V_q0(63 downto 63);
    trunc_ln1503_fu_576_p1 <= BCD_V_q0(63 - 1 downto 0);
    xor_ln719_8_fu_879_p2 <= (KeccakF_RoundConstan_q0 xor E_q0);
    zext_ln111_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_i_reg_362),5));
    zext_ln122_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_D24_q0),64));
    zext_ln122_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_D13_q0),64));
    zext_ln133_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_table1_q0),7));
    zext_ln1352_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0253_0_i_reg_397),5));
    zext_ln149_1_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_1_fu_846_p2),64));
    zext_ln149_2_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_E15_q0),4));
    zext_ln149_3_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indice_E26_q0),4));
    zext_ln149_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_fu_831_p2),64));
    zext_ln156_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_045_0_reg_350),64));
    zext_ln215_10_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),5));
    zext_ln215_11_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),4));
    zext_ln215_5_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0132_0_i_reg_374),5));
    zext_ln215_6_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0232_0_i_reg_418),4));
    zext_ln215_7_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0232_0_i_reg_418),5));
    zext_ln215_8_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_53_fu_671_p2),9));
    zext_ln215_9_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0580_0_i_reg_409),9));
    zext_ln215_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0168_0_i_reg_385),4));
    zext_ln544_59_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_565_p2),64));
    zext_ln544_60_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0168_0_i_reg_385),64));
    zext_ln544_61_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_51_fu_517_p2),64));
    zext_ln544_62_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0253_0_i_reg_397),64));
    zext_ln544_63_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_051_0_reg_441),64));
    zext_ln544_64_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_52_fu_751_p2),64));
    zext_ln544_65_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_54_fu_685_p2),64));
    zext_ln544_66_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_55_fu_696_p2),64));
    zext_ln544_67_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_58_fu_707_p2),64));
    zext_ln544_68_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_59_reg_1063),64));
    zext_ln544_69_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_60_fu_810_p2),64));
    zext_ln544_70_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0568_0_i_reg_430),64));
    zext_ln544_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0136_0_i_reg_362),64));
    zext_ln645_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_table1_load_reg_1045),64));
    zext_ln646_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln646_reg_1050),64));
end behav;
