-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seedexpander_mult_ty is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_we1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_2_ce0 : OUT STD_LOGIC;
    state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_2_ce1 : OUT STD_LOGIC;
    state_V_2_we1 : OUT STD_LOGIC;
    state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of seedexpander_mult_ty is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cnt_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cnt_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_0_V_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln53_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_op2_assign_phi_fu_197_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_492 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln887_7_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_V_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_V_reg_518 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_V_fu_405_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_reg_523 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln887_6_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_8_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_8_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln802_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln802_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_fu_443_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_KeccakF1600_StatePer_fu_261_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_261_state_V_6_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_2_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_0_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0296_0_reg_170 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_0_1_reg_182 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_assign_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0201_i_reg_217 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_0_3_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_op_assign_reg_239 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_098_0_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln58_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln49_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln301_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_state_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_fu_302_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln53_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_3_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1595_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_43_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln556_fu_417_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_421_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln808_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce0 : OUT STD_LOGIC;
        -- state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce1 : OUT STD_LOGIC;
        -- state_V_6_we1 : OUT STD_LOGIC;
        -- state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;



begin
    -- grp_KeccakF1600_StatePer_fu_261 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_261_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_261_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_261_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_261_ap_ready,
        -- state_V_6_address0 => grp_KeccakF1600_StatePer_fu_261_state_V_6_address0,
        -- state_V_6_ce0 => grp_KeccakF1600_StatePer_fu_261_state_V_6_ce0,
        -- state_V_6_q0 => state_V_2_q0,
        -- state_V_6_address1 => grp_KeccakF1600_StatePer_fu_261_state_V_6_address1,
        -- state_V_6_ce1 => grp_KeccakF1600_StatePer_fu_261_state_V_6_ce1,
        -- state_V_6_we1 => grp_KeccakF1600_StatePer_fu_261_state_V_6_we1,
        -- state_V_6_d1 => grp_KeccakF1600_StatePer_fu_261_state_V_6_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_261_ap_start;
  state_V_q0_permute <= state_V_2_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_261_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_261_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_261_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_261_state_V_6_d1       <= state_V_d1_permute;



    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln58_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_KeccakF1600_StatePer_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_op_assign_reg_239 <= i_reg_492;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_261_ap_done = ap_const_logic_1))) then 
                i_op_assign_reg_239 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    op2_assign_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_306_p2 = ap_const_lv1_1) and (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                op2_assign_reg_193 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                op2_assign_reg_193 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_0201_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln63_fu_361_p2 = ap_const_lv1_0) or (icmp_ln887_7_fu_349_p2 = ap_const_lv1_0)))) then 
                p_0201_i_reg_217 <= sub_ln69_fu_372_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln44_fu_306_p2 = ap_const_lv1_0) or (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_1)))) then 
                p_0201_i_reg_217 <= zext_ln53_fu_317_p1;
            end if; 
        end if;
    end process;

    p_0296_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                p_0296_0_reg_170 <= i_V_fu_443_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0296_0_reg_170 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_098_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_098_0_reg_250 <= k_V_reg_518;
            elsif (((icmp_ln58_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_098_0_reg_250 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_V_0_1_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_306_p2 = ap_const_lv1_1) and (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_V_0_1_reg_182 <= tmp_0_V_reg_473;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                tmp_V_0_1_reg_182 <= tmp_V_0_0_reg_158;
            end if; 
        end if;
    end process;

    tmp_V_0_2_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln63_fu_361_p2 = ap_const_lv1_0) or (icmp_ln887_7_fu_349_p2 = ap_const_lv1_0)))) then 
                tmp_V_0_2_reg_205 <= tmp_V_0_3_reg_227;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln44_fu_306_p2 = ap_const_lv1_0) or (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_1)))) then 
                tmp_V_0_2_reg_205 <= tmp_V_0_1_reg_182;
            end if; 
        end if;
    end process;

    tmp_V_0_3_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                tmp_V_0_3_reg_227 <= state_V_2_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_261_ap_done = ap_const_logic_1))) then 
                tmp_V_0_3_reg_227 <= tmp_V_0_2_reg_205;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cnt_reg_462 <= cnt_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_492 <= i_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln887_8_reg_528 <= icmp_ln887_8_fu_411_p2;
                ret_V_reg_523 <= ret_V_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_V_reg_518 <= k_V_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_0_V_reg_473 <= state_V_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_V_0_0_reg_158 <= tmp_V_0_2_reg_205;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_389_p2 = ap_const_lv1_0) and (icmp_ln887_8_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                trunc_ln802_reg_532 <= trunc_ln802_fu_439_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_phi_mux_op2_assign_phi_fu_197_p4, icmp_ln44_fu_306_p2, ap_CS_fsm_state8, icmp_ln887_7_fu_349_p2, icmp_ln63_fu_361_p2, ap_CS_fsm_state10, icmp_ln887_6_fu_389_p2, grp_KeccakF1600_StatePer_fu_261_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state6, icmp_ln58_fu_339_p2, ap_CS_fsm_state2, icmp_ln887_fu_281_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln44_fu_306_p2 = ap_const_lv1_0) or (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln58_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_261_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln63_fu_361_p2 = ap_const_lv1_0) or (icmp_ln887_7_fu_349_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln887_6_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_281_p2)
    begin
        if ((((icmp_ln887_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_op2_assign_phi_fu_197_p4 <= op2_assign_reg_193;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_281_p2)
    begin
        if (((icmp_ln887_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_287_p1 <= state_V_2_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_261_ap_start <= grp_KeccakF1600_StatePer_fu_261_ap_start_reg;
    i_V_fu_443_p2 <= std_logic_vector(unsigned(p_0296_0_reg_170) + unsigned(ap_const_lv12_8));
    i_fu_355_p2 <= std_logic_vector(unsigned(i_op_assign_reg_239) + unsigned(ap_const_lv5_1));
    icmp_ln44_fu_306_p2 <= "1" when (unsigned(zext_ln44_fu_302_p1) < unsigned(cnt_reg_462)) else "0";
    icmp_ln58_fu_339_p2 <= "1" when (p_0201_i_reg_217 = ap_const_lv8_0) else "0";
    icmp_ln63_fu_361_p2 <= "1" when (unsigned(zext_ln1595_fu_345_p1) < unsigned(p_0201_i_reg_217)) else "0";
    icmp_ln887_6_fu_389_p2 <= "1" when (p_098_0_reg_250 = ap_const_lv4_8) else "0";
    icmp_ln887_7_fu_349_p2 <= "1" when (unsigned(i_op_assign_reg_239) < unsigned(ap_const_lv5_11)) else "0";
    icmp_ln887_8_fu_411_p2 <= "1" when (unsigned(ret_V_fu_405_p2) < unsigned(ap_const_lv12_8A1)) else "0";
    icmp_ln887_fu_281_p2 <= "1" when (unsigned(p_0296_0_reg_170) < unsigned(ap_const_lv12_8A1)) else "0";
    k_V_fu_395_p2 <= std_logic_vector(unsigned(p_098_0_reg_250) + unsigned(ap_const_lv4_1));
    offset_state_fu_291_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_fu_287_p1));
    output_V_address1 <= zext_ln544_fu_449_p1(12 - 1 downto 0);

    output_V_ce1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d1 <= trunc_ln802_reg_532;

    output_V_we1_assign_proc : process(icmp_ln887_8_reg_528, ap_CS_fsm_state11)
    begin
        if (((icmp_ln887_8_reg_528 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_433_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_0_2_reg_205),to_integer(unsigned('0' & zext_ln808_fu_429_p1(31-1 downto 0)))));
    ret_V_43_fu_378_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_239));
    ret_V_fu_405_p2 <= std_logic_vector(unsigned(p_0296_0_reg_170) + unsigned(zext_ln215_fu_401_p1));
        sext_ln301_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_328_p2),64));

    shl_ln_fu_421_p3 <= (trunc_ln556_fu_417_p1 & ap_const_lv3_0);

    state_V_2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_261_state_V_6_address0, ap_CS_fsm_state7, zext_ln49_fu_297_p1, zext_ln65_fu_367_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_V_2_address0 <= zext_ln65_fu_367_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_2_address0 <= zext_ln49_fu_297_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_2_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_address0 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_address0;
        else 
            state_V_2_address0 <= "XXXXX";
        end if; 
    end process;


    state_V_2_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_261_state_V_6_address1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_V_2_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_address1 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_address1;
        else 
            state_V_2_address1 <= "XXXXX";
        end if; 
    end process;


    state_V_2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_261_state_V_6_ce0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_V_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_ce0 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_ce0;
        else 
            state_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_2_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_261_state_V_6_ce1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_V_2_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_ce1 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_ce1;
        else 
            state_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_2_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_261_state_V_6_d1, ap_CS_fsm_state7, sext_ln301_fu_334_p1, zext_ln214_fu_384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_V_2_d1 <= zext_ln214_fu_384_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_V_2_d1 <= sext_ln301_fu_334_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_d1 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_d1;
        else 
            state_V_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_2_we1_assign_proc : process(ap_CS_fsm_state5, ap_phi_mux_op2_assign_phi_fu_197_p4, icmp_ln44_fu_306_p2, ap_CS_fsm_state8, icmp_ln887_7_fu_349_p2, icmp_ln63_fu_361_p2, grp_KeccakF1600_StatePer_fu_261_state_V_6_we1, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln63_fu_361_p2 = ap_const_lv1_0) or (icmp_ln887_7_fu_349_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln44_fu_306_p2 = ap_const_lv1_0) or (ap_phi_mux_op2_assign_phi_fu_197_p4 = ap_const_lv1_1))))) then 
            state_V_2_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_2_we1 <= grp_KeccakF1600_StatePer_fu_261_state_V_6_we1;
        else 
            state_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln54_fu_328_p2 <= std_logic_vector(unsigned(zext_ln54_fu_321_p1) - unsigned(zext_ln54_3_fu_324_p1));
    sub_ln69_fu_372_p2 <= std_logic_vector(unsigned(p_0201_i_reg_217) - unsigned(zext_ln1595_fu_345_p1));
    trunc_ln556_fu_417_p1 <= p_098_0_reg_250(3 - 1 downto 0);
    trunc_ln802_fu_439_p1 <= r_V_fu_433_p2(8 - 1 downto 0);
    xor_ln53_fu_311_p2 <= (op2_assign_reg_193 xor ap_const_lv1_1);
    zext_ln1595_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_239),8));
    zext_ln214_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_43_fu_378_p2),64));
    zext_ln215_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_098_0_reg_250),12));
    zext_ln44_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_193),8));
    zext_ln49_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_291_p2),64));
    zext_ln53_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln53_fu_311_p2),8));
    zext_ln544_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_523),64));
    zext_ln54_3_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_193),9));
    zext_ln54_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_462),9));
    zext_ln65_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_239),64));
    zext_ln808_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_421_p3),64));
end behav;
