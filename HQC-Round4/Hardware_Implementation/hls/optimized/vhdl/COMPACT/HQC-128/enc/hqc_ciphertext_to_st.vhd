-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hqc_ciphertext_to_st is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    u_V_ce0 : OUT STD_LOGIC;
    u_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    d_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_V_ce0 : OUT STD_LOGIC;
    d_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ct_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce1 : OUT STD_LOGIC;
    ct_V_we1 : OUT STD_LOGIC;
    ct_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of hqc_ciphertext_to_st is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv13_8A1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010100001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1141 : STD_LOGIC_VECTOR (12 downto 0) := "1000101000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_182_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_333 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_8_fu_210_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_8_reg_346 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln215_fu_216_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_reg_351 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_11_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_9_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_9_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln544_55_fu_265_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln544_55_reg_369 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_12_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_V_addr_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_382 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln1353_fu_296_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1353_reg_387 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln129_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln130_fu_301_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln130_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1503_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1503_reg_397 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_0194_0_reg_131 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_0194_1_reg_143 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_V_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_op_assign_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln321_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_54_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_56_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_57_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln321_fu_188_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_4_fu_220_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_fu_231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1352_fu_253_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_47_fu_257_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_4_fu_286_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1353_2_fu_290_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal op2_assign_fu_305_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1503_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1503_fu_316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_op_assign_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_op_assign_reg_165 <= j_reg_382;
            elsif (((icmp_ln887_12_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_op_assign_reg_165 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0194_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0194_0_reg_131 <= i_V_reg_333;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0194_0_reg_131 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0194_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0194_1_reg_143 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0194_1_reg_143 <= i_V_8_reg_346;
            end if; 
        end if;
    end process;

    t_V_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_11_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_reg_154 <= ap_const_lv4_0;
            elsif (((icmp_ln129_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                t_V_reg_154 <= i_V_9_reg_364;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln1353_reg_387 <= add_ln1353_fu_296_p2;
                trunc_ln130_reg_392 <= trunc_ln130_fu_301_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_12_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                d_V_addr_reg_374 <= zext_ln544_56_fu_269_p1(3 - 1 downto 0);
                    zext_ln544_55_reg_369(5 downto 3) <= zext_ln544_55_fu_265_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_8_reg_346 <= i_V_8_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_V_9_reg_364 <= i_V_9_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_333 <= i_V_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_382 <= j_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln1503_reg_397 <= trunc_ln1503_fu_322_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_11_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln215_reg_351(11 downto 0) <= zext_ln215_fu_216_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_reg_351(12) <= '0';
    zext_ln544_55_reg_369(2 downto 0) <= "000";
    zext_ln544_55_reg_369(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_176_p2, ap_CS_fsm_state4, icmp_ln887_11_fu_204_p2, ap_CS_fsm_state6, icmp_ln887_12_fu_241_p2, ap_CS_fsm_state7, icmp_ln129_fu_274_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_11_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln887_12_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln129_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln1353_2_fu_290_p2 <= std_logic_vector(signed(ap_const_lv13_1141) + signed(zext_ln215_4_fu_286_p1));
    add_ln1353_fu_296_p2 <= std_logic_vector(unsigned(zext_ln544_55_reg_369) + unsigned(add_ln1353_2_fu_290_p2));
    add_ln321_4_fu_220_p2 <= std_logic_vector(unsigned(zext_ln215_fu_216_p1) + unsigned(ap_const_lv13_8B1));
    add_ln321_fu_188_p2 <= std_logic_vector(unsigned(p_0194_0_reg_131) + unsigned(ap_const_lv12_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln887_12_fu_241_p2)
    begin
        if ((((icmp_ln887_12_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln887_12_fu_241_p2)
    begin
        if (((icmp_ln887_12_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln544_fu_199_p1, zext_ln544_54_fu_236_p1, zext_ln544_57_fu_326_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ct_V_address1 <= zext_ln544_57_fu_326_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ct_V_address1 <= zext_ln544_54_fu_236_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ct_V_address1 <= zext_ln544_fu_199_p1(13 - 1 downto 0);
        else 
            ct_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ct_V_ce1 <= ap_const_logic_1;
        else 
            ct_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_d1_assign_proc : process(u_V_q0, trunc_ln1503_reg_397, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ct_V_d1 <= trunc_ln1503_reg_397;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ct_V_d1 <= u_V_q0;
        else 
            ct_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ct_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ct_V_we1 <= ap_const_logic_1;
        else 
            ct_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_address0 <= d_V_addr_reg_374;

    d_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_V_ce0 <= ap_const_logic_1;
        else 
            d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_8_fu_210_p2 <= std_logic_vector(unsigned(p_0194_1_reg_143) + unsigned(ap_const_lv12_1));
    i_V_9_fu_247_p2 <= std_logic_vector(unsigned(t_V_reg_154) + unsigned(ap_const_lv4_1));
    i_V_fu_182_p2 <= std_logic_vector(unsigned(p_0194_0_reg_131) + unsigned(ap_const_lv12_1));
    icmp_ln129_fu_274_p2 <= "1" when (i_op_assign_reg_165 = ap_const_lv4_8) else "0";
    icmp_ln887_11_fu_204_p2 <= "1" when (p_0194_1_reg_143 = ap_const_lv12_8A0) else "0";
    icmp_ln887_12_fu_241_p2 <= "1" when (t_V_reg_154 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_176_p2 <= "1" when (p_0194_0_reg_131 = ap_const_lv12_8A1) else "0";
    j_fu_280_p2 <= std_logic_vector(unsigned(i_op_assign_reg_165) + unsigned(ap_const_lv4_1));
    lshr_ln1503_fu_316_p2 <= std_logic_vector(shift_right(unsigned(d_V_q0),to_integer(unsigned('0' & zext_ln1503_fu_312_p1(31-1 downto 0)))));
    op2_assign_fu_305_p3 <= (trunc_ln130_reg_392 & ap_const_lv3_0);
    ret_V_47_fu_257_p3 <= (trunc_ln1352_fu_253_p1 & ap_const_lv3_0);
    ret_V_fu_231_p2 <= std_logic_vector(unsigned(zext_ln215_reg_351) + unsigned(ap_const_lv13_8A1));
    trunc_ln130_fu_301_p1 <= i_op_assign_reg_165(3 - 1 downto 0);
    trunc_ln1352_fu_253_p1 <= t_V_reg_154(3 - 1 downto 0);
    trunc_ln1503_fu_322_p1 <= lshr_ln1503_fu_316_p2(8 - 1 downto 0);

    u_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln321_fu_194_p1, zext_ln321_3_fu_226_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            u_V_address0 <= zext_ln321_3_fu_226_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_V_address0 <= zext_ln321_fu_194_p1(13 - 1 downto 0);
        else 
            u_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    u_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            u_V_ce0 <= ap_const_logic_1;
        else 
            u_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1503_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_305_p3),64));
    zext_ln215_4_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_165),13));
    zext_ln215_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0194_1_reg_143),13));
    zext_ln321_3_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_4_fu_220_p2),64));
    zext_ln321_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_188_p2),64));
    zext_ln544_54_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_231_p2),64));
    zext_ln544_55_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_47_fu_257_p3),13));
    zext_ln544_56_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_154),64));
    zext_ln544_57_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_reg_387),64));
    zext_ln544_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0194_0_reg_131),64));
end behav;
