-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_solomon_encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    msg_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    msg_V_ce0 : OUT STD_LOGIC;
    msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_solomon_encode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_2D : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_59 : STD_LOGIC_VECTOR (7 downto 0) := "01011001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal PARAM_RS_POLY_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal PARAM_RS_POLY_ce0 : STD_LOGIC;
    signal PARAM_RS_POLY_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_fu_231_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_241_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_352 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln544_50_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_50_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln895_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_6_fu_271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_6_reg_370 : STD_LOGIC_VECTOR (4 downto 0);
    signal PARAM_RS_POLY_load_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ret_V_46_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_46_reg_380 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_295_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln887_reg_390 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal l_V_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_V_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gf_mul_fu_209_ap_start : STD_LOGIC;
    signal grp_gf_mul_fu_209_ap_done : STD_LOGIC;
    signal grp_gf_mul_fu_209_ap_idle : STD_LOGIC;
    signal grp_gf_mul_fu_209_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_209_b_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_209_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0211_0_reg_163 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0211_1_reg_174 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_0185_0_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_0272_0_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_gf_mul_fu_209_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_48_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_49_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_51_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_52_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_45_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln891_fu_237_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal adr_V_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component gf_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_encopcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    PARAM_RS_POLY_U : component reed_solomon_encopcA
    generic map (
        DataWidth => 8,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PARAM_RS_POLY_address0,
        ce0 => PARAM_RS_POLY_ce0,
        q0 => PARAM_RS_POLY_q0);

    grp_gf_mul_fu_209 : component gf_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_mul_fu_209_ap_start,
        ap_done => grp_gf_mul_fu_209_ap_done,
        ap_idle => grp_gf_mul_fu_209_ap_idle,
        ap_ready => grp_gf_mul_fu_209_ap_ready,
        a_V => ret_V_reg_352,
        b_V => grp_gf_mul_fu_209_b_V,
        ap_return => grp_gf_mul_fu_209_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_gf_mul_fu_209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_mul_fu_209_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln895_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_gf_mul_fu_209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_mul_fu_209_ap_ready = ap_const_logic_1)) then 
                    grp_gf_mul_fu_209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0185_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1))) then 
                p_0185_0_reg_186 <= ret_V_46_reg_380;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0185_0_reg_186 <= ap_const_lv5_1D;
            end if; 
        end if;
    end process;

    p_0211_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_218_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0211_0_reg_163 <= i_V_fu_231_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0211_0_reg_163 <= ap_const_lv7_2D;
            end if; 
        end if;
    end process;

    p_0211_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_218_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0211_1_reg_174 <= ap_const_lv5_F;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1))) then 
                p_0211_1_reg_174 <= i_V_6_reg_370;
            end if; 
        end if;
    end process;

    p_0272_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_241_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0272_0_reg_198 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0272_0_reg_198 <= l_V_reg_398;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                PARAM_RS_POLY_load_reg_375 <= PARAM_RS_POLY_q0;
                ret_V_46_reg_380 <= ret_V_46_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln895_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_V_6_reg_370 <= i_V_6_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                l_V_reg_398 <= l_V_fu_305_p2;
                    zext_ln887_reg_390(4 downto 0) <= zext_ln887_fu_295_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_352 <= ret_V_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln895_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln544_50_reg_360(4 downto 0) <= zext_ln544_50_fu_266_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_50_reg_360(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln887_reg_390(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_2_fu_218_p3, ap_CS_fsm_state3, tmp_3_fu_241_p3, ap_CS_fsm_state5, icmp_ln895_fu_260_p2, ap_CS_fsm_state9, icmp_ln887_fu_299_p2, grp_gf_mul_fu_209_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_2_fu_218_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_3_fu_241_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln895_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln887_fu_299_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    PARAM_RS_POLY_address0 <= zext_ln544_50_fu_266_p1(5 - 1 downto 0);

    PARAM_RS_POLY_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            PARAM_RS_POLY_ce0 <= ap_const_logic_1;
        else 
            PARAM_RS_POLY_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    adr_V_fu_316_p2 <= std_logic_vector(unsigned(zext_ln887_reg_390) + unsigned(ap_const_lv6_1E));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln887_fu_299_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln887_fu_299_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln887_fu_299_p2)
    begin
        if (((icmp_ln887_fu_299_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln544_51_fu_283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cdw_V_address0 <= zext_ln544_51_fu_283_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cdw_V_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        else 
            cdw_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cdw_V_address1_assign_proc : process(ap_CS_fsm_state2, zext_ln544_50_reg_360, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln544_48_fu_226_p1, zext_ln544_fu_321_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cdw_V_address1 <= zext_ln544_fu_321_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cdw_V_address1 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cdw_V_address1 <= zext_ln544_50_reg_360(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cdw_V_address1 <= zext_ln544_48_fu_226_p1(6 - 1 downto 0);
        else 
            cdw_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cdw_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_state2, grp_gf_mul_fu_209_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1)))) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_d1_assign_proc : process(msg_V_q0, ap_CS_fsm_state2, grp_gf_mul_fu_209_ap_return, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state10, ret_V_45_fu_288_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cdw_V_d1 <= msg_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cdw_V_d1 <= grp_gf_mul_fu_209_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cdw_V_d1 <= ret_V_45_fu_288_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cdw_V_d1 <= ap_const_lv8_0;
        else 
            cdw_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    cdw_V_we1_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_218_p3, grp_gf_mul_fu_209_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((tmp_2_fu_218_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_gf_mul_fu_209_ap_done = ap_const_logic_1)))) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_gf_mul_fu_209_ap_start <= grp_gf_mul_fu_209_ap_start_reg;

    grp_gf_mul_fu_209_b_V_assign_proc : process(PARAM_RS_POLY_load_reg_375, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_gf_mul_fu_209_b_V <= PARAM_RS_POLY_load_reg_375;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_gf_mul_fu_209_b_V <= ap_const_lv8_59;
        else 
            grp_gf_mul_fu_209_b_V <= "XXXXXXXX";
        end if; 
    end process;

    i_V_6_fu_271_p2 <= std_logic_vector(signed(p_0211_1_reg_174) + signed(ap_const_lv5_1F));
    i_V_fu_231_p2 <= std_logic_vector(unsigned(p_0211_0_reg_163) + unsigned(ap_const_lv7_7F));
    icmp_ln887_fu_299_p2 <= "1" when (p_0272_0_reg_198 = ap_const_lv5_10) else "0";
    icmp_ln895_fu_260_p2 <= "1" when (p_0185_0_reg_186 = ap_const_lv5_0) else "0";
    l_V_fu_305_p2 <= std_logic_vector(unsigned(p_0272_0_reg_198) + unsigned(ap_const_lv5_1));

    msg_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, zext_ln544_49_fu_249_p1, zext_ln544_52_fu_311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            msg_V_address0 <= zext_ln544_52_fu_311_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            msg_V_address0 <= zext_ln544_49_fu_249_p1(4 - 1 downto 0);
        else 
            msg_V_address0 <= "XXXX";
        end if; 
    end process;


    msg_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            msg_V_ce0 <= ap_const_logic_1;
        else 
            msg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_45_fu_288_p2 <= (grp_gf_mul_fu_209_ap_return xor cdw_V_q0);
    ret_V_46_fu_277_p2 <= std_logic_vector(unsigned(p_0185_0_reg_186) + unsigned(ap_const_lv5_1F));
    ret_V_fu_254_p2 <= (msg_V_q0 xor cdw_V_q0);
        sext_ln891_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0211_1_reg_174),7));

    tmp_2_fu_218_p3 <= p_0211_0_reg_163(6 downto 6);
    tmp_3_fu_241_p3 <= p_0211_1_reg_174(4 downto 4);
    zext_ln544_48_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0211_0_reg_163),64));
    zext_ln544_49_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln891_fu_237_p1),64));
    zext_ln544_50_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0185_0_reg_186),64));
    zext_ln544_51_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_46_fu_277_p2),64));
    zext_ln544_52_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0272_0_reg_198),64));
    zext_ln544_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adr_V_fu_316_p2),64));
    zext_ln887_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0272_0_reg_198),6));
end behav;
