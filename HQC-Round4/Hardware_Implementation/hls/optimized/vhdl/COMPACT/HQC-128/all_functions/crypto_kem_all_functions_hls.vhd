-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_all_functions_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ss1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss1_V_ce0 : OUT STD_LOGIC;
    ss1_V_we0 : OUT STD_LOGIC;
    ss1_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ss2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss2_V_ce0 : OUT STD_LOGIC;
    ss2_V_we0 : OUT STD_LOGIC;
    ss2_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ss2_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    prng_seed_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    prng_seed_V_ce0 : OUT STD_LOGIC;
    prng_seed_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_bytesize_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_all_functions_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_all_functions_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-ftg256-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.864400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=25,HLS_SYN_DSP=0,HLS_SYN_FF=10087,HLS_SYN_LUT=32422,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (111 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (111 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (111 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (111 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (111 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (111 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (111 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (111 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (111 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (111 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_4B : STD_LOGIC_VECTOR (7 downto 0) := "01001011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv14_1151 : STD_LOGIC_VECTOR (13 downto 0) := "01000101010001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv13_10 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_115 : STD_LOGIC_VECTOR (8 downto 0) := "100010101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv9_11A : STD_LOGIC_VECTOR (8 downto 0) := "100011010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_prng_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_prng_V_ce0 : STD_LOGIC;
    signal state_prng_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_prng_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_prng_V_ce1 : STD_LOGIC;
    signal state_prng_V_we1 : STD_LOGIC;
    signal state_prng_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_seeds_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal store_seeds_V_ce0 : STD_LOGIC;
    signal store_seeds_V_we0 : STD_LOGIC;
    signal store_seeds_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_seeds_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce0 : STD_LOGIC;
    signal state_seedexpander_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce1 : STD_LOGIC;
    signal state_seedexpander_V_we1 : STD_LOGIC;
    signal state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sk64_V_ce0 : STD_LOGIC;
    signal sk64_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sk64_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sk64_V_ce1 : STD_LOGIC;
    signal sk64_V_we1 : STD_LOGIC;
    signal sk64_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal random_vector_A_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_A_V_ce0 : STD_LOGIC;
    signal random_vector_A_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_A_V_ce1 : STD_LOGIC;
    signal random_vector_A_V_we1 : STD_LOGIC;
    signal store_B_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce0 : STD_LOGIC;
    signal store_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce1 : STD_LOGIC;
    signal store_B_V_we1 : STD_LOGIC;
    signal store_B_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal random_vector_B_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_B_V_ce0 : STD_LOGIC;
    signal random_vector_B_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_B_V_ce1 : STD_LOGIC;
    signal random_vector_B_V_we1 : STD_LOGIC;
    signal h_s_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal h_s_V_ce0 : STD_LOGIC;
    signal h_s_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_s_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal h_s_V_ce1 : STD_LOGIC;
    signal h_s_V_we1 : STD_LOGIC;
    signal h_s_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_ce0 : STD_LOGIC;
    signal store_A_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_ce1 : STD_LOGIC;
    signal store_A_V_we1 : STD_LOGIC;
    signal pk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pk64_V_ce0 : STD_LOGIC;
    signal pk64_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pk64_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pk64_V_ce1 : STD_LOGIC;
    signal pk64_V_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pk64_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mc_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce0 : STD_LOGIC;
    signal mc_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce1 : STD_LOGIC;
    signal mc_V_we1 : STD_LOGIC;
    signal mc_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal theta_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal theta_V_ce0 : STD_LOGIC;
    signal theta_V_we0 : STD_LOGIC;
    signal theta_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_C_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal store_C_V_ce0 : STD_LOGIC;
    signal store_C_V_we0 : STD_LOGIC;
    signal store_C_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_V_ce0 : STD_LOGIC;
    signal d_V_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ct_V_ce0 : STD_LOGIC;
    signal ct_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ct_V_ce1 : STD_LOGIC;
    signal ct_V_we1 : STD_LOGIC;
    signal uv2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce0 : STD_LOGIC;
    signal uv2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal uv2_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce1 : STD_LOGIC;
    signal uv2_V_we1 : STD_LOGIC;
    signal uv2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_1138_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln45_reg_1630 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_fu_1149_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_1638 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln285_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_reg_1643 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1166_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_1656 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln285_1_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_1_reg_1661 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_1_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_30_fu_1192_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_30_reg_1674 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ret_V_114_fu_1209_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_114_reg_1679 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln887_27_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pk64_V_addr_1_reg_1684 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_fu_1223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_1692 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln555_fu_1229_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln555_reg_1697 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln887_29_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Lo_fu_1247_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal Lo_reg_1708 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal Hi_fu_1254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Hi_reg_1713 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_A_V_load_reg_1718 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln414_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1723 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_29_fu_1384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_29_reg_1734 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln887_28_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_1412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_1747 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln887_fu_1406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln802_fu_1453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln802_reg_1757 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_7_fu_1468_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_1765 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln285_2_fu_1474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_2_reg_1770 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_2_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1494_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_1783 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln285_3_fu_1500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_3_reg_1788 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_3_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_1511_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_1801 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal zext_ln285_4_fu_1517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_4_reg_1806 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_4_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_1528_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_1819 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln284_5_fu_1522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1569_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_1832 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal zext_ln285_6_fu_1575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_6_reg_1837 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_6_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_vect_compare_64_fu_1130_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_d_d2_reg_1847 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_vect_set_random_fixe_fu_898_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_ap_done : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_ap_ready : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_ap_done : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_ap_ready : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_ap_done : STD_LOGIC;
    signal ap_block_state94_on_subcall_done : BOOLEAN;
    signal grp_vect_compare_fu_1068_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_u_u2_reg_1852 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_vect_compare_fu_1068_ap_ready : STD_LOGIC;
    signal grp_vect_compare_fu_1068_ap_done : STD_LOGIC;
    signal result_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_1857 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal lhs_V_fu_1596_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_reg_1862 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_1610_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1870 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ss2_V_addr_reg_1875 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln390_fu_1604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal store_rs_decode_V_ce0 : STD_LOGIC;
    signal store_rs_decode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_decode_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_decode_V_ce1 : STD_LOGIC;
    signal store_rs_decode_V_we1 : STD_LOGIC;
    signal store_rs_decode_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_encode_V_1_ce0 : STD_LOGIC;
    signal store_rs_encode_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_1_ce1 : STD_LOGIC;
    signal store_rs_encode_V_1_we1 : STD_LOGIC;
    signal store_rs_encode_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_encode_V_ce0 : STD_LOGIC;
    signal store_rs_encode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_ce1 : STD_LOGIC;
    signal store_rs_encode_V_we1 : STD_LOGIC;
    signal grp_shake_prng_fu_684_ap_start : STD_LOGIC;
    signal grp_shake_prng_fu_684_ap_done : STD_LOGIC;
    signal grp_shake_prng_fu_684_ap_idle : STD_LOGIC;
    signal grp_shake_prng_fu_684_ap_ready : STD_LOGIC;
    signal grp_shake_prng_fu_684_output_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake_prng_fu_684_output_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_fu_684_output_V_we0 : STD_LOGIC;
    signal grp_shake_prng_fu_684_output_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake_prng_fu_684_outlen : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_prng_fu_684_state_prng_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_fu_684_state_prng_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_fu_684_state_prng_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_fu_684_state_prng_V_ce1 : STD_LOGIC;
    signal grp_shake_prng_fu_684_state_prng_V_we1 : STD_LOGIC;
    signal grp_shake_prng_fu_684_state_prng_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vect_mul_add_fu_742_ap_start : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_ap_done : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_ap_idle : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_ap_ready : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_o_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_742_o_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_742_o_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_o_V_we1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_742_a1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_mul_add_fu_742_a1_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_a1_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_mul_add_fu_742_a2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_742_a2_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_a2_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_742_a2_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_a2_V_we1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_742_a2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_742_weight_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_742_store_B_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_742_store_B_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_ap_start : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_ap_done : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_791_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_cdw_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_791_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_791_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_791_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_791_store_C_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reed_solomon_encode_fu_791_store_C_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_ap_start : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_ap_done : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_ap_idle : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_ap_ready : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_cdw_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_814_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_cdw_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_encode_fu_814_cdw_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_814_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_encode_fu_814_msg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_encode_fu_814_msg_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_814_msg_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_847_ap_start : STD_LOGIC;
    signal grp_vect_add_fu_847_ap_done : STD_LOGIC;
    signal grp_vect_add_fu_847_ap_idle : STD_LOGIC;
    signal grp_vect_add_fu_847_ap_ready : STD_LOGIC;
    signal grp_vect_add_fu_847_o_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_847_o_V_ce0 : STD_LOGIC;
    signal grp_vect_add_fu_847_o_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_847_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_847_o_V_ce1 : STD_LOGIC;
    signal grp_vect_add_fu_847_o_V_we1 : STD_LOGIC;
    signal grp_vect_add_fu_847_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_847_v2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_add_fu_847_v2_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_ap_start : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_ap_done : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_msg_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_solomon_decode_fu_871_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_msg_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_decode_fu_871_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_871_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_871_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_871_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_set_random_fixe_fu_898_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_v_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_898_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_v_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_898_v_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_898_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_v_V_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_898_weight_V : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_924_ap_start : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_ap_idle : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_output_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake256_512_ds_fu_924_output_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_output_V_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_shake256_512_ds_fu_924_output_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_924_input_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_924_input_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_input_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_924_input_V_ce1 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_924_inlen_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake256_512_ds_fu_924_domain_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_prng_init_fu_958_ap_start : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_ap_done : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_ap_idle : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_ap_ready : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_entropy_input_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_shake_prng_init_fu_958_entropy_input_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce1 : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_we1 : STD_LOGIC;
    signal grp_shake_prng_init_fu_958_shake_prng_state_array_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seedexpander_mult_ty_fu_981_ap_start : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_ap_done : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_ap_idle : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_ap_ready : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_output_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_seedexpander_mult_ty_fu_981_output_V_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_output_V_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_output_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce0 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seedexpander_init_fu_1003_ap_start : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_ap_done : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_ap_idle : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_ap_ready : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_seed_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seedexpander_init_fu_1003_seed_V_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_state_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_1003_state_V_2_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_state_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_1003_state_V_2_ce1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_state_V_2_we1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1003_state_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reed_muller_decode_fu_1025_ap_start : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_ap_done : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_ap_idle : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_ap_ready : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_msg_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_decode_fu_1025_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_msg_V_we1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1025_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_decode_fu_1025_store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reed_muller_decode_fu_1025_store_A_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_ap_start : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_ap_done : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_ap_idle : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_ap_ready : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_u_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_u_V_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_u_V_we1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_u_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_d_V_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_d_V_6_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1032_d_V_6_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_d_V_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_ct_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1032_ct_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ap_start : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ap_done : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ap_idle : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ap_ready : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_u_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1042_u_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_d_V_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1042_d_V_4_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_we1 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_public_key_from_s_fu_1052_ap_start : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_ap_done : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_ap_idle : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_ap_ready : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_s_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_hqc_public_key_from_s_fu_1052_s_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_s_V_we1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1052_s_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_public_key_from_s_fu_1052_pk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hqc_public_key_from_s_fu_1052_pk64_V_ce0 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_ap_start : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_ap_done : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_ap_idle : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_ap_ready : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_s_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_hqc_public_key_from_1_fu_1060_s_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_s_V_we1 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1060_s_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_public_key_from_1_fu_1060_pk_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hqc_public_key_from_1_fu_1060_pk_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_1068_ap_start : STD_LOGIC;
    signal grp_vect_compare_fu_1068_ap_idle : STD_LOGIC;
    signal grp_vect_compare_fu_1068_v1_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1068_v1_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_1068_v1_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1068_v2_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1068_size_V_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_compare_fu_1068_uv2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1068_uv2_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_ap_done : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_v_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1085_weight_V : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_copyresize_1_fu_1097_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_o_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vect_copyresize_1_fu_1097_o_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_o_V_we0 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1097_o_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_1_fu_1097_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_1_fu_1097_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_2_fu_1105_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1105_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_2_fu_1105_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_2_fu_1105_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_mult_fu_1113_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1113_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_mult_fu_1113_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_mult_fu_1113_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_fu_1121_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1121_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_fu_1121_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_fu_1121_v_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_ap_start : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_ap_idle : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_1130_d_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_1130_theta_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_1130_theta_V_ce0 : STD_LOGIC;
    signal i_0_i53_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_i54_reg_560 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_0189_0_i_reg_571 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_095_0_i_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_047_0_i_reg_593 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal t_V_reg_605 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_0_i67_reg_617 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_0_i74_reg_628 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_0_i81_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal i_0_i88_reg_650 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal i_0_i96_reg_662 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal i_0_i_reg_673 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal grp_shake_prng_fu_684_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_vect_mul_add_fu_742_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_reed_solomon_encode_fu_791_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_reed_muller_encode_fu_814_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_add_fu_847_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_reed_solomon_decode_fu_871_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_vect_set_random_fixe_fu_898_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_shake256_512_ds_fu_924_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_shake_prng_init_fu_958_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_seedexpander_mult_ty_fu_981_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_seedexpander_init_fu_1003_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_reed_muller_decode_fu_1025_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_hqc_public_key_from_s_fu_1052_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_hqc_public_key_from_1_fu_1060_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_vect_compare_fu_1068_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_vect_set_random_fixe_1_fu_1085_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_vect_copyresize_1_fu_1097_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_vect_copyresize_2_fu_1105_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_copyresize_mult_fu_1113_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_copyresize_fu_1121_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_compare_64_fu_1130_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_82_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_85_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_84_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_83_fu_1401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_1426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_86_fu_1457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_7_fu_1544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_5_fu_1549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_fu_1616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_2_fu_1361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_4_fu_1371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln717_fu_1181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln717_1_fu_1483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal zext_ln717_2_fu_1558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_116_fu_1624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln717_fu_1177_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_113_fu_1198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_1233_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_115_fu_1237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln414_fu_1269_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_7_fu_1272_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_fu_1275_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_fu_1281_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_5_fu_1295_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_4_fu_1288_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_2_fu_1302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_8_fu_1308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_fu_1320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1326_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_9_fu_1312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_10_fu_1316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_3_fu_1343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln414_fu_1349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln414_6_fu_1336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_fu_1355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_11_fu_1368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_1395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_1418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_fu_1431_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1435_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln808_fu_1443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_1447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln717_1_fu_1479_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_fu_1534_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln321_fu_1538_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln717_2_fu_1554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln387_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1355_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal ap_block_state43_on_subcall_done : BOOLEAN;
    signal ap_block_state51_on_subcall_done : BOOLEAN;
    signal ap_block_state53_on_subcall_done : BOOLEAN;
    signal ap_block_state55_on_subcall_done : BOOLEAN;
    signal ap_block_state68_on_subcall_done : BOOLEAN;
    signal ap_block_state70_on_subcall_done : BOOLEAN;
    signal ap_block_state92_on_subcall_done : BOOLEAN;
    signal ap_block_state100_on_subcall_done : BOOLEAN;
    signal ap_block_state102_on_subcall_done : BOOLEAN;
    signal ap_block_state104_on_subcall_done : BOOLEAN;

-- Channel A
  signal ap_start_A         : std_logic;
  signal ap_done_A          : std_logic;
  signal ap_idle_A          : std_logic;
  signal ap_ready_A         : std_logic;
  signal state_V_address0_A : std_logic_vector (4 downto 0);
  signal state_V_ce0_A      : std_logic;
  signal state_V_q0_A       : std_logic_vector (63 downto 0);
  signal state_V_address1_A : std_logic_vector (4 downto 0);
  signal state_V_ce1_A      : std_logic;
  signal state_V_we1_A      : std_logic;
  signal state_V_d1_A       : std_logic_vector (63 downto 0);
  -- Channel B
  signal ap_start_B         : std_logic;
  signal ap_done_B          : std_logic;
  signal ap_idle_B          : std_logic;
  signal ap_ready_B         : std_logic;
  signal state_V_address0_B : std_logic_vector (4 downto 0);
  signal state_V_ce0_B      : std_logic;
  signal state_V_q0_B       : std_logic_vector (63 downto 0);
  signal state_V_address1_B : std_logic_vector (4 downto 0);
  signal state_V_ce1_B      : std_logic;
  signal state_V_we1_B      : std_logic;
  signal state_V_d1_B       : std_logic_vector (63 downto 0);
  -- Channel C
  signal ap_start_C         : std_logic;
  signal ap_done_C          : std_logic;
  signal ap_idle_C          : std_logic;
  signal ap_ready_C         : std_logic;
  signal state_V_address0_C : std_logic_vector (4 downto 0);
  signal state_V_ce0_C      : std_logic;
  signal state_V_q0_C       : std_logic_vector (63 downto 0);
  signal state_V_address1_C : std_logic_vector (4 downto 0);
  signal state_V_ce1_C      : std_logic;
  signal state_V_we1_C      : std_logic;
  signal state_V_d1_C       : std_logic_vector (63 downto 0);
  -- Channel D
  signal ap_start_D         : std_logic;
  signal ap_done_D          : std_logic;
  signal ap_idle_D          : std_logic;
  signal ap_ready_D         : std_logic;
  signal state_V_address0_D : std_logic_vector (4 downto 0);
  signal state_V_ce0_D      : std_logic;
  signal state_V_q0_D       : std_logic_vector (63 downto 0);
  signal state_V_address1_D : std_logic_vector (4 downto 0);
  signal state_V_ce1_D      : std_logic;
  signal state_V_we1_D      : std_logic;
  signal state_V_d1_D       : std_logic_vector (63 downto 0);
  -- Channel E
  signal ap_start_E         : std_logic;
  signal ap_done_E          : std_logic;
  signal ap_idle_E          : std_logic;
  signal ap_ready_E         : std_logic;
  signal state_V_address0_E : std_logic_vector (4 downto 0);
  signal state_V_ce0_E      : std_logic;
  signal state_V_q0_E       : std_logic_vector (63 downto 0);
  signal state_V_address1_E : std_logic_vector (4 downto 0);
  signal state_V_ce1_E      : std_logic;
  signal state_V_we1_E      : std_logic;
  signal state_V_d1_E       : std_logic_vector (63 downto 0);
  
  component KeccakF1600_StatePer is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      -- Channel A
      ap_start_A         : in  std_logic;
      ap_done_A          : out std_logic;
      ap_idle_A          : out std_logic;
      ap_ready_A         : out std_logic;
      state_V_address0_A : out std_logic_vector (4 downto 0);
      state_V_ce0_A      : out std_logic;
      state_V_q0_A       : in  std_logic_vector (63 downto 0);
      state_V_address1_A : out std_logic_vector (4 downto 0);
      state_V_ce1_A      : out std_logic;
      state_V_we1_A      : out std_logic;
      state_V_d1_A       : out std_logic_vector (63 downto 0);
      -- Channel B
      ap_start_B         : in  std_logic;
      ap_done_B          : out std_logic;
      ap_idle_B          : out std_logic;
      ap_ready_B         : out std_logic;
      state_V_address0_B : out std_logic_vector (4 downto 0);
      state_V_ce0_B      : out std_logic;
      state_V_q0_B       : in  std_logic_vector (63 downto 0);
      state_V_address1_B : out std_logic_vector (4 downto 0);
      state_V_ce1_B      : out std_logic;
      state_V_we1_B      : out std_logic;
      state_V_d1_B       : out std_logic_vector (63 downto 0);
      -- Channel C
      ap_start_C         : in  std_logic;
      ap_done_C          : out std_logic;
      ap_idle_C          : out std_logic;
      ap_ready_C         : out std_logic;
      state_V_address0_C : out std_logic_vector (4 downto 0);
      state_V_ce0_C      : out std_logic;
      state_V_q0_C       : in  std_logic_vector (63 downto 0);
      state_V_address1_C : out std_logic_vector (4 downto 0);
      state_V_ce1_C      : out std_logic;
      state_V_we1_C      : out std_logic;
      state_V_d1_C       : out std_logic_vector (63 downto 0);
      -- Channel D
      ap_start_D         : in  std_logic;
      ap_done_D          : out std_logic;
      ap_idle_D          : out std_logic;
      ap_ready_D         : out std_logic;
      state_V_address0_D : out std_logic_vector (4 downto 0);
      state_V_ce0_D      : out std_logic;
      state_V_q0_D       : in  std_logic_vector (63 downto 0);
      state_V_address1_D : out std_logic_vector (4 downto 0);
      state_V_ce1_D      : out std_logic;
      state_V_we1_D      : out std_logic;
      state_V_d1_D       : out std_logic_vector (63 downto 0);
      -- Channel E
      ap_start_E         : in  std_logic;
      ap_done_E          : out std_logic;
      ap_idle_E          : out std_logic;
      ap_ready_E         : out std_logic;
      state_V_address0_E : out std_logic_vector (4 downto 0);
      state_V_ce0_E      : out std_logic;
      state_V_q0_E       : in  std_logic_vector (63 downto 0);
      state_V_address1_E : out std_logic_vector (4 downto 0);
      state_V_ce1_E      : out std_logic;
      state_V_we1_E      : out std_logic;
      state_V_d1_E       : out std_logic_vector (63 downto 0)
      );
  end component;
  
    component shake_prng IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        outlen : IN STD_LOGIC_VECTOR (3 downto 0);
        state_prng_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_prng_V_ce0 : OUT STD_LOGIC;
        state_prng_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_prng_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_prng_V_ce1 : OUT STD_LOGIC;
        state_prng_V_we1 : OUT STD_LOGIC;
        state_prng_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component vect_mul_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a1_V_ce0 : OUT STD_LOGIC;
        a1_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        a2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a2_V_ce0 : OUT STD_LOGIC;
        a2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a2_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a2_V_ce1 : OUT STD_LOGIC;
        a2_V_we1 : OUT STD_LOGIC;
        a2_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (7 downto 0);
        store_B_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_B_V_ce0 : OUT STD_LOGIC;
        store_B_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        store_C_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        store_C_V_ce0 : OUT STD_LOGIC;
        store_C_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce0 : OUT STD_LOGIC;
        msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v2_V_ce0 : OUT STD_LOGIC;
        v2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_set_random_fixe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
        state_seedexpander_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_2_ce0 : OUT STD_LOGIC;
        state_seedexpander_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_seedexpander_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_2_ce1 : OUT STD_LOGIC;
        state_seedexpander_V_2_we1 : OUT STD_LOGIC;
        state_seedexpander_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component shake256_512_ds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        inlen_V : IN STD_LOGIC_VECTOR (13 downto 0);
        domain_V : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component shake_prng_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        entropy_input_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        entropy_input_V_ce0 : OUT STD_LOGIC;
        entropy_input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        enlen_V : IN STD_LOGIC_VECTOR (6 downto 0);
        shake_prng_state_array_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        shake_prng_state_array_V_ce0 : OUT STD_LOGIC;
        shake_prng_state_array_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        shake_prng_state_array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        shake_prng_state_array_V_ce1 : OUT STD_LOGIC;
        shake_prng_state_array_V_we1 : OUT STD_LOGIC;
        shake_prng_state_array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component seedexpander_mult_ty IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_seedexpander_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce0 : OUT STD_LOGIC;
        state_seedexpander_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_seedexpander_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce1 : OUT STD_LOGIC;
        state_seedexpander_V_we1 : OUT STD_LOGIC;
        state_seedexpander_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component seedexpander_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        seed_V_ce0 : OUT STD_LOGIC;
        seed_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce0 : OUT STD_LOGIC;
        state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce1 : OUT STD_LOGIC;
        state_V_2_we1 : OUT STD_LOGIC;
        state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component reed_muller_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        store_A_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_A_V_ce0 : OUT STD_LOGIC;
        store_A_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_ciphertext_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_V_ce1 : OUT STD_LOGIC;
        u_V_we1 : OUT STD_LOGIC;
        u_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        d_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_6_ce0 : OUT STD_LOGIC;
        d_V_6_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        d_V_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_ce0 : OUT STD_LOGIC;
        ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_ciphertext_to_st IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_V_ce0 : OUT STD_LOGIC;
        u_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_4_ce0 : OUT STD_LOGIC;
        d_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ct_V_2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_2_ce1 : OUT STD_LOGIC;
        ct_V_2_we1 : OUT STD_LOGIC;
        ct_V_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_public_key_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_V_ce1 : OUT STD_LOGIC;
        s_V_we1 : OUT STD_LOGIC;
        s_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk64_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pk64_V_ce0 : OUT STD_LOGIC;
        pk64_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hqc_public_key_from_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_V_ce1 : OUT STD_LOGIC;
        s_V_we1 : OUT STD_LOGIC;
        s_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pk_V_ce0 : OUT STD_LOGIC;
        pk_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vect_compare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v1_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v1_V_ce0 : OUT STD_LOGIC;
        v1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v1_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        v2_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        size_V_offset : IN STD_LOGIC_VECTOR (11 downto 0);
        uv2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        uv2_V_ce0 : OUT STD_LOGIC;
        uv2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vect_set_random_fixe_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
        fixed_weight_by_coord_vector_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fixed_weight_by_coord_vector_V_ce0 : OUT STD_LOGIC;
        fixed_weight_by_coord_vector_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component vect_copyresize_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_we0 : OUT STD_LOGIC;
        o_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_compare_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_ce0 : OUT STD_LOGIC;
        d_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        theta_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        theta_V_ce0 : OUT STD_LOGIC;
        theta_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component shake256_512_ds_socq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component crypto_kem_all_fuNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (7 downto 0);
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuThq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuVhK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuXh4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuYie IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin

KeccakF1600_StatePer_U : KeccakF1600_StatePer
    port map(
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      -- Channel A         
      ap_start_A         => ap_start_A,
      ap_done_A          => ap_done_A,
      ap_idle_A          => ap_idle_A,
      ap_ready_A         => ap_ready_A,
      state_V_address0_A => state_V_address0_A,
      state_V_ce0_A      => state_V_ce0_A,
      state_V_q0_A       => state_V_q0_A,
      state_V_address1_A => state_V_address1_A,
      state_V_ce1_A      => state_V_ce1_A,
      state_V_we1_A      => state_V_we1_A,
      state_V_d1_A       => state_V_d1_A,
      -- Channel B         
      ap_start_B         => ap_start_B,
      ap_done_B          => ap_done_B,
      ap_idle_B          => ap_idle_B,
      ap_ready_B         => ap_ready_B,
      state_V_address0_B => state_V_address0_B,
      state_V_ce0_B      => state_V_ce0_B,
      state_V_q0_B       => state_V_q0_B,
      state_V_address1_B => state_V_address1_B,
      state_V_ce1_B      => state_V_ce1_B,
      state_V_we1_B      => state_V_we1_B,
      state_V_d1_B       => state_V_d1_B,
      -- Channel C         
      ap_start_C         => ap_start_C,
      ap_done_C          => ap_done_C,
      ap_idle_C          => ap_idle_C,
      ap_ready_C         => ap_ready_C,
      state_V_address0_C => state_V_address0_C,
      state_V_ce0_C      => state_V_ce0_C,
      state_V_q0_C       => state_V_q0_C,
      state_V_address1_C => state_V_address1_C,
      state_V_ce1_C      => state_V_ce1_C,
      state_V_we1_C      => state_V_we1_C,
      state_V_d1_C       => state_V_d1_C,
      -- Channel D         
      ap_start_D         => ap_start_D,
      ap_done_D          => ap_done_D,
      ap_idle_D          => ap_idle_D,
      ap_ready_D         => ap_ready_D,
      state_V_address0_D => state_V_address0_D,
      state_V_ce0_D      => state_V_ce0_D,
      state_V_q0_D       => state_V_q0_D,
      state_V_address1_D => state_V_address1_D,
      state_V_ce1_D      => state_V_ce1_D,
      state_V_we1_D      => state_V_we1_D,
      state_V_d1_D       => state_V_d1_D,
      -- Channel E         
      ap_start_E         => ap_start_E,
      ap_done_E          => ap_done_E,
      ap_idle_E          => ap_idle_E,
      ap_ready_E         => ap_ready_E,
      state_V_address0_E => state_V_address0_E,
      state_V_ce0_E      => state_V_ce0_E,
      state_V_q0_E       => state_V_q0_E,
      state_V_address1_E => state_V_address1_E,
      state_V_ce1_E      => state_V_ce1_E,
      state_V_we1_E      => state_V_we1_E,
      state_V_d1_E       => state_V_d1_E
      );
	  
    state_prng_V_U : component shake256_512_ds_socq
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_prng_V_address0,
        ce0 => state_prng_V_ce0,
        q0 => state_prng_V_q0,
        address1 => state_prng_V_address1,
        ce1 => state_prng_V_ce1,
        we1 => state_prng_V_we1,
        d1 => state_prng_V_d1);

    store_seeds_V_U : component crypto_kem_all_fuJfO
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_seeds_V_address0,
        ce0 => store_seeds_V_ce0,
        we0 => store_seeds_V_we0,
        d0 => store_seeds_V_d0,
        q0 => store_seeds_V_q0);

    state_seedexpander_V_U : component shake256_512_ds_socq
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_seedexpander_V_address0,
        ce0 => state_seedexpander_V_ce0,
        q0 => state_seedexpander_V_q0,
        address1 => state_seedexpander_V_address1,
        ce1 => state_seedexpander_V_ce1,
        we1 => state_seedexpander_V_we1,
        d1 => state_seedexpander_V_d1);

    sk64_V_U : component crypto_kem_all_fuLf8
    generic map (
        DataWidth => 64,
        AddressRange => 287,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sk64_V_address0,
        ce0 => sk64_V_ce0,
        q0 => sk64_V_q0,
        address1 => sk64_V_address1,
        ce1 => sk64_V_ce1,
        we1 => sk64_V_we1,
        d1 => sk64_V_d1);

    random_vector_A_V_U : component crypto_kem_all_fuMgi
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_A_V_address0,
        ce0 => random_vector_A_V_ce0,
        q0 => random_vector_A_V_q0,
        address1 => grp_vect_set_random_fixe_fu_898_v_V_address1,
        ce1 => random_vector_A_V_ce1,
        we1 => random_vector_A_V_we1,
        d1 => grp_vect_set_random_fixe_fu_898_v_V_d1);

    store_B_V_U : component crypto_kem_all_fuNgs
    generic map (
        DataWidth => 8,
        AddressRange => 2209,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_B_V_address0,
        ce0 => store_B_V_ce0,
        q0 => store_B_V_q0,
        address1 => store_B_V_address1,
        ce1 => store_B_V_ce1,
        we1 => store_B_V_we1,
        d1 => store_B_V_d1);

    random_vector_B_V_U : component crypto_kem_all_fuMgi
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_B_V_address0,
        ce0 => random_vector_B_V_ce0,
        q0 => random_vector_B_V_q0,
        address1 => grp_vect_set_random_fixe_fu_898_v_V_address1,
        ce1 => random_vector_B_V_ce1,
        we1 => random_vector_B_V_we1,
        d1 => grp_vect_set_random_fixe_fu_898_v_V_d1);

    h_s_V_U : component crypto_kem_all_fuPgM
    generic map (
        DataWidth => 8,
        AddressRange => 2210,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_s_V_address0,
        ce0 => h_s_V_ce0,
        q0 => h_s_V_q0,
        address1 => h_s_V_address1,
        ce1 => h_s_V_ce1,
        we1 => h_s_V_we1,
        d1 => h_s_V_d1);

    store_A_V_U : component crypto_kem_all_fuNgs
    generic map (
        DataWidth => 8,
        AddressRange => 2209,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_A_V_address0,
        ce0 => store_A_V_ce0,
        q0 => store_A_V_q0,
        address1 => grp_vect_mul_add_fu_742_o_V_address1,
        ce1 => store_A_V_ce1,
        we1 => store_A_V_we1,
        d1 => grp_vect_mul_add_fu_742_o_V_d1);

    pk64_V_U : component crypto_kem_all_fuRg6
    generic map (
        DataWidth => 64,
        AddressRange => 287,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pk64_V_address0,
        ce0 => pk64_V_ce0,
        q0 => pk64_V_q0,
        address1 => pk64_V_address1,
        ce1 => pk64_V_ce1,
        we1 => pk64_V_we1,
        d1 => pk64_V_d1);

    mc_V_U : component crypto_kem_all_fuShg
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mc_V_address0,
        ce0 => mc_V_ce0,
        q0 => mc_V_q0,
        address1 => mc_V_address1,
        ce1 => mc_V_ce1,
        we1 => mc_V_we1,
        d1 => mc_V_d1,
        q1 => mc_V_q1);

    theta_V_U : component crypto_kem_all_fuThq
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => theta_V_address0,
        ce0 => theta_V_ce0,
        we0 => theta_V_we0,
        d0 => grp_shake256_512_ds_fu_924_output_V_d0,
        q0 => theta_V_q0);

    store_C_V_U : component crypto_kem_all_fuUhA
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_C_V_address0,
        ce0 => store_C_V_ce0,
        we0 => store_C_V_we0,
        d0 => grp_vect_copyresize_1_fu_1097_o_V_d0,
        q0 => store_C_V_q0);

    d_V_U : component crypto_kem_all_fuVhK
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_V_address0,
        ce0 => d_V_ce0,
        we0 => d_V_we0,
        d0 => d_V_d0,
        q0 => d_V_q0);

    ct_V_U : component crypto_kem_all_fuWhU
    generic map (
        DataWidth => 8,
        AddressRange => 4481,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_hqc_ciphertext_from_s_fu_1032_ct_V_address0,
        ce0 => ct_V_ce0,
        q0 => ct_V_q0,
        address1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_address1,
        ce1 => ct_V_ce1,
        we1 => ct_V_we1,
        d1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_d1);

    uv2_V_U : component crypto_kem_all_fuXh4
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => uv2_V_address0,
        ce0 => uv2_V_ce0,
        q0 => uv2_V_q0,
        address1 => uv2_V_address1,
        ce1 => uv2_V_ce1,
        we1 => uv2_V_we1,
        d1 => uv2_V_d1);

    store_rs_decode_V_U : component crypto_kem_all_fuYie
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_reed_solomon_decode_fu_871_cdw_V_address0,
        ce0 => store_rs_decode_V_ce0,
        q0 => store_rs_decode_V_q0,
        address1 => store_rs_decode_V_address1,
        ce1 => store_rs_decode_V_ce1,
        we1 => store_rs_decode_V_we1,
        d1 => store_rs_decode_V_d1);

    store_rs_encode_V_1_U : component crypto_kem_all_fuYie
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_rs_encode_V_1_address0,
        ce0 => store_rs_encode_V_1_ce0,
        q0 => store_rs_encode_V_1_q0,
        address1 => grp_reed_solomon_encode_fu_791_cdw_V_address1,
        ce1 => store_rs_encode_V_1_ce1,
        we1 => store_rs_encode_V_1_we1,
        d1 => grp_reed_solomon_encode_fu_791_cdw_V_d1);

    store_rs_encode_V_U : component crypto_kem_all_fuYie
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_rs_encode_V_address0,
        ce0 => store_rs_encode_V_ce0,
        q0 => store_rs_encode_V_q0,
        address1 => grp_reed_solomon_encode_fu_791_cdw_V_address1,
        ce1 => store_rs_encode_V_ce1,
        we1 => store_rs_encode_V_we1,
        d1 => grp_reed_solomon_encode_fu_791_cdw_V_d1);

    grp_shake_prng_fu_684 : component shake_prng
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_prng_fu_684_ap_start,
        ap_done => grp_shake_prng_fu_684_ap_done,
        ap_idle => grp_shake_prng_fu_684_ap_idle,
        ap_ready => grp_shake_prng_fu_684_ap_ready,
        output_V_address0 => grp_shake_prng_fu_684_output_V_address0,
        output_V_ce0 => grp_shake_prng_fu_684_output_V_ce0,
        output_V_we0 => grp_shake_prng_fu_684_output_V_we0,
        output_V_d0 => grp_shake_prng_fu_684_output_V_d0,
        outlen => grp_shake_prng_fu_684_outlen,
        state_prng_V_address0 => grp_shake_prng_fu_684_state_prng_V_address0,
        state_prng_V_ce0 => grp_shake_prng_fu_684_state_prng_V_ce0,
        state_prng_V_q0 => state_prng_V_q0,
        state_prng_V_address1 => grp_shake_prng_fu_684_state_prng_V_address1,
        state_prng_V_ce1 => grp_shake_prng_fu_684_state_prng_V_ce1,
        state_prng_V_we1 => grp_shake_prng_fu_684_state_prng_V_we1,
        state_prng_V_d1 => grp_shake_prng_fu_684_state_prng_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel A
      ap_start_permute         => ap_start_A,
      ap_done_permute          => ap_done_A,
      ap_idle_permute          => ap_idle_A,
      ap_ready_permute         => ap_ready_A,
      state_V_address0_permute => state_V_address0_A,
      state_V_ce0_permute      => state_V_ce0_A,
      state_V_q0_permute       => state_V_q0_A,
      state_V_address1_permute => state_V_address1_A,
      state_V_ce1_permute      => state_V_ce1_A,
      state_V_we1_permute      => state_V_we1_A,
      state_V_d1_permute       => state_V_d1_A
      );

    grp_vect_mul_add_fu_742 : component vect_mul_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_mul_add_fu_742_ap_start,
        ap_done => grp_vect_mul_add_fu_742_ap_done,
        ap_idle => grp_vect_mul_add_fu_742_ap_idle,
        ap_ready => grp_vect_mul_add_fu_742_ap_ready,
        o_V_address0 => grp_vect_mul_add_fu_742_o_V_address0,
        o_V_ce0 => grp_vect_mul_add_fu_742_o_V_ce0,
        o_V_q0 => store_A_V_q0,
        o_V_address1 => grp_vect_mul_add_fu_742_o_V_address1,
        o_V_ce1 => grp_vect_mul_add_fu_742_o_V_ce1,
        o_V_we1 => grp_vect_mul_add_fu_742_o_V_we1,
        o_V_d1 => grp_vect_mul_add_fu_742_o_V_d1,
        a1_V_address0 => grp_vect_mul_add_fu_742_a1_V_address0,
        a1_V_ce0 => grp_vect_mul_add_fu_742_a1_V_ce0,
        a1_V_q0 => grp_vect_mul_add_fu_742_a1_V_q0,
        a2_V_address0 => grp_vect_mul_add_fu_742_a2_V_address0,
        a2_V_ce0 => grp_vect_mul_add_fu_742_a2_V_ce0,
        a2_V_q0 => h_s_V_q0,
        a2_V_address1 => grp_vect_mul_add_fu_742_a2_V_address1,
        a2_V_ce1 => grp_vect_mul_add_fu_742_a2_V_ce1,
        a2_V_we1 => grp_vect_mul_add_fu_742_a2_V_we1,
        a2_V_d1 => grp_vect_mul_add_fu_742_a2_V_d1,
        weight_V => grp_vect_mul_add_fu_742_weight_V,
        store_B_V_address0 => grp_vect_mul_add_fu_742_store_B_V_address0,
        store_B_V_ce0 => grp_vect_mul_add_fu_742_store_B_V_ce0,
        store_B_V_q0 => store_B_V_q0);

    grp_reed_solomon_encode_fu_791 : component reed_solomon_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_encode_fu_791_ap_start,
        ap_done => grp_reed_solomon_encode_fu_791_ap_done,
        ap_idle => grp_reed_solomon_encode_fu_791_ap_idle,
        ap_ready => grp_reed_solomon_encode_fu_791_ap_ready,
        cdw_V_address0 => grp_reed_solomon_encode_fu_791_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_encode_fu_791_cdw_V_ce0,
        cdw_V_q0 => grp_reed_solomon_encode_fu_791_cdw_V_q0,
        cdw_V_address1 => grp_reed_solomon_encode_fu_791_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_encode_fu_791_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_encode_fu_791_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_encode_fu_791_cdw_V_d1,
        store_C_V_address0 => grp_reed_solomon_encode_fu_791_store_C_V_address0,
        store_C_V_ce0 => grp_reed_solomon_encode_fu_791_store_C_V_ce0,
        store_C_V_q0 => store_C_V_q0);

    grp_reed_muller_encode_fu_814 : component reed_muller_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_encode_fu_814_ap_start,
        ap_done => grp_reed_muller_encode_fu_814_ap_done,
        ap_idle => grp_reed_muller_encode_fu_814_ap_idle,
        ap_ready => grp_reed_muller_encode_fu_814_ap_ready,
        cdw_V_address0 => grp_reed_muller_encode_fu_814_cdw_V_address0,
        cdw_V_ce0 => grp_reed_muller_encode_fu_814_cdw_V_ce0,
        cdw_V_q0 => grp_reed_muller_encode_fu_814_cdw_V_q0,
        cdw_V_address1 => grp_reed_muller_encode_fu_814_cdw_V_address1,
        cdw_V_ce1 => grp_reed_muller_encode_fu_814_cdw_V_ce1,
        cdw_V_we1 => grp_reed_muller_encode_fu_814_cdw_V_we1,
        cdw_V_d1 => grp_reed_muller_encode_fu_814_cdw_V_d1,
        msg_V_address0 => grp_reed_muller_encode_fu_814_msg_V_address0,
        msg_V_ce0 => grp_reed_muller_encode_fu_814_msg_V_ce0,
        msg_V_q0 => grp_reed_muller_encode_fu_814_msg_V_q0);

    grp_vect_add_fu_847 : component vect_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_add_fu_847_ap_start,
        ap_done => grp_vect_add_fu_847_ap_done,
        ap_idle => grp_vect_add_fu_847_ap_idle,
        ap_ready => grp_vect_add_fu_847_ap_ready,
        o_V_address0 => grp_vect_add_fu_847_o_V_address0,
        o_V_ce0 => grp_vect_add_fu_847_o_V_ce0,
        o_V_q0 => grp_vect_add_fu_847_o_V_q0,
        o_V_address1 => grp_vect_add_fu_847_o_V_address1,
        o_V_ce1 => grp_vect_add_fu_847_o_V_ce1,
        o_V_we1 => grp_vect_add_fu_847_o_V_we1,
        o_V_d1 => grp_vect_add_fu_847_o_V_d1,
        v2_V_address0 => grp_vect_add_fu_847_v2_V_address0,
        v2_V_ce0 => grp_vect_add_fu_847_v2_V_ce0,
        v2_V_q0 => store_A_V_q0);

    grp_reed_solomon_decode_fu_871 : component reed_solomon_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_decode_fu_871_ap_start,
        ap_done => grp_reed_solomon_decode_fu_871_ap_done,
        ap_idle => grp_reed_solomon_decode_fu_871_ap_idle,
        ap_ready => grp_reed_solomon_decode_fu_871_ap_ready,
        msg_V_address1 => grp_reed_solomon_decode_fu_871_msg_V_address1,
        msg_V_ce1 => grp_reed_solomon_decode_fu_871_msg_V_ce1,
        msg_V_we1 => grp_reed_solomon_decode_fu_871_msg_V_we1,
        msg_V_d1 => grp_reed_solomon_decode_fu_871_msg_V_d1,
        cdw_V_address0 => grp_reed_solomon_decode_fu_871_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_decode_fu_871_cdw_V_ce0,
        cdw_V_q0 => store_rs_decode_V_q0,
        cdw_V_address1 => grp_reed_solomon_decode_fu_871_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_decode_fu_871_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_decode_fu_871_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_decode_fu_871_cdw_V_d1);

    grp_vect_set_random_fixe_fu_898 : component vect_set_random_fixe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_fu_898_ap_start,
        ap_done => grp_vect_set_random_fixe_fu_898_ap_done,
        ap_idle => grp_vect_set_random_fixe_fu_898_ap_idle,
        ap_ready => grp_vect_set_random_fixe_fu_898_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_fu_898_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_fu_898_v_V_ce0,
        v_V_q0 => grp_vect_set_random_fixe_fu_898_v_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_fu_898_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_fu_898_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_fu_898_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_fu_898_v_V_d1,
        weight_V => grp_vect_set_random_fixe_fu_898_weight_V,
        state_seedexpander_V_2_address0 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address0,
        state_seedexpander_V_2_ce0 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce0,
        state_seedexpander_V_2_q0 => state_seedexpander_V_q0,
        state_seedexpander_V_2_address1 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address1,
        state_seedexpander_V_2_ce1 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce1,
        state_seedexpander_V_2_we1 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_we1,
        state_seedexpander_V_2_d1 => grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel B
      ap_start_permute              => ap_start_B,
      ap_done_permute               => ap_done_B,
      ap_idle_permute               => ap_idle_B,
      ap_ready_permute              => ap_ready_B,
      state_V_address0_permute      => state_V_address0_B,
      state_V_ce0_permute           => state_V_ce0_B,
      state_V_q0_permute            => state_V_q0_B,
      state_V_address1_permute      => state_V_address1_B,
      state_V_ce1_permute           => state_V_ce1_B,
      state_V_we1_permute           => state_V_we1_B,
      state_V_d1_permute            => state_V_d1_B
      );

    grp_shake256_512_ds_fu_924 : component shake256_512_ds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake256_512_ds_fu_924_ap_start,
        ap_done => grp_shake256_512_ds_fu_924_ap_done,
        ap_idle => grp_shake256_512_ds_fu_924_ap_idle,
        ap_ready => grp_shake256_512_ds_fu_924_ap_ready,
        output_V_address0 => grp_shake256_512_ds_fu_924_output_V_address0,
        output_V_ce0 => grp_shake256_512_ds_fu_924_output_V_ce0,
        output_V_we0 => grp_shake256_512_ds_fu_924_output_V_we0,
        output_V_d0 => grp_shake256_512_ds_fu_924_output_V_d0,
        input_V_address0 => grp_shake256_512_ds_fu_924_input_V_address0,
        input_V_ce0 => grp_shake256_512_ds_fu_924_input_V_ce0,
        input_V_q0 => mc_V_q0,
        input_V_address1 => grp_shake256_512_ds_fu_924_input_V_address1,
        input_V_ce1 => grp_shake256_512_ds_fu_924_input_V_ce1,
        input_V_q1 => mc_V_q1,
        inlen_V => grp_shake256_512_ds_fu_924_inlen_V,
        domain_V => grp_shake256_512_ds_fu_924_domain_V);

    grp_shake_prng_init_fu_958 : component shake_prng_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_prng_init_fu_958_ap_start,
        ap_done => grp_shake_prng_init_fu_958_ap_done,
        ap_idle => grp_shake_prng_init_fu_958_ap_idle,
        ap_ready => grp_shake_prng_init_fu_958_ap_ready,
        entropy_input_V_address0 => grp_shake_prng_init_fu_958_entropy_input_V_address0,
        entropy_input_V_ce0 => grp_shake_prng_init_fu_958_entropy_input_V_ce0,
        entropy_input_V_q0 => prng_seed_V_q0,
        enlen_V => trunc_ln45_reg_1630,
        shake_prng_state_array_V_address0 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_address0,
        shake_prng_state_array_V_ce0 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce0,
        shake_prng_state_array_V_q0 => state_prng_V_q0,
        shake_prng_state_array_V_address1 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_address1,
        shake_prng_state_array_V_ce1 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce1,
        shake_prng_state_array_V_we1 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_we1,
        shake_prng_state_array_V_d1 => grp_shake_prng_init_fu_958_shake_prng_state_array_V_d1,
	  -- Channel to KeccakF1600_StatePermute Channel C
	  ap_start_permute         => ap_start_C,
      ap_done_permute          => ap_done_C,
      ap_idle_permute          => ap_idle_C,
      ap_ready_permute         => ap_ready_C,
      state_V_address0_permute => state_V_address0_C,
      state_V_ce0_permute      => state_V_ce0_C,
      state_V_q0_permute       => state_V_q0_C,
      state_V_address1_permute => state_V_address1_C,
      state_V_ce1_permute      => state_V_ce1_C,
      state_V_we1_permute      => state_V_we1_C,
      state_V_d1_permute       => state_V_d1_C
	  );

    grp_seedexpander_mult_ty_fu_981 : component seedexpander_mult_ty
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_mult_ty_fu_981_ap_start,
        ap_done => grp_seedexpander_mult_ty_fu_981_ap_done,
        ap_idle => grp_seedexpander_mult_ty_fu_981_ap_idle,
        ap_ready => grp_seedexpander_mult_ty_fu_981_ap_ready,
        output_V_address1 => grp_seedexpander_mult_ty_fu_981_output_V_address1,
        output_V_ce1 => grp_seedexpander_mult_ty_fu_981_output_V_ce1,
        output_V_we1 => grp_seedexpander_mult_ty_fu_981_output_V_we1,
        output_V_d1 => grp_seedexpander_mult_ty_fu_981_output_V_d1,
        state_seedexpander_V_address0 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address0,
        state_seedexpander_V_ce0 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce0,
        state_seedexpander_V_q0 => state_seedexpander_V_q0,
        state_seedexpander_V_address1 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address1,
        state_seedexpander_V_ce1 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce1,
        state_seedexpander_V_we1 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_we1,
        state_seedexpander_V_d1 => grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_d1,
	  -- Channel to KeccakF1600_StatePermute Channel D
	  ap_start_permute         => ap_start_D,
      ap_done_permute          => ap_done_D,
      ap_idle_permute          => ap_idle_D,
      ap_ready_permute         => ap_ready_D,
      state_V_address0_permute => state_V_address0_D,
      state_V_ce0_permute      => state_V_ce0_D,
      state_V_q0_permute       => state_V_q0_D,
      state_V_address1_permute => state_V_address1_D,
      state_V_ce1_permute      => state_V_ce1_D,
      state_V_we1_permute      => state_V_we1_D,
      state_V_d1_permute       => state_V_d1_D
	  );

    grp_seedexpander_init_fu_1003 : component seedexpander_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_init_fu_1003_ap_start,
        ap_done => grp_seedexpander_init_fu_1003_ap_done,
        ap_idle => grp_seedexpander_init_fu_1003_ap_idle,
        ap_ready => grp_seedexpander_init_fu_1003_ap_ready,
        seed_V_address0 => grp_seedexpander_init_fu_1003_seed_V_address0,
        seed_V_ce0 => grp_seedexpander_init_fu_1003_seed_V_ce0,
        seed_V_q0 => store_seeds_V_q0,
        state_V_2_address0 => grp_seedexpander_init_fu_1003_state_V_2_address0,
        state_V_2_ce0 => grp_seedexpander_init_fu_1003_state_V_2_ce0,
        state_V_2_q0 => state_seedexpander_V_q0,
        state_V_2_address1 => grp_seedexpander_init_fu_1003_state_V_2_address1,
        state_V_2_ce1 => grp_seedexpander_init_fu_1003_state_V_2_ce1,
        state_V_2_we1 => grp_seedexpander_init_fu_1003_state_V_2_we1,
        state_V_2_d1 => grp_seedexpander_init_fu_1003_state_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel E
      ap_start_permute         => ap_start_E,
      ap_done_permute          => ap_done_E,
      ap_idle_permute          => ap_idle_E,
      ap_ready_permute         => ap_ready_E,
      state_V_address0_permute => state_V_address0_E,
      state_V_ce0_permute      => state_V_ce0_E,
      state_V_q0_permute       => state_V_q0_E,
      state_V_address1_permute => state_V_address1_E,
      state_V_ce1_permute      => state_V_ce1_E,
      state_V_we1_permute      => state_V_we1_E,
      state_V_d1_permute       => state_V_d1_E
      );

    grp_reed_muller_decode_fu_1025 : component reed_muller_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_decode_fu_1025_ap_start,
        ap_done => grp_reed_muller_decode_fu_1025_ap_done,
        ap_idle => grp_reed_muller_decode_fu_1025_ap_idle,
        ap_ready => grp_reed_muller_decode_fu_1025_ap_ready,
        msg_V_address1 => grp_reed_muller_decode_fu_1025_msg_V_address1,
        msg_V_ce1 => grp_reed_muller_decode_fu_1025_msg_V_ce1,
        msg_V_we1 => grp_reed_muller_decode_fu_1025_msg_V_we1,
        msg_V_d1 => grp_reed_muller_decode_fu_1025_msg_V_d1,
        store_A_V_address0 => grp_reed_muller_decode_fu_1025_store_A_V_address0,
        store_A_V_ce0 => grp_reed_muller_decode_fu_1025_store_A_V_ce0,
        store_A_V_q0 => store_A_V_q0);

    grp_hqc_ciphertext_from_s_fu_1032 : component hqc_ciphertext_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_ciphertext_from_s_fu_1032_ap_start,
        ap_done => grp_hqc_ciphertext_from_s_fu_1032_ap_done,
        ap_idle => grp_hqc_ciphertext_from_s_fu_1032_ap_idle,
        ap_ready => grp_hqc_ciphertext_from_s_fu_1032_ap_ready,
        u_V_address1 => grp_hqc_ciphertext_from_s_fu_1032_u_V_address1,
        u_V_ce1 => grp_hqc_ciphertext_from_s_fu_1032_u_V_ce1,
        u_V_we1 => grp_hqc_ciphertext_from_s_fu_1032_u_V_we1,
        u_V_d1 => grp_hqc_ciphertext_from_s_fu_1032_u_V_d1,
        d_V_6_address0 => grp_hqc_ciphertext_from_s_fu_1032_d_V_6_address0,
        d_V_6_ce0 => grp_hqc_ciphertext_from_s_fu_1032_d_V_6_ce0,
        d_V_6_we0 => grp_hqc_ciphertext_from_s_fu_1032_d_V_6_we0,
        d_V_6_d0 => grp_hqc_ciphertext_from_s_fu_1032_d_V_6_d0,
        ct_V_address0 => grp_hqc_ciphertext_from_s_fu_1032_ct_V_address0,
        ct_V_ce0 => grp_hqc_ciphertext_from_s_fu_1032_ct_V_ce0,
        ct_V_q0 => ct_V_q0);

    grp_hqc_ciphertext_to_st_fu_1042 : component hqc_ciphertext_to_st
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_ciphertext_to_st_fu_1042_ap_start,
        ap_done => grp_hqc_ciphertext_to_st_fu_1042_ap_done,
        ap_idle => grp_hqc_ciphertext_to_st_fu_1042_ap_idle,
        ap_ready => grp_hqc_ciphertext_to_st_fu_1042_ap_ready,
        u_V_address0 => grp_hqc_ciphertext_to_st_fu_1042_u_V_address0,
        u_V_ce0 => grp_hqc_ciphertext_to_st_fu_1042_u_V_ce0,
        u_V_q0 => mc_V_q0,
        d_V_4_address0 => grp_hqc_ciphertext_to_st_fu_1042_d_V_4_address0,
        d_V_4_ce0 => grp_hqc_ciphertext_to_st_fu_1042_d_V_4_ce0,
        d_V_4_q0 => d_V_q0,
        ct_V_2_address1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_address1,
        ct_V_2_ce1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_ce1,
        ct_V_2_we1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_we1,
        ct_V_2_d1 => grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_d1);

    grp_hqc_public_key_from_s_fu_1052 : component hqc_public_key_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_public_key_from_s_fu_1052_ap_start,
        ap_done => grp_hqc_public_key_from_s_fu_1052_ap_done,
        ap_idle => grp_hqc_public_key_from_s_fu_1052_ap_idle,
        ap_ready => grp_hqc_public_key_from_s_fu_1052_ap_ready,
        s_V_address1 => grp_hqc_public_key_from_s_fu_1052_s_V_address1,
        s_V_ce1 => grp_hqc_public_key_from_s_fu_1052_s_V_ce1,
        s_V_we1 => grp_hqc_public_key_from_s_fu_1052_s_V_we1,
        s_V_d1 => grp_hqc_public_key_from_s_fu_1052_s_V_d1,
        pk64_V_address0 => grp_hqc_public_key_from_s_fu_1052_pk64_V_address0,
        pk64_V_ce0 => grp_hqc_public_key_from_s_fu_1052_pk64_V_ce0,
        pk64_V_q0 => pk64_V_q0);

    grp_hqc_public_key_from_1_fu_1060 : component hqc_public_key_from_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_public_key_from_1_fu_1060_ap_start,
        ap_done => grp_hqc_public_key_from_1_fu_1060_ap_done,
        ap_idle => grp_hqc_public_key_from_1_fu_1060_ap_idle,
        ap_ready => grp_hqc_public_key_from_1_fu_1060_ap_ready,
        s_V_address1 => grp_hqc_public_key_from_1_fu_1060_s_V_address1,
        s_V_ce1 => grp_hqc_public_key_from_1_fu_1060_s_V_ce1,
        s_V_we1 => grp_hqc_public_key_from_1_fu_1060_s_V_we1,
        s_V_d1 => grp_hqc_public_key_from_1_fu_1060_s_V_d1,
        pk_V_address0 => grp_hqc_public_key_from_1_fu_1060_pk_V_address0,
        pk_V_ce0 => grp_hqc_public_key_from_1_fu_1060_pk_V_ce0,
        pk_V_q0 => sk64_V_q0);

    grp_vect_compare_fu_1068 : component vect_compare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_fu_1068_ap_start,
        ap_done => grp_vect_compare_fu_1068_ap_done,
        ap_idle => grp_vect_compare_fu_1068_ap_idle,
        ap_ready => grp_vect_compare_fu_1068_ap_ready,
        v1_V_address0 => grp_vect_compare_fu_1068_v1_V_address0,
        v1_V_ce0 => grp_vect_compare_fu_1068_v1_V_ce0,
        v1_V_q0 => mc_V_q0,
        v1_V_offset => grp_vect_compare_fu_1068_v1_V_offset,
        v2_V_offset => grp_vect_compare_fu_1068_v2_V_offset,
        size_V_offset => grp_vect_compare_fu_1068_size_V_offset,
        uv2_V_address0 => grp_vect_compare_fu_1068_uv2_V_address0,
        uv2_V_ce0 => grp_vect_compare_fu_1068_uv2_V_ce0,
        uv2_V_q0 => uv2_V_q0,
        ap_return => grp_vect_compare_fu_1068_ap_return);

    grp_vect_set_random_fixe_1_fu_1085 : component vect_set_random_fixe_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_1_fu_1085_ap_start,
        ap_done => grp_vect_set_random_fixe_1_fu_1085_ap_done,
        ap_idle => grp_vect_set_random_fixe_1_fu_1085_ap_idle,
        ap_ready => grp_vect_set_random_fixe_1_fu_1085_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_1_fu_1085_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_1_fu_1085_v_V_ce0,
        v_V_q0 => store_B_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_1_fu_1085_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_1_fu_1085_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_1_fu_1085_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_1_fu_1085_v_V_d1,
        weight_V => grp_vect_set_random_fixe_1_fu_1085_weight_V,
        fixed_weight_by_coord_vector_V_address0 => grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0,
        fixed_weight_by_coord_vector_V_ce0 => grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0,
        fixed_weight_by_coord_vector_V_q0 => grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0);

    grp_vect_copyresize_1_fu_1097 : component vect_copyresize_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_1_fu_1097_ap_start,
        ap_done => grp_vect_copyresize_1_fu_1097_ap_done,
        ap_idle => grp_vect_copyresize_1_fu_1097_ap_idle,
        ap_ready => grp_vect_copyresize_1_fu_1097_ap_ready,
        o_V_address0 => grp_vect_copyresize_1_fu_1097_o_V_address0,
        o_V_ce0 => grp_vect_copyresize_1_fu_1097_o_V_ce0,
        o_V_we0 => grp_vect_copyresize_1_fu_1097_o_V_we0,
        o_V_d0 => grp_vect_copyresize_1_fu_1097_o_V_d0,
        v_V_address0 => grp_vect_copyresize_1_fu_1097_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_1_fu_1097_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_copyresize_2_fu_1105 : component vect_copyresize_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_2_fu_1105_ap_start,
        ap_done => grp_vect_copyresize_2_fu_1105_ap_done,
        ap_idle => grp_vect_copyresize_2_fu_1105_ap_idle,
        ap_ready => grp_vect_copyresize_2_fu_1105_ap_ready,
        o_V_address1 => grp_vect_copyresize_2_fu_1105_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_2_fu_1105_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_2_fu_1105_o_V_we1,
        o_V_d1 => grp_vect_copyresize_2_fu_1105_o_V_d1,
        v_V_address0 => grp_vect_copyresize_2_fu_1105_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_2_fu_1105_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_copyresize_mult_fu_1113 : component vect_copyresize_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_mult_fu_1113_ap_start,
        ap_done => grp_vect_copyresize_mult_fu_1113_ap_done,
        ap_idle => grp_vect_copyresize_mult_fu_1113_ap_idle,
        ap_ready => grp_vect_copyresize_mult_fu_1113_ap_ready,
        o_V_address1 => grp_vect_copyresize_mult_fu_1113_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_mult_fu_1113_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_mult_fu_1113_o_V_we1,
        o_V_d1 => grp_vect_copyresize_mult_fu_1113_o_V_d1,
        v_V_address0 => grp_vect_copyresize_mult_fu_1113_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_mult_fu_1113_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_copyresize_fu_1121 : component vect_copyresize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_fu_1121_ap_start,
        ap_done => grp_vect_copyresize_fu_1121_ap_done,
        ap_idle => grp_vect_copyresize_fu_1121_ap_idle,
        ap_ready => grp_vect_copyresize_fu_1121_ap_ready,
        o_V_address1 => grp_vect_copyresize_fu_1121_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_fu_1121_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_fu_1121_o_V_we1,
        o_V_d1 => grp_vect_copyresize_fu_1121_o_V_d1,
        v_V_address0 => grp_vect_copyresize_fu_1121_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_fu_1121_v_V_ce0,
        v_V_q0 => store_A_V_q0);

    grp_vect_compare_64_fu_1130 : component vect_compare_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_64_fu_1130_ap_start,
        ap_done => grp_vect_compare_64_fu_1130_ap_done,
        ap_idle => grp_vect_compare_64_fu_1130_ap_idle,
        ap_ready => grp_vect_compare_64_fu_1130_ap_ready,
        d_V_address0 => grp_vect_compare_64_fu_1130_d_V_address0,
        d_V_ce0 => grp_vect_compare_64_fu_1130_d_V_ce0,
        d_V_q0 => d_V_q0,
        theta_V_address0 => grp_vect_compare_64_fu_1130_theta_V_address0,
        theta_V_ce0 => grp_vect_compare_64_fu_1130_theta_V_ce0,
        theta_V_q0 => theta_V_q0,
        ap_return => grp_vect_compare_64_fu_1130_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_ciphertext_from_s_fu_1032_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_ciphertext_to_st_fu_1042_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_public_key_from_1_fu_1060_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_public_key_from_1_fu_1060_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    grp_hqc_public_key_from_1_fu_1060_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_public_key_from_1_fu_1060_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_public_key_from_1_fu_1060_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_public_key_from_s_fu_1052_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_public_key_from_s_fu_1052_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_hqc_public_key_from_s_fu_1052_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_public_key_from_s_fu_1052_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_public_key_from_s_fu_1052_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_decode_fu_1025_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_decode_fu_1025_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_reed_muller_decode_fu_1025_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_decode_fu_1025_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_decode_fu_1025_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_encode_fu_814_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_encode_fu_814_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    grp_reed_muller_encode_fu_814_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_encode_fu_814_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_encode_fu_814_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_decode_fu_871_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_decode_fu_871_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    grp_reed_solomon_decode_fu_871_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_decode_fu_871_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_decode_fu_871_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_encode_fu_791_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_encode_fu_791_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((icmp_ln284_3_fu_1488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
                    grp_reed_solomon_encode_fu_791_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_encode_fu_791_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_encode_fu_791_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_init_fu_1003_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_init_fu_1003_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((icmp_ln284_5_fu_1522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln284_4_fu_1505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((icmp_ln284_3_fu_1488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((icmp_ln284_2_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
                    grp_seedexpander_init_fu_1003_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_init_fu_1003_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_init_fu_1003_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_mult_ty_fu_981_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_mult_ty_fu_981_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln284_1_fu_1160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    grp_seedexpander_mult_ty_fu_981_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_mult_ty_fu_981_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_mult_ty_fu_981_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake256_512_ds_fu_924_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake256_512_ds_fu_924_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state93) or ((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((icmp_ln887_fu_1406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
                    grp_shake256_512_ds_fu_924_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake256_512_ds_fu_924_ap_ready = ap_const_logic_1)) then 
                    grp_shake256_512_ds_fu_924_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_prng_fu_684_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_prng_fu_684_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln887_28_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((icmp_ln284_fu_1143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_shake_prng_fu_684_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_prng_fu_684_ap_ready = ap_const_logic_1)) then 
                    grp_shake_prng_fu_684_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_prng_init_fu_958_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_prng_init_fu_958_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_shake_prng_init_fu_958_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_prng_init_fu_958_ap_ready = ap_const_logic_1)) then 
                    grp_shake_prng_init_fu_958_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_add_fu_847_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_add_fu_847_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    grp_vect_add_fu_847_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_add_fu_847_ap_ready = ap_const_logic_1)) then 
                    grp_vect_add_fu_847_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_64_fu_1130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_64_fu_1130_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                    grp_vect_compare_64_fu_1130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_64_fu_1130_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_64_fu_1130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_fu_1068_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_fu_1068_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    grp_vect_compare_fu_1068_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_fu_1068_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_fu_1068_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_1_fu_1097_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_1_fu_1097_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_vect_copyresize_1_fu_1097_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_1_fu_1097_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_1_fu_1097_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_2_fu_1105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_2_fu_1105_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    grp_vect_copyresize_2_fu_1105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_2_fu_1105_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_2_fu_1105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_fu_1121_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_fu_1121_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_vect_copyresize_fu_1121_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_fu_1121_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_fu_1121_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_mult_fu_1113_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_mult_fu_1113_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln284_4_fu_1505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    grp_vect_copyresize_mult_fu_1113_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_mult_fu_1113_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_mult_fu_1113_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_mul_add_fu_742_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_mul_add_fu_742_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_vect_mul_add_fu_742_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_mul_add_fu_742_ap_ready = ap_const_logic_1)) then 
                    grp_vect_mul_add_fu_742_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_1_fu_1085_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_1_fu_1085_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_vect_set_random_fixe_1_fu_1085_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_1_fu_1085_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_1_fu_1085_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_fu_898_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_fu_898_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((icmp_ln284_fu_1143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_vect_set_random_fixe_fu_898_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_fu_898_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_fu_898_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i53_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i53_reg_549 <= i_5_reg_1638;
            elsif (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i53_reg_549 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i54_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_i54_reg_560 <= i_6_reg_1656;
            elsif (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i54_reg_560 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i67_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_0_i67_reg_617 <= i_7_reg_1765;
            elsif (((grp_vect_copyresize_1_fu_1097_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_0_i67_reg_617 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i74_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_0_i74_reg_628 <= i_8_reg_1783;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_0_i74_reg_628 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i81_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                i_0_i81_reg_639 <= i_9_reg_1801;
            elsif (((grp_hqc_ciphertext_from_s_fu_1032_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                i_0_i81_reg_639 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i88_reg_650_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                i_0_i88_reg_650 <= i_10_reg_1819;
            elsif (((grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                i_0_i88_reg_650 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i96_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                i_0_i96_reg_662 <= i_11_reg_1832;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                i_0_i96_reg_662 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                i_0_i_reg_673 <= i_reg_1870;
            elsif (((grp_vect_compare_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                i_0_i_reg_673 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0189_0_i_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_29_fu_1217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_0189_0_i_reg_571 <= i_V_30_reg_1674;
            elsif (((grp_vect_mul_add_fu_742_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                p_0189_0_i_reg_571 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_047_0_i_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_27_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                p_047_0_i_reg_593 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                p_047_0_i_reg_593 <= i_V_29_reg_1734;
            end if; 
        end if;
    end process;

    p_095_0_i_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                p_095_0_i_reg_582 <= j_V_reg_1692;
            elsif (((icmp_ln887_27_fu_1186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                p_095_0_i_reg_582 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                t_V_reg_605 <= i_V_reg_1747;
            elsif (((grp_shake_prng_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                t_V_reg_605 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    Hi_reg_1713(5 downto 3) <= Hi_fu_1254_p2(5 downto 3);
                    Lo_reg_1708(5 downto 3) <= Lo_fu_1247_p3(5 downto 3);
                icmp_ln414_reg_1723 <= icmp_ln414_fu_1260_p2;
                store_A_V_load_reg_1718 <= store_A_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state94_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                cmp_d_d2_reg_1847 <= grp_vect_compare_64_fu_1130_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                cmp_u_u2_reg_1852 <= grp_vect_compare_fu_1068_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                i_10_reg_1819 <= i_10_fu_1528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                i_11_reg_1832 <= i_11_fu_1569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_5_reg_1638 <= i_5_fu_1149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_6_reg_1656 <= i_6_fu_1166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_7_reg_1765 <= i_7_fu_1468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_8_reg_1783 <= i_8_fu_1494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                i_9_reg_1801 <= i_9_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_V_29_reg_1734 <= i_V_29_fu_1384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_V_30_reg_1674 <= i_V_30_fu_1192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_V_reg_1747 <= i_V_fu_1412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                i_reg_1870 <= i_fu_1610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_V_reg_1692 <= j_V_fu_1223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                lhs_V_reg_1862 <= lhs_V_fu_1596_p3;
                result_reg_1857 <= result_fu_1585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_27_fu_1186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                pk64_V_addr_1_reg_1684 <= zext_ln544_82_fu_1204_p1(9 - 1 downto 0);
                    ret_V_114_reg_1679(11 downto 3) <= ret_V_114_fu_1209_p3(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_1604_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                ss2_V_addr_reg_1875 <= zext_ln391_fu_1616_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln45_reg_1630 <= trunc_ln45_fu_1138_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_29_fu_1217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                trunc_ln555_reg_1697 <= trunc_ln555_fu_1229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                trunc_ln802_reg_1757 <= trunc_ln802_fu_1453_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_1_fu_1160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    zext_ln285_1_reg_1661(2 downto 0) <= zext_ln285_1_fu_1172_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_2_fu_1462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    zext_ln285_2_reg_1770(2 downto 0) <= zext_ln285_2_fu_1474_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_3_fu_1488_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    zext_ln285_3_reg_1788(2 downto 0) <= zext_ln285_3_fu_1500_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_4_fu_1505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    zext_ln285_4_reg_1806(2 downto 0) <= zext_ln285_4_fu_1517_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    zext_ln285_6_reg_1837(2 downto 0) <= zext_ln285_6_fu_1575_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln285_reg_1643(2 downto 0) <= zext_ln285_fu_1155_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln285_reg_1643(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_1_reg_1661(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ret_V_114_reg_1679(2 downto 0) <= "000";
    Lo_reg_1708(2 downto 0) <= "000";
    Hi_reg_1713(2 downto 0) <= "111";
    zext_ln285_2_reg_1770(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_3_reg_1788(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_4_reg_1806(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_6_reg_1837(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln284_fu_1143_p2, ap_CS_fsm_state14, icmp_ln284_1_fu_1160_p2, ap_CS_fsm_state21, icmp_ln887_27_fu_1186_p2, ap_CS_fsm_state22, icmp_ln887_29_fu_1217_p2, ap_CS_fsm_state25, icmp_ln887_28_fu_1378_p2, ap_CS_fsm_state28, icmp_ln887_fu_1406_p2, ap_CS_fsm_state34, icmp_ln284_2_fu_1462_p2, ap_CS_fsm_state41, icmp_ln284_3_fu_1488_p2, ap_CS_fsm_state66, icmp_ln284_4_fu_1505_p2, ap_CS_fsm_state83, icmp_ln284_5_fu_1522_p2, ap_CS_fsm_state90, icmp_ln284_6_fu_1563_p2, ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_ap_done, grp_shake256_512_ds_fu_924_ap_done, ap_block_state94_on_subcall_done, ap_CS_fsm_state108, grp_vect_compare_fu_1068_ap_done, ap_CS_fsm_state110, ap_CS_fsm_state111, icmp_ln390_fu_1604_p2, grp_shake_prng_fu_684_ap_done, grp_vect_mul_add_fu_742_ap_done, grp_vect_add_fu_847_ap_done, grp_reed_solomon_decode_fu_871_ap_done, grp_shake_prng_init_fu_958_ap_done, grp_seedexpander_mult_ty_fu_981_ap_done, grp_seedexpander_init_fu_1003_ap_done, grp_reed_muller_decode_fu_1025_ap_done, grp_hqc_ciphertext_from_s_fu_1032_ap_done, grp_hqc_ciphertext_to_st_fu_1042_ap_done, grp_vect_set_random_fixe_1_fu_1085_ap_done, grp_vect_copyresize_1_fu_1097_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state65, ap_CS_fsm_state82, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state57, ap_CS_fsm_state106, ap_CS_fsm_state78, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85, ap_CS_fsm_state76, ap_CS_fsm_state63, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96, ap_CS_fsm_state80, ap_block_state9_on_subcall_done, ap_block_state11_on_subcall_done, ap_block_state43_on_subcall_done, ap_block_state51_on_subcall_done, ap_block_state53_on_subcall_done, ap_block_state55_on_subcall_done, ap_block_state68_on_subcall_done, ap_block_state70_on_subcall_done, ap_block_state92_on_subcall_done, ap_block_state100_on_subcall_done, ap_block_state102_on_subcall_done, ap_block_state104_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_shake_prng_init_fu_958_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_shake_prng_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln284_fu_1143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln284_1_fu_1160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((grp_seedexpander_mult_ty_fu_981_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_vect_mul_add_fu_742_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln887_27_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln887_29_fu_1217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln887_28_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                if (((grp_shake_prng_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln887_fu_1406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state31 => 
                if (((grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_vect_copyresize_1_fu_1097_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln284_2_fu_1462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state36 => 
                if (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_seedexpander_mult_ty_fu_981_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln284_3_fu_1488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_vect_set_random_fixe_1_fu_1085_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((ap_const_boolean_0 = ap_block_state51_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_boolean_0 = ap_block_state53_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_boolean_0 = ap_block_state55_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((grp_vect_add_fu_847_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((grp_hqc_ciphertext_to_st_fu_1042_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((grp_hqc_ciphertext_from_s_fu_1032_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln284_4_fu_1505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state68 => 
                if (((ap_const_boolean_0 = ap_block_state68_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((ap_const_boolean_0 = ap_block_state70_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_vect_mul_add_fu_742_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_reed_muller_decode_fu_1025_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((grp_reed_solomon_decode_fu_871_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((grp_vect_copyresize_1_fu_1097_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((icmp_ln284_5_fu_1522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state85 => 
                if (((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((grp_seedexpander_mult_ty_fu_981_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state92 => 
                if (((ap_const_boolean_0 = ap_block_state92_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((ap_const_boolean_0 = ap_block_state94_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((grp_vect_set_random_fixe_1_fu_1085_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                if (((grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                if (((ap_const_boolean_0 = ap_block_state100_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                if (((ap_const_boolean_0 = ap_block_state102_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                if (((ap_const_boolean_0 = ap_block_state104_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((grp_vect_add_fu_847_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if (((grp_vect_compare_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                if (((grp_vect_compare_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                if (((icmp_ln390_fu_1604_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_fu_1254_p2 <= (ap_const_lv6_7 or Lo_fu_1247_p3);
    Lo_fu_1247_p3 <= (trunc_ln555_reg_1697 & ap_const_lv3_0);
    add_ln321_fu_1538_p2 <= std_logic_vector(unsigned(zext_ln321_fu_1534_p1) + unsigned(ap_const_lv4_5));
    and_ln414_2_fu_1361_p2 <= (select_ln414_6_fu_1336_p3 and and_ln414_fu_1355_p2);
    and_ln414_fu_1355_p2 <= (shl_ln414_3_fu_1343_p2 and lshr_ln414_fu_1349_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state100_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_vect_mul_add_fu_742_ap_done)
    begin
                ap_block_state100_on_subcall_done <= ((grp_vect_mul_add_fu_742_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_block_state102_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_1_fu_1060_ap_done, grp_vect_set_random_fixe_1_fu_1085_ap_done, grp_vect_copyresize_fu_1121_ap_done)
    begin
                ap_block_state102_on_subcall_done <= ((grp_vect_copyresize_fu_1121_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_1085_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_1_fu_1060_ap_done = ap_const_logic_0));
    end process;


    ap_block_state104_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_742_ap_done, grp_reed_muller_encode_fu_814_ap_done)
    begin
                ap_block_state104_on_subcall_done <= ((grp_reed_muller_encode_fu_814_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_742_ap_done = ap_const_logic_0));
    end process;


    ap_block_state11_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_vect_set_random_fixe_1_fu_1085_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_vect_set_random_fixe_1_fu_1085_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_block_state43_on_subcall_done_assign_proc : process(grp_reed_solomon_encode_fu_791_ap_done, grp_seedexpander_init_fu_1003_ap_done)
    begin
                ap_block_state43_on_subcall_done <= ((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_791_ap_done = ap_const_logic_0));
    end process;


    ap_block_state51_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_vect_mul_add_fu_742_ap_done)
    begin
                ap_block_state51_on_subcall_done <= ((grp_vect_mul_add_fu_742_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_block_state53_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_s_fu_1052_ap_done, grp_vect_set_random_fixe_1_fu_1085_ap_done, grp_vect_copyresize_fu_1121_ap_done)
    begin
                ap_block_state53_on_subcall_done <= ((grp_vect_copyresize_fu_1121_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_1085_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_s_fu_1052_ap_done = ap_const_logic_0));
    end process;


    ap_block_state55_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_742_ap_done, grp_reed_muller_encode_fu_814_ap_done)
    begin
                ap_block_state55_on_subcall_done <= ((grp_reed_muller_encode_fu_814_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_742_ap_done = ap_const_logic_0));
    end process;


    ap_block_state68_on_subcall_done_assign_proc : process(grp_seedexpander_init_fu_1003_ap_done, grp_vect_copyresize_mult_fu_1113_ap_done)
    begin
                ap_block_state68_on_subcall_done <= ((grp_vect_copyresize_mult_fu_1113_ap_done = ap_const_logic_0) or (grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_0));
    end process;


    ap_block_state70_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_vect_copyresize_2_fu_1105_ap_done)
    begin
                ap_block_state70_on_subcall_done <= ((grp_vect_copyresize_2_fu_1105_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_block_state92_on_subcall_done_assign_proc : process(grp_shake256_512_ds_fu_924_ap_done, grp_reed_solomon_encode_fu_791_ap_done, grp_seedexpander_init_fu_1003_ap_done)
    begin
                ap_block_state92_on_subcall_done <= ((grp_seedexpander_init_fu_1003_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_791_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_0));
    end process;


    ap_block_state94_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_shake256_512_ds_fu_924_ap_done, grp_vect_compare_64_fu_1130_ap_done)
    begin
                ap_block_state94_on_subcall_done <= ((grp_vect_compare_64_fu_1130_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_924_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_898_ap_done, grp_shake_prng_fu_684_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_shake_prng_fu_684_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_898_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state111, icmp_ln390_fu_1604_p2)
    begin
        if (((icmp_ln390_fu_1604_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state111, icmp_ln390_fu_1604_p2)
    begin
        if (((icmp_ln390_fu_1604_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_reg_1857),32));

    ct_V_ce0_assign_proc : process(grp_hqc_ciphertext_from_s_fu_1032_ct_V_ce0, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            ct_V_ce0 <= grp_hqc_ciphertext_from_s_fu_1032_ct_V_ce0;
        else 
            ct_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_ce1_assign_proc : process(grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_ce1, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ct_V_ce1 <= grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_ce1;
        else 
            ct_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_we1_assign_proc : process(grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_we1, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ct_V_we1 <= grp_hqc_ciphertext_to_st_fu_1042_ct_V_2_we1;
        else 
            ct_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    d_V_address0_assign_proc : process(ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_address0, grp_hqc_ciphertext_from_s_fu_1032_d_V_6_address0, grp_hqc_ciphertext_to_st_fu_1042_d_V_4_address0, grp_vect_compare_64_fu_1130_d_V_address0, ap_CS_fsm_state65, ap_CS_fsm_state59, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            d_V_address0 <= grp_vect_compare_64_fu_1130_d_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            d_V_address0 <= grp_hqc_ciphertext_to_st_fu_1042_d_V_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            d_V_address0 <= grp_hqc_ciphertext_from_s_fu_1032_d_V_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            d_V_address0 <= grp_shake256_512_ds_fu_924_output_V_address0;
        else 
            d_V_address0 <= "XXX";
        end if; 
    end process;


    d_V_ce0_assign_proc : process(ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_ce0, grp_hqc_ciphertext_from_s_fu_1032_d_V_6_ce0, grp_hqc_ciphertext_to_st_fu_1042_d_V_4_ce0, grp_vect_compare_64_fu_1130_d_V_ce0, ap_CS_fsm_state65, ap_CS_fsm_state59, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            d_V_ce0 <= grp_vect_compare_64_fu_1130_d_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            d_V_ce0 <= grp_hqc_ciphertext_to_st_fu_1042_d_V_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            d_V_ce0 <= grp_hqc_ciphertext_from_s_fu_1032_d_V_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            d_V_ce0 <= grp_shake256_512_ds_fu_924_output_V_ce0;
        else 
            d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_V_d0_assign_proc : process(grp_shake256_512_ds_fu_924_output_V_d0, grp_hqc_ciphertext_from_s_fu_1032_d_V_6_d0, ap_CS_fsm_state65, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            d_V_d0 <= grp_hqc_ciphertext_from_s_fu_1032_d_V_6_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            d_V_d0 <= grp_shake256_512_ds_fu_924_output_V_d0;
        else 
            d_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_V_we0_assign_proc : process(grp_shake256_512_ds_fu_924_output_V_we0, grp_hqc_ciphertext_from_s_fu_1032_d_V_6_we0, ap_CS_fsm_state65, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            d_V_we0 <= grp_hqc_ciphertext_from_s_fu_1032_d_V_6_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            d_V_we0 <= grp_shake256_512_ds_fu_924_output_V_we0;
        else 
            d_V_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    grp_hqc_ciphertext_from_s_fu_1032_ap_start <= grp_hqc_ciphertext_from_s_fu_1032_ap_start_reg;
    grp_hqc_ciphertext_to_st_fu_1042_ap_start <= grp_hqc_ciphertext_to_st_fu_1042_ap_start_reg;
    grp_hqc_public_key_from_1_fu_1060_ap_start <= grp_hqc_public_key_from_1_fu_1060_ap_start_reg;
    grp_hqc_public_key_from_s_fu_1052_ap_start <= grp_hqc_public_key_from_s_fu_1052_ap_start_reg;
    grp_reed_muller_decode_fu_1025_ap_start <= grp_reed_muller_decode_fu_1025_ap_start_reg;
    grp_reed_muller_encode_fu_814_ap_start <= grp_reed_muller_encode_fu_814_ap_start_reg;

    grp_reed_muller_encode_fu_814_cdw_V_q0_assign_proc : process(mc_V_q0, uv2_V_q0, ap_CS_fsm_state55, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_reed_muller_encode_fu_814_cdw_V_q0 <= uv2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_reed_muller_encode_fu_814_cdw_V_q0 <= mc_V_q0;
        else 
            grp_reed_muller_encode_fu_814_cdw_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_reed_muller_encode_fu_814_msg_V_q0_assign_proc : process(store_rs_encode_V_1_q0, store_rs_encode_V_q0, ap_CS_fsm_state55, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_reed_muller_encode_fu_814_msg_V_q0 <= store_rs_encode_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_reed_muller_encode_fu_814_msg_V_q0 <= store_rs_encode_V_q0;
        else 
            grp_reed_muller_encode_fu_814_msg_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_reed_solomon_decode_fu_871_ap_start <= grp_reed_solomon_decode_fu_871_ap_start_reg;
    grp_reed_solomon_encode_fu_791_ap_start <= grp_reed_solomon_encode_fu_791_ap_start_reg;

    grp_reed_solomon_encode_fu_791_cdw_V_q0_assign_proc : process(store_rs_encode_V_1_q0, store_rs_encode_V_q0, ap_CS_fsm_state43, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_reed_solomon_encode_fu_791_cdw_V_q0 <= store_rs_encode_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_reed_solomon_encode_fu_791_cdw_V_q0 <= store_rs_encode_V_q0;
        else 
            grp_reed_solomon_encode_fu_791_cdw_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_seedexpander_init_fu_1003_ap_start <= grp_seedexpander_init_fu_1003_ap_start_reg;
    grp_seedexpander_mult_ty_fu_981_ap_start <= grp_seedexpander_mult_ty_fu_981_ap_start_reg;
    grp_shake256_512_ds_fu_924_ap_start <= grp_shake256_512_ds_fu_924_ap_start_reg;

    grp_shake256_512_ds_fu_924_domain_V_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state82, ap_CS_fsm_state92, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_shake256_512_ds_fu_924_domain_V <= ap_const_lv4_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            grp_shake256_512_ds_fu_924_domain_V <= ap_const_lv4_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            grp_shake256_512_ds_fu_924_domain_V <= ap_const_lv4_3;
        else 
            grp_shake256_512_ds_fu_924_domain_V <= "XXXX";
        end if; 
    end process;


    grp_shake256_512_ds_fu_924_inlen_V_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state82, ap_CS_fsm_state92, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_shake256_512_ds_fu_924_inlen_V <= ap_const_lv14_1151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            grp_shake256_512_ds_fu_924_inlen_V <= ap_const_lv14_10;
        else 
            grp_shake256_512_ds_fu_924_inlen_V <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_shake_prng_fu_684_ap_start <= grp_shake_prng_fu_684_ap_start_reg;

    grp_shake_prng_fu_684_outlen_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_shake_prng_fu_684_outlen <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_shake_prng_fu_684_outlen <= ap_const_lv4_5;
        else 
            grp_shake_prng_fu_684_outlen <= "XXXX";
        end if; 
    end process;

    grp_shake_prng_init_fu_958_ap_start <= grp_shake_prng_init_fu_958_ap_start_reg;
    grp_vect_add_fu_847_ap_start <= grp_vect_add_fu_847_ap_start_reg;

    grp_vect_add_fu_847_o_V_q0_assign_proc : process(mc_V_q0, uv2_V_q0, ap_CS_fsm_state57, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_vect_add_fu_847_o_V_q0 <= uv2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_vect_add_fu_847_o_V_q0 <= mc_V_q0;
        else 
            grp_vect_add_fu_847_o_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_vect_compare_64_fu_1130_ap_start <= grp_vect_compare_64_fu_1130_ap_start_reg;
    grp_vect_compare_fu_1068_ap_start <= grp_vect_compare_fu_1068_ap_start_reg;

    grp_vect_compare_fu_1068_size_V_offset_assign_proc : process(ap_CS_fsm_state108, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_vect_compare_fu_1068_size_V_offset <= ap_const_lv12_8A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_vect_compare_fu_1068_size_V_offset <= ap_const_lv12_8A1;
        else 
            grp_vect_compare_fu_1068_size_V_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_1068_v1_V_offset_assign_proc : process(ap_CS_fsm_state108, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_vect_compare_fu_1068_v1_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_vect_compare_fu_1068_v1_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_1068_v1_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_1068_v2_V_offset_assign_proc : process(ap_CS_fsm_state108, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_vect_compare_fu_1068_v2_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_vect_compare_fu_1068_v2_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_1068_v2_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_copyresize_1_fu_1097_ap_start <= grp_vect_copyresize_1_fu_1097_ap_start_reg;
    grp_vect_copyresize_2_fu_1105_ap_start <= grp_vect_copyresize_2_fu_1105_ap_start_reg;
    grp_vect_copyresize_fu_1121_ap_start <= grp_vect_copyresize_fu_1121_ap_start_reg;
    grp_vect_copyresize_mult_fu_1113_ap_start <= grp_vect_copyresize_mult_fu_1113_ap_start_reg;

    grp_vect_mul_add_fu_742_a1_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_vect_mul_add_fu_742_a1_V_q0 <= random_vector_A_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_vect_mul_add_fu_742_a1_V_q0 <= random_vector_B_V_q0;
        else 
            grp_vect_mul_add_fu_742_a1_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_mul_add_fu_742_ap_start <= grp_vect_mul_add_fu_742_ap_start_reg;

    grp_vect_mul_add_fu_742_weight_V_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_vect_mul_add_fu_742_weight_V <= ap_const_lv8_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            grp_vect_mul_add_fu_742_weight_V <= ap_const_lv8_42;
        else 
            grp_vect_mul_add_fu_742_weight_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_1_fu_1085_ap_start <= grp_vect_set_random_fixe_1_fu_1085_ap_start_reg;

    grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0 <= random_vector_B_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_set_random_fixe_1_fu_1085_weight_V_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_vect_set_random_fixe_1_fu_1085_weight_V <= ap_const_lv7_4B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_vect_set_random_fixe_1_fu_1085_weight_V <= ap_const_lv7_42;
        else 
            grp_vect_set_random_fixe_1_fu_1085_weight_V <= "XXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_fu_898_ap_start <= grp_vect_set_random_fixe_fu_898_ap_start_reg;

    grp_vect_set_random_fixe_fu_898_v_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state94, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_vect_set_random_fixe_fu_898_v_V_q0 <= random_vector_B_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_vect_set_random_fixe_fu_898_v_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_fu_898_v_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_set_random_fixe_fu_898_weight_V_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_vect_set_random_fixe_fu_898_weight_V <= ap_const_lv7_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_vect_set_random_fixe_fu_898_weight_V <= ap_const_lv7_42;
        else 
            grp_vect_set_random_fixe_fu_898_weight_V <= "XXXXXXX";
        end if; 
    end process;


    h_s_V_address0_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            h_s_V_address0 <= ap_const_lv12_8A0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_address0 <= grp_vect_mul_add_fu_742_a2_V_address0;
        else 
            h_s_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    h_s_V_address1_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_address1, grp_seedexpander_mult_ty_fu_981_output_V_address1, grp_hqc_public_key_from_s_fu_1052_s_V_address1, grp_hqc_public_key_from_1_fu_1060_s_V_address1, grp_vect_copyresize_mult_fu_1113_o_V_address1, ap_CS_fsm_state20, ap_CS_fsm_state40, ap_CS_fsm_state89, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state68, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state39, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            h_s_V_address1 <= ap_const_lv12_8A0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            h_s_V_address1 <= ap_const_lv12_8A1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            h_s_V_address1 <= grp_vect_copyresize_mult_fu_1113_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            h_s_V_address1 <= grp_hqc_public_key_from_1_fu_1060_s_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_s_V_address1 <= grp_hqc_public_key_from_s_fu_1052_s_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            h_s_V_address1 <= grp_seedexpander_mult_ty_fu_981_output_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_address1 <= grp_vect_mul_add_fu_742_a2_V_address1;
        else 
            h_s_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    h_s_V_ce0_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            h_s_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_ce0 <= grp_vect_mul_add_fu_742_a2_V_ce0;
        else 
            h_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_ce1_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_ce1, grp_seedexpander_mult_ty_fu_981_output_V_ce1, grp_hqc_public_key_from_s_fu_1052_s_V_ce1, grp_hqc_public_key_from_1_fu_1060_s_V_ce1, grp_vect_copyresize_mult_fu_1113_o_V_ce1, ap_CS_fsm_state20, ap_CS_fsm_state40, ap_CS_fsm_state89, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state68, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state39, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            h_s_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            h_s_V_ce1 <= grp_vect_copyresize_mult_fu_1113_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            h_s_V_ce1 <= grp_hqc_public_key_from_1_fu_1060_s_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_s_V_ce1 <= grp_hqc_public_key_from_s_fu_1052_s_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            h_s_V_ce1 <= grp_seedexpander_mult_ty_fu_981_output_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_ce1 <= grp_vect_mul_add_fu_742_a2_V_ce1;
        else 
            h_s_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_d1_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_d1, grp_seedexpander_mult_ty_fu_981_output_V_d1, grp_hqc_public_key_from_s_fu_1052_s_V_d1, grp_hqc_public_key_from_1_fu_1060_s_V_d1, grp_vect_copyresize_mult_fu_1113_o_V_d1, ap_CS_fsm_state20, ap_CS_fsm_state40, ap_CS_fsm_state89, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state68, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln717_fu_1181_p1, ap_CS_fsm_state39, zext_ln717_1_fu_1483_p1, ap_CS_fsm_state88, zext_ln717_2_fu_1558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            h_s_V_d1 <= zext_ln717_2_fu_1558_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            h_s_V_d1 <= zext_ln717_1_fu_1483_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            h_s_V_d1 <= zext_ln717_fu_1181_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            h_s_V_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            h_s_V_d1 <= grp_vect_copyresize_mult_fu_1113_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            h_s_V_d1 <= grp_hqc_public_key_from_1_fu_1060_s_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_s_V_d1 <= grp_hqc_public_key_from_s_fu_1052_s_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            h_s_V_d1 <= grp_seedexpander_mult_ty_fu_981_output_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_d1 <= grp_vect_mul_add_fu_742_a2_V_d1;
        else 
            h_s_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    h_s_V_we1_assign_proc : process(grp_vect_mul_add_fu_742_a2_V_we1, grp_seedexpander_mult_ty_fu_981_output_V_we1, grp_hqc_public_key_from_s_fu_1052_s_V_we1, grp_hqc_public_key_from_1_fu_1060_s_V_we1, grp_vect_copyresize_mult_fu_1113_o_V_we1, ap_CS_fsm_state20, ap_CS_fsm_state40, ap_CS_fsm_state89, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state68, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state39, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            h_s_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            h_s_V_we1 <= grp_vect_copyresize_mult_fu_1113_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            h_s_V_we1 <= grp_hqc_public_key_from_1_fu_1060_s_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_s_V_we1 <= grp_hqc_public_key_from_s_fu_1052_s_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            h_s_V_we1 <= grp_seedexpander_mult_ty_fu_981_output_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            h_s_V_we1 <= grp_vect_mul_add_fu_742_a2_V_we1;
        else 
            h_s_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_1528_p2 <= std_logic_vector(unsigned(i_0_i88_reg_650) + unsigned(ap_const_lv3_1));
    i_11_fu_1569_p2 <= std_logic_vector(unsigned(i_0_i96_reg_662) + unsigned(ap_const_lv3_1));
    i_5_fu_1149_p2 <= std_logic_vector(unsigned(i_0_i53_reg_549) + unsigned(ap_const_lv3_1));
    i_6_fu_1166_p2 <= std_logic_vector(unsigned(i_0_i54_reg_560) + unsigned(ap_const_lv3_1));
    i_7_fu_1468_p2 <= std_logic_vector(unsigned(i_0_i67_reg_617) + unsigned(ap_const_lv3_1));
    i_8_fu_1494_p2 <= std_logic_vector(unsigned(i_0_i74_reg_628) + unsigned(ap_const_lv3_1));
    i_9_fu_1511_p2 <= std_logic_vector(unsigned(i_0_i81_reg_639) + unsigned(ap_const_lv3_1));
    i_V_29_fu_1384_p2 <= std_logic_vector(unsigned(p_047_0_i_reg_593) + unsigned(ap_const_lv9_1));
    i_V_30_fu_1192_p2 <= std_logic_vector(unsigned(p_0189_0_i_reg_571) + unsigned(ap_const_lv9_1));
    i_V_fu_1412_p2 <= std_logic_vector(unsigned(t_V_reg_605) + unsigned(ap_const_lv5_1));
    i_fu_1610_p2 <= std_logic_vector(unsigned(i_0_i_reg_673) + unsigned(ap_const_lv4_1));
    icmp_ln284_1_fu_1160_p2 <= "1" when (i_0_i54_reg_560 = ap_const_lv3_5) else "0";
    icmp_ln284_2_fu_1462_p2 <= "1" when (i_0_i67_reg_617 = ap_const_lv3_5) else "0";
    icmp_ln284_3_fu_1488_p2 <= "1" when (i_0_i74_reg_628 = ap_const_lv3_5) else "0";
    icmp_ln284_4_fu_1505_p2 <= "1" when (i_0_i81_reg_639 = ap_const_lv3_5) else "0";
    icmp_ln284_5_fu_1522_p2 <= "1" when (i_0_i88_reg_650 = ap_const_lv3_5) else "0";
    icmp_ln284_6_fu_1563_p2 <= "1" when (i_0_i96_reg_662 = ap_const_lv3_5) else "0";
    icmp_ln284_fu_1143_p2 <= "1" when (i_0_i53_reg_549 = ap_const_lv3_5) else "0";
    icmp_ln390_fu_1604_p2 <= "1" when (i_0_i_reg_673 = ap_const_lv4_8) else "0";
    icmp_ln414_fu_1260_p2 <= "1" when (unsigned(Lo_fu_1247_p3) > unsigned(Hi_fu_1254_p2)) else "0";
    icmp_ln887_27_fu_1186_p2 <= "1" when (p_0189_0_i_reg_571 = ap_const_lv9_115) else "0";
    icmp_ln887_28_fu_1378_p2 <= "1" when (p_047_0_i_reg_593 = ap_const_lv9_11A) else "0";
    icmp_ln887_29_fu_1217_p2 <= "1" when (p_095_0_i_reg_582 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_1406_p2 <= "1" when (t_V_reg_605 = ap_const_lv5_10) else "0";
    j_V_fu_1223_p2 <= std_logic_vector(unsigned(p_095_0_i_reg_582) + unsigned(ap_const_lv4_1));
    lhs_V_fu_1596_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln1355_fu_1590_p2(0) = '1') else 
        ap_const_lv64_0;
    lshr_ln414_fu_1349_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_10_fu_1316_p1(31-1 downto 0)))));

    mc_V_address0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state108, ap_CS_fsm_state110, grp_reed_muller_encode_fu_814_cdw_V_address0, grp_vect_add_fu_847_o_V_address0, grp_shake256_512_ds_fu_924_input_V_address0, grp_hqc_ciphertext_to_st_fu_1042_u_V_address0, grp_vect_compare_fu_1068_v1_V_address0, grp_vect_copyresize_1_fu_1097_v_V_address0, grp_vect_copyresize_2_fu_1105_v_V_address0, grp_vect_copyresize_mult_fu_1113_v_V_address0, ap_CS_fsm_state33, ap_CS_fsm_state82, ap_CS_fsm_state55, ap_CS_fsm_state92, ap_CS_fsm_state57, ap_CS_fsm_state70, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state68, ap_CS_fsm_state63, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            mc_V_address0 <= grp_vect_copyresize_mult_fu_1113_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            mc_V_address0 <= grp_vect_copyresize_2_fu_1105_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            mc_V_address0 <= grp_vect_copyresize_1_fu_1097_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            mc_V_address0 <= grp_vect_compare_fu_1068_v1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            mc_V_address0 <= grp_hqc_ciphertext_to_st_fu_1042_u_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            mc_V_address0 <= grp_shake256_512_ds_fu_924_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_address0 <= grp_vect_add_fu_847_o_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_address0 <= grp_reed_muller_encode_fu_814_cdw_V_address0;
        else 
            mc_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_address1_assign_proc : process(ap_CS_fsm_state94, grp_reed_muller_encode_fu_814_cdw_V_address1, grp_vect_add_fu_847_o_V_address1, grp_reed_solomon_decode_fu_871_msg_V_address1, grp_shake256_512_ds_fu_924_input_V_address1, grp_hqc_ciphertext_from_s_fu_1032_u_V_address1, grp_vect_copyresize_fu_1121_o_V_address1, ap_CS_fsm_state30, ap_CS_fsm_state65, ap_CS_fsm_state82, ap_CS_fsm_state55, ap_CS_fsm_state92, ap_CS_fsm_state57, ap_CS_fsm_state78, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state53, zext_ln544_86_fu_1457_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            mc_V_address1 <= zext_ln544_86_fu_1457_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mc_V_address1 <= grp_vect_copyresize_fu_1121_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mc_V_address1 <= grp_hqc_ciphertext_from_s_fu_1032_u_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            mc_V_address1 <= grp_shake256_512_ds_fu_924_input_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            mc_V_address1 <= grp_reed_solomon_decode_fu_871_msg_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_address1 <= grp_vect_add_fu_847_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_address1 <= grp_reed_muller_encode_fu_814_cdw_V_address1;
        else 
            mc_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_ce0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state108, ap_CS_fsm_state110, grp_reed_muller_encode_fu_814_cdw_V_ce0, grp_vect_add_fu_847_o_V_ce0, grp_shake256_512_ds_fu_924_input_V_ce0, grp_hqc_ciphertext_to_st_fu_1042_u_V_ce0, grp_vect_compare_fu_1068_v1_V_ce0, grp_vect_copyresize_1_fu_1097_v_V_ce0, grp_vect_copyresize_2_fu_1105_v_V_ce0, grp_vect_copyresize_mult_fu_1113_v_V_ce0, ap_CS_fsm_state33, ap_CS_fsm_state82, ap_CS_fsm_state55, ap_CS_fsm_state92, ap_CS_fsm_state57, ap_CS_fsm_state70, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state68, ap_CS_fsm_state63, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            mc_V_ce0 <= grp_vect_copyresize_mult_fu_1113_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            mc_V_ce0 <= grp_vect_copyresize_2_fu_1105_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            mc_V_ce0 <= grp_vect_copyresize_1_fu_1097_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            mc_V_ce0 <= grp_vect_compare_fu_1068_v1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            mc_V_ce0 <= grp_hqc_ciphertext_to_st_fu_1042_u_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            mc_V_ce0 <= grp_shake256_512_ds_fu_924_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_ce0 <= grp_vect_add_fu_847_o_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_ce0 <= grp_reed_muller_encode_fu_814_cdw_V_ce0;
        else 
            mc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_ce1_assign_proc : process(ap_CS_fsm_state94, grp_reed_muller_encode_fu_814_cdw_V_ce1, grp_vect_add_fu_847_o_V_ce1, grp_reed_solomon_decode_fu_871_msg_V_ce1, grp_shake256_512_ds_fu_924_input_V_ce1, grp_hqc_ciphertext_from_s_fu_1032_u_V_ce1, grp_vect_copyresize_fu_1121_o_V_ce1, ap_CS_fsm_state30, ap_CS_fsm_state65, ap_CS_fsm_state82, ap_CS_fsm_state55, ap_CS_fsm_state92, ap_CS_fsm_state57, ap_CS_fsm_state78, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            mc_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mc_V_ce1 <= grp_vect_copyresize_fu_1121_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mc_V_ce1 <= grp_hqc_ciphertext_from_s_fu_1032_u_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            mc_V_ce1 <= grp_shake256_512_ds_fu_924_input_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            mc_V_ce1 <= grp_reed_solomon_decode_fu_871_msg_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_ce1 <= grp_vect_add_fu_847_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_ce1 <= grp_reed_muller_encode_fu_814_cdw_V_ce1;
        else 
            mc_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_d1_assign_proc : process(trunc_ln802_reg_1757, grp_reed_muller_encode_fu_814_cdw_V_d1, grp_vect_add_fu_847_o_V_d1, grp_reed_solomon_decode_fu_871_msg_V_d1, grp_hqc_ciphertext_from_s_fu_1032_u_V_d1, grp_vect_copyresize_fu_1121_o_V_d1, ap_CS_fsm_state30, ap_CS_fsm_state65, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state78, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            mc_V_d1 <= trunc_ln802_reg_1757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mc_V_d1 <= grp_vect_copyresize_fu_1121_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mc_V_d1 <= grp_hqc_ciphertext_from_s_fu_1032_u_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            mc_V_d1 <= grp_reed_solomon_decode_fu_871_msg_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_d1 <= grp_vect_add_fu_847_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_d1 <= grp_reed_muller_encode_fu_814_cdw_V_d1;
        else 
            mc_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    mc_V_we1_assign_proc : process(grp_reed_muller_encode_fu_814_cdw_V_we1, grp_vect_add_fu_847_o_V_we1, grp_reed_solomon_decode_fu_871_msg_V_we1, grp_hqc_ciphertext_from_s_fu_1032_u_V_we1, grp_vect_copyresize_fu_1121_o_V_we1, ap_CS_fsm_state30, ap_CS_fsm_state65, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state78, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            mc_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            mc_V_we1 <= grp_vect_copyresize_fu_1121_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mc_V_we1 <= grp_hqc_ciphertext_from_s_fu_1032_u_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            mc_V_we1 <= grp_reed_solomon_decode_fu_871_msg_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mc_V_we1 <= grp_vect_add_fu_847_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            mc_V_we1 <= grp_reed_muller_encode_fu_814_cdw_V_we1;
        else 
            mc_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln387_fu_1580_p2 <= (grp_vect_compare_fu_1068_ap_return or cmp_u_u2_reg_1852);

    pk64_V_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state34, zext_ln285_2_fu_1474_p1, grp_hqc_public_key_from_s_fu_1052_pk64_V_address0, ap_CS_fsm_state53, zext_ln544_84_fu_1390_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            pk64_V_address0 <= zext_ln285_2_fu_1474_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            pk64_V_address0 <= zext_ln544_84_fu_1390_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            pk64_V_address0 <= grp_hqc_public_key_from_s_fu_1052_pk64_V_address0;
        else 
            pk64_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pk64_V_address1_assign_proc : process(zext_ln285_1_reg_1661, pk64_V_addr_1_reg_1684, ap_CS_fsm_state15, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pk64_V_address1 <= pk64_V_addr_1_reg_1684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk64_V_address1 <= zext_ln285_1_reg_1661(9 - 1 downto 0);
        else 
            pk64_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    pk64_V_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state34, grp_hqc_public_key_from_s_fu_1052_pk64_V_ce0, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            pk64_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            pk64_V_ce0 <= grp_hqc_public_key_from_s_fu_1052_pk64_V_ce0;
        else 
            pk64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk64_V_ce1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            pk64_V_ce1 <= ap_const_logic_1;
        else 
            pk64_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk64_V_d1_assign_proc : process(store_seeds_V_q0, ap_CS_fsm_state15, ap_CS_fsm_state24, and_ln414_2_fu_1361_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pk64_V_d1 <= and_ln414_2_fu_1361_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk64_V_d1 <= store_seeds_V_q0;
        else 
            pk64_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk64_V_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24, shl_ln414_4_fu_1371_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pk64_V_we1 <= shl_ln414_4_fu_1371_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk64_V_we1 <= ap_const_lv8_FF;
        else 
            pk64_V_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    prng_seed_V_address0 <= grp_shake_prng_init_fu_958_entropy_input_V_address0;
    prng_seed_V_ce0 <= grp_shake_prng_init_fu_958_entropy_input_V_ce0;
    r_V_fu_1447_p2 <= std_logic_vector(shift_right(unsigned(store_seeds_V_q0),to_integer(unsigned('0' & zext_ln808_fu_1443_p1(31-1 downto 0)))));

    random_vector_A_V_address0_assign_proc : process(ap_CS_fsm_state94, grp_vect_mul_add_fu_742_a1_V_address0, grp_vect_set_random_fixe_fu_898_v_V_address0, grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_fu_898_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_A_V_address0 <= grp_vect_mul_add_fu_742_a1_V_address0;
        else 
            random_vector_A_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_A_V_ce0_assign_proc : process(ap_CS_fsm_state94, grp_vect_mul_add_fu_742_a1_V_ce0, grp_vect_set_random_fixe_fu_898_v_V_ce0, grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_fu_898_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_A_V_ce0 <= grp_vect_mul_add_fu_742_a1_V_ce0;
        else 
            random_vector_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_ce1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_v_V_ce1, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            random_vector_A_V_ce1 <= grp_vect_set_random_fixe_fu_898_v_V_ce1;
        else 
            random_vector_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_we1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_v_V_we1, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            random_vector_A_V_we1 <= grp_vect_set_random_fixe_fu_898_v_V_we1;
        else 
            random_vector_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_742_a1_V_address0, grp_vect_set_random_fixe_fu_898_v_V_address0, grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_fu_898_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            random_vector_B_V_address0 <= grp_vect_mul_add_fu_742_a1_V_address0;
        else 
            random_vector_B_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_742_a1_V_ce0, grp_vect_set_random_fixe_fu_898_v_V_ce0, grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_1085_fixed_weight_by_coord_vector_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_fu_898_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            random_vector_B_V_ce0 <= grp_vect_mul_add_fu_742_a1_V_ce0;
        else 
            random_vector_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_ce1_assign_proc : process(grp_vect_set_random_fixe_fu_898_v_V_ce1, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_B_V_ce1 <= grp_vect_set_random_fixe_fu_898_v_V_ce1;
        else 
            random_vector_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_we1_assign_proc : process(grp_vect_set_random_fixe_fu_898_v_V_we1, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            random_vector_B_V_we1 <= grp_vect_set_random_fixe_fu_898_v_V_we1;
        else 
            random_vector_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_1585_p2 <= (or_ln387_fu_1580_p2 or cmp_d_d2_reg_1847);
    ret_V_113_fu_1198_p2 <= std_logic_vector(unsigned(p_0189_0_i_reg_571) + unsigned(ap_const_lv9_5));
    ret_V_114_fu_1209_p3 <= (p_0189_0_i_reg_571 & ap_const_lv3_0);
    ret_V_115_fu_1237_p2 <= std_logic_vector(unsigned(ret_V_114_reg_1679) + unsigned(zext_ln215_fu_1233_p1));
    ret_V_116_fu_1624_p2 <= (ss2_V_q0 and lhs_V_reg_1862);
    ret_V_fu_1395_p2 <= std_logic_vector(unsigned(p_047_0_i_reg_593) + unsigned(ap_const_lv9_5));
    select_ln414_4_fu_1288_p3 <= 
        zext_ln414_7_fu_1272_p1 when (icmp_ln414_reg_1723(0) = '1') else 
        zext_ln414_fu_1269_p1;
    select_ln414_5_fu_1295_p3 <= 
        xor_ln414_fu_1275_p2 when (icmp_ln414_reg_1723(0) = '1') else 
        zext_ln414_fu_1269_p1;
    select_ln414_6_fu_1336_p3 <= 
        tmp_fu_1326_p4 when (icmp_ln414_reg_1723(0) = '1') else 
        shl_ln414_fu_1320_p2;
    select_ln414_fu_1281_p3 <= 
        zext_ln414_fu_1269_p1 when (icmp_ln414_reg_1723(0) = '1') else 
        zext_ln414_7_fu_1272_p1;
    shl_ln414_3_fu_1343_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_9_fu_1312_p1(31-1 downto 0)))));
    shl_ln414_4_fu_1371_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_11_fu_1368_p1(8-1 downto 0)))));
    shl_ln414_fu_1320_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_1266_p1),to_integer(unsigned('0' & zext_ln414_8_fu_1308_p1(31-1 downto 0)))));
    shl_ln_fu_1435_p3 <= (trunc_ln556_fu_1431_p1 & ap_const_lv3_0);

    sk64_V_address0_assign_proc : process(ap_CS_fsm_state66, zext_ln285_4_fu_1517_p1, ap_CS_fsm_state83, grp_hqc_public_key_from_1_fu_1060_pk_V_address0, ap_CS_fsm_state102, zext_ln321_7_fu_1544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            sk64_V_address0 <= zext_ln321_7_fu_1544_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            sk64_V_address0 <= zext_ln285_4_fu_1517_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sk64_V_address0 <= grp_hqc_public_key_from_1_fu_1060_pk_V_address0;
        else 
            sk64_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    sk64_V_address1_assign_proc : process(zext_ln285_reg_1643, ap_CS_fsm_state8, ap_CS_fsm_state26, zext_ln544_83_fu_1401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk64_V_address1 <= zext_ln544_83_fu_1401_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk64_V_address1 <= zext_ln285_reg_1643(9 - 1 downto 0);
        else 
            sk64_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    sk64_V_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state83, grp_hqc_public_key_from_1_fu_1060_pk_V_ce0, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            sk64_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sk64_V_ce0 <= grp_hqc_public_key_from_1_fu_1060_pk_V_ce0;
        else 
            sk64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk64_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            sk64_V_ce1 <= ap_const_logic_1;
        else 
            sk64_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk64_V_d1_assign_proc : process(store_seeds_V_q0, pk64_V_q0, ap_CS_fsm_state8, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk64_V_d1 <= pk64_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk64_V_d1 <= store_seeds_V_q0;
        else 
            sk64_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sk64_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            sk64_V_we1 <= ap_const_logic_1;
        else 
            sk64_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ss1_V_address0 <= grp_shake256_512_ds_fu_924_output_V_address0;

    ss1_V_ce0_assign_proc : process(grp_shake256_512_ds_fu_924_output_V_ce0, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            ss1_V_ce0 <= grp_shake256_512_ds_fu_924_output_V_ce0;
        else 
            ss1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ss1_V_d0 <= grp_shake256_512_ds_fu_924_output_V_d0;

    ss1_V_we0_assign_proc : process(grp_shake256_512_ds_fu_924_output_V_we0, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            ss1_V_we0 <= grp_shake256_512_ds_fu_924_output_V_we0(0);
        else 
            ss1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ss2_V_address0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state111, ss2_V_addr_reg_1875, grp_shake256_512_ds_fu_924_output_V_address0, ap_CS_fsm_state112, zext_ln391_fu_1616_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ss2_V_address0 <= ss2_V_addr_reg_1875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            ss2_V_address0 <= zext_ln391_fu_1616_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            ss2_V_address0 <= grp_shake256_512_ds_fu_924_output_V_address0;
        else 
            ss2_V_address0 <= "XXX";
        end if; 
    end process;


    ss2_V_ce0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state111, grp_shake256_512_ds_fu_924_output_V_ce0, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ss2_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            ss2_V_ce0 <= grp_shake256_512_ds_fu_924_output_V_ce0;
        else 
            ss2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ss2_V_d0_assign_proc : process(ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_d0, ap_CS_fsm_state112, ret_V_116_fu_1624_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ss2_V_d0 <= ret_V_116_fu_1624_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            ss2_V_d0 <= grp_shake256_512_ds_fu_924_output_V_d0;
        else 
            ss2_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ss2_V_we0_assign_proc : process(ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_we0, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ss2_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            ss2_V_we0 <= grp_shake256_512_ds_fu_924_output_V_we0(0);
        else 
            ss2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_address0_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_address0, grp_shake_prng_init_fu_958_shake_prng_state_array_V_address0, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_address0 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_address0 <= grp_shake_prng_fu_684_state_prng_V_address0;
        else 
            state_prng_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_address1_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_address1, grp_shake_prng_init_fu_958_shake_prng_state_array_V_address1, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_address1 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_address1 <= grp_shake_prng_fu_684_state_prng_V_address1;
        else 
            state_prng_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_ce0_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_ce0, grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce0, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_ce0 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_ce0 <= grp_shake_prng_fu_684_state_prng_V_ce0;
        else 
            state_prng_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_ce1_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_ce1, grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce1, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_ce1 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_ce1 <= grp_shake_prng_fu_684_state_prng_V_ce1;
        else 
            state_prng_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_d1_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_d1, grp_shake_prng_init_fu_958_shake_prng_state_array_V_d1, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_d1 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_d1 <= grp_shake_prng_fu_684_state_prng_V_d1;
        else 
            state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_prng_V_we1_assign_proc : process(grp_shake_prng_fu_684_state_prng_V_we1, grp_shake_prng_init_fu_958_shake_prng_state_array_V_we1, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_we1 <= grp_shake_prng_init_fu_958_shake_prng_state_array_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_prng_V_we1 <= grp_shake_prng_fu_684_state_prng_V_we1;
        else 
            state_prng_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address0, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address0, grp_seedexpander_init_fu_1003_state_V_2_address0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_address0 <= grp_seedexpander_init_fu_1003_state_V_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_address0 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_address0 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address0;
        else 
            state_seedexpander_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address1, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address1, grp_seedexpander_init_fu_1003_state_V_2_address1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_address1 <= grp_seedexpander_init_fu_1003_state_V_2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_address1 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_address1 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_address1;
        else 
            state_seedexpander_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce0, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce0, grp_seedexpander_init_fu_1003_state_V_2_ce0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_init_fu_1003_state_V_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_ce0 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce0;
        else 
            state_seedexpander_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce1, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce1, grp_seedexpander_init_fu_1003_state_V_2_ce1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_init_fu_1003_state_V_2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_ce1 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_ce1;
        else 
            state_seedexpander_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_d1, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_d1, grp_seedexpander_init_fu_1003_state_V_2_d1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_d1 <= grp_seedexpander_init_fu_1003_state_V_2_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_d1 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_d1 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_d1;
        else 
            state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state94, grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_we1, grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_we1, grp_seedexpander_init_fu_1003_state_V_2_we1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state51, ap_CS_fsm_state100, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state11, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state70, ap_CS_fsm_state72, ap_CS_fsm_state98, ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state87, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            state_seedexpander_V_we1 <= grp_seedexpander_init_fu_1003_state_V_2_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_seedexpander_V_we1 <= grp_seedexpander_mult_ty_fu_981_state_seedexpander_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_seedexpander_V_we1 <= grp_vect_set_random_fixe_fu_898_state_seedexpander_V_2_we1;
        else 
            state_seedexpander_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_address0_assign_proc : process(ap_CS_fsm_state22, grp_vect_mul_add_fu_742_o_V_address0, grp_vect_add_fu_847_v2_V_address0, grp_reed_muller_decode_fu_1025_store_A_V_address0, grp_vect_copyresize_fu_1121_v_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state57, ap_CS_fsm_state106, ap_CS_fsm_state76, ap_CS_fsm_state53, ap_CS_fsm_state102, zext_ln544_85_fu_1242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            store_A_V_address0 <= zext_ln544_85_fu_1242_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            store_A_V_address0 <= grp_vect_copyresize_fu_1121_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_A_V_address0 <= grp_reed_muller_decode_fu_1025_store_A_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_A_V_address0 <= grp_vect_add_fu_847_v2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_A_V_address0 <= grp_vect_mul_add_fu_742_o_V_address0;
        else 
            store_A_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_A_V_ce0_assign_proc : process(ap_CS_fsm_state22, grp_vect_mul_add_fu_742_o_V_ce0, grp_vect_add_fu_847_v2_V_ce0, grp_reed_muller_decode_fu_1025_store_A_V_ce0, grp_vect_copyresize_fu_1121_v_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state57, ap_CS_fsm_state106, ap_CS_fsm_state76, ap_CS_fsm_state53, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            store_A_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            store_A_V_ce0 <= grp_vect_copyresize_fu_1121_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_A_V_ce0 <= grp_reed_muller_decode_fu_1025_store_A_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_A_V_ce0 <= grp_vect_add_fu_847_v2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_A_V_ce0 <= grp_vect_mul_add_fu_742_o_V_ce0;
        else 
            store_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_ce1_assign_proc : process(grp_vect_mul_add_fu_742_o_V_ce1, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_A_V_ce1 <= grp_vect_mul_add_fu_742_o_V_ce1;
        else 
            store_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_we1_assign_proc : process(grp_vect_mul_add_fu_742_o_V_we1, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_A_V_we1 <= grp_vect_mul_add_fu_742_o_V_we1;
        else 
            store_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_742_store_B_V_address0, grp_vect_set_random_fixe_1_fu_1085_v_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_address0 <= grp_vect_set_random_fixe_1_fu_1085_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_B_V_address0 <= grp_vect_mul_add_fu_742_store_B_V_address0;
        else 
            store_B_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_address1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1085_v_V_address1, grp_vect_copyresize_2_fu_1105_o_V_address1, ap_CS_fsm_state11, ap_CS_fsm_state70, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            store_B_V_address1 <= grp_vect_copyresize_2_fu_1105_o_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_address1 <= grp_vect_set_random_fixe_1_fu_1085_v_V_address1;
        else 
            store_B_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_742_store_B_V_ce0, grp_vect_set_random_fixe_1_fu_1085_v_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state74, ap_CS_fsm_state100, ap_CS_fsm_state104, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_1085_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            store_B_V_ce0 <= grp_vect_mul_add_fu_742_store_B_V_ce0;
        else 
            store_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_ce1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1085_v_V_ce1, grp_vect_copyresize_2_fu_1105_o_V_ce1, ap_CS_fsm_state11, ap_CS_fsm_state70, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            store_B_V_ce1 <= grp_vect_copyresize_2_fu_1105_o_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_ce1 <= grp_vect_set_random_fixe_1_fu_1085_v_V_ce1;
        else 
            store_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_d1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1085_v_V_d1, grp_vect_copyresize_2_fu_1105_o_V_d1, ap_CS_fsm_state11, ap_CS_fsm_state70, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            store_B_V_d1 <= grp_vect_copyresize_2_fu_1105_o_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_d1 <= grp_vect_set_random_fixe_1_fu_1085_v_V_d1;
        else 
            store_B_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_B_V_we1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1085_v_V_we1, grp_vect_copyresize_2_fu_1105_o_V_we1, ap_CS_fsm_state11, ap_CS_fsm_state70, ap_CS_fsm_state53, ap_CS_fsm_state102, ap_CS_fsm_state47, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            store_B_V_we1 <= grp_vect_copyresize_2_fu_1105_o_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            store_B_V_we1 <= grp_vect_set_random_fixe_1_fu_1085_v_V_we1;
        else 
            store_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_address0_assign_proc : process(grp_reed_solomon_encode_fu_791_store_C_V_address0, grp_vect_copyresize_1_fu_1097_o_V_address0, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            store_C_V_address0 <= grp_vect_copyresize_1_fu_1097_o_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            store_C_V_address0 <= grp_reed_solomon_encode_fu_791_store_C_V_address0;
        else 
            store_C_V_address0 <= "XXXX";
        end if; 
    end process;


    store_C_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_791_store_C_V_ce0, grp_vect_copyresize_1_fu_1097_o_V_ce0, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            store_C_V_ce0 <= grp_vect_copyresize_1_fu_1097_o_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            store_C_V_ce0 <= grp_reed_solomon_encode_fu_791_store_C_V_ce0;
        else 
            store_C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_we0_assign_proc : process(grp_vect_copyresize_1_fu_1097_o_V_we0, ap_CS_fsm_state33, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            store_C_V_we0 <= grp_vect_copyresize_1_fu_1097_o_V_we0;
        else 
            store_C_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_address1_assign_proc : process(grp_reed_solomon_decode_fu_871_cdw_V_address1, grp_reed_muller_decode_fu_1025_msg_V_address1, ap_CS_fsm_state78, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_rs_decode_V_address1 <= grp_reed_muller_decode_fu_1025_msg_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            store_rs_decode_V_address1 <= grp_reed_solomon_decode_fu_871_cdw_V_address1;
        else 
            store_rs_decode_V_address1 <= "XXXXXX";
        end if; 
    end process;


    store_rs_decode_V_ce0_assign_proc : process(grp_reed_solomon_decode_fu_871_cdw_V_ce0, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            store_rs_decode_V_ce0 <= grp_reed_solomon_decode_fu_871_cdw_V_ce0;
        else 
            store_rs_decode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_ce1_assign_proc : process(grp_reed_solomon_decode_fu_871_cdw_V_ce1, grp_reed_muller_decode_fu_1025_msg_V_ce1, ap_CS_fsm_state78, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_rs_decode_V_ce1 <= grp_reed_muller_decode_fu_1025_msg_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            store_rs_decode_V_ce1 <= grp_reed_solomon_decode_fu_871_cdw_V_ce1;
        else 
            store_rs_decode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_d1_assign_proc : process(grp_reed_solomon_decode_fu_871_cdw_V_d1, grp_reed_muller_decode_fu_1025_msg_V_d1, ap_CS_fsm_state78, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_rs_decode_V_d1 <= grp_reed_muller_decode_fu_1025_msg_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            store_rs_decode_V_d1 <= grp_reed_solomon_decode_fu_871_cdw_V_d1;
        else 
            store_rs_decode_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_rs_decode_V_we1_assign_proc : process(grp_reed_solomon_decode_fu_871_cdw_V_we1, grp_reed_muller_decode_fu_1025_msg_V_we1, ap_CS_fsm_state78, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            store_rs_decode_V_we1 <= grp_reed_muller_decode_fu_1025_msg_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            store_rs_decode_V_we1 <= grp_reed_solomon_decode_fu_871_cdw_V_we1;
        else 
            store_rs_decode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_address0_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_address0, grp_reed_muller_encode_fu_814_msg_V_address0, ap_CS_fsm_state104, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            store_rs_encode_V_1_address0 <= grp_reed_muller_encode_fu_814_msg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            store_rs_encode_V_1_address0 <= grp_reed_solomon_encode_fu_791_cdw_V_address0;
        else 
            store_rs_encode_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    store_rs_encode_V_1_ce0_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_ce0, grp_reed_muller_encode_fu_814_msg_V_ce0, ap_CS_fsm_state104, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            store_rs_encode_V_1_ce0 <= grp_reed_muller_encode_fu_814_msg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            store_rs_encode_V_1_ce0 <= grp_reed_solomon_encode_fu_791_cdw_V_ce0;
        else 
            store_rs_encode_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_ce1_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_ce1, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            store_rs_encode_V_1_ce1 <= grp_reed_solomon_encode_fu_791_cdw_V_ce1;
        else 
            store_rs_encode_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_we1_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_we1, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            store_rs_encode_V_1_we1 <= grp_reed_solomon_encode_fu_791_cdw_V_we1;
        else 
            store_rs_encode_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_address0_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_address0, grp_reed_muller_encode_fu_814_msg_V_address0, ap_CS_fsm_state55, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            store_rs_encode_V_address0 <= grp_reed_muller_encode_fu_814_msg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            store_rs_encode_V_address0 <= grp_reed_solomon_encode_fu_791_cdw_V_address0;
        else 
            store_rs_encode_V_address0 <= "XXXXXX";
        end if; 
    end process;


    store_rs_encode_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_ce0, grp_reed_muller_encode_fu_814_msg_V_ce0, ap_CS_fsm_state55, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            store_rs_encode_V_ce0 <= grp_reed_muller_encode_fu_814_msg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            store_rs_encode_V_ce0 <= grp_reed_solomon_encode_fu_791_cdw_V_ce0;
        else 
            store_rs_encode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_ce1_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_ce1, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            store_rs_encode_V_ce1 <= grp_reed_solomon_encode_fu_791_cdw_V_ce1;
        else 
            store_rs_encode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_we1_assign_proc : process(grp_reed_solomon_encode_fu_791_cdw_V_we1, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            store_rs_encode_V_we1 <= grp_reed_solomon_encode_fu_791_cdw_V_we1;
        else 
            store_rs_encode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_address0_assign_proc : process(ap_CS_fsm_state7, zext_ln285_fu_1155_p1, icmp_ln284_fu_1143_p2, ap_CS_fsm_state14, zext_ln285_1_fu_1172_p1, ap_CS_fsm_state28, zext_ln285_2_reg_1770, zext_ln285_3_reg_1788, zext_ln285_4_reg_1806, zext_ln285_6_reg_1837, grp_shake_prng_fu_684_output_V_address0, grp_seedexpander_init_fu_1003_seed_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state67, ap_CS_fsm_state84, ap_CS_fsm_state91, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85, zext_ln544_fu_1426_p1, zext_ln285_5_fu_1549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_seeds_V_address0 <= zext_ln285_6_reg_1837(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            store_seeds_V_address0 <= zext_ln285_5_fu_1549_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            store_seeds_V_address0 <= zext_ln285_4_reg_1806(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            store_seeds_V_address0 <= zext_ln285_3_reg_1788(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_seeds_V_address0 <= zext_ln285_2_reg_1770(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            store_seeds_V_address0 <= zext_ln544_fu_1426_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            store_seeds_V_address0 <= zext_ln285_1_fu_1172_p1(3 - 1 downto 0);
        elsif (((icmp_ln284_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            store_seeds_V_address0 <= zext_ln285_fu_1155_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            store_seeds_V_address0 <= grp_seedexpander_init_fu_1003_seed_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            store_seeds_V_address0 <= grp_shake_prng_fu_684_output_V_address0;
        else 
            store_seeds_V_address0 <= "XXX";
        end if; 
    end process;


    store_seeds_V_ce0_assign_proc : process(ap_CS_fsm_state7, icmp_ln284_fu_1143_p2, ap_CS_fsm_state14, ap_CS_fsm_state28, grp_shake_prng_fu_684_output_V_ce0, grp_seedexpander_init_fu_1003_seed_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state67, ap_CS_fsm_state84, ap_CS_fsm_state91, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state43, ap_CS_fsm_state92, ap_CS_fsm_state36, ap_CS_fsm_state68, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((icmp_ln284_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            store_seeds_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            store_seeds_V_ce0 <= grp_seedexpander_init_fu_1003_seed_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            store_seeds_V_ce0 <= grp_shake_prng_fu_684_output_V_ce0;
        else 
            store_seeds_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_d0_assign_proc : process(sk64_V_q0, pk64_V_q0, theta_V_q0, grp_shake_prng_fu_684_output_V_d0, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state67, ap_CS_fsm_state84, ap_CS_fsm_state91, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            store_seeds_V_d0 <= sk64_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            store_seeds_V_d0 <= theta_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_seeds_V_d0 <= pk64_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            store_seeds_V_d0 <= grp_shake_prng_fu_684_output_V_d0;
        else 
            store_seeds_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    store_seeds_V_we0_assign_proc : process(grp_shake_prng_fu_684_output_V_we0, ap_CS_fsm_state27, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state67, ap_CS_fsm_state84, ap_CS_fsm_state91, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            store_seeds_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            store_seeds_V_we0 <= grp_shake_prng_fu_684_output_V_we0;
        else 
            store_seeds_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_address0_assign_proc : process(ap_CS_fsm_state41, zext_ln285_3_fu_1500_p1, ap_CS_fsm_state90, zext_ln285_6_fu_1575_p1, icmp_ln284_6_fu_1563_p2, ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_address0, grp_vect_compare_64_fu_1130_theta_V_address0, ap_CS_fsm_state82, ap_CS_fsm_state92, ap_CS_fsm_state31)
    begin
        if (((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            theta_V_address0 <= zext_ln285_6_fu_1575_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            theta_V_address0 <= zext_ln285_3_fu_1500_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            theta_V_address0 <= grp_vect_compare_64_fu_1130_theta_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            theta_V_address0 <= grp_shake256_512_ds_fu_924_output_V_address0;
        else 
            theta_V_address0 <= "XXX";
        end if; 
    end process;


    theta_V_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state90, icmp_ln284_6_fu_1563_p2, ap_CS_fsm_state94, grp_shake256_512_ds_fu_924_output_V_ce0, grp_vect_compare_64_fu_1130_theta_V_ce0, ap_CS_fsm_state82, ap_CS_fsm_state92, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((icmp_ln284_6_fu_1563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90)))) then 
            theta_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            theta_V_ce0 <= grp_vect_compare_64_fu_1130_theta_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            theta_V_ce0 <= grp_shake256_512_ds_fu_924_output_V_ce0;
        else 
            theta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_we0_assign_proc : process(grp_shake256_512_ds_fu_924_output_V_we0, ap_CS_fsm_state82, ap_CS_fsm_state92, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            theta_V_we0 <= grp_shake256_512_ds_fu_924_output_V_we0(0);
        else 
            theta_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_1418_p3 <= t_V_reg_605(3 downto 3);
    tmp_V_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(store_A_V_load_reg_1718),64));
    
    tmp_fu_1326_p4_proc : process(shl_ln414_fu_1320_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_fu_1326_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln414_fu_1320_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_fu_1326_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_fu_1326_p4_i) := shl_ln414_fu_1320_p2(64-1-tmp_fu_1326_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_1326_p4 <= resvalue(64-1 downto 0);
    end process;

    trunc_ln45_fu_1138_p1 <= seed_bytesize_V(7 - 1 downto 0);
    trunc_ln555_fu_1229_p1 <= p_095_0_i_reg_582(3 - 1 downto 0);
    trunc_ln556_fu_1431_p1 <= t_V_reg_605(3 - 1 downto 0);
    trunc_ln717_1_fu_1479_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln717_2_fu_1554_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln717_fu_1177_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln802_fu_1453_p1 <= r_V_fu_1447_p2(8 - 1 downto 0);

    uv2_V_address0_assign_proc : process(ap_CS_fsm_state108, ap_CS_fsm_state110, grp_reed_muller_encode_fu_814_cdw_V_address0, grp_vect_add_fu_847_o_V_address0, grp_vect_compare_fu_1068_uv2_V_address0, ap_CS_fsm_state104, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            uv2_V_address0 <= grp_vect_compare_fu_1068_uv2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_address0 <= grp_vect_add_fu_847_o_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_address0 <= grp_reed_muller_encode_fu_814_cdw_V_address0;
        else 
            uv2_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_address1_assign_proc : process(grp_reed_muller_encode_fu_814_cdw_V_address1, grp_vect_add_fu_847_o_V_address1, grp_vect_copyresize_fu_1121_o_V_address1, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            uv2_V_address1 <= grp_vect_copyresize_fu_1121_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_address1 <= grp_vect_add_fu_847_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_address1 <= grp_reed_muller_encode_fu_814_cdw_V_address1;
        else 
            uv2_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_ce0_assign_proc : process(ap_CS_fsm_state108, ap_CS_fsm_state110, grp_reed_muller_encode_fu_814_cdw_V_ce0, grp_vect_add_fu_847_o_V_ce0, grp_vect_compare_fu_1068_uv2_V_ce0, ap_CS_fsm_state104, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            uv2_V_ce0 <= grp_vect_compare_fu_1068_uv2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_ce0 <= grp_vect_add_fu_847_o_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_ce0 <= grp_reed_muller_encode_fu_814_cdw_V_ce0;
        else 
            uv2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_ce1_assign_proc : process(grp_reed_muller_encode_fu_814_cdw_V_ce1, grp_vect_add_fu_847_o_V_ce1, grp_vect_copyresize_fu_1121_o_V_ce1, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            uv2_V_ce1 <= grp_vect_copyresize_fu_1121_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_ce1 <= grp_vect_add_fu_847_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_ce1 <= grp_reed_muller_encode_fu_814_cdw_V_ce1;
        else 
            uv2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_d1_assign_proc : process(grp_reed_muller_encode_fu_814_cdw_V_d1, grp_vect_add_fu_847_o_V_d1, grp_vect_copyresize_fu_1121_o_V_d1, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            uv2_V_d1 <= grp_vect_copyresize_fu_1121_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_d1 <= grp_vect_add_fu_847_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_d1 <= grp_reed_muller_encode_fu_814_cdw_V_d1;
        else 
            uv2_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    uv2_V_we1_assign_proc : process(grp_reed_muller_encode_fu_814_cdw_V_we1, grp_vect_add_fu_847_o_V_we1, grp_vect_copyresize_fu_1121_o_V_we1, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            uv2_V_we1 <= grp_vect_copyresize_fu_1121_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            uv2_V_we1 <= grp_vect_add_fu_847_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            uv2_V_we1 <= grp_reed_muller_encode_fu_814_cdw_V_we1;
        else 
            uv2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1355_fu_1590_p2 <= (result_fu_1585_p2 xor ap_const_lv1_1);
    xor_ln414_2_fu_1302_p2 <= (select_ln414_fu_1281_p3 xor ap_const_lv7_3F);
    xor_ln414_fu_1275_p2 <= (zext_ln414_fu_1269_p1 xor ap_const_lv7_3F);
    zext_ln215_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_095_0_i_reg_582),12));
    zext_ln285_1_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i54_reg_560),64));
    zext_ln285_2_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i67_reg_617),64));
    zext_ln285_3_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i74_reg_628),64));
    zext_ln285_4_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i81_reg_639),64));
    zext_ln285_5_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i88_reg_650),64));
    zext_ln285_6_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i96_reg_662),64));
    zext_ln285_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i53_reg_549),64));
    zext_ln321_7_fu_1544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_1538_p2),64));
    zext_ln321_fu_1534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i88_reg_650),4));
    zext_ln391_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_673),64));
    zext_ln414_10_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln414_2_fu_1302_p2),64));
    zext_ln414_11_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln555_reg_1697),8));
    zext_ln414_7_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_reg_1713),7));
    zext_ln414_8_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_5_fu_1295_p3),64));
    zext_ln414_9_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_4_fu_1288_p3),64));
    zext_ln414_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_reg_1708),7));
    zext_ln544_82_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_113_fu_1198_p2),64));
    zext_ln544_83_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_1395_p2),64));
    zext_ln544_84_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_047_0_i_reg_593),64));
    zext_ln544_85_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_115_fu_1237_p2),64));
    zext_ln544_86_fu_1457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_605),64));
    zext_ln544_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1418_p3),64));
    zext_ln717_1_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_1_fu_1479_p1),8));
    zext_ln717_2_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_2_fu_1554_p1),8));
    zext_ln717_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_fu_1177_p1),8));
    zext_ln808_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1435_p3),64));
end behav;
