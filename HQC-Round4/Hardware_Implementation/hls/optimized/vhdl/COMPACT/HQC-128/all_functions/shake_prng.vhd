-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_prng is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outlen : IN STD_LOGIC_VECTOR (3 downto 0);
    state_prng_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_prng_V_ce0 : OUT STD_LOGIC;
    state_prng_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_prng_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_prng_V_ce1 : OUT STD_LOGIC;
    state_prng_V_we1 : OUT STD_LOGIC;
    state_prng_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of shake_prng is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cnt_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cnt_reg_365 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln44_fu_210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln44_reg_371 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_fu_214_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln45_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_227_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln44_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_V_fu_252_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal outputwordsize_assig_fu_261_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_reg_411 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_180_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_ap_done : STD_LOGIC;
    signal i_1_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_419 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ret_V_26_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_26_reg_427 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln887_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_V_1_fu_338_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln69_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_180_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_180_state_V_4_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_assign_reg_137 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_0204_0_i_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_0201_i_reg_159 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_180_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln58_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_2_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln301_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_state_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_1_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_1_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_fu_242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_fu_256_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_fu_265_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_2_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1595_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln700_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_4_ce0 : OUT STD_LOGIC;
        -- state_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_4_ce1 : OUT STD_LOGIC;
        -- state_V_4_we1 : OUT STD_LOGIC;
        -- state_V_4_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;



begin
    -- grp_KeccakF1600_StatePer_fu_180 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_180_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_180_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_180_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_180_ap_ready,
        -- state_V_4_address0 => grp_KeccakF1600_StatePer_fu_180_state_V_4_address0,
        -- state_V_4_ce0 => grp_KeccakF1600_StatePer_fu_180_state_V_4_ce0,
        -- state_V_4_q0 => state_prng_V_q0,
        -- state_V_4_address1 => grp_KeccakF1600_StatePer_fu_180_state_V_4_address1,
        -- state_V_4_ce1 => grp_KeccakF1600_StatePer_fu_180_state_V_4_ce1,
        -- state_V_4_we1 => grp_KeccakF1600_StatePer_fu_180_state_V_4_we1,
        -- state_V_4_d1 => grp_KeccakF1600_StatePer_fu_180_state_V_4_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_180_ap_start;
  state_V_q0_permute <= state_prng_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_180_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_180_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_180_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_180_state_V_4_d1       <= state_V_d1_permute;



    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_180_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_180_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln58_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_KeccakF1600_StatePer_fu_180_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_180_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_180_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakF1600_StatePer_fu_180_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_op_assign_reg_169 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_op_assign_reg_169 <= i_1_reg_419;
            end if; 
        end if;
    end process;

    op2_assign_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                op2_assign_reg_137 <= i_reg_385;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                op2_assign_reg_137 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0201_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln45_fu_233_p2 = ap_const_lv1_0) or (icmp_ln44_fu_222_p2 = ap_const_lv1_0)))) then 
                p_0201_i_reg_159 <= outputwordsize_assig_fu_261_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln63_fu_314_p2 = ap_const_lv1_0) or (icmp_ln887_fu_302_p2 = ap_const_lv1_0)))) then 
                p_0201_i_reg_159 <= sub_ln69_fu_344_p2;
            end if; 
        end if;
    end process;

    p_0204_0_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln45_fu_233_p2 = ap_const_lv1_0) or (icmp_ln44_fu_222_p2 = ap_const_lv1_0)))) then 
                p_0204_0_i_reg_149 <= offset_V_fu_252_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln63_fu_314_p2 = ap_const_lv1_0) or (icmp_ln887_fu_302_p2 = ap_const_lv1_0)))) then 
                p_0204_0_i_reg_149 <= offset_V_1_fu_338_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cnt_reg_365 <= cnt_fu_200_p1;
                trunc_ln45_reg_376 <= trunc_ln45_fu_214_p1;
                    zext_ln44_reg_371(7 downto 0) <= zext_ln44_fu_210_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_1_reg_419 <= i_1_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_385 <= i_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakF1600_StatePer_fu_180_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    lhs_V_reg_411(10 downto 0) <= lhs_V_fu_294_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_314_p2 = ap_const_lv1_1) and (icmp_ln887_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ret_V_26_reg_427 <= ret_V_26_fu_324_p2;
            end if;
        end if;
    end process;
    zext_ln44_reg_371(8) <= '0';
    lhs_V_reg_411(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln44_fu_222_p2, icmp_ln45_fu_233_p2, ap_CS_fsm_state6, grp_KeccakF1600_StatePer_fu_180_ap_done, ap_CS_fsm_state7, icmp_ln887_fu_302_p2, icmp_ln63_fu_314_p2, ap_CS_fsm_state5, icmp_ln58_fu_288_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln45_fu_233_p2 = ap_const_lv1_0) or (icmp_ln44_fu_222_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln58_fu_288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_KeccakF1600_StatePer_fu_180_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln63_fu_314_p2 = ap_const_lv1_0) or (icmp_ln887_fu_302_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln49_fu_242_p2 <= std_logic_vector(unsigned(zext_ln44_reg_371) + unsigned(zext_ln49_1_fu_238_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln58_fu_288_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln58_fu_288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln58_fu_288_p2)
    begin
        if (((icmp_ln58_fu_288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_200_p1 <= state_prng_V_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_180_ap_start <= grp_KeccakF1600_StatePer_fu_180_ap_start_reg;
    i_1_fu_308_p2 <= std_logic_vector(unsigned(i_op_assign_reg_169) + unsigned(ap_const_lv5_1));
    i_fu_227_p2 <= std_logic_vector(unsigned(op2_assign_reg_137) + unsigned(ap_const_lv3_1));
    icmp_ln44_fu_222_p2 <= "1" when (unsigned(zext_ln44_1_fu_218_p1) < unsigned(cnt_reg_365)) else "0";
    icmp_ln45_fu_233_p2 <= "1" when (unsigned(op2_assign_reg_137) < unsigned(trunc_ln45_reg_376)) else "0";
    icmp_ln58_fu_288_p2 <= "1" when (p_0201_i_reg_159 = ap_const_lv8_0) else "0";
    icmp_ln63_fu_314_p2 <= "1" when (unsigned(zext_ln1595_fu_298_p1) < unsigned(p_0201_i_reg_159)) else "0";
    icmp_ln887_fu_302_p2 <= "1" when (unsigned(i_op_assign_reg_169) < unsigned(ap_const_lv5_11)) else "0";
    lhs_V_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0204_0_i_reg_149),12));
    offset_V_1_fu_338_p2 <= std_logic_vector(unsigned(zext_ln700_fu_334_p1) + unsigned(p_0204_0_i_reg_149));
    offset_V_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_137),11));
    offset_state_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_fu_200_p1));

    output_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, zext_ln49_fu_283_p1, zext_ln544_fu_361_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address0 <= zext_ln544_fu_361_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= zext_ln49_fu_283_p1(3 - 1 downto 0);
        else 
            output_V_address0 <= "XXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= state_prng_V_q0;

    output_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outputwordsize_assig_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln53_fu_256_p2),8));
    ret_V_26_fu_324_p2 <= std_logic_vector(unsigned(lhs_V_reg_411) + unsigned(rhs_V_fu_320_p1));
    ret_V_fu_350_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_169));
    rhs_V_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_169),12));
        sext_ln301_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_272_p2),64));


    state_prng_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_180_state_V_4_address0, zext_ln49_2_fu_247_p1, zext_ln65_fu_329_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_address0 <= zext_ln65_fu_329_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_prng_V_address0 <= zext_ln49_2_fu_247_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_prng_V_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_address0 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_address0;
        else 
            state_prng_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_180_state_V_4_address1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_prng_V_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_address1 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_address1;
        else 
            state_prng_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_180_state_V_4_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            state_prng_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_ce0 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_ce0;
        else 
            state_prng_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_180_state_V_4_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_prng_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_ce1 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_ce1;
        else 
            state_prng_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_180_state_V_4_d1, sext_ln301_fu_278_p1, zext_ln214_fu_356_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_d1 <= zext_ln214_fu_356_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_prng_V_d1 <= sext_ln301_fu_278_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_d1 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_d1;
        else 
            state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_prng_V_we1_assign_proc : process(ap_CS_fsm_state3, icmp_ln44_fu_222_p2, icmp_ln45_fu_233_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln887_fu_302_p2, icmp_ln63_fu_314_p2, grp_KeccakF1600_StatePer_fu_180_state_V_4_we1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln45_fu_233_p2 = ap_const_lv1_0) or (icmp_ln44_fu_222_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln63_fu_314_p2 = ap_const_lv1_0) or (icmp_ln887_fu_302_p2 = ap_const_lv1_0))))) then 
            state_prng_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_prng_V_we1 <= grp_KeccakF1600_StatePer_fu_180_state_V_4_we1;
        else 
            state_prng_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln53_fu_256_p2 <= std_logic_vector(unsigned(trunc_ln45_reg_376) - unsigned(op2_assign_reg_137));
    sub_ln54_fu_272_p2 <= std_logic_vector(unsigned(zext_ln54_fu_265_p1) - unsigned(zext_ln54_2_fu_268_p1));
    sub_ln69_fu_344_p2 <= std_logic_vector(unsigned(p_0201_i_reg_159) - unsigned(zext_ln1595_fu_298_p1));
    trunc_ln45_fu_214_p1 <= outlen(3 - 1 downto 0);
    zext_ln1595_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_169),8));
    zext_ln214_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_350_p2),64));
    zext_ln44_1_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_137),8));
    zext_ln44_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_204_p2),9));
    zext_ln49_1_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_137),9));
    zext_ln49_2_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_242_p2),64));
    zext_ln49_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_137),64));
    zext_ln544_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_26_reg_427),64));
    zext_ln54_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_137),9));
    zext_ln54_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_365),9));
    zext_ln65_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_169),64));
    zext_ln700_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_169),11));
end behav;
