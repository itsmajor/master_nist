-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_solomon_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    msg_V_ce1 : OUT STD_LOGIC;
    msg_V_we1 : OUT STD_LOGIC;
    msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_solomon_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_13E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111110";
    constant ap_const_lv64_13F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv9_13E : STD_LOGIC_VECTOR (8 downto 0) := "100111110";
    constant ap_const_lv9_16C : STD_LOGIC_VECTOR (8 downto 0) := "101101100";
    constant ap_const_lv12_4F : STD_LOGIC_VECTOR (11 downto 0) := "000001001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_19A : STD_LOGIC_VECTOR (9 downto 0) := "0110011010";
    constant ap_const_lv9_3E : STD_LOGIC_VECTOR (8 downto 0) := "000111110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_1E : STD_LOGIC_VECTOR (8 downto 0) := "000011110";
    constant ap_const_lv7_3E : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alpha_ij_pow_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha_ij_pow_V_ce0 : STD_LOGIC;
    signal alpha_ij_pow_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks2_ce0 : STD_LOGIC;
    signal masks2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_ce0 : STD_LOGIC;
    signal index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks3_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks3_ce0 : STD_LOGIC;
    signal masks3_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_ce0 : STD_LOGIC;
    signal masks4_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_array_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_array_V_ce0 : STD_LOGIC;
    signal exp_array_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rs_mem_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_gf_mul_fu_1099_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_1099_ap_done : STD_LOGIC;
    signal grp_gf_inverse_fu_1091_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1133 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_gf_inverse_fu_1091_ap_ready : STD_LOGIC;
    signal grp_gf_inverse_fu_1091_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal reg_1139 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_gf_mul_fu_1099_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal beta_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1152 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal i_fu_1164_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_1181_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_1204_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_4_fu_1231_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rhs_V_9_reg_2365 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln69_fu_1252_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_reg_2370 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_V_fu_1264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_2378 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs_mem_1_addr_6_reg_2383 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln69_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rs_mem_1_addr_4_reg_2388 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln71_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_1307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_V_reg_2411 : STD_LOGIC_VECTOR (5 downto 0);
    signal cdw_V_load_reg_2416 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal alpha_ij_pow_V_load_reg_2421 : STD_LOGIC_VECTOR (7 downto 0);
    signal syndrome_local_V_1_fu_1319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal rs_mem_1_addr_5_reg_2431 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln120_fu_1325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln120_reg_2436 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mu_add_V_fu_1335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mu_add_V_reg_2444 : STD_LOGIC_VECTOR (4 downto 0);
    signal deg_X_V_fu_1341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_X_V_reg_2453 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln120_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_2458 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_1391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_reg_2473 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_fu_1416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_reg_2479 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_fu_1433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_reg_2484 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_fu_1451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_reg_2489 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_1_reg_2494 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln140_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_86_fu_1495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_86_reg_2517 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_p_V_fu_1513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_p_V_reg_2522 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln151_fu_1519_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln151_reg_2527 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_83_fu_1530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_83_reg_2532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal rs_mem_1_addr_11_reg_2537 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_V_7_fu_1551_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_7_reg_2542 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigma_local_V_1_fu_1557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln899_1_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_2555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln151_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_9_fu_1600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_9_reg_2570 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs_mem_1_load_6_reg_2575 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_2_fu_1630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_V_8_fu_1642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_8_reg_2593 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln277_fu_1636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_6_fu_1654_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_V_6_reg_2606 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ret_V_66_fu_1672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_66_reg_2611 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_load_reg_2621 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal rs_mem_1_addr_16_reg_2631 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_61_fu_1757_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_61_reg_2636 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln180_fu_1763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_reg_2641 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal lhs_V_15_fu_1777_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_15_reg_2649 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_fu_1767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_1_fu_1817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_1_reg_2670 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ret_V_89_fu_1831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_89_reg_2675 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_addr_14_reg_2680 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal icmp_ln183_fu_1847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_8_fu_1883_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_8_reg_2698 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_10_fu_1889_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_7_fu_1924_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_V_11_fu_1941_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_11_reg_2719 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln887_10_fu_1935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_2729 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal retrieved_mask_V_reg_2744 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal rhs_V_24_reg_2750 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_j_V_addr_1_reg_2755 : STD_LOGIC_VECTOR (3 downto 0);
    signal delta_counter_V_fu_2010_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_V_14_fu_2022_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_14_reg_2768 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln544_62_fu_2028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_62_reg_2773 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln226_fu_2016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln232_fu_2033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_9_fu_2054_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_9_reg_2791 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_fu_2060_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_reg_2796 : STD_LOGIC_VECTOR (4 downto 0);
    signal error_values_a_V_fu_2064_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln236_fu_2074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_2110_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_V_reg_2814 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_16_fu_2120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_16_reg_2819 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_j_V_addr_1_reg_2824 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln214_fu_2126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln214_reg_2829 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_V_12_fu_2170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_12_reg_2847 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln887_12_fu_2164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_reg_2857 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal rs_mem_1_addr_23_reg_2872 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_5_fu_2241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_5_reg_2877 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal delta_counter_V_1_fu_2251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal delta_counter_V_1_reg_2882 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_13_fu_2263_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_13_reg_2890 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal icmp_ln887_13_fu_2257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cdw_V_addr_7_reg_2900 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_15_fu_2302_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_15_reg_2909 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal icmp_ln887_15_fu_2296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce0 : STD_LOGIC;
    signal rs_mem_1_we0 : STD_LOGIC;
    signal rs_mem_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce1 : STD_LOGIC;
    signal rs_mem_1_we1 : STD_LOGIC;
    signal rs_mem_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_j_V_ce0 : STD_LOGIC;
    signal beta_j_V_we0 : STD_LOGIC;
    signal beta_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_j_V_ce0 : STD_LOGIC;
    signal e_j_V_we0 : STD_LOGIC;
    signal e_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce0 : STD_LOGIC;
    signal X_sigma_p_V_we0 : STD_LOGIC;
    signal X_sigma_p_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce1 : STD_LOGIC;
    signal X_sigma_p_V_we1 : STD_LOGIC;
    signal X_sigma_p_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_add_fft_fu_1078_ap_start : STD_LOGIC;
    signal grp_add_fft_fu_1078_ap_done : STD_LOGIC;
    signal grp_add_fft_fu_1078_ap_idle : STD_LOGIC;
    signal grp_add_fft_fu_1078_ap_ready : STD_LOGIC;
    signal grp_add_fft_fu_1078_rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_fft_fu_1078_rs_mem_1_ce0 : STD_LOGIC;
    signal grp_add_fft_fu_1078_rs_mem_1_we0 : STD_LOGIC;
    signal grp_add_fft_fu_1078_rs_mem_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_inverse_fu_1091_ap_start : STD_LOGIC;
    signal grp_gf_inverse_fu_1091_ap_idle : STD_LOGIC;
    signal grp_gf_inverse_fu_1091_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1099_ap_start : STD_LOGIC;
    signal grp_gf_mul_fu_1099_ap_idle : STD_LOGIC;
    signal grp_gf_mul_fu_1099_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1099_b_V : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln221_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i47_reg_682 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln221_1_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i53_reg_693 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln221_2_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i59_reg_704 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln221_3_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_088_0_i_reg_715 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_726 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_063_0_i_reg_738 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_6_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_copy_V_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_10_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_5_reg_783 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_7_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_5_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_reg_817 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_9_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_28_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_0_i_reg_846 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0390_1_i_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_1_i_reg_869 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_01206_0_i_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_01077_0_i_reg_892 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal indvars_iv_i_reg_903 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0249_0_i_reg_915 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_0260_0_i_reg_926 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_9_fu_1918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0312_0_i_reg_937 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_949 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0426_1_i_reg_961 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal p_0260_1_i_reg_973 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_044_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_034_reg_996 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0243_0_i_reg_1008 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_039_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0312_1_i_reg_1031 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal p_0426_2_i_reg_1043 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_022_0_i_reg_1055 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal p_071_0_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_add_fft_fu_1078_ap_start_reg : STD_LOGIC := '0';
    signal grp_gf_inverse_fu_1091_ap_start_reg : STD_LOGIC := '0';
    signal grp_gf_mul_fu_1099_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln222_fu_1170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_1193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_fu_1247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_54_fu_1281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_53_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_1474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_55_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_1_fu_1546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_2_fu_1585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_1_fu_1595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_1611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_57_fu_1678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_1692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_2_fu_1706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_1786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_fu_1812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_56_fu_1801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_2_fu_1842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_1862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_fu_1878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_59_fu_1930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_3_fu_1957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_1978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_60_fu_1962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_61_fu_1983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_1_fu_2049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_65_fu_2105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln239_fu_2133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_5_fu_2186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_2207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_63_fu_2191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_5_fu_2222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_4_fu_2284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_64_fu_2269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_67_fu_2318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_66_fu_2323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_53_fu_1313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_12_fu_1739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_1746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_fu_1911_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_fu_2000_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_fu_1187_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_2_fu_1210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_1_fu_1214_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln321_4_fu_1237_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_2_fu_1241_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_54_fu_1286_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln72_fu_1292_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_fu_1296_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln209_1_fu_1351_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_fu_1347_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal deg_X_sigma_p_V_fu_1355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln895_fu_1361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln130_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_2_fu_1399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_80_fu_1404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_48_fu_1410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_81_fu_1422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_50_fu_1427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_82_fu_1439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_52_fu_1445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln899_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_84_fu_1484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_85_fu_1490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_87_fu_1502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_56_fu_1508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_fu_1522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1355_fu_1536_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln719_fu_1540_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln152_1_fu_1575_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln152_fu_1579_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_68_fu_1590_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln899_1_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1355_1_fu_1616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_69_fu_1624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1352_fu_1660_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_65_fu_1664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_58_fu_1683_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_fu_1686_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_4_fu_1697_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_1_fu_1700_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_18_fu_1711_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_67_fu_1715_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_1721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_15_fu_1729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln719_fu_1735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1354_fu_1753_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_fu_1773_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_62_fu_1795_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1354_1_fu_1791_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1357_fu_1806_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_88_fu_1825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1357_1_fu_1837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_21_fu_1852_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln184_fu_1856_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_70_fu_1867_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_71_fu_1872_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1357_fu_1895_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_90_fu_1900_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_73_fu_1906_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_fu_1947_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_fu_1951_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_11_fu_1967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_2_fu_1988_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln700_fu_1995_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_fu_2007_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln234_fu_2039_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln234_fu_2043_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln236_1_fu_2070_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_77_fu_2080_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1372_fu_2085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1372_fu_2091_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_78_fu_2097_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_2116_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1355_2_fu_2143_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_91_fu_2137_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_76_fu_2151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_4_fu_2176_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_2_fu_2180_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_14_fu_2196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln246_fu_2202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1355_1_fu_2212_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln700_20_fu_2216_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln321_3_fu_2227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_74_fu_2235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_4_fu_2247_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln719_3_fu_2274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_2_fu_2278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_2308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_79_fu_2312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);

    component add_fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rs_mem_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rs_mem_1_ce0 : OUT STD_LOGIC;
        rs_mem_1_we0 : OUT STD_LOGIC;
        rs_mem_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rs_mem_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decozec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component reed_solomon_decoAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoDeQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    alpha_ij_pow_V_U : component reed_solomon_decoyd2
    generic map (
        DataWidth => 8,
        AddressRange => 3792,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_ij_pow_V_address0,
        ce0 => alpha_ij_pow_V_ce0,
        q0 => alpha_ij_pow_V_q0);

    masks2_U : component reed_solomon_decozec
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks2_address0,
        ce0 => masks2_ce0,
        q0 => masks2_q0);

    index_U : component reed_solomon_decoAem
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_address0,
        ce0 => index_ce0,
        q0 => index_q0);

    masks3_U : component reed_solomon_decozec
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks3_address0,
        ce0 => masks3_ce0,
        q0 => masks3_q0);

    masks4_U : component reed_solomon_decozec
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks4_address0,
        ce0 => masks4_ce0,
        q0 => masks4_q0);

    exp_array_V_U : component reed_solomon_decoDeQ
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_array_V_address0,
        ce0 => exp_array_V_ce0,
        q0 => exp_array_V_q0);

    rs_mem_1_U : component reed_solomon_decoEe0
    generic map (
        DataWidth => 8,
        AddressRange => 666,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rs_mem_1_address0,
        ce0 => rs_mem_1_ce0,
        we0 => rs_mem_1_we0,
        d0 => rs_mem_1_d0,
        q0 => rs_mem_1_q0,
        address1 => rs_mem_1_address1,
        ce1 => rs_mem_1_ce1,
        we1 => rs_mem_1_we1,
        d1 => rs_mem_1_d1,
        q1 => rs_mem_1_q1);

    beta_j_V_U : component reed_solomon_decoFfa
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_j_V_address0,
        ce0 => beta_j_V_ce0,
        we0 => beta_j_V_we0,
        d0 => beta_j_V_d0,
        q0 => beta_j_V_q0);

    e_j_V_U : component reed_solomon_decoFfa
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_j_V_address0,
        ce0 => e_j_V_ce0,
        we0 => e_j_V_we0,
        d0 => e_j_V_d0,
        q0 => e_j_V_q0);

    X_sigma_p_V_U : component reed_solomon_decoHfu
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_sigma_p_V_address0,
        ce0 => X_sigma_p_V_ce0,
        we0 => X_sigma_p_V_we0,
        d0 => X_sigma_p_V_d0,
        q0 => X_sigma_p_V_q0,
        address1 => X_sigma_p_V_address1,
        ce1 => X_sigma_p_V_ce1,
        we1 => X_sigma_p_V_we1,
        d1 => X_sigma_p_V_d1);

    grp_add_fft_fu_1078 : component add_fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_fft_fu_1078_ap_start,
        ap_done => grp_add_fft_fu_1078_ap_done,
        ap_idle => grp_add_fft_fu_1078_ap_idle,
        ap_ready => grp_add_fft_fu_1078_ap_ready,
        rs_mem_1_address0 => grp_add_fft_fu_1078_rs_mem_1_address0,
        rs_mem_1_ce0 => grp_add_fft_fu_1078_rs_mem_1_ce0,
        rs_mem_1_we0 => grp_add_fft_fu_1078_rs_mem_1_we0,
        rs_mem_1_d0 => grp_add_fft_fu_1078_rs_mem_1_d0,
        rs_mem_1_q0 => rs_mem_1_q0);

    grp_gf_inverse_fu_1091 : component gf_inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_inverse_fu_1091_ap_start,
        ap_done => grp_gf_inverse_fu_1091_ap_done,
        ap_idle => grp_gf_inverse_fu_1091_ap_idle,
        ap_ready => grp_gf_inverse_fu_1091_ap_ready,
        a_V => grp_gf_inverse_fu_1091_a_V,
        ap_return => grp_gf_inverse_fu_1091_ap_return);

    grp_gf_mul_fu_1099 : component gf_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_mul_fu_1099_ap_start,
        ap_done => grp_gf_mul_fu_1099_ap_done,
        ap_idle => grp_gf_mul_fu_1099_ap_idle,
        ap_ready => grp_gf_mul_fu_1099_ap_ready,
        a_V => grp_gf_mul_fu_1099_a_V,
        b_V => grp_gf_mul_fu_1099_b_V,
        ap_return => grp_gf_mul_fu_1099_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_add_fft_fu_1078_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_fft_fu_1078_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln120_fu_1329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_add_fft_fu_1078_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_fft_fu_1078_ap_ready = ap_const_logic_1)) then 
                    grp_add_fft_fu_1078_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gf_inverse_fu_1091_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_inverse_fu_1091_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((icmp_ln236_fu_2074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((icmp_ln120_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_gf_inverse_fu_1091_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_inverse_fu_1091_ap_ready = ap_const_logic_1)) then 
                    grp_gf_inverse_fu_1091_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gf_mul_fu_1099_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_mul_fu_1099_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((icmp_ln232_fu_2033_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
                    grp_gf_mul_fu_1099_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_mul_fu_1099_ap_ready = ap_const_logic_1)) then 
                    grp_gf_mul_fu_1099_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    deg_sigma_copy_V_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                deg_sigma_copy_V_reg_759 <= deg_sigma_V_reg_2479;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                deg_sigma_copy_V_reg_759 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i47_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_1158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i47_reg_682 <= ap_const_lv6_0;
            elsif (((icmp_ln221_1_fu_1175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i47_reg_682 <= i_2_fu_1181_p2;
            end if; 
        end if;
    end process;

    i_0_i53_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_1_fu_1175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i53_reg_693 <= ap_const_lv6_0;
            elsif (((icmp_ln221_2_fu_1198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i53_reg_693 <= i_3_fu_1204_p2;
            end if; 
        end if;
    end process;

    i_0_i59_reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_2_fu_1198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i59_reg_704 <= ap_const_lv6_0;
            elsif (((icmp_ln221_3_fu_1225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i59_reg_704 <= i_4_fu_1231_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_671 <= ap_const_lv5_0;
            elsif (((icmp_ln221_fu_1158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_671 <= i_fu_1164_p2;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_903_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                indvars_iv_i_reg_903 <= ap_const_lv5_2;
            elsif (((icmp_ln183_fu_1847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                indvars_iv_i_reg_903 <= i_V_10_fu_1889_p2;
            end if; 
        end if;
    end process;

    lhs_V_4_reg_817_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                lhs_V_4_reg_817 <= mu_add_V_reg_2444;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_4_reg_817 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    lhs_V_5_reg_807_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                lhs_V_5_reg_807 <= p_0390_1_i_reg_858;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_5_reg_807 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_6_reg_749_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                lhs_V_6_reg_749 <= syndrome_local_V_1_fu_1319_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                lhs_V_6_reg_749 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_9_reg_828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    lhs_V_9_reg_828 <= sigma_local_V_1_fu_1557_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    lhs_V_9_reg_828 <= reg_1139;
                end if;
            end if; 
        end if;
    end process;

    p_01077_0_i_reg_892_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                p_01077_0_i_reg_892 <= j_V_6_reg_2606;
            elsif (((icmp_ln277_fu_1636_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_01077_0_i_reg_892 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_01206_0_i_reg_880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_1648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_01206_0_i_reg_880 <= i_V_8_reg_2593;
            elsif (((grp_add_fft_fu_1078_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                p_01206_0_i_reg_880 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_022_0_i_reg_1055_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_12_fu_2164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                p_022_0_i_reg_1055 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                p_022_0_i_reg_1055 <= i_V_13_reg_2890;
            end if; 
        end if;
    end process;

    p_0243_0_i_reg_1008_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                p_0243_0_i_reg_1008 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0243_0_i_reg_1008 <= k_V_reg_2814;
            end if; 
        end if;
    end process;

    p_0249_0_i_reg_915_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0249_0_i_reg_915 <= j_V_8_reg_2698;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                p_0249_0_i_reg_915 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                p_0260_0_i_reg_926 <= j_V_7_fu_1924_p2;
            elsif (((icmp_ln180_fu_1767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                p_0260_0_i_reg_926 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0260_1_i_reg_973_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0260_1_i_reg_973 <= j_V_9_reg_2791;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then 
                p_0260_1_i_reg_973 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_0312_0_i_reg_937_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                p_0312_0_i_reg_937 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                p_0312_0_i_reg_937 <= delta_counter_V_fu_2010_p2;
            end if; 
        end if;
    end process;

    p_0312_1_i_reg_1031_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                p_0312_1_i_reg_1031 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                p_0312_1_i_reg_1031 <= delta_counter_V_1_reg_2882;
            end if; 
        end if;
    end process;

    p_034_reg_996_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_034_reg_996 <= error_values_a_V_fu_2064_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then 
                p_034_reg_996 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0390_1_i_reg_858_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0390_1_i_reg_858 <= d_V_2_fu_1630_p2;
            elsif (((icmp_ln140_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_0390_1_i_reg_858 <= d_V_1_reg_2494;
            end if; 
        end if;
    end process;

    p_039_reg_1019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                p_039_reg_1019 <= ap_const_lv8_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_039_reg_1019 <= grp_gf_mul_fu_1099_ap_return;
            end if; 
        end if;
    end process;

    p_0426_1_i_reg_961_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_1935_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                p_0426_1_i_reg_961 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0426_1_i_reg_961 <= i_V_14_reg_2768;
            end if; 
        end if;
    end process;

    p_0426_2_i_reg_1043_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                p_0426_2_i_reg_1043 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                p_0426_2_i_reg_1043 <= i_V_12_reg_2847;
            end if; 
        end if;
    end process;

    p_044_reg_984_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_044_reg_984 <= reg_1146;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then 
                p_044_reg_984 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0459_0_i_reg_846_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    p_0459_0_i_reg_846 <= i_V_7_reg_2542;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    p_0459_0_i_reg_846 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    p_0459_1_i_reg_869_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_0459_1_i_reg_869 <= i_V_9_reg_2570;
            elsif (((icmp_ln140_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_0459_1_i_reg_869 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_063_0_i_reg_738_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
                p_063_0_i_reg_738 <= j_V_reg_2411;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_063_0_i_reg_738 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    p_071_0_reg_1066_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_fu_2257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                p_071_0_reg_1066 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                p_071_0_reg_1066 <= i_V_15_reg_2909;
            end if; 
        end if;
    end process;

    p_088_0_i_reg_715_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_088_0_i_reg_715 <= ap_const_lv5_0;
            elsif (((icmp_ln71_fu_1275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_088_0_i_reg_715 <= i_V_reg_2378;
            end if; 
        end if;
    end process;

    phi_mul_reg_726_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_726 <= ap_const_lv12_0;
            elsif (((icmp_ln71_fu_1275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul_reg_726 <= add_ln69_reg_2370;
            end if; 
        end if;
    end process;

    reg_1124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
                reg_1124 <= rs_mem_1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_1124 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    rhs_V_10_reg_771_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_10_reg_771 <= deg_sigma_p_V_reg_2522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_10_reg_771 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rhs_V_28_reg_837_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    rhs_V_28_reg_837 <= ret_V_86_reg_2517;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    rhs_V_28_reg_837 <= X_sigma_p_V_q0;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_5_reg_783_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_5_reg_783 <= pp_V_reg_2484;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_5_reg_783 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;

    rhs_V_7_reg_795_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                rhs_V_7_reg_795 <= d_p_V_reg_2489;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_7_reg_795 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    t_V_reg_949_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_9_fu_1918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                t_V_reg_949 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                t_V_reg_949 <= i_V_11_reg_2719;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln69_reg_2370 <= add_ln69_fu_1252_p2;
                i_V_reg_2378 <= i_V_fu_1264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                add_ln700_5_reg_2877 <= add_ln700_5_fu_2241_p2;
                delta_counter_V_1_reg_2882 <= delta_counter_V_1_fu_2251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                alpha_ij_pow_V_load_reg_2421 <= alpha_ij_pow_V_q0;
                cdw_V_load_reg_2416 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                beta_j_V_addr_1_reg_2755 <= zext_ln544_61_fu_1983_p1(4 - 1 downto 0);
                retrieved_mask_V_reg_2744 <= masks4_q0;
                rhs_V_24_reg_2750 <= exp_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_fu_2257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                cdw_V_addr_7_reg_2900 <= zext_ln544_64_fu_2269_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                d_V_1_reg_2494 <= rs_mem_1_q0;
                d_p_V_reg_2489 <= d_p_V_fu_1451_p2;
                deg_sigma_V_reg_2479 <= deg_sigma_V_fu_1416_p2;
                pp_V_reg_2484 <= pp_V_fu_1433_p2;
                select_ln321_reg_2473 <= select_ln321_fu_1391_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                deg_X_V_reg_2453 <= deg_X_V_fu_1341_p2;
                icmp_ln895_1_reg_2458 <= icmp_ln895_1_fu_1365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                deg_sigma_p_V_reg_2522 <= deg_sigma_p_V_fu_1513_p2;
                    zext_ln151_reg_2527(4 downto 0) <= zext_ln151_fu_1519_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_2074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                e_j_V_addr_1_reg_2824 <= zext_ln544_62_reg_2773(4 - 1 downto 0);
                icmp_ln887_16_reg_2819 <= icmp_ln887_16_fu_2120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_V_11_reg_2719 <= i_V_11_fu_1941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                i_V_12_reg_2847 <= i_V_12_fu_2170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                i_V_13_reg_2890 <= i_V_13_fu_2263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_V_14_reg_2768 <= i_V_14_fu_2022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                i_V_15_reg_2909 <= i_V_15_fu_2302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_V_7_reg_2542 <= i_V_7_fu_1551_p2;
                    rs_mem_1_addr_11_reg_2537(5 downto 0) <= zext_ln719_1_fu_1546_p1(10 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_V_8_reg_2593 <= i_V_8_fu_1642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                i_V_9_reg_2570 <= i_V_9_fu_1600_p2;
                icmp_ln899_1_reg_2555 <= icmp_ln899_1_fu_1570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                icmp_ln883_1_reg_2857 <= grp_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                icmp_ln883_reg_2729 <= grp_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                index_load_reg_2621 <= index_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                j_V_6_reg_2606 <= j_V_6_fu_1654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln183_fu_1847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                j_V_8_reg_2698 <= j_V_8_fu_1883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2033_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                j_V_9_reg_2791 <= j_V_9_fu_2054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                j_V_reg_2411 <= j_V_fu_1307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_2074_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                k_V_reg_2814 <= k_V_fu_2110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_1767_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    lhs_V_15_reg_2649(4 downto 0) <= lhs_V_15_fu_1777_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mu_add_V_reg_2444 <= mu_add_V_fu_1335_p2;
                    zext_ln120_reg_2436(4 downto 0) <= zext_ln120_fu_1325_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)))) then
                reg_1133 <= grp_gf_inverse_fu_1091_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)))) then
                reg_1139 <= rs_mem_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then
                reg_1146 <= grp_gf_mul_fu_1099_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_1152 <= beta_j_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                ret_V_61_reg_2636 <= ret_V_61_fu_1757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_1648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                ret_V_66_reg_2611 <= ret_V_66_fu_1672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                ret_V_83_reg_2532 <= ret_V_83_fu_1530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                ret_V_86_reg_2517 <= ret_V_86_fu_1495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                ret_V_89_reg_2675 <= ret_V_89_fu_1831_p2;
                    rs_mem_1_addr_14_reg_2680(8 downto 0) <= zext_ln1357_2_fu_1842_p1(10 - 1 downto 0)(8 downto 0);
                select_ln321_1_reg_2670 <= select_ln321_1_fu_1817_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                rhs_V_9_reg_2365 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    rs_mem_1_addr_16_reg_2631(8 downto 0) <= zext_ln719_2_fu_1706_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                    rs_mem_1_addr_23_reg_2872(8 downto 0) <= zext_ln700_5_fu_2222_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    rs_mem_1_addr_6_reg_2383(4 downto 0) <= zext_ln544_fu_1270_p1(10 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                rs_mem_1_load_6_reg_2575 <= rs_mem_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                xor_ln214_reg_2829 <= xor_ln214_fu_2126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    zext_ln180_reg_2641(4 downto 0) <= zext_ln180_fu_1763_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    zext_ln236_reg_2796(3 downto 0) <= zext_ln236_fu_2060_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_2016_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    zext_ln544_62_reg_2773(3 downto 0) <= zext_ln544_62_fu_2028_p1(3 downto 0);
            end if;
        end if;
    end process;
    rs_mem_1_addr_6_reg_2383(9 downto 5) <= "00000";
    zext_ln120_reg_2436(7 downto 5) <= "000";
    zext_ln151_reg_2527(5) <= '0';
    rs_mem_1_addr_11_reg_2537(9 downto 6) <= "0000";
    rs_mem_1_addr_16_reg_2631(9) <= '0';
    zext_ln180_reg_2641(7 downto 5) <= "000";
    lhs_V_15_reg_2649(8 downto 5) <= "0000";
    rs_mem_1_addr_14_reg_2680(9) <= '0';
    zext_ln544_62_reg_2773(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln236_reg_2796(4) <= '0';
    rs_mem_1_addr_23_reg_2872(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state45, grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state14, grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state43, ap_CS_fsm_state51, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln69_fu_1258_p2, ap_CS_fsm_state9, icmp_ln71_fu_1275_p2, ap_CS_fsm_state11, ap_CS_fsm_state13, icmp_ln120_fu_1329_p2, ap_CS_fsm_state16, icmp_ln140_fu_1457_p2, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln151_fu_1564_p2, ap_CS_fsm_state22, ap_CS_fsm_state24, icmp_ln277_fu_1636_p2, ap_CS_fsm_state25, icmp_ln278_fu_1648_p2, ap_CS_fsm_state30, icmp_ln180_fu_1767_p2, ap_CS_fsm_state32, icmp_ln183_fu_1847_p2, ap_CS_fsm_state35, ap_CS_fsm_state36, icmp_ln887_10_fu_1935_p2, ap_CS_fsm_state41, icmp_ln226_fu_2016_p2, ap_CS_fsm_state44, icmp_ln232_fu_2033_p2, ap_CS_fsm_state46, ap_CS_fsm_state47, icmp_ln236_fu_2074_p2, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state53, icmp_ln887_12_fu_2164_p2, ap_CS_fsm_state58, icmp_ln887_13_fu_2257_p2, ap_CS_fsm_state60, icmp_ln887_15_fu_2296_p2, grp_add_fft_fu_1078_ap_done, icmp_ln221_fu_1158_p2, icmp_ln221_1_fu_1175_p2, icmp_ln221_2_fu_1198_p2, icmp_ln221_3_fu_1225_p2, ap_CS_fsm_state23, ap_CS_fsm_state34, icmp_ln887_9_fu_1918_p2, ap_CS_fsm_state52)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln221_fu_1158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln221_1_fu_1175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln221_2_fu_1198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln221_3_fu_1225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln69_fu_1258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln71_fu_1275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln120_fu_1329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln140_fu_1457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln151_fu_1564_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((grp_add_fft_fu_1078_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln277_fu_1636_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln278_fu_1648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln180_fu_1767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln183_fu_1847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln887_9_fu_1918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln887_10_fu_1935_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln226_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln232_fu_2033_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln236_fu_2074_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln887_12_fu_2164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln887_13_fu_2257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state60 => 
                if (((icmp_ln887_15_fu_2296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_sigma_p_V_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, icmp_ln140_fu_1457_p2, zext_ln544_55_fu_1479_p1)
    begin
        if (((icmp_ln140_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            X_sigma_p_V_address0 <= zext_ln544_55_fu_1479_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            X_sigma_p_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address0 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address1 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_ce0_assign_proc : process(ap_CS_fsm_state14, grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state16, icmp_ln140_fu_1457_p2)
    begin
        if ((((icmp_ln140_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)))) then 
            X_sigma_p_V_ce0 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            X_sigma_p_V_ce1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_sigma_p_V_d0 <= (rhs_V_28_reg_837 xor ret_V_85_fu_1490_p2);

    X_sigma_p_V_d1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_0;
        else 
            X_sigma_p_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    X_sigma_p_V_we0_assign_proc : process(ap_CS_fsm_state16, icmp_ln140_fu_1457_p2)
    begin
        if (((icmp_ln140_fu_1457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            X_sigma_p_V_we0 <= ap_const_logic_1;
        else 
            X_sigma_p_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7, icmp_ln69_fu_1258_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln69_fu_1258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            X_sigma_p_V_we1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1357_1_fu_1837_p2 <= std_logic_vector(signed(ap_const_lv9_13E) + signed(lhs_V_15_reg_2649));
    add_ln1357_fu_1806_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1354_1_fu_1791_p1));
    add_ln1372_fu_2091_p2 <= std_logic_vector(unsigned(ret_V_77_fu_2080_p2) + unsigned(ap_const_lv5_11));
    add_ln152_fu_1579_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln152_1_fu_1575_p1));
    add_ln184_fu_1856_p2 <= std_logic_vector(unsigned(rhs_V_21_fu_1852_p1) + unsigned(ap_const_lv9_1E));
    add_ln215_fu_1686_p2 <= std_logic_vector(unsigned(ap_const_lv10_19A) + unsigned(zext_ln544_58_fu_1683_p1));
    add_ln234_fu_2043_p2 <= std_logic_vector(unsigned(zext_ln234_fu_2039_p1) + unsigned(ap_const_lv9_13E));
    add_ln321_1_fu_1214_p2 <= std_logic_vector(unsigned(zext_ln321_2_fu_1210_p1) + unsigned(ap_const_lv9_13E));
    add_ln321_2_fu_1241_p2 <= std_logic_vector(unsigned(zext_ln321_4_fu_1237_p1) + unsigned(ap_const_lv9_16C));
    add_ln321_fu_1187_p2 <= std_logic_vector(unsigned(i_0_i47_reg_682) + unsigned(ap_const_lv6_1E));
    add_ln69_fu_1252_p2 <= std_logic_vector(unsigned(phi_mul_reg_726) + unsigned(ap_const_lv12_4F));
    add_ln700_20_fu_2216_p2 <= std_logic_vector(signed(ap_const_lv9_16C) + signed(zext_ln1355_1_fu_2212_p1));
    add_ln700_5_fu_2241_p2 <= std_logic_vector(unsigned(ret_V_74_fu_2235_p2) + unsigned(rs_mem_1_q1));
    add_ln700_fu_2000_p2 <= std_logic_vector(unsigned(and_ln700_fu_1995_p2) + unsigned(beta_j_V_q0));
    add_ln719_1_fu_1700_p2 <= std_logic_vector(unsigned(ap_const_lv9_3E) + unsigned(zext_ln215_4_fu_1697_p1));
    add_ln719_2_fu_2278_p2 <= std_logic_vector(unsigned(zext_ln719_3_fu_2274_p1) + unsigned(ap_const_lv9_16C));
    add_ln719_fu_1540_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1355_fu_1536_p1));
    add_ln72_fu_1296_p2 <= std_logic_vector(unsigned(phi_mul_reg_726) + unsigned(zext_ln72_fu_1292_p1));
    add_ln883_2_fu_2180_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_4_fu_2176_p1));
    add_ln883_fu_1951_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_fu_1947_p1));
    alpha_ij_pow_V_address0 <= zext_ln72_1_fu_1302_p1(12 - 1 downto 0);

    alpha_ij_pow_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_ij_pow_V_ce0 <= ap_const_logic_1;
        else 
            alpha_ij_pow_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln130_fu_1377_p2 <= (icmp_ln895_fu_1371_p2 and icmp_ln895_1_reg_2458);
    and_ln220_fu_1973_p2 <= (icmp_ln887_11_fu_1967_p2 and icmp_ln883_reg_2729);
    and_ln246_fu_2202_p2 <= (icmp_ln887_14_fu_2196_p2 and icmp_ln883_1_reg_2857);
    and_ln700_fu_1995_p2 <= (select_ln321_2_fu_1988_p3 and rhs_V_24_reg_2750);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state60, icmp_ln887_15_fu_2296_p2)
    begin
        if ((((icmp_ln887_15_fu_2296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state60, icmp_ln887_15_fu_2296_p2)
    begin
        if (((icmp_ln887_15_fu_2296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_address0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state39, beta_j_V_addr_1_reg_2755, ap_CS_fsm_state40, ap_CS_fsm_state41, zext_ln544_62_fu_2028_p1, ap_CS_fsm_state47, zext_ln544_59_fu_1930_p1, zext_ln544_61_fu_1983_p1, zext_ln544_65_fu_2105_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            beta_j_V_address0 <= zext_ln544_65_fu_2105_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            beta_j_V_address0 <= zext_ln544_62_fu_2028_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            beta_j_V_address0 <= beta_j_V_addr_1_reg_2755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            beta_j_V_address0 <= zext_ln544_61_fu_1983_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            beta_j_V_address0 <= zext_ln544_59_fu_1930_p1(4 - 1 downto 0);
        else 
            beta_j_V_address0 <= "XXXX";
        end if; 
    end process;


    beta_j_V_ce0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            beta_j_V_ce0 <= ap_const_logic_1;
        else 
            beta_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_d0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state40, add_ln700_fu_2000_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            beta_j_V_d0 <= add_ln700_fu_2000_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            beta_j_V_d0 <= ap_const_lv8_0;
        else 
            beta_j_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    beta_j_V_we0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state40, icmp_ln887_9_fu_1918_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((icmp_ln887_9_fu_1918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            beta_j_V_we0 <= ap_const_logic_1;
        else 
            beta_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state58, ap_CS_fsm_state60, zext_ln544_54_fu_1281_p1, zext_ln544_64_fu_2269_p1, zext_ln544_67_fu_2318_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            cdw_V_address0 <= zext_ln544_67_fu_2318_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            cdw_V_address0 <= zext_ln544_64_fu_2269_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cdw_V_address0 <= zext_ln544_54_fu_1281_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cdw_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            cdw_V_address0 <= "XXXXXX";
        end if; 
    end process;

    cdw_V_address1 <= cdw_V_addr_7_reg_2900;

    cdw_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state58, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cdw_V_d1 <= (rs_mem_1_q1 xor cdw_V_q0);

    cdw_V_we1_assign_proc : process(ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_2_fu_1630_p2 <= (ret_V_69_fu_1624_p2 xor p_0390_1_i_reg_858);
    d_p_V_fu_1451_p2 <= (rhs_V_7_reg_795 xor ret_V_52_fu_1445_p2);
    deg_X_V_fu_1341_p2 <= std_logic_vector(unsigned(zext_ln120_fu_1325_p1) - unsigned(rhs_V_5_reg_783));
    deg_X_sigma_p_V_fu_1355_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_1351_p1) + unsigned(zext_ln209_fu_1347_p1));
    deg_sigma_V_fu_1416_p2 <= (ret_V_48_fu_1410_p2 xor deg_sigma_copy_V_reg_759);
    deg_sigma_p_V_fu_1513_p2 <= (rhs_V_10_reg_771 xor ret_V_56_fu_1508_p2);
    delta_counter_V_1_fu_2251_p2 <= std_logic_vector(unsigned(p_0312_1_i_reg_1031) + unsigned(zext_ln700_4_fu_2247_p1));
    delta_counter_V_fu_2010_p2 <= std_logic_vector(unsigned(p_0312_0_i_reg_937) + unsigned(zext_ln700_fu_2007_p1));

    e_j_V_address0_assign_proc : process(ap_CS_fsm_state51, e_j_V_addr_1_reg_2824, ap_CS_fsm_state55, ap_CS_fsm_state52, zext_ln544_63_fu_2191_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            e_j_V_address0 <= zext_ln544_63_fu_2191_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            e_j_V_address0 <= e_j_V_addr_1_reg_2824;
        else 
            e_j_V_address0 <= "XXXX";
        end if; 
    end process;


    e_j_V_ce0_assign_proc : process(grp_gf_mul_fu_1099_ap_done, grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
            e_j_V_ce0 <= ap_const_logic_1;
        else 
            e_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_j_V_d0 <= (ret_V_76_fu_2151_p2 xor e_j_V_q0);

    e_j_V_we0_assign_proc : process(grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1))) then 
            e_j_V_we0 <= ap_const_logic_1;
        else 
            e_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    error_values_a_V_fu_2064_p2 <= (p_034_reg_996 xor grp_gf_mul_fu_1099_ap_return);
    exp_array_V_address0 <= zext_ln544_60_fu_1962_p1(8 - 1 downto 0);

    exp_array_V_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            exp_array_V_ce0 <= ap_const_logic_1;
        else 
            exp_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_add_fft_fu_1078_ap_start <= grp_add_fft_fu_1078_ap_start_reg;
    grp_fu_1118_p2 <= "0" when (rs_mem_1_q1 = ap_const_lv8_0) else "1";

    grp_gf_inverse_fu_1091_a_V_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state43, ap_CS_fsm_state51, reg_1152, rhs_V_7_reg_795, p_039_reg_1019)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_gf_inverse_fu_1091_a_V <= p_039_reg_1019;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_gf_inverse_fu_1091_a_V <= reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_gf_inverse_fu_1091_a_V <= rhs_V_7_reg_795;
        else 
            grp_gf_inverse_fu_1091_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_gf_inverse_fu_1091_ap_start <= grp_gf_inverse_fu_1091_ap_start_reg;

    grp_gf_mul_fu_1099_a_V_assign_proc : process(reg_1124, ap_CS_fsm_state45, reg_1133, reg_1139, reg_1146, ap_CS_fsm_state15, cdw_V_load_reg_2416, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state46, ap_CS_fsm_state49, ap_CS_fsm_state50, lhs_V_5_reg_807, ap_CS_fsm_state34, ap_CS_fsm_state52, p_044_reg_984, p_034_reg_996, p_039_reg_1019)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_gf_mul_fu_1099_a_V <= p_034_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_gf_mul_fu_1099_a_V <= p_039_reg_1019;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_gf_mul_fu_1099_a_V <= reg_1133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_gf_mul_fu_1099_a_V <= p_044_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_gf_mul_fu_1099_a_V <= reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gf_mul_fu_1099_a_V <= reg_1139;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_gf_mul_fu_1099_a_V <= reg_1146;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_gf_mul_fu_1099_a_V <= lhs_V_5_reg_807;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_gf_mul_fu_1099_a_V <= cdw_V_load_reg_2416;
        else 
            grp_gf_mul_fu_1099_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_gf_mul_fu_1099_ap_start <= grp_gf_mul_fu_1099_ap_start_reg;

    grp_gf_mul_fu_1099_b_V_assign_proc : process(reg_1124, ap_CS_fsm_state45, reg_1133, reg_1139, ap_CS_fsm_state15, reg_1152, alpha_ij_pow_V_load_reg_2421, ap_CS_fsm_state11, ret_V_83_reg_2532, ap_CS_fsm_state19, rs_mem_1_load_6_reg_2575, ap_CS_fsm_state22, ap_CS_fsm_state46, xor_ln214_reg_2829, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state34, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_gf_mul_fu_1099_b_V <= xor_ln214_reg_2829;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_gf_mul_fu_1099_b_V <= reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_gf_mul_fu_1099_b_V <= reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_gf_mul_fu_1099_b_V <= reg_1139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_gf_mul_fu_1099_b_V <= rs_mem_1_load_6_reg_2575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_gf_mul_fu_1099_b_V <= ret_V_83_reg_2532;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_gf_mul_fu_1099_b_V <= reg_1133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_gf_mul_fu_1099_b_V <= alpha_ij_pow_V_load_reg_2421;
        else 
            grp_gf_mul_fu_1099_b_V <= "XXXXXXXX";
        end if; 
    end process;

    i_2_fu_1181_p2 <= std_logic_vector(unsigned(i_0_i47_reg_682) + unsigned(ap_const_lv6_1));
    i_3_fu_1204_p2 <= std_logic_vector(unsigned(i_0_i53_reg_693) + unsigned(ap_const_lv6_1));
    i_4_fu_1231_p2 <= std_logic_vector(unsigned(i_0_i59_reg_704) + unsigned(ap_const_lv6_1));
    i_V_10_fu_1889_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_903) + unsigned(ap_const_lv5_1));
    i_V_11_fu_1941_p2 <= std_logic_vector(unsigned(t_V_reg_949) + unsigned(ap_const_lv6_1));
    i_V_12_fu_2170_p2 <= std_logic_vector(unsigned(p_0426_2_i_reg_1043) + unsigned(ap_const_lv6_1));
    i_V_13_fu_2263_p2 <= std_logic_vector(unsigned(p_022_0_i_reg_1055) + unsigned(ap_const_lv6_1));
    i_V_14_fu_2022_p2 <= std_logic_vector(unsigned(p_0426_1_i_reg_961) + unsigned(ap_const_lv4_1));
    i_V_15_fu_2302_p2 <= std_logic_vector(unsigned(p_071_0_reg_1066) + unsigned(ap_const_lv5_1));
    i_V_7_fu_1551_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_0_i_reg_846));
    i_V_8_fu_1642_p2 <= std_logic_vector(unsigned(p_01206_0_i_reg_880) + unsigned(ap_const_lv8_1));
    i_V_9_fu_1600_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_1_i_reg_869));
    i_V_fu_1264_p2 <= std_logic_vector(unsigned(p_088_0_i_reg_715) + unsigned(ap_const_lv5_1));
    i_fu_1164_p2 <= std_logic_vector(unsigned(i_0_i_reg_671) + unsigned(ap_const_lv5_1));
    icmp_ln120_fu_1329_p2 <= "1" when (lhs_V_4_reg_817 = ap_const_lv5_1E) else "0";
    icmp_ln1372_fu_2085_p2 <= "1" when (unsigned(ret_V_77_fu_2080_p2) < unsigned(ap_const_lv5_F)) else "0";
    icmp_ln140_fu_1457_p2 <= "1" when (p_0459_0_i_reg_846 = ap_const_lv5_10) else "0";
    icmp_ln151_fu_1564_p2 <= "1" when (p_0459_1_i_reg_869 = ap_const_lv5_10) else "0";
    icmp_ln180_fu_1767_p2 <= "1" when (indvars_iv_i_reg_903 = ap_const_lv5_10) else "0";
    icmp_ln183_fu_1847_p2 <= "1" when (p_0249_0_i_reg_915 = zext_ln180_reg_2641) else "0";
    icmp_ln221_1_fu_1175_p2 <= "1" when (i_0_i47_reg_682 = ap_const_lv6_20) else "0";
    icmp_ln221_2_fu_1198_p2 <= "1" when (i_0_i53_reg_693 = ap_const_lv6_2E) else "0";
    icmp_ln221_3_fu_1225_p2 <= "1" when (i_0_i59_reg_704 = ap_const_lv6_2E) else "0";
    icmp_ln221_fu_1158_p2 <= "1" when (i_0_i_reg_671 = ap_const_lv5_1E) else "0";
    icmp_ln226_fu_2016_p2 <= "1" when (p_0426_1_i_reg_961 = ap_const_lv4_F) else "0";
    icmp_ln232_fu_2033_p2 <= "1" when (p_0260_1_i_reg_973 = ap_const_lv5_10) else "0";
    icmp_ln236_fu_2074_p2 <= "1" when (p_0243_0_i_reg_1008 = ap_const_lv4_F) else "0";
    icmp_ln277_fu_1636_p2 <= "1" when (p_01206_0_i_reg_880 = ap_const_lv8_80) else "0";
    icmp_ln278_fu_1648_p2 <= "1" when (p_01077_0_i_reg_892 = ap_const_lv2_2) else "0";
    icmp_ln69_fu_1258_p2 <= "1" when (p_088_0_i_reg_715 = ap_const_lv5_1E) else "0";
    icmp_ln71_fu_1275_p2 <= "1" when (p_063_0_i_reg_738 = ap_const_lv6_2E) else "0";
    icmp_ln887_10_fu_1935_p2 <= "1" when (t_V_reg_949 = ap_const_lv6_2E) else "0";
    icmp_ln887_11_fu_1967_p2 <= "1" when (unsigned(p_0312_0_i_reg_937) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_12_fu_2164_p2 <= "1" when (p_0426_2_i_reg_1043 = ap_const_lv6_2E) else "0";
    icmp_ln887_13_fu_2257_p2 <= "1" when (p_022_0_i_reg_1055 = ap_const_lv6_2E) else "0";
    icmp_ln887_14_fu_2196_p2 <= "1" when (unsigned(p_0312_1_i_reg_1031) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_15_fu_2296_p2 <= "1" when (p_071_0_reg_1066 = ap_const_lv5_10) else "0";
    icmp_ln887_16_fu_2120_p2 <= "1" when (unsigned(zext_ln887_fu_2116_p1) < unsigned(p_0312_0_i_reg_937)) else "0";
    icmp_ln887_9_fu_1918_p2 <= "1" when (p_0260_0_i_reg_926 = ap_const_lv4_F) else "0";
    icmp_ln887_fu_1781_p2 <= "1" when (signed(lhs_V_15_fu_1777_p1) < signed(ret_V_61_reg_2636)) else "0";
    icmp_ln895_1_fu_1365_p2 <= "1" when (unsigned(deg_X_sigma_p_V_fu_1355_p2) > unsigned(zext_ln895_fu_1361_p1)) else "0";
    icmp_ln895_fu_1371_p2 <= "0" when (lhs_V_5_reg_807 = ap_const_lv8_0) else "1";
    icmp_ln899_1_fu_1570_p2 <= "1" when (unsigned(mu_add_V_reg_2444) < unsigned(p_0459_1_i_reg_869)) else "0";
    icmp_ln899_fu_1463_p2 <= "1" when (unsigned(mu_add_V_reg_2444) < unsigned(p_0459_0_i_reg_846)) else "0";
    index_address0 <= zext_ln544_57_fu_1678_p1(8 - 1 downto 0);

    index_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            index_ce0 <= ap_const_logic_1;
        else 
            index_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_V_6_fu_1654_p2 <= std_logic_vector(unsigned(p_01077_0_i_reg_892) + unsigned(ap_const_lv2_1));
    j_V_7_fu_1924_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_926) + unsigned(ap_const_lv4_1));
    j_V_8_fu_1883_p2 <= std_logic_vector(unsigned(p_0249_0_i_reg_915) + unsigned(ap_const_lv8_1));
    j_V_9_fu_2054_p2 <= std_logic_vector(unsigned(p_0260_1_i_reg_973) + unsigned(ap_const_lv5_1));
    j_V_fu_1307_p2 <= std_logic_vector(unsigned(p_063_0_i_reg_738) + unsigned(ap_const_lv6_1));
    k_V_fu_2110_p2 <= std_logic_vector(unsigned(p_0243_0_i_reg_1008) + unsigned(ap_const_lv4_1));
    lhs_V_15_fu_1777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_903),9));
    lhs_V_2_fu_1399_p2 <= std_logic_vector(unsigned(deg_X_V_reg_2453) + unsigned(rhs_V_10_reg_771));

    masks2_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state16, zext_ln130_fu_1382_p1, zext_ln141_fu_1474_p1, zext_ln152_fu_1611_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            masks2_address0 <= zext_ln152_fu_1611_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            masks2_address0 <= zext_ln141_fu_1474_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            masks2_address0 <= zext_ln130_fu_1382_p1(1 - 1 downto 0);
        else 
            masks2_address0 <= "X";
        end if; 
    end process;


    masks2_ce0_assign_proc : process(ap_CS_fsm_state14, grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)))) then 
            masks2_ce0 <= ap_const_logic_1;
        else 
            masks2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    masks3_address0 <= zext_ln181_fu_1786_p1(1 - 1 downto 0);

    masks3_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            masks3_ce0 <= ap_const_logic_1;
        else 
            masks3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    masks4_address0_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state38, ap_CS_fsm_state55, zext_ln220_fu_1978_p1, zext_ln239_fu_2133_p1, zext_ln246_fu_2207_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            masks4_address0 <= zext_ln246_fu_2207_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            masks4_address0 <= zext_ln239_fu_2133_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            masks4_address0 <= zext_ln220_fu_1978_p1(1 - 1 downto 0);
        else 
            masks4_address0 <= "X";
        end if; 
    end process;


    masks4_ce0_assign_proc : process(grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state51, ap_CS_fsm_state38, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)))) then 
            masks4_ce0 <= ap_const_logic_1;
        else 
            masks4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_address1 <= zext_ln544_66_fu_2323_p1(13 - 1 downto 0);

    msg_V_ce1_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            msg_V_ce1 <= ap_const_logic_1;
        else 
            msg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_d1 <= cdw_V_q0;

    msg_V_we1_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            msg_V_we1 <= ap_const_logic_1;
        else 
            msg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mu_add_V_fu_1335_p2 <= std_logic_vector(unsigned(lhs_V_4_reg_817) + unsigned(ap_const_lv5_1));
    pp_V_fu_1433_p2 <= (rhs_V_5_reg_783 xor ret_V_50_fu_1427_p2);
    ret_V_48_fu_1410_p2 <= (select_ln321_fu_1391_p3 and ret_V_80_fu_1404_p2);
    ret_V_50_fu_1427_p2 <= (select_ln321_fu_1391_p3 and ret_V_81_fu_1422_p2);
    ret_V_52_fu_1445_p2 <= (select_ln321_fu_1391_p3 and ret_V_82_fu_1439_p2);
    ret_V_53_fu_1313_p2 <= (rhs_V_9_reg_2365 xor lhs_V_6_reg_749);
    ret_V_54_fu_1286_p2 <= std_logic_vector(unsigned(p_063_0_i_reg_738) + unsigned(ap_const_lv6_3F));
    ret_V_56_fu_1508_p2 <= (select_ln321_reg_2473 and ret_V_87_fu_1502_p2);
    ret_V_61_fu_1757_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_1753_p1) + unsigned(ap_const_lv9_1FF));
    ret_V_62_fu_1795_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(trunc_ln887_fu_1773_p1));
    ret_V_65_fu_1664_p3 <= (trunc_ln1352_fu_1660_p1 & ap_const_lv7_0);
    ret_V_66_fu_1672_p2 <= std_logic_vector(unsigned(ret_V_65_fu_1664_p3) + unsigned(p_01206_0_i_reg_880));
    ret_V_67_fu_1715_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_18_fu_1711_p1));
    ret_V_68_fu_1590_p2 <= std_logic_vector(unsigned(zext_ln151_reg_2527) - unsigned(zext_ln152_1_fu_1575_p1));
    ret_V_69_fu_1624_p2 <= (select_ln1355_1_fu_1616_p3 and grp_gf_mul_fu_1099_ap_return);
    ret_V_70_fu_1867_p2 <= std_logic_vector(unsigned(lhs_V_15_reg_2649) - unsigned(rhs_V_21_fu_1852_p1));
    ret_V_71_fu_1872_p2 <= std_logic_vector(unsigned(ret_V_70_fu_1867_p2) + unsigned(ap_const_lv9_1FF));
    ret_V_73_fu_1906_p2 <= (select_ln321_1_reg_2670 and ret_V_90_fu_1900_p2);
    ret_V_74_fu_2235_p2 <= (select_ln321_3_fu_2227_p3 and e_j_V_q0);
    ret_V_76_fu_2151_p2 <= (select_ln1355_2_fu_2143_p3 and ret_V_91_fu_2137_p2);
    ret_V_77_fu_2080_p2 <= std_logic_vector(unsigned(zext_ln236_1_fu_2070_p1) + unsigned(zext_ln236_reg_2796));
    ret_V_78_fu_2097_p3 <= 
        ret_V_77_fu_2080_p2 when (icmp_ln1372_fu_2085_p2(0) = '1') else 
        add_ln1372_fu_2091_p2;
    ret_V_79_fu_2312_p2 <= std_logic_vector(unsigned(zext_ln215_fu_2308_p1) + unsigned(ap_const_lv6_1E));
    ret_V_80_fu_1404_p2 <= (lhs_V_2_fu_1399_p2 xor deg_sigma_copy_V_reg_759);
    ret_V_81_fu_1422_p2 <= (zext_ln120_reg_2436 xor rhs_V_5_reg_783);
    ret_V_82_fu_1439_p2 <= (rhs_V_7_reg_795 xor lhs_V_5_reg_807);
    ret_V_83_fu_1530_p2 <= (select_ln1355_fu_1522_p3 and X_sigma_p_V_q0);
    ret_V_84_fu_1484_p2 <= (rhs_V_28_reg_837 xor lhs_V_9_reg_828);
    ret_V_85_fu_1490_p2 <= (select_ln321_reg_2473 and ret_V_84_fu_1484_p2);
    ret_V_86_fu_1495_p2 <= (rhs_V_28_reg_837 xor ret_V_85_fu_1490_p2);
    ret_V_87_fu_1502_p2 <= (rhs_V_10_reg_771 xor deg_sigma_copy_V_reg_759);
    ret_V_88_fu_1825_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    ret_V_89_fu_1831_p2 <= (select_ln321_1_fu_1817_p3 and ret_V_88_fu_1825_p2);
    ret_V_90_fu_1900_p2 <= (xor_ln1357_fu_1895_p2 xor rs_mem_1_q1);
    ret_V_91_fu_2137_p2 <= (grp_gf_mul_fu_1099_ap_return xor e_j_V_q0);
    ret_V_fu_1746_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    rhs_V_18_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1124),9));
    rhs_V_21_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0249_0_i_reg_915),9));
    rs_mem_1_addr_4_reg_2388 <= ap_const_lv64_0(10 - 1 downto 0);
    rs_mem_1_addr_5_reg_2431 <= ap_const_lv64_1E(10 - 1 downto 0);

    rs_mem_1_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, rs_mem_1_addr_6_reg_2383, icmp_ln69_fu_1258_p2, rs_mem_1_addr_4_reg_2388, ap_CS_fsm_state9, rs_mem_1_addr_5_reg_2431, ap_CS_fsm_state13, icmp_ln120_fu_1329_p2, rs_mem_1_addr_11_reg_2537, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, grp_add_fft_fu_1078_rs_mem_1_address0, ap_CS_fsm_state23, zext_ln222_fu_1170_p1, zext_ln321_fu_1193_p1, zext_ln321_3_fu_1220_p1, zext_ln321_5_fu_1247_p1, zext_ln544_fu_1270_p1, zext_ln544_53_fu_1387_p1, zext_ln719_1_fu_1546_p1, zext_ln152_2_fu_1585_p1, zext_ln544_56_fu_1801_p1, sext_ln544_fu_1878_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rs_mem_1_address0 <= sext_ln544_fu_1878_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rs_mem_1_address0 <= zext_ln544_56_fu_1801_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            rs_mem_1_address0 <= ap_const_lv64_13F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            rs_mem_1_address0 <= rs_mem_1_addr_4_reg_2388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rs_mem_1_address0 <= zext_ln152_2_fu_1585_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rs_mem_1_address0 <= rs_mem_1_addr_11_reg_2537;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rs_mem_1_address0 <= zext_ln719_1_fu_1546_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rs_mem_1_address0 <= zext_ln544_53_fu_1387_p1(10 - 1 downto 0);
        elsif (((icmp_ln120_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            rs_mem_1_address0 <= rs_mem_1_addr_5_reg_2431;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rs_mem_1_address0 <= ap_const_lv64_1E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rs_mem_1_address0 <= rs_mem_1_addr_6_reg_2383;
        elsif (((icmp_ln69_fu_1258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rs_mem_1_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((icmp_ln69_fu_1258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rs_mem_1_address0 <= zext_ln544_fu_1270_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rs_mem_1_address0 <= zext_ln321_5_fu_1247_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_address0 <= zext_ln321_3_fu_1220_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rs_mem_1_address0 <= zext_ln321_fu_1193_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_address0 <= zext_ln222_fu_1170_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_address0 <= grp_add_fft_fu_1078_rs_mem_1_address0;
        else 
            rs_mem_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, rs_mem_1_addr_16_reg_2631, ap_CS_fsm_state29, ap_CS_fsm_state30, rs_mem_1_addr_14_reg_2680, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state44, ap_CS_fsm_state53, ap_CS_fsm_state55, rs_mem_1_addr_23_reg_2872, ap_CS_fsm_state58, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state57, sext_ln544_1_fu_1595_p1, zext_ln215_5_fu_1692_p1, zext_ln719_2_fu_1706_p1, zext_ln1357_fu_1812_p1, zext_ln184_1_fu_1862_p1, zext_ln883_3_fu_1957_p1, zext_ln234_1_fu_2049_p1, zext_ln883_5_fu_2186_p1, zext_ln700_5_fu_2222_p1, zext_ln719_4_fu_2284_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rs_mem_1_address1 <= zext_ln719_4_fu_2284_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_23_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rs_mem_1_address1 <= zext_ln700_5_fu_2222_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            rs_mem_1_address1 <= zext_ln883_5_fu_2186_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            rs_mem_1_address1 <= zext_ln234_1_fu_2049_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            rs_mem_1_address1 <= zext_ln883_3_fu_1957_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            rs_mem_1_address1 <= rs_mem_1_addr_14_reg_2680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rs_mem_1_address1 <= zext_ln184_1_fu_1862_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rs_mem_1_address1 <= zext_ln1357_fu_1812_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            rs_mem_1_address1 <= ap_const_lv64_13E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_16_reg_2631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            rs_mem_1_address1 <= zext_ln719_2_fu_1706_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rs_mem_1_address1 <= zext_ln215_5_fu_1692_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            rs_mem_1_address1 <= ap_const_lv64_1F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rs_mem_1_address1 <= sext_ln544_1_fu_1595_p1(10 - 1 downto 0);
        else 
            rs_mem_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_ce0_assign_proc : process(ap_CS_fsm_state12, grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state14, grp_gf_inverse_fu_1091_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln69_fu_1258_p2, ap_CS_fsm_state9, ap_CS_fsm_state13, icmp_ln120_fu_1329_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, grp_add_fft_fu_1078_rs_mem_1_ce0, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln120_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln69_fu_1258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln69_fu_1258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_gf_inverse_fu_1091_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_ce0 <= grp_add_fft_fu_1078_rs_mem_1_ce0;
        else 
            rs_mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state33, grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state44, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_ce1 <= ap_const_logic_1;
        else 
            rs_mem_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, sigma_local_V_1_fu_1557_p2, ap_CS_fsm_state19, ap_CS_fsm_state29, grp_add_fft_fu_1078_rs_mem_1_d0, ap_CS_fsm_state23, ret_V_53_fu_1313_p2, ret_V_fu_1746_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            rs_mem_1_d0 <= ret_V_fu_1746_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rs_mem_1_d0 <= sigma_local_V_1_fu_1557_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rs_mem_1_d0 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rs_mem_1_d0 <= ret_V_53_fu_1313_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rs_mem_1_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_d0 <= grp_add_fft_fu_1078_rs_mem_1_d0;
        else 
            rs_mem_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rs_mem_1_d1_assign_proc : process(ap_CS_fsm_state29, add_ln700_5_reg_2877, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state57, xor_ln719_12_fu_1739_p2, xor_ln719_fu_1911_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            rs_mem_1_d1 <= add_ln700_5_reg_2877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            rs_mem_1_d1 <= xor_ln719_fu_1911_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            rs_mem_1_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rs_mem_1_d1 <= xor_ln719_12_fu_1739_p2;
        else 
            rs_mem_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    rs_mem_1_we0_assign_proc : process(ap_CS_fsm_state12, grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, icmp_ln71_fu_1275_p2, ap_CS_fsm_state19, ap_CS_fsm_state29, grp_add_fft_fu_1078_rs_mem_1_we0, icmp_ln221_fu_1158_p2, icmp_ln221_1_fu_1175_p2, icmp_ln221_2_fu_1198_p2, icmp_ln221_3_fu_1225_p2, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln71_fu_1275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln221_3_fu_1225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln221_2_fu_1198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln221_1_fu_1175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln221_fu_1158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rs_mem_1_we0 <= grp_add_fft_fu_1078_rs_mem_1_we0;
        else 
            rs_mem_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_we1_assign_proc : process(grp_gf_mul_fu_1099_ap_done, ap_CS_fsm_state29, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_gf_mul_fu_1099_ap_done = ap_const_logic_1)))) then 
            rs_mem_1_we1 <= ap_const_logic_1;
        else 
            rs_mem_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1355_1_fu_1616_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_2_fu_2143_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_fu_1522_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_1_fu_1817_p3 <= 
        ap_const_lv8_FF when (masks3_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_2_fu_1988_p3 <= 
        ap_const_lv8_FF when (retrieved_mask_V_reg_2744(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_3_fu_2227_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_fu_1391_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
        sext_ln544_1_fu_1595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_68_fu_1590_p2),64));

        sext_ln544_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_71_fu_1872_p2),64));

    sigma_local_V_1_fu_1557_p2 <= (rs_mem_1_q0 xor grp_gf_mul_fu_1099_ap_return);
    syndrome_local_V_1_fu_1319_p2 <= (lhs_V_6_reg_749 xor grp_gf_mul_fu_1099_ap_return);
    tmp_4_fu_1721_p3 <= ret_V_67_fu_1715_p2(8 downto 8);
    trunc_ln1352_fu_1660_p1 <= p_01077_0_i_reg_892(1 - 1 downto 0);
    trunc_ln887_fu_1773_p1 <= indvars_iv_i_reg_903(4 - 1 downto 0);
    xor_ln1357_fu_1895_p2 <= (ret_V_89_reg_2675 xor grp_gf_mul_fu_1099_ap_return);
    xor_ln214_fu_2126_p2 <= (grp_gf_mul_fu_1099_ap_return xor ap_const_lv8_1);
    xor_ln719_12_fu_1739_p2 <= (zext_ln719_fu_1735_p1 xor rs_mem_1_q1);
    xor_ln719_15_fu_1729_p2 <= (tmp_4_fu_1721_p3 xor ap_const_lv1_1);
    xor_ln719_fu_1911_p2 <= (rs_mem_1_q1 xor ret_V_73_fu_1906_p2);
    xor_ln899_1_fu_1606_p2 <= (icmp_ln899_1_reg_2555 xor ap_const_lv1_1);
    xor_ln899_fu_1468_p2 <= (icmp_ln899_fu_1463_p2 xor ap_const_lv1_1);
    zext_ln120_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_4_reg_817),8));
    zext_ln130_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln130_fu_1377_p2),64));
    zext_ln1354_1_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_903),6));
    zext_ln1354_fu_1753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_759),9));
    zext_ln1355_1_fu_2212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_1_i_reg_1031),9));
    zext_ln1355_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_0_i_reg_846),6));
    zext_ln1357_2_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_1_fu_1837_p2),64));
    zext_ln1357_fu_1812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_fu_1806_p2),64));
    zext_ln141_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_fu_1468_p2),64));
    zext_ln151_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2444),6));
    zext_ln152_1_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_1_i_reg_869),6));
    zext_ln152_2_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_fu_1579_p2),64));
    zext_ln152_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_1_fu_1606_p2),64));
    zext_ln180_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_903),8));
    zext_ln181_fu_1786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_fu_1781_p2),64));
    zext_ln184_1_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln184_fu_1856_p2),64));
    zext_ln209_1_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_10_reg_771),9));
    zext_ln209_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_X_V_fu_1341_p2),9));
    zext_ln215_4_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_load_reg_2621),9));
    zext_ln215_5_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_1686_p2),64));
    zext_ln215_fu_2308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1066),6));
    zext_ln220_fu_1978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln220_fu_1973_p2),64));
    zext_ln222_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_671),64));
    zext_ln234_1_fu_2049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln234_fu_2043_p2),64));
    zext_ln234_fu_2039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_1_i_reg_973),9));
    zext_ln236_1_fu_2070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0243_0_i_reg_1008),5));
    zext_ln236_fu_2060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_961),5));
    zext_ln239_fu_2133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_16_reg_2819),64));
    zext_ln246_fu_2207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln246_fu_2202_p2),64));
    zext_ln321_2_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i53_reg_693),9));
    zext_ln321_3_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_1214_p2),64));
    zext_ln321_4_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i59_reg_704),9));
    zext_ln321_5_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_2_fu_1241_p2),64));
    zext_ln321_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_1187_p2),64));
    zext_ln544_53_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2444),64));
    zext_ln544_54_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_063_0_i_reg_738),64));
    zext_ln544_55_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0459_0_i_reg_846),64));
    zext_ln544_56_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_62_fu_1795_p2),64));
    zext_ln544_57_fu_1678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_66_fu_1672_p2),64));
    zext_ln544_58_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_66_reg_2611),10));
    zext_ln544_59_fu_1930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_926),64));
    zext_ln544_60_fu_1962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_949),64));
    zext_ln544_61_fu_1983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_0_i_reg_937),64));
    zext_ln544_62_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_961),64));
    zext_ln544_63_fu_2191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_1043),64));
    zext_ln544_64_fu_2269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_022_0_i_reg_1055),64));
    zext_ln544_65_fu_2105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_78_fu_2097_p3),64));
    zext_ln544_66_fu_2323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1066),64));
    zext_ln544_67_fu_2318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_79_fu_2312_p2),64));
    zext_ln544_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_715),64));
    zext_ln700_4_fu_2247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(masks4_q0),6));
    zext_ln700_5_fu_2222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_20_fu_2216_p2),64));
    zext_ln700_fu_2007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retrieved_mask_V_reg_2744),6));
    zext_ln719_1_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_fu_1540_p2),64));
    zext_ln719_2_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_1_fu_1700_p2),64));
    zext_ln719_3_fu_2274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_022_0_i_reg_1055),9));
    zext_ln719_4_fu_2284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_2_fu_2278_p2),64));
    zext_ln719_fu_1735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_15_fu_1729_p2),8));
    zext_ln72_1_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_1296_p2),64));
    zext_ln72_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_54_fu_1286_p2),12));
    zext_ln883_3_fu_1957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_fu_1951_p2),64));
    zext_ln883_4_fu_2176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_1043),7));
    zext_ln883_5_fu_2186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_2_fu_2180_p2),64));
    zext_ln883_fu_1947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_949),7));
    zext_ln887_fu_2116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_961),6));
    zext_ln895_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_759),9));
end behav;
