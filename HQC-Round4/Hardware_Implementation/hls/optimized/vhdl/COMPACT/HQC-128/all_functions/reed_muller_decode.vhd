-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_muller_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    msg_V_ce1 : OUT STD_LOGIC;
    msg_V_we1 : OUT STD_LOGIC;
    msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    store_A_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    store_A_V_ce0 : OUT STD_LOGIC;
    store_A_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_muller_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_340 : STD_LOGIC_VECTOR (9 downto 0) := "1101000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_218_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_423 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln301_fu_248_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln301_reg_428 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln211_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pass_V_fu_261_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pass_V_reg_436 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln219_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_V_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_reg_449 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln153_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal peak_value_V_fu_368_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal peak_pos_V_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal peak_abs_value_V_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal expanded_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal expanded_V_ce0 : STD_LOGIC;
    signal expanded_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal expanded_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal expanded_V_ce1 : STD_LOGIC;
    signal expanded_V_we1 : STD_LOGIC;
    signal expanded_V_d1 : STD_LOGIC_VECTOR (9 downto 0);
    signal expanded_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal transform_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transform_V_ce0 : STD_LOGIC;
    signal transform_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal transform_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal transform_V_ce1 : STD_LOGIC;
    signal transform_V_we1 : STD_LOGIC;
    signal transform_V_d1 : STD_LOGIC_VECTOR (9 downto 0);
    signal transform_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_expand_and_sum_fu_198_ap_start : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_ap_done : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_ap_idle : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_ap_ready : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_dst_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_expand_and_sum_fu_198_dst_V_ce0 : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_dst_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_expand_and_sum_fu_198_dst_V_ce1 : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_dst_V_we1 : STD_LOGIC;
    signal grp_expand_and_sum_fu_198_dst_V_d1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_expand_and_sum_fu_198_store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_expand_and_sum_fu_198_store_A_V_ce0 : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_ap_start : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_ap_done : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_ap_idle : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_ap_ready : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_src_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hadamard_loop_fu_206_src_V_ce0 : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_src_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hadamard_loop_fu_206_src_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hadamard_loop_fu_206_src_V_ce1 : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_src_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hadamard_loop_fu_206_dst_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hadamard_loop_fu_206_dst_V_ce1 : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_dst_V_we1 : STD_LOGIC;
    signal grp_hadamard_loop_fu_206_dst_V_d1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_127 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_016_0_i_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal rhs_V_33_reg_150 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_19_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_31_reg_174 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0180_0_i_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_expand_and_sum_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal grp_hadamard_loop_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln887_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln544_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln701_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_224_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln301_1_fu_236_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln301_fu_232_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln301_1_fu_244_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln895_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln718_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_328_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_98_fu_336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln895_2_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_99_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal new_peak_mask_V_fu_348_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_362_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_20_fu_374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_100_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_95_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_101_fu_396_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_97_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component expand_and_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dst_V_ce0 : OUT STD_LOGIC;
        dst_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
        dst_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dst_V_ce1 : OUT STD_LOGIC;
        dst_V_we1 : OUT STD_LOGIC;
        dst_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        offset_V : IN STD_LOGIC_VECTOR (12 downto 0);
        store_A_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_A_V_ce0 : OUT STD_LOGIC;
        store_A_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hadamard_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        src_V_ce0 : OUT STD_LOGIC;
        src_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
        src_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        src_V_ce1 : OUT STD_LOGIC;
        src_V_q1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dst_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dst_V_ce1 : OUT STD_LOGIC;
        dst_V_we1 : OUT STD_LOGIC;
        dst_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component reed_muller_decodtde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (9 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    expanded_V_U : component reed_muller_decodtde
    generic map (
        DataWidth => 10,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => expanded_V_address0,
        ce0 => expanded_V_ce0,
        q0 => expanded_V_q0,
        address1 => expanded_V_address1,
        ce1 => expanded_V_ce1,
        we1 => expanded_V_we1,
        d1 => expanded_V_d1,
        q1 => expanded_V_q1);

    transform_V_U : component reed_muller_decodtde
    generic map (
        DataWidth => 10,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transform_V_address0,
        ce0 => transform_V_ce0,
        q0 => transform_V_q0,
        address1 => transform_V_address1,
        ce1 => transform_V_ce1,
        we1 => transform_V_we1,
        d1 => transform_V_d1,
        q1 => transform_V_q1);

    grp_expand_and_sum_fu_198 : component expand_and_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_expand_and_sum_fu_198_ap_start,
        ap_done => grp_expand_and_sum_fu_198_ap_done,
        ap_idle => grp_expand_and_sum_fu_198_ap_idle,
        ap_ready => grp_expand_and_sum_fu_198_ap_ready,
        dst_V_address0 => grp_expand_and_sum_fu_198_dst_V_address0,
        dst_V_ce0 => grp_expand_and_sum_fu_198_dst_V_ce0,
        dst_V_q0 => expanded_V_q0,
        dst_V_address1 => grp_expand_and_sum_fu_198_dst_V_address1,
        dst_V_ce1 => grp_expand_and_sum_fu_198_dst_V_ce1,
        dst_V_we1 => grp_expand_and_sum_fu_198_dst_V_we1,
        dst_V_d1 => grp_expand_and_sum_fu_198_dst_V_d1,
        offset_V => sub_ln301_reg_428,
        store_A_V_address0 => grp_expand_and_sum_fu_198_store_A_V_address0,
        store_A_V_ce0 => grp_expand_and_sum_fu_198_store_A_V_ce0,
        store_A_V_q0 => store_A_V_q0);

    grp_hadamard_loop_fu_206 : component hadamard_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hadamard_loop_fu_206_ap_start,
        ap_done => grp_hadamard_loop_fu_206_ap_done,
        ap_idle => grp_hadamard_loop_fu_206_ap_idle,
        ap_ready => grp_hadamard_loop_fu_206_ap_ready,
        src_V_address0 => grp_hadamard_loop_fu_206_src_V_address0,
        src_V_ce0 => grp_hadamard_loop_fu_206_src_V_ce0,
        src_V_q0 => grp_hadamard_loop_fu_206_src_V_q0,
        src_V_address1 => grp_hadamard_loop_fu_206_src_V_address1,
        src_V_ce1 => grp_hadamard_loop_fu_206_src_V_ce1,
        src_V_q1 => grp_hadamard_loop_fu_206_src_V_q1,
        dst_V_address1 => grp_hadamard_loop_fu_206_dst_V_address1,
        dst_V_ce1 => grp_hadamard_loop_fu_206_dst_V_ce1,
        dst_V_we1 => grp_hadamard_loop_fu_206_dst_V_we1,
        dst_V_d1 => grp_hadamard_loop_fu_206_dst_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_expand_and_sum_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_expand_and_sum_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln211_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_expand_and_sum_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expand_and_sum_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_expand_and_sum_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hadamard_loop_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hadamard_loop_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_255_p2 = ap_const_lv1_1)) or ((icmp_ln887_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_hadamard_loop_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hadamard_loop_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_hadamard_loop_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_reg_127 <= i_reg_423;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_127 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    lhs_V_19_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_19_reg_162 <= peak_value_V_fu_368_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                lhs_V_19_reg_162 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_016_0_i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_hadamard_loop_fu_206_ap_done = ap_const_logic_1))) then 
                p_016_0_i_reg_139 <= pass_V_reg_436;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_expand_and_sum_fu_198_ap_done = ap_const_logic_1))) then 
                p_016_0_i_reg_139 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_0180_0_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_0180_0_i_reg_186 <= i_V_reg_449;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0180_0_i_reg_186 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rhs_V_31_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_31_reg_174 <= peak_pos_V_fu_390_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_31_reg_174 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    rhs_V_33_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_33_reg_150 <= peak_abs_value_V_fu_408_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_33_reg_150 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_V_reg_449 <= i_V_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_423 <= i_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pass_V_reg_436 <= pass_V_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln301_reg_428(12 downto 4) <= sub_ln301_fu_248_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    zext_ln219_reg_441(5 downto 0) <= zext_ln219_fu_274_p1(5 downto 0);
            end if;
        end if;
    end process;
    sub_ln301_reg_428(3 downto 0) <= "0000";
    zext_ln219_reg_441(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln211_fu_212_p2, ap_CS_fsm_state4, ap_CS_fsm_state11, icmp_ln153_fu_278_p2, grp_expand_and_sum_fu_198_ap_done, grp_hadamard_loop_fu_206_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln887_fu_255_p2, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln211_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_expand_and_sum_fu_198_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_fu_255_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_hadamard_loop_fu_206_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_hadamard_loop_fu_206_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_hadamard_loop_fu_206_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln153_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln701_fu_267_p2 <= std_logic_vector(unsigned(transform_V_q0) + unsigned(ap_const_lv10_340));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln211_fu_212_p2)
    begin
        if ((((icmp_ln211_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln211_fu_212_p2)
    begin
        if (((icmp_ln211_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    expanded_V_address0_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_address0, grp_hadamard_loop_fu_206_src_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expanded_V_address0 <= grp_hadamard_loop_fu_206_src_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_address0 <= grp_expand_and_sum_fu_198_dst_V_address0;
        else 
            expanded_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    expanded_V_address1_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_address1, grp_hadamard_loop_fu_206_src_V_address1, grp_hadamard_loop_fu_206_dst_V_address1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_V_address1 <= grp_hadamard_loop_fu_206_dst_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expanded_V_address1 <= grp_hadamard_loop_fu_206_src_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_address1 <= grp_expand_and_sum_fu_198_dst_V_address1;
        else 
            expanded_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    expanded_V_ce0_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_ce0, grp_hadamard_loop_fu_206_src_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expanded_V_ce0 <= grp_hadamard_loop_fu_206_src_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_ce0 <= grp_expand_and_sum_fu_198_dst_V_ce0;
        else 
            expanded_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_V_ce1_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_ce1, grp_hadamard_loop_fu_206_src_V_ce1, grp_hadamard_loop_fu_206_dst_V_ce1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_V_ce1 <= grp_hadamard_loop_fu_206_dst_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expanded_V_ce1 <= grp_hadamard_loop_fu_206_src_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_ce1 <= grp_expand_and_sum_fu_198_dst_V_ce1;
        else 
            expanded_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expanded_V_d1_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_d1, grp_hadamard_loop_fu_206_dst_V_d1, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_V_d1 <= grp_hadamard_loop_fu_206_dst_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_d1 <= grp_expand_and_sum_fu_198_dst_V_d1;
        else 
            expanded_V_d1 <= "XXXXXXXXXX";
        end if; 
    end process;


    expanded_V_we1_assign_proc : process(grp_expand_and_sum_fu_198_dst_V_we1, grp_hadamard_loop_fu_206_dst_V_we1, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expanded_V_we1 <= grp_hadamard_loop_fu_206_dst_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expanded_V_we1 <= grp_expand_and_sum_fu_198_dst_V_we1;
        else 
            expanded_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_expand_and_sum_fu_198_ap_start <= grp_expand_and_sum_fu_198_ap_start_reg;
    grp_hadamard_loop_fu_206_ap_start <= grp_hadamard_loop_fu_206_ap_start_reg;

    grp_hadamard_loop_fu_206_src_V_q0_assign_proc : process(expanded_V_q0, transform_V_q0, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_hadamard_loop_fu_206_src_V_q0 <= transform_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_hadamard_loop_fu_206_src_V_q0 <= expanded_V_q0;
        else 
            grp_hadamard_loop_fu_206_src_V_q0 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_hadamard_loop_fu_206_src_V_q1_assign_proc : process(expanded_V_q1, transform_V_q1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_hadamard_loop_fu_206_src_V_q1 <= transform_V_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_hadamard_loop_fu_206_src_V_q1 <= expanded_V_q1;
        else 
            grp_hadamard_loop_fu_206_src_V_q1 <= "XXXXXXXXXX";
        end if; 
    end process;

    i_V_fu_284_p2 <= std_logic_vector(unsigned(p_0180_0_i_reg_186) + unsigned(ap_const_lv8_1));
    i_fu_218_p2 <= std_logic_vector(unsigned(i_0_reg_127) + unsigned(ap_const_lv6_1));
    icmp_ln153_fu_278_p2 <= "1" when (p_0180_0_i_reg_186 = ap_const_lv8_80) else "0";
    icmp_ln211_fu_212_p2 <= "1" when (i_0_reg_127 = ap_const_lv6_2E) else "0";
    icmp_ln887_fu_255_p2 <= "1" when (p_016_0_i_reg_139 = ap_const_lv2_3) else "0";
    icmp_ln895_2_fu_342_p2 <= "1" when (signed(ret_V_98_fu_336_p2) > signed(rhs_V_33_reg_150)) else "0";
    icmp_ln895_fu_295_p2 <= "1" when (signed(lhs_V_19_reg_162) > signed(ap_const_lv10_0)) else "0";
    lhs_V_20_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0180_0_i_reg_186),10));
    msg_V_address1 <= zext_ln219_reg_441(6 - 1 downto 0);

    msg_V_ce1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            msg_V_ce1 <= ap_const_logic_1;
        else 
            msg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_d1 <= (trunc_ln718_fu_309_p1 or shl_ln2_fu_301_p3);

    msg_V_we1_assign_proc : process(ap_CS_fsm_state11, icmp_ln153_fu_278_p2)
    begin
        if (((icmp_ln153_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            msg_V_we1 <= ap_const_logic_1;
        else 
            msg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    new_peak_mask_V_fu_348_p3 <= 
        ap_const_lv10_3FF when (icmp_ln895_2_fu_342_p2(0) = '1') else 
        ap_const_lv10_0;
    pass_V_fu_261_p2 <= std_logic_vector(unsigned(p_016_0_i_reg_139) + unsigned(ap_const_lv2_1));
    peak_abs_value_V_fu_408_p2 <= (rhs_V_33_reg_150 xor ret_V_97_fu_402_p2);
    peak_pos_V_fu_390_p2 <= (rhs_V_31_reg_174 xor ret_V_95_fu_384_p2);
    peak_value_V_fu_368_p2 <= (ret_V_fu_362_p2 xor lhs_V_19_reg_162);
    ret_V_100_fu_378_p2 <= (rhs_V_31_reg_174 xor lhs_V_20_fu_374_p1);
    ret_V_101_fu_396_p2 <= (rhs_V_33_reg_150 xor ret_V_98_fu_336_p2);
    ret_V_95_fu_384_p2 <= (ret_V_100_fu_378_p2 and new_peak_mask_V_fu_348_p3);
    ret_V_97_fu_402_p2 <= (ret_V_101_fu_396_p2 and new_peak_mask_V_fu_348_p3);
    ret_V_98_fu_336_p2 <= (transform_V_q0 xor rhs_V_fu_328_p3);
    ret_V_99_fu_356_p2 <= (transform_V_q0 xor lhs_V_19_reg_162);
    ret_V_fu_362_p2 <= (ret_V_99_fu_356_p2 and new_peak_mask_V_fu_348_p3);
    rhs_V_fu_328_p3 <= 
        ap_const_lv10_3FF when (tmp_fu_320_p3(0) = '1') else 
        ap_const_lv10_0;
    shl_ln2_fu_301_p3 <= (icmp_ln895_fu_295_p2 & ap_const_lv7_0);
    shl_ln301_1_fu_236_p3 <= (i_0_reg_127 & ap_const_lv4_0);
    shl_ln_fu_224_p3 <= (i_0_reg_127 & ap_const_lv6_0);
    store_A_V_address0 <= grp_expand_and_sum_fu_198_store_A_V_address0;
    store_A_V_ce0 <= grp_expand_and_sum_fu_198_store_A_V_ce0;
    sub_ln301_fu_248_p2 <= std_logic_vector(unsigned(zext_ln301_fu_232_p1) - unsigned(zext_ln301_1_fu_244_p1));
    tmp_fu_320_p3 <= transform_V_q0(9 downto 9);

    transform_V_address0_assign_proc : process(ap_CS_fsm_state11, grp_hadamard_loop_fu_206_src_V_address0, ap_CS_fsm_state7, zext_ln544_fu_290_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            transform_V_address0 <= zext_ln544_fu_290_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            transform_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transform_V_address0 <= grp_hadamard_loop_fu_206_src_V_address0;
        else 
            transform_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    transform_V_address1_assign_proc : process(ap_CS_fsm_state10, grp_hadamard_loop_fu_206_src_V_address1, grp_hadamard_loop_fu_206_dst_V_address1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transform_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            transform_V_address1 <= grp_hadamard_loop_fu_206_dst_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transform_V_address1 <= grp_hadamard_loop_fu_206_src_V_address1;
        else 
            transform_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    transform_V_ce0_assign_proc : process(ap_CS_fsm_state11, grp_hadamard_loop_fu_206_src_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            transform_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transform_V_ce0 <= grp_hadamard_loop_fu_206_src_V_ce0;
        else 
            transform_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    transform_V_ce1_assign_proc : process(ap_CS_fsm_state10, grp_hadamard_loop_fu_206_src_V_ce1, grp_hadamard_loop_fu_206_dst_V_ce1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transform_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            transform_V_ce1 <= grp_hadamard_loop_fu_206_dst_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            transform_V_ce1 <= grp_hadamard_loop_fu_206_src_V_ce1;
        else 
            transform_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    transform_V_d1_assign_proc : process(ap_CS_fsm_state10, grp_hadamard_loop_fu_206_dst_V_d1, ap_CS_fsm_state5, ap_CS_fsm_state8, add_ln701_fu_267_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transform_V_d1 <= add_ln701_fu_267_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            transform_V_d1 <= grp_hadamard_loop_fu_206_dst_V_d1;
        else 
            transform_V_d1 <= "XXXXXXXXXX";
        end if; 
    end process;


    transform_V_we1_assign_proc : process(ap_CS_fsm_state10, grp_hadamard_loop_fu_206_dst_V_we1, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            transform_V_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            transform_V_we1 <= grp_hadamard_loop_fu_206_dst_V_we1;
        else 
            transform_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln718_fu_309_p1 <= rhs_V_31_reg_174(8 - 1 downto 0);
    zext_ln219_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_127),64));
    zext_ln301_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln301_1_fu_236_p3),13));
    zext_ln301_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_224_p3),13));
    zext_ln544_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0180_0_i_reg_186),64));
end behav;
