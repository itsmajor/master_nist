-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_set_random_fixe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v_V_ce0 : OUT STD_LOGIC;
    v_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    v_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v_V_ce1 : OUT STD_LOGIC;
    v_V_we1 : OUT STD_LOGIC;
    v_V_d1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
    state_seedexpander_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_seedexpander_V_ce0 : OUT STD_LOGIC;
    state_seedexpander_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_seedexpander_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_seedexpander_V_ce1 : OUT STD_LOGIC;
    state_seedexpander_V_we1 : OUT STD_LOGIC;
    state_seedexpander_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of vect_set_random_fixe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv24_FFDB88 : STD_LOGIC_VECTOR (23 downto 0) := "111111111101101110001000";
    constant ap_const_lv24_4505 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100010100000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_op_assign_reg_401 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_0_5_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_093_0_i_reg_425 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_3_reg_450 : STD_LOGIC_VECTOR (6 downto 0);
    signal exist_0_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal random_bytes_size_V_fu_493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal random_bytes_size_V_reg_820 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln879_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln879_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_5_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln879_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln887_2_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cnt_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_0_V_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln53_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln58_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln1595_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1595_reg_909 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln887_4_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_4_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_618_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_918 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal sub_ln69_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln887_3_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state17_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal k_V_1_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ret_V_fu_667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_5_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_5_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln802_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln802_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_2_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal rand_bytes_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rand_bytes_V_load_reg_970 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_V_3_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_3_reg_980 : STD_LOGIC_VECTOR (7 downto 0);
    signal random_data_V_fu_746_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal random_data_V_reg_991 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln61_fu_766_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln61_reg_999 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln61_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state50_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal k_V_fu_779_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal or_ln62_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_473_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran15to16_state14 : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state50 : STD_LOGIC;
    signal rand_bytes_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rand_bytes_V_ce0 : STD_LOGIC;
    signal rand_bytes_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rand_bytes_V_ce1 : STD_LOGIC;
    signal rand_bytes_V_we1 : STD_LOGIC;
    signal rand_bytes_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rand_bytes_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_473_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_473_state_V_6_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_080_0_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_0_6_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_0_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal p_072_0_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_0_1_reg_298 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_072_1_reg_309 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_0_4_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_2_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0292_0_i_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_t_V_phi_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_0_3_reg_355 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln44_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_op2_assign_phi_fu_370_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0201_i_i_reg_391 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_405_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_473_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_6_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln544_2_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_1_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln301_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_1_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_485_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln214_fu_481_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal offset_state_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln53_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_fu_584_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_1_fu_587_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_591_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_663_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1353_fu_673_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln556_fu_682_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_686_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln808_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_698_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_V_4_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_5_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln61_fu_770_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln879_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_761_ap_start : STD_LOGIC;
    signal grp_fu_761_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce0 : OUT STD_LOGIC;
        -- state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce1 : OUT STD_LOGIC;
        -- state_V_6_we1 : OUT STD_LOGIC;
        -- state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;


    component crypto_kem_dec_hleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component vect_set_random_fdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    rand_bytes_V_U : component vect_set_random_fdEe
    generic map (
        DataWidth => 8,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rand_bytes_V_address0,
        ce0 => rand_bytes_V_ce0,
        q0 => rand_bytes_V_q0,
        address1 => rand_bytes_V_address1,
        ce1 => rand_bytes_V_ce1,
        we1 => rand_bytes_V_we1,
        d1 => rand_bytes_V_d1,
        q1 => rand_bytes_V_q1);

    -- grp_KeccakF1600_StatePer_fu_473 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_473_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_473_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_473_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_473_ap_ready,
        -- state_V_6_address0 => grp_KeccakF1600_StatePer_fu_473_state_V_6_address0,
        -- state_V_6_ce0 => grp_KeccakF1600_StatePer_fu_473_state_V_6_ce0,
        -- state_V_6_q0 => state_seedexpander_V_q0,
        -- state_V_6_address1 => grp_KeccakF1600_StatePer_fu_473_state_V_6_address1,
        -- state_V_6_ce1 => grp_KeccakF1600_StatePer_fu_473_state_V_6_ce1,
        -- state_V_6_we1 => grp_KeccakF1600_StatePer_fu_473_state_V_6_we1,
        -- state_V_6_d1 => grp_KeccakF1600_StatePer_fu_473_state_V_6_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_473_ap_start;
  state_V_q0_permute <= state_seedexpander_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_473_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_473_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_473_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_473_state_V_6_d1       <= state_V_d1_permute;
  
    crypto_kem_dec_hleOg_U10 : component crypto_kem_dec_hleOg
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_761_ap_start,
        done => grp_fu_761_ap_done,
        din0 => random_data_V_reg_991,
        din1 => grp_fu_761_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_predicate_tran15to16_state14 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_KeccakF1600_StatePer_fu_473_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((grp_KeccakF1600_StatePer_fu_473_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_602_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_602_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state50) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state50))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state50);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_473_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_473_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_602_p2 = ap_const_lv1_0))) then 
                    grp_KeccakF1600_StatePer_fu_473_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_473_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_473_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    exist_0_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                exist_0_reg_461 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln61_reg_1005 = ap_const_lv1_0))) then 
                exist_0_reg_461 <= or_ln62_fu_795_p2;
            end if; 
        end if;
    end process;

    i_op_assign_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_923 = ap_const_lv1_1) and (icmp_ln887_4_reg_914 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_op_assign_reg_401 <= i_reg_918;
            elsif (((grp_KeccakF1600_StatePer_fu_473_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_op_assign_reg_401 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    op2_assign_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_phi_mux_op2_assign_phi_fu_370_p4 = ap_const_lv1_0))) then 
                op2_assign_reg_366 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                op2_assign_reg_366 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_0201_i_i_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_0201_i_i_reg_391 <= sub_ln69_fu_635_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0201_i_i_reg_391 <= zext_ln53_fu_580_p1;
            end if; 
        end if;
    end process;

    p_0292_0_i_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_536_p2 = ap_const_lv1_1))) then 
                p_0292_0_i_reg_331 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_0292_0_i_reg_331 <= i_V_2_fu_712_p2;
            end if; 
        end if;
    end process;

    p_072_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                p_072_0_reg_288 <= j_V_3_reg_980;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_072_0_reg_288 <= j_V_reg_825;
            end if; 
        end if;
    end process;

    p_072_1_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                p_072_1_reg_309 <= j_V_3_reg_980;
            elsif (((icmp_ln887_1_fu_531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_072_1_reg_309 <= p_072_0_reg_288;
            end if; 
        end if;
    end process;

    p_080_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_503_p2 = ap_const_lv1_0))) then 
                p_080_0_reg_265 <= i_V_fu_509_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_080_0_reg_265 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_093_0_i_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_3_fu_651_p2 = ap_const_lv1_0))) then 
                p_093_0_i_reg_425 <= k_V_1_fu_657_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_602_p2 = ap_const_lv1_1))) then 
                p_093_0_i_reg_425 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exist_0_reg_461 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                t_V_1_fu_152 <= i_V_1_fu_805_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_1_fu_152 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_3_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                t_V_3_reg_450 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln61_fu_774_p2 = ap_const_lv1_0))) then 
                t_V_3_reg_450 <= k_V_fu_779_p2;
            end if; 
        end if;
    end process;

    t_V_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_541_p2 = ap_const_lv1_0) and (icmp_ln879_reg_868 = ap_const_lv1_1))) then 
                t_V_reg_343 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_536_p2 = ap_const_lv1_0))) then 
                t_V_reg_343 <= p_072_1_reg_309;
            end if; 
        end if;
    end process;

    tmp_V_0_1_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln891_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                tmp_V_0_1_reg_298 <= tmp_V_0_6_reg_436;
            elsif (((icmp_ln887_1_fu_531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_V_0_1_reg_298 <= tmp_V_0_0_reg_276;
            end if; 
        end if;
    end process;

    tmp_V_0_2_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_536_p2 = ap_const_lv1_1))) then 
                tmp_V_0_2_reg_320 <= tmp_V_0_1_reg_298;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                tmp_V_0_2_reg_320 <= tmp_V_0_4_reg_379;
            end if; 
        end if;
    end process;

    tmp_V_0_3_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_phi_mux_op2_assign_phi_fu_370_p4 = ap_const_lv1_0))) then 
                tmp_V_0_3_reg_355 <= tmp_0_V_reg_892;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                tmp_V_0_3_reg_355 <= tmp_V_0_2_reg_320;
            end if; 
        end if;
    end process;

    tmp_V_0_4_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                tmp_V_0_4_reg_379 <= tmp_V_0_5_reg_413;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                tmp_V_0_4_reg_379 <= tmp_V_0_3_reg_355;
            end if; 
        end if;
    end process;

    tmp_V_0_5_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_923 = ap_const_lv1_1) and (icmp_ln887_4_reg_914 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                tmp_V_0_5_reg_413 <= state_seedexpander_V_q0;
            elsif (((grp_KeccakF1600_StatePer_fu_473_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                tmp_V_0_5_reg_413 <= tmp_V_0_4_reg_379;
            end if; 
        end if;
    end process;

    tmp_V_0_6_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_541_p2 = ap_const_lv1_0) and (icmp_ln879_reg_868 = ap_const_lv1_1))) then 
                tmp_V_0_6_reg_436 <= tmp_V_0_2_reg_320;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_536_p2 = ap_const_lv1_0))) then 
                tmp_V_0_6_reg_436 <= tmp_V_0_1_reg_298;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cnt_reg_880 <= cnt_fu_551_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_reg_918 <= i_fu_618_p2;
                    zext_ln1595_reg_909(4 downto 0) <= zext_ln1595_fu_608_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln61_reg_1005 <= icmp_ln61_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_4_fu_612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln63_reg_923 <= icmp_ln63_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln879_reg_868 <= icmp_ln879_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln887_4_reg_914 <= icmp_ln887_4_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_3_fu_651_p2 = ap_const_lv1_0))) then
                icmp_ln887_5_reg_956 <= icmp_ln887_5_fu_677_p2;
                ret_V_reg_951 <= ret_V_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_V_3_reg_980 <= j_V_3_fu_735_p2;
                rand_bytes_V_load_reg_970 <= rand_bytes_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                j_V_reg_825 <= j_V_fu_499_p1;
                random_bytes_size_V_reg_820 <= random_bytes_size_V_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                random_data_V_reg_991 <= random_data_V_fu_746_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_V_5_reg_858 <= t_V_1_fu_152;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_0_V_reg_892 <= state_seedexpander_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_V_0_0_reg_276 <= tmp_V_0_6_reg_436;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                trunc_ln61_reg_999 <= trunc_ln61_fu_766_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_5_fu_677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_3_fu_651_p2 = ap_const_lv1_0))) then
                trunc_ln802_reg_960 <= trunc_ln802_fu_704_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln879_reg_847(6 downto 0) <= zext_ln879_fu_520_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln879_reg_847(7) <= '0';
    zext_ln1595_reg_909(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln879_reg_868, ap_CS_fsm_state6, icmp_ln887_2_fu_541_p2, icmp_ln58_fu_602_p2, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln887_3_fu_651_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state21, icmp_ln61_fu_774_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_ap_done, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, icmp_ln887_fu_503_p2, icmp_ln887_1_fu_531_p2, icmp_ln891_fu_755_p2, ap_CS_fsm_state10, icmp_ln44_fu_569_p2, ap_phi_mux_op2_assign_phi_fu_370_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_503_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_531_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln887_2_fu_541_p2 = ap_const_lv1_0) or (icmp_ln879_reg_868 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln44_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_phi_mux_op2_assign_phi_fu_370_p4 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_602_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((grp_KeccakF1600_StatePer_fu_473_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln887_3_fu_651_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln887_3_fu_651_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln891_fu_755_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln61_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln61_fu_774_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state49 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(48);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp3_exit_iter0_state17_assign_proc : process(icmp_ln887_3_fu_651_p2)
    begin
        if ((icmp_ln887_3_fu_651_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state50_assign_proc : process(icmp_ln61_fu_774_p2)
    begin
        if ((icmp_ln61_fu_774_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln887_1_fu_531_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_531_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_405_p4_assign_proc : process(i_op_assign_reg_401, ap_CS_fsm_pp2_stage0, icmp_ln887_4_reg_914, i_reg_918, icmp_ln63_reg_923, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln63_reg_923 = ap_const_lv1_1) and (icmp_ln887_4_reg_914 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_op_assign_phi_fu_405_p4 <= i_reg_918;
        else 
            ap_phi_mux_i_op_assign_phi_fu_405_p4 <= i_op_assign_reg_401;
        end if; 
    end process;

    ap_phi_mux_op2_assign_phi_fu_370_p4 <= op2_assign_reg_366;

    ap_phi_mux_t_V_phi_fu_346_p4_assign_proc : process(icmp_ln879_reg_868, ap_CS_fsm_state6, icmp_ln887_2_fu_541_p2, t_V_reg_343)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_541_p2 = ap_const_lv1_0) and (icmp_ln879_reg_868 = ap_const_lv1_1))) then 
            ap_phi_mux_t_V_phi_fu_346_p4 <= ap_const_lv8_0;
        else 
            ap_phi_mux_t_V_phi_fu_346_p4 <= t_V_reg_343;
        end if; 
    end process;


    ap_predicate_tran15to16_state14_assign_proc : process(icmp_ln887_4_fu_612_p2, icmp_ln63_fu_624_p2)
    begin
                ap_predicate_tran15to16_state14 <= ((icmp_ln63_fu_624_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_612_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln887_1_fu_531_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_531_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_551_p1 <= state_seedexpander_V_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_473_ap_start <= grp_KeccakF1600_StatePer_fu_473_ap_start_reg;

    grp_fu_761_ap_start_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_761_ap_start <= ap_const_logic_1;
        else 
            grp_fu_761_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_761_p1 <= ap_const_lv24_4505(16 - 1 downto 0);
    i_V_1_fu_805_p2 <= std_logic_vector(unsigned(t_V_5_reg_858) + unsigned(ap_const_lv8_1));
    i_V_2_fu_712_p2 <= std_logic_vector(unsigned(p_0292_0_i_reg_331) + unsigned(ap_const_lv8_8));
    i_V_fu_509_p2 <= std_logic_vector(unsigned(p_080_0_reg_265) + unsigned(ap_const_lv8_1));
    i_fu_618_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_405_p4) + unsigned(ap_const_lv5_1));
    icmp_ln44_fu_569_p2 <= "1" when (unsigned(zext_ln44_fu_565_p1) < unsigned(cnt_reg_880)) else "0";
    icmp_ln58_fu_602_p2 <= "1" when (p_0201_i_i_reg_391 = ap_const_lv8_0) else "0";
    icmp_ln61_fu_774_p2 <= "1" when (zext_ln61_fu_770_p1 = t_V_5_reg_858) else "0";
    icmp_ln63_fu_624_p2 <= "1" when (unsigned(zext_ln1595_fu_608_p1) < unsigned(p_0201_i_i_reg_391)) else "0";
    icmp_ln879_1_fu_790_p2 <= "1" when (v_V_q0 = trunc_ln61_reg_999) else "0";
    icmp_ln879_fu_536_p2 <= "1" when (p_072_1_reg_309 = j_V_reg_825) else "0";
    icmp_ln887_1_fu_531_p2 <= "1" when (unsigned(t_V_1_fu_152) < unsigned(zext_ln879_reg_847)) else "0";
    icmp_ln887_2_fu_541_p2 <= "1" when (unsigned(p_0292_0_i_reg_331) < unsigned(j_V_reg_825)) else "0";
    icmp_ln887_3_fu_651_p2 <= "1" when (p_093_0_i_reg_425 = ap_const_lv4_8) else "0";
    icmp_ln887_4_fu_612_p2 <= "1" when (unsigned(ap_phi_mux_i_op_assign_phi_fu_405_p4) < unsigned(ap_const_lv5_11)) else "0";
    icmp_ln887_5_fu_677_p2 <= "1" when (signed(zext_ln1353_fu_673_p1) < signed(random_bytes_size_V_reg_820)) else "0";
    icmp_ln887_fu_503_p2 <= "1" when (p_080_0_reg_265 = ap_const_lv8_E1) else "0";
    icmp_ln891_fu_755_p2 <= "1" when (unsigned(random_data_V_fu_746_p4) > unsigned(ap_const_lv24_FFDB88)) else "0";
    j_V_3_fu_735_p2 <= std_logic_vector(unsigned(t_V_reg_343) + unsigned(ap_const_lv8_3));
    j_V_4_fu_718_p2 <= std_logic_vector(unsigned(t_V_reg_343) + unsigned(ap_const_lv8_1));
    j_V_5_fu_724_p2 <= std_logic_vector(unsigned(t_V_reg_343) + unsigned(ap_const_lv8_2));
    j_V_fu_499_p1 <= random_bytes_size_V_fu_493_p2(8 - 1 downto 0);
    k_V_1_fu_657_p2 <= std_logic_vector(unsigned(p_093_0_i_reg_425) + unsigned(ap_const_lv4_1));
    k_V_fu_779_p2 <= std_logic_vector(unsigned(t_V_3_reg_450) + unsigned(ap_const_lv7_1));
    offset_state_fu_555_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_reg_880));
    or_ln62_fu_795_p2 <= (icmp_ln879_1_fu_790_p2 or exist_0_reg_461);
    r_V_fu_698_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_0_4_reg_379),to_integer(unsigned('0' & zext_ln808_fu_694_p1(31-1 downto 0)))));

    rand_bytes_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, zext_ln544_1_fu_546_p1, zext_ln544_2_fu_730_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rand_bytes_V_address0 <= zext_ln544_2_fu_730_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rand_bytes_V_address0 <= zext_ln544_1_fu_546_p1(8 - 1 downto 0);
        else 
            rand_bytes_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rand_bytes_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state20, ap_enable_reg_pp3_iter1, zext_ln544_fu_515_p1, zext_ln544_6_fu_708_p1, ap_block_pp3_stage0, zext_ln544_3_fu_741_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rand_bytes_V_address1 <= zext_ln544_3_fu_741_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            rand_bytes_V_address1 <= zext_ln544_6_fu_708_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rand_bytes_V_address1 <= zext_ln544_fu_515_p1(8 - 1 downto 0);
        else 
            rand_bytes_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rand_bytes_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rand_bytes_V_ce0 <= ap_const_logic_1;
        else 
            rand_bytes_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rand_bytes_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state20, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            rand_bytes_V_ce1 <= ap_const_logic_1;
        else 
            rand_bytes_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rand_bytes_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, trunc_ln802_reg_960, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            rand_bytes_V_d1 <= trunc_ln802_reg_960;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rand_bytes_V_d1 <= ap_const_lv8_0;
        else 
            rand_bytes_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    rand_bytes_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln887_5_reg_956, ap_enable_reg_pp3_iter1, icmp_ln887_fu_503_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_5_reg_956 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_503_p2 = ap_const_lv1_0)))) then 
            rand_bytes_V_we1 <= ap_const_logic_1;
        else 
            rand_bytes_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    random_bytes_size_V_fu_493_p2 <= std_logic_vector(unsigned(shl_ln_fu_485_p3) - unsigned(zext_ln214_fu_481_p1));
    random_data_V_fu_746_p4 <= ((rand_bytes_V_load_reg_970 & rand_bytes_V_q0) & rand_bytes_V_q1);
    ret_V_2_fu_640_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_401));
    ret_V_fu_667_p2 <= std_logic_vector(unsigned(p_0292_0_i_reg_331) + unsigned(zext_ln887_fu_663_p1));
        sext_ln301_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_591_p2),64));

    shl_ln1_fu_686_p3 <= (trunc_ln556_fu_682_p1 & ap_const_lv3_0);
    shl_ln_fu_485_p3 <= (weight_V & ap_const_lv2_0);

    state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_address0, ap_block_pp2_stage0, zext_ln49_fu_560_p1, zext_ln65_fu_630_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            state_seedexpander_V_address0 <= zext_ln65_fu_630_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_seedexpander_V_address0 <= zext_ln49_fu_560_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_seedexpander_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_address0 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_address0;
        else 
            state_seedexpander_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_address1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_seedexpander_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_address1 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_address1;
        else 
            state_seedexpander_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            state_seedexpander_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_ce0 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_ce0;
        else 
            state_seedexpander_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_seedexpander_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_ce1 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_ce1;
        else 
            state_seedexpander_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_d1, sext_ln301_fu_597_p1, zext_ln214_1_fu_646_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_seedexpander_V_d1 <= zext_ln214_1_fu_646_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_seedexpander_V_d1 <= sext_ln301_fu_597_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_d1 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_d1;
        else 
            state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_473_state_V_6_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_seedexpander_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_seedexpander_V_we1 <= grp_KeccakF1600_StatePer_fu_473_state_V_6_we1;
        else 
            state_seedexpander_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln54_fu_591_p2 <= std_logic_vector(unsigned(zext_ln54_fu_584_p1) - unsigned(zext_ln54_1_fu_587_p1));
    sub_ln69_fu_635_p2 <= std_logic_vector(unsigned(p_0201_i_i_reg_391) - unsigned(zext_ln1595_reg_909));
    trunc_ln556_fu_682_p1 <= p_093_0_i_reg_425(3 - 1 downto 0);
    trunc_ln61_fu_766_p1 <= grp_fu_761_p2(15 - 1 downto 0);
    trunc_ln802_fu_704_p1 <= r_V_fu_698_p2(8 - 1 downto 0);
    v_V_address0 <= zext_ln544_4_fu_785_p1(7 - 1 downto 0);
    v_V_address1 <= zext_ln544_5_fu_801_p1(7 - 1 downto 0);

    v_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            v_V_ce0 <= ap_const_logic_1;
        else 
            v_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_ce1_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            v_V_ce1 <= ap_const_logic_1;
        else 
            v_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v_V_d1 <= trunc_ln61_reg_999;

    v_V_we1_assign_proc : process(exist_0_reg_461, ap_CS_fsm_state52)
    begin
        if (((exist_0_reg_461 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            v_V_we1 <= ap_const_logic_1;
        else 
            v_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln53_fu_574_p2 <= (op2_assign_reg_366 xor ap_const_lv1_1);
    zext_ln1353_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_667_p2),9));
    zext_ln1595_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_405_p4),8));
    zext_ln214_1_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_640_p2),64));
    zext_ln214_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_V),9));
    zext_ln44_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_366),8));
    zext_ln49_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_555_p2),64));
    zext_ln53_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln53_fu_574_p2),8));
    zext_ln544_1_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_346_p4),64));
    zext_ln544_2_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_4_fu_718_p2),64));
    zext_ln544_3_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_5_fu_724_p2),64));
    zext_ln544_4_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_450),64));
    zext_ln544_5_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_858),64));
    zext_ln544_6_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_951),64));
    zext_ln544_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_080_0_reg_265),64));
    zext_ln54_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_366),9));
    zext_ln54_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_880),9));
    zext_ln61_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_450),8));
    zext_ln65_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_405_p4),64));
    zext_ln808_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_686_p3),64));
    zext_ln879_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_V),8));
    zext_ln887_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_093_0_i_reg_425),8));
end behav;
