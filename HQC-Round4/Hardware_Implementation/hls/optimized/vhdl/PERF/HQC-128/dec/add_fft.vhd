-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rs_mem_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rs_mem_1_ce0 : OUT STD_LOGIC;
    rs_mem_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rs_mem_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rs_mem_1_ce1 : OUT STD_LOGIC;
    rs_mem_1_we1 : OUT STD_LOGIC;
    rs_mem_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of add_fft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_pp3_stage4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_pp3_stage5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_pp3_stage6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_19A : STD_LOGIC_VECTOR (9 downto 0) := "0110011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal perm_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal perm_r_ce0 : STD_LOGIC;
    signal perm_r_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bm_pow_R_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bm_pow_R_ce0 : STD_LOGIC;
    signal bm_pow_R_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal gammas_sums_R_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal gammas_sums_R_ce0 : STD_LOGIC;
    signal gammas_sums_R_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_02419_0_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_02419_1_reg_484 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_02419_1_reg_484_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal p_02419_2_reg_496 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_02419_3_reg_549 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_03344_0_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_B_2_V_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_B_3_V_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_02751_0_reg_622 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_03344_2_reg_712 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state16_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state23_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal icmp_ln176_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage5 : signal is "none";
    signal ap_block_state19_pp3_stage5_iter0 : BOOLEAN;
    signal ap_block_pp3_stage5_11001 : BOOLEAN;
    signal p_A_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage4 : signal is "none";
    signal ap_block_state18_pp3_stage4_iter0 : BOOLEAN;
    signal ap_block_pp3_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal p_A_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_734_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln179_reg_1686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln887_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_fu_776_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_reg_1582 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln166_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal round_V_1_fu_804_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal round_V_1_reg_1596 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln166_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln166_reg_1601 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln883_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_830_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_1611 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_32_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_32_reg_1616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_32_reg_1616_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_19_fu_844_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_19_reg_1620 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln887_34_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_34_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_V_20_fu_880_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln544_72_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_72_reg_1644 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_897_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ind_2_V_1_fu_905_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_13_fu_920_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_13_reg_1664 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln174_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_V_fu_930_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_reg_1676 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln177_fu_958_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln177_reg_1681 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln179_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln790_fu_975_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln790_reg_1690 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_14_fu_979_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_14_reg_1695 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_15_fu_989_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_15_reg_1700 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_16_fu_999_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_16_reg_1705 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_6_fu_1007_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1353_6_reg_1710 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1353_7_fu_1016_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1353_7_reg_1715 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1353_11_fu_1025_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1353_11_reg_1720 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln174_fu_1038_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln174_reg_1725 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln166_fu_1044_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln176_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state14_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln176_reg_1735_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln176_fu_1055_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln176_reg_1739 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1598_fu_1072_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1598_reg_1744 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1598_1_fu_1080_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1598_1_reg_1750 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1598_6_fu_1088_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1598_6_reg_1757 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state15_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state22_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal r_V_5_fu_1113_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_reg_1774 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1598_fu_1121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1598_reg_1779 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_block_state17_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal bm_pow_R_load_1_reg_1784 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_A_V_addr_6_reg_1794 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_A_V_addr_7_reg_1800 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_A_V_addr_8_reg_1805 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_A_V_addr_9_reg_1811 : STD_LOGIC_VECTOR (4 downto 0);
    signal bm_pow_R_load_3_reg_1821 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_740_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_assign_0_1_reg_1826 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_A_V_load_6_reg_1831 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_A_V_load_7_reg_1837 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_assign_0_2_reg_1843 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage6 : signal is "none";
    signal ap_block_state20_pp3_stage6_iter0 : BOOLEAN;
    signal ap_block_pp3_stage6_11001 : BOOLEAN;
    signal op2_V_assign_0_3_reg_1848 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_10_fu_1200_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_10_reg_1853 : STD_LOGIC_VECTOR (3 downto 0);
    signal ind_1_V_2_fu_1225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ind_2_V_2_fu_1231_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_V_21_fu_1243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_21_reg_1871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln1352_fu_1249_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1352_reg_1876 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln199_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_103_fu_1277_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_103_reg_1892 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_leaves_butterfly_fu_723_ap_ready : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_ap_done : STD_LOGIC;
    signal icmp_ln887_33_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_33_reg_1897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state28_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal n_V_fu_1290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ret_V_104_fu_1296_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_104_reg_1906 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_V_1_fu_1332_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln202_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_fu_1338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal round_V_fu_1344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal round_V_reg_1928 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln208_fu_1350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln208_reg_1933 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln210_fu_1362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln210_reg_1938 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln879_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1943 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln215_fu_1374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln215_reg_1949 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_11_fu_1380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_11_reg_1954 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln210_1_fu_1396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln210_1_reg_1959 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_V_fu_1405_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_V_reg_1967 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln1352_2_fu_1415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1352_2_reg_1972 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln210_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1419_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_1977 : STD_LOGIC_VECTOR (7 downto 0);
    signal ind_2_V_fu_1424_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ind_1_V_fu_1430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln215_12_fu_1454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_12_reg_1998 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_107_fu_1457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_107_reg_2003 : STD_LOGIC_VECTOR (8 downto 0);
    signal big_W_V_addr_3_reg_2008 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_local_V_5_fu_1467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_local_V_5_reg_2014 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal big_W_V_addr_5_reg_2028 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln887_37_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal big_W_V_addr_6_reg_2039 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_local_V_6_fu_1523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_local_V_6_reg_2044 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal gammas_sums_R_load_reg_2051 : STD_LOGIC_VECTOR (7 downto 0);
    signal big_W_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_21_reg_2056 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_114_fu_1536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_114_reg_2061 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal j_V_9_fu_1541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln230_fu_1547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln230_reg_2071 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state44_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal j_V_fu_1553_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal add_ln321_5_fu_1568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln321_5_reg_2085 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage6_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal fr_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fr_V_ce0 : STD_LOGIC;
    signal fr_V_we0 : STD_LOGIC;
    signal fr_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_A_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_A_V_ce0 : STD_LOGIC;
    signal p_A_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_A_V_ce1 : STD_LOGIC;
    signal p_A_V_we1 : STD_LOGIC;
    signal p_A_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal big_W_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal big_W_V_ce0 : STD_LOGIC;
    signal big_W_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal big_W_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal big_W_V_ce1 : STD_LOGIC;
    signal big_W_V_we1 : STD_LOGIC;
    signal big_W_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal w16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w16_ce0 : STD_LOGIC;
    signal w16_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w16_ce1 : STD_LOGIC;
    signal w16_we1 : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_ap_start : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_ap_idle : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_small_w_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_leaves_butterfly_fu_723_small_w_V_ce0 : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_small_w_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_leaves_butterfly_fu_723_small_w_V_ce1 : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_small_w_V_we1 : STD_LOGIC;
    signal grp_leaves_butterfly_fu_723_small_w_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_734_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_734_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_734_b_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_740_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_740_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_02419_0_phi_fu_452_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal indvars_iv_reg_460 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_V_7_reg_472 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_02419_1_phi_fu_488_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_01982_0_reg_507 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_V_8_reg_518 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_9_reg_528 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_p_02419_3_phi_fu_553_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_03344_0_phi_fu_564_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_B_0_V_phi_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter0_p_B_0_V_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter0_p_B_1_V_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter1_p_B_1_V_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_B_2_V_phi_fu_593_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter1_p_B_2_V_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter0_p_B_2_V_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_B_3_V_phi_fu_604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter1_p_B_3_V_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp3_iter0_p_B_3_V_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_02419_4_reg_611 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_02751_1_reg_633 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal t_V_5_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_reg_656 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_6_reg_668 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_02813_0_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal p_03119_1_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_03344_1_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_leaves_butterfly_fu_723_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp3_stage5 : BOOLEAN;
    signal ap_block_pp3_stage6 : BOOLEAN;
    signal zext_ln321_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_98_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_70_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_69_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln1598_4_fu_1096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal zext_ln1598_3_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal zext_ln1598_5_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal zext_ln544_104_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_105_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_106_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_107_fu_1191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1598_2_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage4 : BOOLEAN;
    signal zext_ln544_67_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_68_fu_1272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_71_fu_1303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln544_99_fu_1308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_101_fu_1327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_74_fu_1449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_100_fu_1462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_75_fu_1474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_102_fu_1498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_103_fu_1518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_76_fu_1508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_73_fu_1559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln321_8_fu_1574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_118_fu_1211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_119_fu_1218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_108_fu_1478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_120_fu_1530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_fu_782_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1354_fu_820_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_102_fu_824_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_850_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln544_fu_854_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ind_1_V_1_fu_891_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln214_fu_901_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_6_fu_911_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_115_fu_916_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln176_1_fu_944_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln177_fu_954_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln179_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_fu_936_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln176_fu_948_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln176_fu_940_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln790_fu_983_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln790_1_fu_993_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1353_fu_1003_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1353_1_fu_1012_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1353_2_fu_1021_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln174_fu_1038_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln174_fu_1038_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln177_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_23_fu_1061_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1598_2_fu_1091_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1598_1_fu_1101_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln887_1_fu_1110_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1598_3_fu_1125_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1598_1_fu_1118_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_23_fu_1134_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_fu_1137_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_9_fu_1148_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_10_fu_1153_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_12_fu_1164_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_13_fu_1169_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_14_fu_1180_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1353_15_fu_1185_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1357_fu_1205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_1253_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_101_fu_1266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln202_fu_1318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_109_fu_1322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln210_fu_1358_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln208_1_fu_1354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1352_1_fu_1384_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_2_fu_1388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln887_fu_1411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_105_fu_1436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_106_fu_1443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1598_fu_1489_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_110_fu_1493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_111_fu_1503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_112_fu_1513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_7_fu_1564_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage4_subdone : BOOLEAN;
    signal ap_block_pp3_stage5_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal mul_ln174_fu_1038_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln174_fu_1038_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_418 : BOOLEAN;
    signal ap_condition_1747 : BOOLEAN;
    signal ap_condition_824 : BOOLEAN;

    component leaves_butterfly IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        small_w_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        small_w_V_ce0 : OUT STD_LOGIC;
        small_w_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        small_w_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        small_w_V_ce1 : OUT STD_LOGIC;
        small_w_V_we1 : OUT STD_LOGIC;
        small_w_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        A_1_V : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_mul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_perm_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component add_fft_bm_pow_R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_gammas_susc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_fr_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_p_A_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_big_W_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_w16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    perm_r_U : component add_fft_perm_r
    generic map (
        DataWidth => 5,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => perm_r_address0,
        ce0 => perm_r_ce0,
        q0 => perm_r_q0);

    bm_pow_R_U : component add_fft_bm_pow_R
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bm_pow_R_address0,
        ce0 => bm_pow_R_ce0,
        q0 => bm_pow_R_q0);

    gammas_sums_R_U : component add_fft_gammas_susc4
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gammas_sums_R_address0,
        ce0 => gammas_sums_R_ce0,
        q0 => gammas_sums_R_q0);

    fr_V_U : component add_fft_fr_V
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fr_V_address0,
        ce0 => fr_V_ce0,
        we0 => fr_V_we0,
        d0 => p_A_V_q0,
        q0 => fr_V_q0);

    p_A_V_U : component add_fft_p_A_V
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_A_V_address0,
        ce0 => p_A_V_ce0,
        q0 => p_A_V_q0,
        address1 => p_A_V_address1,
        ce1 => p_A_V_ce1,
        we1 => p_A_V_we1,
        d1 => p_A_V_d1,
        q1 => p_A_V_q1);

    big_W_V_U : component add_fft_big_W_V
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => big_W_V_address0,
        ce0 => big_W_V_ce0,
        q0 => big_W_V_q0,
        address1 => big_W_V_address1,
        ce1 => big_W_V_ce1,
        we1 => big_W_V_we1,
        d1 => big_W_V_d1,
        q1 => big_W_V_q1);

    w16_U : component add_fft_w16
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w16_address0,
        ce0 => w16_ce0,
        q0 => w16_q0,
        address1 => grp_leaves_butterfly_fu_723_small_w_V_address1,
        ce1 => w16_ce1,
        we1 => w16_we1,
        d1 => grp_leaves_butterfly_fu_723_small_w_V_d1);

    grp_leaves_butterfly_fu_723 : component leaves_butterfly
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_leaves_butterfly_fu_723_ap_start,
        ap_done => grp_leaves_butterfly_fu_723_ap_done,
        ap_idle => grp_leaves_butterfly_fu_723_ap_idle,
        ap_ready => grp_leaves_butterfly_fu_723_ap_ready,
        small_w_V_address0 => grp_leaves_butterfly_fu_723_small_w_V_address0,
        small_w_V_ce0 => grp_leaves_butterfly_fu_723_small_w_V_ce0,
        small_w_V_q0 => w16_q0,
        small_w_V_address1 => grp_leaves_butterfly_fu_723_small_w_V_address1,
        small_w_V_ce1 => grp_leaves_butterfly_fu_723_small_w_V_ce1,
        small_w_V_we1 => grp_leaves_butterfly_fu_723_small_w_V_we1,
        small_w_V_d1 => grp_leaves_butterfly_fu_723_small_w_V_d1,
        A_0_V => reg_751,
        A_1_V => reg_758);

    grp_gf_mul_fu_734 : component gf_mul
    port map (
        ap_ready => grp_gf_mul_fu_734_ap_ready,
        a_V => grp_gf_mul_fu_734_a_V,
        b_V => grp_gf_mul_fu_734_b_V,
        ap_return => grp_gf_mul_fu_734_ap_return);

    grp_gf_mul_fu_740 : component gf_mul
    port map (
        ap_ready => grp_gf_mul_fu_740_ap_ready,
        a_V => grp_gf_mul_fu_740_a_V,
        b_V => reg_746,
        ap_return => grp_gf_mul_fu_740_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln883_fu_814_p2 = ap_const_lv1_0) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln883_fu_814_p2 = ap_const_lv1_0) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_leaves_butterfly_fu_723_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state28);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((grp_leaves_butterfly_fu_723_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln208_fu_1338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state44))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state44);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif (((icmp_ln208_fu_1338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_leaves_butterfly_fu_723_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_leaves_butterfly_fu_723_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_leaves_butterfly_fu_723_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_leaves_butterfly_fu_723_ap_ready = ap_const_logic_1)) then 
                    grp_leaves_butterfly_fu_723_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp3_iter1_p_B_1_V_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_418)) then
                if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp3_iter1_p_B_1_V_reg_581 <= op2_V_assign_0_1_reg_1826;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp3_iter1_p_B_1_V_reg_581 <= ap_phi_reg_pp3_iter0_p_B_1_V_reg_581;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                indvar_flatten_reg_538 <= add_ln176_reg_1739;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_538 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvars_iv_reg_460 <= ap_const_lv3_4;
            elsif (((icmp_ln174_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvars_iv_reg_460 <= add_ln166_fu_1044_p2;
            end if; 
        end if;
    end process;

    p_01982_0_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                p_01982_0_reg_507 <= k_V_reg_1676;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_01982_0_reg_507 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_02419_0_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_1578 = ap_const_lv1_0))) then 
                p_02419_0_reg_448 <= i_V_reg_1582;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_02419_0_reg_448 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_02419_1_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln883_fu_814_p2 = ap_const_lv1_0) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then 
                p_02419_1_reg_484 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln887_32_reg_1616 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_02419_1_reg_484 <= i_V_19_reg_1620;
            end if; 
        end if;
    end process;

    p_02419_2_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_02419_2_reg_496 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_34_fu_874_p2 = ap_const_lv1_0))) then 
                p_02419_2_reg_496 <= i_V_20_fu_880_p2;
            end if; 
        end if;
    end process;

    p_02419_3_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                p_02419_3_reg_549 <= select_ln1598_1_reg_1750;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then 
                p_02419_3_reg_549 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_02419_4_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_02419_4_reg_611 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                p_02419_4_reg_611 <= i_V_21_reg_1871;
            end if; 
        end if;
    end process;

    p_02751_0_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln887_33_fu_1284_p2 = ap_const_lv1_0))) then 
                p_02751_0_reg_622 <= n_V_fu_1290_p2;
            elsif (((grp_leaves_butterfly_fu_723_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                p_02751_0_reg_622 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_02751_1_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_02751_1_reg_633 <= ap_const_lv6_10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln202_fu_1312_p2 = ap_const_lv1_0))) then 
                p_02751_1_reg_633 <= n_V_1_fu_1332_p2;
            end if; 
        end if;
    end process;

    p_02813_0_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                p_02813_0_reg_679 <= m_V_reg_1967;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln208_fu_1338_p2 = ap_const_lv1_0))) then 
                p_02813_0_reg_679 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_03119_1_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                p_03119_1_reg_690 <= A_local_V_6_reg_2044;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_03119_1_reg_690 <= A_local_V_5_reg_2014;
            end if; 
        end if;
    end process;

    p_03344_0_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                p_03344_0_reg_560 <= j_V_10_reg_1853;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then 
                p_03344_0_reg_560 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_03344_1_reg_700_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                p_03344_1_reg_700 <= j_V_9_fu_1541_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_03344_1_reg_700 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_03344_2_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln208_fu_1338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                p_03344_2_reg_712 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln230_fu_1547_p2 = ap_const_lv1_0))) then 
                p_03344_2_reg_712 <= j_V_fu_1553_p2;
            end if; 
        end if;
    end process;

    p_B_2_V_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_824)) then
                if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                    p_B_2_V_reg_590 <= op2_V_assign_0_2_reg_1843;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_B_2_V_reg_590 <= ap_phi_reg_pp3_iter1_p_B_2_V_reg_590;
                end if;
            end if; 
        end if;
    end process;

    p_B_3_V_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_824)) then
                if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
                    p_B_3_V_reg_600 <= op2_V_assign_0_3_reg_1848;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_B_3_V_reg_600 <= ap_phi_reg_pp3_iter1_p_B_3_V_reg_600;
                end if;
            end if; 
        end if;
    end process;

    t_V_5_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                t_V_5_reg_644 <= ap_const_lv4_5;
            elsif (((icmp_ln210_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                t_V_5_reg_644 <= ind_1_V_fu_1430_p2;
            end if; 
        end if;
    end process;

    t_V_6_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                t_V_6_reg_668 <= ap_const_lv3_0;
            elsif (((icmp_ln210_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                t_V_6_reg_668 <= round_V_reg_1928;
            end if; 
        end if;
    end process;

    t_V_7_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_7_reg_472 <= ap_const_lv3_0;
            elsif (((icmp_ln174_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                t_V_7_reg_472 <= round_V_1_reg_1596;
            end if; 
        end if;
    end process;

    t_V_8_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                t_V_8_reg_518 <= ind_1_V_2_fu_1225_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                t_V_8_reg_518 <= zext_ln214_fu_897_p1;
            end if; 
        end if;
    end process;

    t_V_9_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                t_V_9_reg_528 <= ind_2_V_2_fu_1231_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                t_V_9_reg_528 <= ind_2_V_1_fu_905_p2;
            end if; 
        end if;
    end process;

    t_V_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                t_V_reg_656 <= ap_const_lv2_3;
            elsif (((icmp_ln210_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                t_V_reg_656 <= ind_2_V_fu_1424_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                A_local_V_5_reg_2014 <= A_local_V_5_fu_1467_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                A_local_V_6_reg_2044 <= A_local_V_6_fu_1523_p3;
                gammas_sums_R_load_reg_2051 <= gammas_sums_R_q0;
                lhs_V_21_reg_2056 <= big_W_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln174_fu_924_p2 = ap_const_lv1_0))) then
                add_ln1353_11_reg_1720 <= add_ln1353_11_fu_1025_p2;
                add_ln1353_6_reg_1710 <= add_ln1353_6_fu_1007_p2;
                add_ln1353_7_reg_1715 <= add_ln1353_7_fu_1016_p2;
                mul_ln174_reg_1725 <= mul_ln174_fu_1038_p2;
                or_ln179_reg_1686 <= or_ln179_fu_970_p2;
                shl_ln177_reg_1681 <= shl_ln177_fu_958_p2;
                    zext_ln215_14_reg_1695(3 downto 0) <= zext_ln215_14_fu_979_p1(3 downto 0);
                    zext_ln215_15_reg_1700(4 downto 0) <= zext_ln215_15_fu_989_p1(4 downto 0);
                    zext_ln215_16_reg_1705(4 downto 0) <= zext_ln215_16_fu_999_p1(4 downto 0);
                    zext_ln790_reg_1690(7 downto 0) <= zext_ln790_fu_975_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                add_ln1598_reg_1779 <= add_ln1598_fu_1121_p2;
                p_A_V_addr_6_reg_1794 <= zext_ln544_104_fu_1143_p1(5 - 1 downto 0);
                p_A_V_addr_7_reg_1800 <= zext_ln544_105_fu_1159_p1(5 - 1 downto 0);
                p_A_V_addr_8_reg_1805 <= zext_ln544_106_fu_1175_p1(5 - 1 downto 0);
                p_A_V_addr_9_reg_1811 <= zext_ln544_107_fu_1191_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                add_ln176_reg_1739 <= add_ln176_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln230_fu_1547_p2 = ap_const_lv1_0))) then
                add_ln321_5_reg_2085 <= add_ln321_5_fu_1568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                ap_phi_reg_pp3_iter0_p_B_0_V_reg_571 <= reg_751;
                ap_phi_reg_pp3_iter0_p_B_1_V_reg_581 <= reg_758;
                ap_phi_reg_pp3_iter0_p_B_2_V_reg_590 <= p_A_V_q0;
                ap_phi_reg_pp3_iter0_p_B_3_V_reg_600 <= p_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                ap_phi_reg_pp3_iter1_p_B_2_V_reg_590 <= ap_phi_reg_pp3_iter0_p_B_2_V_reg_590;
                ap_phi_reg_pp3_iter1_p_B_3_V_reg_600 <= ap_phi_reg_pp3_iter0_p_B_3_V_reg_600;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                big_W_V_addr_3_reg_2008 <= zext_ln544_100_fu_1462_p1(8 - 1 downto 0);
                ret_V_107_reg_2003 <= ret_V_107_fu_1457_p2;
                    zext_ln215_12_reg_1998(7 downto 0) <= zext_ln215_12_fu_1454_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_37_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                big_W_V_addr_5_reg_2028 <= zext_ln544_102_fu_1498_p1(8 - 1 downto 0);
                big_W_V_addr_6_reg_2039 <= zext_ln544_76_fu_1508_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                bm_pow_R_load_1_reg_1784 <= bm_pow_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                bm_pow_R_load_3_reg_1821 <= bm_pow_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_V_19_reg_1620 <= i_V_19_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_V_21_reg_1871 <= i_V_21_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_V_reg_1582 <= i_V_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln176_reg_1735 <= icmp_ln176_fu_1050_p2;
                icmp_ln176_reg_1735_pp3_iter1_reg <= icmp_ln176_reg_1735;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln230_reg_2071 <= icmp_ln230_fu_1547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln208_fu_1338_p2 = ap_const_lv1_0))) then
                icmp_ln879_reg_1943 <= icmp_ln879_fu_1368_p2;
                shl_ln210_reg_1938 <= shl_ln210_fu_1362_p2;
                shl_ln215_reg_1949 <= shl_ln215_fu_1374_p2;
                    zext_ln208_reg_1933(3 downto 0) <= zext_ln208_fu_1350_p1(3 downto 0);
                    zext_ln210_1_reg_1959(5 downto 4) <= zext_ln210_1_fu_1396_p1(5 downto 4);
                    zext_ln215_11_reg_1954(7 downto 0) <= zext_ln215_11_fu_1380_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then
                icmp_ln883_reg_1606 <= icmp_ln883_fu_814_p2;
                    zext_ln166_reg_1601(2 downto 0) <= zext_ln166_fu_810_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_32_reg_1616 <= icmp_ln887_32_fu_838_p2;
                icmp_ln887_32_reg_1616_pp1_iter1_reg <= icmp_ln887_32_reg_1616;
                p_02419_1_reg_484_pp1_iter1_reg <= p_02419_1_reg_484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln887_33_reg_1897 <= icmp_ln887_33_fu_1284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln887_34_reg_1635 <= icmp_ln887_34_fu_874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln887_reg_1578 <= icmp_ln887_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                j_V_10_reg_1853 <= j_V_10_fu_1200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_V_reg_1676 <= k_V_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                m_V_reg_1967 <= m_V_fu_1405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                op2_V_assign_0_1_reg_1826 <= grp_gf_mul_fu_740_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                op2_V_assign_0_2_reg_1843 <= grp_gf_mul_fu_734_ap_return;
                op2_V_assign_0_3_reg_1848 <= grp_gf_mul_fu_740_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                p_A_V_load_6_reg_1831 <= p_A_V_q0;
                p_A_V_load_7_reg_1837 <= p_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln176_reg_1735 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                r_V_5_reg_1774 <= r_V_5_fu_1113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln210_fu_1400_p2 = ap_const_lv1_0))) then
                r_V_reg_1977 <= r_V_fu_1419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (icmp_ln176_reg_1735 = ap_const_lv1_0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln176_reg_1735 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then
                reg_746 <= bm_pow_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001) and (icmp_ln176_reg_1735 = ap_const_lv1_0)))) then
                reg_751 <= p_A_V_q0;
                reg_758 <= p_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0)))) then
                reg_765 <= grp_gf_mul_fu_734_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_leaves_butterfly_fu_723_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ret_V_103_reg_1892(7 downto 5) <= ret_V_103_fu_1277_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln887_33_fu_1284_p2 = ap_const_lv1_0))) then
                ret_V_104_reg_1906 <= ret_V_104_fu_1296_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                ret_V_114_reg_2061 <= ret_V_114_fu_1536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                round_V_1_reg_1596 <= round_V_1_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                round_V_reg_1928 <= round_V_fu_1344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln176_fu_1050_p2 = ap_const_lv1_0))) then
                select_ln1598_1_reg_1750 <= select_ln1598_1_fu_1080_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_fu_1050_p2 = ap_const_lv1_0))) then
                select_ln1598_reg_1744 <= select_ln1598_fu_1072_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln883_fu_814_p2 = ap_const_lv1_0) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1611(6 downto 5) <= shl_ln_fu_830_p3(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_reg_1943 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln210_fu_1400_p2 = ap_const_lv1_0))) then
                trunc_ln1352_2_reg_1972 <= trunc_ln1352_2_fu_1415_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln199_fu_1237_p2 = ap_const_lv1_0))) then
                trunc_ln1352_reg_1876 <= trunc_ln1352_fu_1249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then
                    zext_ln1598_6_reg_1757(3 downto 0) <= zext_ln1598_6_fu_1088_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    zext_ln215_13_reg_1664(4 downto 0) <= zext_ln215_13_fu_920_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_34_fu_874_p2 = ap_const_lv1_0))) then
                    zext_ln544_72_reg_1644(5 downto 0) <= zext_ln544_72_fu_886_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln166_reg_1601(7 downto 3) <= "00000";
    shl_ln_reg_1611(4 downto 0) <= "00000";
    zext_ln544_72_reg_1644(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln215_13_reg_1664(5) <= '0';
    zext_ln790_reg_1690(8) <= '0';
    zext_ln215_14_reg_1695(9 downto 4) <= "000000";
    zext_ln215_15_reg_1700(9 downto 5) <= "00000";
    zext_ln215_16_reg_1705(9 downto 5) <= "00000";
    zext_ln1598_6_reg_1757(5 downto 4) <= "00";
    ret_V_103_reg_1892(4 downto 0) <= "00000";
    zext_ln208_reg_1933(7 downto 4) <= "0000";
    zext_ln215_11_reg_1954(8) <= '0';
    zext_ln210_1_reg_1959(3 downto 0) <= "0000";
    zext_ln210_1_reg_1959(7 downto 6) <= "00";
    zext_ln215_12_reg_1998(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, icmp_ln887_fu_770_p2, ap_enable_reg_pp0_iter0, icmp_ln166_fu_798_p2, ap_CS_fsm_state5, icmp_ln883_fu_814_p2, icmp_ln887_32_fu_838_p2, ap_enable_reg_pp1_iter0, icmp_ln887_34_fu_874_p2, ap_enable_reg_pp2_iter0, icmp_ln174_fu_924_p2, ap_CS_fsm_state13, icmp_ln176_fu_1050_p2, ap_CS_fsm_state25, icmp_ln199_fu_1237_p2, ap_CS_fsm_state27, grp_leaves_butterfly_fu_723_ap_done, icmp_ln887_33_fu_1284_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state31, icmp_ln202_fu_1312_p2, icmp_ln208_fu_1338_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, icmp_ln210_fu_1400_p2, ap_CS_fsm_state38, icmp_ln887_37_fu_1484_p2, icmp_ln230_fu_1547_p2, ap_enable_reg_pp7_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_block_pp3_stage6_subdone, ap_block_pp3_stage2_subdone, ap_block_pp4_stage0_subdone, ap_block_pp7_stage0_subdone, ap_block_pp3_stage1_subdone, ap_block_pp3_stage3_subdone, ap_block_pp3_stage4_subdone, ap_block_pp3_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_770_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_770_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln166_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln883_fu_814_p2 = ap_const_lv1_0) and (icmp_ln166_fu_798_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln887_32_fu_838_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln887_32_fu_838_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln887_34_fu_874_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln887_34_fu_874_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln174_fu_924_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln176_fu_1050_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln176_fu_1050_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_pp3_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                end if;
            when ap_ST_fsm_pp3_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                end if;
            when ap_ST_fsm_pp3_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage6;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln199_fu_1237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_leaves_butterfly_fu_723_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln887_33_fu_1284_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln887_33_fu_1284_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln202_fu_1312_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln208_fu_1338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln210_fu_1400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln887_37_fu_1484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln230_fu_1547_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln230_fu_1547_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_local_V_5_fu_1467_p3 <= 
        p_A_V_q0 when (icmp_ln879_reg_1943(0) = '1') else 
        big_W_V_q0;
    A_local_V_6_fu_1523_p3 <= 
        p_03119_1_reg_690 when (icmp_ln879_reg_1943(0) = '1') else 
        big_W_V_q0;
    add_ln1353_10_fu_1153_p2 <= std_logic_vector(unsigned(add_ln1353_9_fu_1148_p2) + unsigned(zext_ln1598_1_fu_1118_p1));
    add_ln1353_11_fu_1025_p2 <= std_logic_vector(unsigned(zext_ln215_13_reg_1664) + unsigned(zext_ln1353_2_fu_1021_p1));
    add_ln1353_12_fu_1164_p2 <= std_logic_vector(unsigned(lhs_V_23_fu_1134_p1) + unsigned(zext_ln215_15_reg_1700));
    add_ln1353_13_fu_1169_p2 <= std_logic_vector(unsigned(add_ln1353_12_fu_1164_p2) + unsigned(zext_ln1598_1_fu_1118_p1));
    add_ln1353_14_fu_1180_p2 <= std_logic_vector(unsigned(lhs_V_23_fu_1134_p1) + unsigned(zext_ln215_16_reg_1705));
    add_ln1353_15_fu_1185_p2 <= std_logic_vector(unsigned(add_ln1353_14_fu_1180_p2) + unsigned(zext_ln1598_1_fu_1118_p1));
    add_ln1353_6_fu_1007_p2 <= std_logic_vector(unsigned(zext_ln215_13_reg_1664) + unsigned(zext_ln1353_fu_1003_p1));
    add_ln1353_7_fu_1016_p2 <= std_logic_vector(unsigned(zext_ln215_13_reg_1664) + unsigned(zext_ln1353_1_fu_1012_p1));
    add_ln1353_9_fu_1148_p2 <= std_logic_vector(unsigned(lhs_V_23_fu_1134_p1) + unsigned(zext_ln215_14_reg_1695));
    add_ln1353_fu_1137_p2 <= std_logic_vector(unsigned(zext_ln1598_1_fu_1118_p1) + unsigned(lhs_V_23_fu_1134_p1));
    add_ln1598_1_fu_1101_p2 <= std_logic_vector(unsigned(add_ln1353_7_reg_1715) + unsigned(zext_ln1598_6_reg_1757));
    add_ln1598_2_fu_1091_p2 <= std_logic_vector(unsigned(add_ln1353_11_reg_1720) + unsigned(zext_ln1598_6_fu_1088_p1));
    add_ln1598_3_fu_1125_p2 <= std_logic_vector(unsigned(zext_ln215_13_reg_1664) + unsigned(zext_ln1598_6_reg_1757));
    add_ln1598_fu_1121_p2 <= std_logic_vector(unsigned(add_ln1353_6_reg_1710) + unsigned(zext_ln1598_6_reg_1757));
    add_ln166_fu_1044_p2 <= std_logic_vector(unsigned(indvars_iv_reg_460) + unsigned(ap_const_lv3_7));
    add_ln176_fu_1055_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_542_p4) + unsigned(ap_const_lv8_1));
    add_ln321_5_fu_1568_p2 <= std_logic_vector(unsigned(zext_ln321_7_fu_1564_p1) + unsigned(ap_const_lv10_19A));
    add_ln321_fu_782_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02419_0_phi_fu_452_p4) + unsigned(ap_const_lv6_1E));
    add_ln544_fu_854_p2 <= std_logic_vector(unsigned(shl_ln_reg_1611) + unsigned(zext_ln215_fu_850_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage4 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage5 <= ap_CS_fsm(14);
    ap_CS_fsm_pp3_stage6 <= ap_CS_fsm(15);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state24 <= ap_CS_fsm(16);
    ap_CS_fsm_state25 <= ap_CS_fsm(17);
    ap_CS_fsm_state26 <= ap_CS_fsm(18);
    ap_CS_fsm_state27 <= ap_CS_fsm(19);
    ap_CS_fsm_state30 <= ap_CS_fsm(21);
    ap_CS_fsm_state31 <= ap_CS_fsm(22);
    ap_CS_fsm_state32 <= ap_CS_fsm(23);
    ap_CS_fsm_state33 <= ap_CS_fsm(24);
    ap_CS_fsm_state34 <= ap_CS_fsm(25);
    ap_CS_fsm_state35 <= ap_CS_fsm(26);
    ap_CS_fsm_state36 <= ap_CS_fsm(27);
    ap_CS_fsm_state37 <= ap_CS_fsm(28);
    ap_CS_fsm_state38 <= ap_CS_fsm(29);
    ap_CS_fsm_state39 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state40 <= ap_CS_fsm(31);
    ap_CS_fsm_state41 <= ap_CS_fsm(32);
    ap_CS_fsm_state42 <= ap_CS_fsm(33);
    ap_CS_fsm_state43 <= ap_CS_fsm(34);
    ap_CS_fsm_state46 <= ap_CS_fsm(36);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1747_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln176_reg_1735, or_ln179_reg_1686)
    begin
                ap_condition_1747 <= ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0));
    end process;


    ap_condition_418_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage6, ap_block_pp3_stage6_11001)
    begin
                ap_condition_418 <= ((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_condition_824_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
                ap_condition_824 <= ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_770_p2)
    begin
        if ((icmp_ln887_fu_770_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln887_32_fu_838_p2)
    begin
        if ((icmp_ln887_32_fu_838_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln887_34_fu_874_p2)
    begin
        if ((icmp_ln887_34_fu_874_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state14_assign_proc : process(icmp_ln176_fu_1050_p2)
    begin
        if ((icmp_ln176_fu_1050_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state28_assign_proc : process(icmp_ln887_33_fu_1284_p2)
    begin
        if ((icmp_ln887_33_fu_1284_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state44_assign_proc : process(icmp_ln230_fu_1547_p2)
    begin
        if ((icmp_ln230_fu_1547_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_542_p4_assign_proc : process(indvar_flatten_reg_538, icmp_ln176_reg_1735, ap_CS_fsm_pp3_stage0, add_ln176_reg_1739, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_542_p4 <= add_ln176_reg_1739;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_542_p4 <= indvar_flatten_reg_538;
        end if; 
    end process;


    ap_phi_mux_p_02419_0_phi_fu_452_p4_assign_proc : process(p_02419_0_reg_448, icmp_ln887_reg_1578, ap_CS_fsm_pp0_stage0, i_V_reg_1582, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_1578 = ap_const_lv1_0))) then 
            ap_phi_mux_p_02419_0_phi_fu_452_p4 <= i_V_reg_1582;
        else 
            ap_phi_mux_p_02419_0_phi_fu_452_p4 <= p_02419_0_reg_448;
        end if; 
    end process;


    ap_phi_mux_p_02419_1_phi_fu_488_p4_assign_proc : process(p_02419_1_reg_484, ap_CS_fsm_pp1_stage0, icmp_ln887_32_reg_1616, i_V_19_reg_1620, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln887_32_reg_1616 = ap_const_lv1_0))) then 
            ap_phi_mux_p_02419_1_phi_fu_488_p4 <= i_V_19_reg_1620;
        else 
            ap_phi_mux_p_02419_1_phi_fu_488_p4 <= p_02419_1_reg_484;
        end if; 
    end process;


    ap_phi_mux_p_02419_3_phi_fu_553_p4_assign_proc : process(p_02419_3_reg_549, icmp_ln176_reg_1735, ap_CS_fsm_pp3_stage0, select_ln1598_1_reg_1750, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_p_02419_3_phi_fu_553_p4 <= select_ln1598_1_reg_1750;
        else 
            ap_phi_mux_p_02419_3_phi_fu_553_p4 <= p_02419_3_reg_549;
        end if; 
    end process;


    ap_phi_mux_p_03344_0_phi_fu_564_p4_assign_proc : process(p_03344_0_reg_560, icmp_ln176_reg_1735, ap_CS_fsm_pp3_stage0, j_V_10_reg_1853, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_p_03344_0_phi_fu_564_p4 <= j_V_10_reg_1853;
        else 
            ap_phi_mux_p_03344_0_phi_fu_564_p4 <= p_03344_0_reg_560;
        end if; 
    end process;


    ap_phi_mux_p_B_0_V_phi_fu_574_p4_assign_proc : process(icmp_ln176_reg_1735, reg_765, or_ln179_reg_1686, ap_phi_reg_pp3_iter0_p_B_0_V_reg_571)
    begin
        if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_p_B_0_V_phi_fu_574_p4 <= reg_765;
        else 
            ap_phi_mux_p_B_0_V_phi_fu_574_p4 <= ap_phi_reg_pp3_iter0_p_B_0_V_reg_571;
        end if; 
    end process;


    ap_phi_mux_p_B_2_V_phi_fu_593_p4_assign_proc : process(icmp_ln176_reg_1735, or_ln179_reg_1686, op2_V_assign_0_2_reg_1843, ap_phi_reg_pp3_iter1_p_B_2_V_reg_590)
    begin
        if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_p_B_2_V_phi_fu_593_p4 <= op2_V_assign_0_2_reg_1843;
        else 
            ap_phi_mux_p_B_2_V_phi_fu_593_p4 <= ap_phi_reg_pp3_iter1_p_B_2_V_reg_590;
        end if; 
    end process;


    ap_phi_mux_p_B_3_V_phi_fu_604_p4_assign_proc : process(icmp_ln176_reg_1735, or_ln179_reg_1686, op2_V_assign_0_3_reg_1848, ap_phi_reg_pp3_iter1_p_B_3_V_reg_600)
    begin
        if (((or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            ap_phi_mux_p_B_3_V_phi_fu_604_p4 <= op2_V_assign_0_3_reg_1848;
        else 
            ap_phi_mux_p_B_3_V_phi_fu_604_p4 <= ap_phi_reg_pp3_iter1_p_B_3_V_reg_600;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    big_W_V_address0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln544_100_fu_1462_p1, zext_ln544_75_fu_1474_p1, zext_ln544_102_fu_1498_p1, zext_ln544_73_fu_1559_p1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            big_W_V_address0 <= zext_ln544_73_fu_1559_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            big_W_V_address0 <= zext_ln544_102_fu_1498_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            big_W_V_address0 <= zext_ln544_75_fu_1474_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            big_W_V_address0 <= zext_ln544_100_fu_1462_p1(8 - 1 downto 0);
        else 
            big_W_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    big_W_V_address1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state31, big_W_V_addr_3_reg_2008, big_W_V_addr_5_reg_2028, ap_CS_fsm_state38, big_W_V_addr_6_reg_2039, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_enable_reg_pp4_iter1, ap_CS_fsm_state37, ap_block_pp4_stage0, zext_ln544_99_fu_1308_p1, zext_ln544_101_fu_1327_p1, zext_ln544_76_fu_1508_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            big_W_V_address1 <= big_W_V_addr_5_reg_2028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            big_W_V_address1 <= big_W_V_addr_6_reg_2039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            big_W_V_address1 <= zext_ln544_76_fu_1508_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            big_W_V_address1 <= big_W_V_addr_3_reg_2008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            big_W_V_address1 <= zext_ln544_101_fu_1327_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            big_W_V_address1 <= zext_ln544_99_fu_1308_p1(8 - 1 downto 0);
        else 
            big_W_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    big_W_V_ce0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            big_W_V_ce0 <= ap_const_logic_1;
        else 
            big_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    big_W_V_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_enable_reg_pp4_iter1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            big_W_V_ce1 <= ap_const_logic_1;
        else 
            big_W_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    big_W_V_d1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state31, ret_V_114_reg_2061, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_enable_reg_pp4_iter1, w16_q0, ap_CS_fsm_state37, ap_block_pp4_stage0, ret_V_108_fu_1478_p2, ret_V_120_fu_1530_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            big_W_V_d1 <= ret_V_114_reg_2061;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            big_W_V_d1 <= ret_V_120_fu_1530_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            big_W_V_d1 <= ret_V_108_fu_1478_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            big_W_V_d1 <= ap_const_lv8_0;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            big_W_V_d1 <= w16_q0;
        else 
            big_W_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    big_W_V_we1_assign_proc : process(icmp_ln887_33_reg_1897, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state31, icmp_ln202_fu_1312_p2, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_enable_reg_pp4_iter1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln202_fu_1312_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln887_33_reg_1897 = ap_const_lv1_0)))) then 
            big_W_V_we1 <= ap_const_logic_1;
        else 
            big_W_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    bm_pow_R_address0_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage4, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage3, zext_ln1598_4_fu_1096_p1, ap_block_pp3_stage1, zext_ln1598_3_fu_1105_p1, ap_block_pp3_stage2, zext_ln1598_5_fu_1129_p1, ap_block_pp3_stage3, zext_ln1598_2_fu_1196_p1, ap_block_pp3_stage4)
    begin
        if ((ap_enable_reg_pp3_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp3_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4))) then 
                bm_pow_R_address0 <= zext_ln1598_2_fu_1196_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3))) then 
                bm_pow_R_address0 <= zext_ln1598_5_fu_1129_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
                bm_pow_R_address0 <= zext_ln1598_3_fu_1105_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                bm_pow_R_address0 <= zext_ln1598_4_fu_1096_p1(5 - 1 downto 0);
            else 
                bm_pow_R_address0 <= "XXXXX";
            end if;
        else 
            bm_pow_R_address0 <= "XXXXX";
        end if; 
    end process;


    bm_pow_R_ce0_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then 
            bm_pow_R_ce0 <= ap_const_logic_1;
        else 
            bm_pow_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fr_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln544_72_fu_886_p1, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln544_69_fu_869_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fr_V_address0 <= zext_ln544_72_fu_886_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            fr_V_address0 <= zext_ln544_69_fu_869_p1(5 - 1 downto 0);
        else 
            fr_V_address0 <= "XXXXX";
        end if; 
    end process;


    fr_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            fr_V_ce0 <= ap_const_logic_1;
        else 
            fr_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fr_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln887_32_reg_1616_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln887_32_reg_1616_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fr_V_we0 <= ap_const_logic_1;
        else 
            fr_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    gammas_sums_R_address0 <= zext_ln544_103_fu_1518_p1(8 - 1 downto 0);

    gammas_sums_R_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            gammas_sums_R_ce0 <= ap_const_logic_1;
        else 
            gammas_sums_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_gf_mul_fu_734_a_V_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln176_reg_1735, ap_CS_fsm_pp3_stage5, reg_751, or_ln179_reg_1686, ap_CS_fsm_state40, p_A_V_load_6_reg_1831, ap_CS_fsm_pp3_stage6, gammas_sums_R_load_reg_2051, ap_block_pp3_stage5, ap_block_pp3_stage6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_gf_mul_fu_734_a_V <= gammas_sums_R_load_reg_2051;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            grp_gf_mul_fu_734_a_V <= p_A_V_load_6_reg_1831;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            grp_gf_mul_fu_734_a_V <= reg_751;
        else 
            grp_gf_mul_fu_734_a_V <= "XXXXXXXX";
        end if; 
    end process;


    grp_gf_mul_fu_734_b_V_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln176_reg_1735, ap_CS_fsm_pp3_stage5, or_ln179_reg_1686, ap_CS_fsm_state40, bm_pow_R_load_1_reg_1784, bm_pow_R_load_3_reg_1821, ap_CS_fsm_pp3_stage6, A_local_V_6_reg_2044, ap_block_pp3_stage5, ap_block_pp3_stage6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_gf_mul_fu_734_b_V <= A_local_V_6_reg_2044;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            grp_gf_mul_fu_734_b_V <= bm_pow_R_load_1_reg_1784;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (or_ln179_reg_1686 = ap_const_lv1_0) and (icmp_ln176_reg_1735 = ap_const_lv1_0))) then 
            grp_gf_mul_fu_734_b_V <= bm_pow_R_load_3_reg_1821;
        else 
            grp_gf_mul_fu_734_b_V <= "XXXXXXXX";
        end if; 
    end process;


    grp_gf_mul_fu_740_a_V_assign_proc : process(ap_CS_fsm_pp3_stage5, reg_758, p_A_V_load_7_reg_1837, ap_CS_fsm_pp3_stage6, ap_block_pp3_stage5, ap_block_pp3_stage6, ap_condition_1747)
    begin
        if ((ap_const_boolean_1 = ap_condition_1747)) then
            if (((ap_const_boolean_0 = ap_block_pp3_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6))) then 
                grp_gf_mul_fu_740_a_V <= p_A_V_load_7_reg_1837;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5))) then 
                grp_gf_mul_fu_740_a_V <= reg_758;
            else 
                grp_gf_mul_fu_740_a_V <= "XXXXXXXX";
            end if;
        else 
            grp_gf_mul_fu_740_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_leaves_butterfly_fu_723_ap_start <= grp_leaves_butterfly_fu_723_ap_start_reg;
    i_V_19_fu_844_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02419_1_phi_fu_488_p4) + unsigned(ap_const_lv6_1));
    i_V_20_fu_880_p2 <= std_logic_vector(unsigned(p_02419_2_reg_496) + unsigned(ap_const_lv6_1));
    i_V_21_fu_1243_p2 <= std_logic_vector(unsigned(p_02419_4_reg_611) + unsigned(ap_const_lv4_1));
    i_V_23_fu_1061_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02419_3_phi_fu_553_p4) + unsigned(ap_const_lv4_1));
    i_V_fu_776_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02419_0_phi_fu_452_p4) + unsigned(ap_const_lv6_1));
    icmp_ln166_fu_798_p2 <= "1" when (t_V_7_reg_472 = ap_const_lv3_4) else "0";
    icmp_ln174_fu_924_p2 <= "1" when (p_01982_0_reg_507 = indvars_iv_reg_460) else "0";
    icmp_ln176_fu_1050_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_542_p4 = mul_ln174_reg_1725) else "0";
    icmp_ln177_fu_1067_p2 <= "0" when (ap_phi_mux_p_03344_0_phi_fu_564_p4 = shl_ln177_reg_1681) else "1";
    icmp_ln179_fu_964_p2 <= "0" when (p_01982_0_reg_507 = ap_const_lv3_0) else "1";
    icmp_ln199_fu_1237_p2 <= "1" when (p_02419_4_reg_611 = ap_const_lv4_8) else "0";
    icmp_ln202_fu_1312_p2 <= "1" when (p_02751_1_reg_633 = ap_const_lv6_20) else "0";
    icmp_ln208_fu_1338_p2 <= "1" when (t_V_5_reg_644 = ap_const_lv4_9) else "0";
    icmp_ln210_fu_1400_p2 <= "1" when (p_02813_0_reg_679 = shl_ln210_reg_1938) else "0";
    icmp_ln230_fu_1547_p2 <= "1" when (p_03344_2_reg_712 = ap_const_lv9_100) else "0";
    icmp_ln879_fu_1368_p2 <= "1" when (t_V_6_reg_668 = ap_const_lv3_0) else "0";
    icmp_ln883_fu_814_p2 <= "1" when (t_V_7_reg_472 = ap_const_lv3_0) else "0";
    icmp_ln887_32_fu_838_p2 <= "1" when (ap_phi_mux_p_02419_1_phi_fu_488_p4 = ap_const_lv6_20) else "0";
    icmp_ln887_33_fu_1284_p2 <= "1" when (p_02751_0_reg_622 = ap_const_lv5_10) else "0";
    icmp_ln887_34_fu_874_p2 <= "1" when (p_02419_2_reg_496 = ap_const_lv6_20) else "0";
    icmp_ln887_37_fu_1484_p2 <= "1" when (unsigned(p_03344_1_reg_700) < unsigned(shl_ln215_reg_1949)) else "0";
    icmp_ln887_fu_770_p2 <= "1" when (ap_phi_mux_p_02419_0_phi_fu_452_p4 = ap_const_lv6_20) else "0";
    ind_1_V_1_fu_891_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(t_V_7_reg_472));
    ind_1_V_2_fu_1225_p2 <= std_logic_vector(signed(t_V_8_reg_518) + signed(ap_const_lv4_F));
    ind_1_V_fu_1430_p2 <= std_logic_vector(unsigned(t_V_5_reg_644) + unsigned(ap_const_lv4_1));
    ind_2_V_1_fu_905_p2 <= (trunc_ln214_fu_901_p1 xor ap_const_lv2_3);
    ind_2_V_2_fu_1231_p2 <= std_logic_vector(unsigned(t_V_9_reg_528) + unsigned(ap_const_lv2_3));
    ind_2_V_fu_1424_p2 <= std_logic_vector(unsigned(t_V_reg_656) + unsigned(ap_const_lv2_3));
    j_V_10_fu_1200_p2 <= std_logic_vector(unsigned(select_ln1598_reg_1744) + unsigned(ap_const_lv4_1));
    j_V_9_fu_1541_p2 <= std_logic_vector(unsigned(p_03344_1_reg_700) + unsigned(ap_const_lv8_1));
    j_V_fu_1553_p2 <= std_logic_vector(unsigned(p_03344_2_reg_712) + unsigned(ap_const_lv9_1));
    k_V_fu_930_p2 <= std_logic_vector(unsigned(p_01982_0_reg_507) + unsigned(ap_const_lv3_1));
    lhs_V_23_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_reg_1774),10));
    m_V_fu_1405_p2 <= std_logic_vector(unsigned(p_02813_0_reg_679) + unsigned(ap_const_lv4_1));
    mul_ln174_fu_1038_p0 <= mul_ln174_fu_1038_p00(4 - 1 downto 0);
    mul_ln174_fu_1038_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln177_fu_958_p2),8));
    mul_ln174_fu_1038_p1 <= mul_ln174_fu_1038_p10(4 - 1 downto 0);
    mul_ln174_fu_1038_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln176_fu_948_p2),8));
    mul_ln174_fu_1038_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln174_fu_1038_p0) * unsigned(mul_ln174_fu_1038_p1), 8));
    n_V_1_fu_1332_p2 <= std_logic_vector(unsigned(p_02751_1_reg_633) + unsigned(ap_const_lv6_1));
    n_V_fu_1290_p2 <= std_logic_vector(unsigned(p_02751_0_reg_622) + unsigned(ap_const_lv5_1));
    or_ln179_fu_970_p2 <= (icmp_ln883_reg_1606 or icmp_ln179_fu_964_p2);

    p_A_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage4, ap_CS_fsm_pp3_stage3, p_A_V_addr_8_reg_1805, ap_CS_fsm_state25, ap_CS_fsm_state35, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln544_70_fu_864_p1, ap_block_pp3_stage3, zext_ln544_104_fu_1143_p1, ap_block_pp3_stage4, zext_ln544_67_fu_1261_p1, zext_ln544_74_fu_1449_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            p_A_V_address0 <= zext_ln544_74_fu_1449_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            p_A_V_address0 <= zext_ln544_67_fu_1261_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_A_V_address0 <= p_A_V_addr_8_reg_1805;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_A_V_address0 <= zext_ln544_104_fu_1143_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            p_A_V_address0 <= zext_ln544_70_fu_864_p1(5 - 1 downto 0);
        else 
            p_A_V_address0 <= "XXXXX";
        end if; 
    end process;


    p_A_V_address1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, zext_ln544_72_reg_1644, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage3, p_A_V_addr_6_reg_1794, p_A_V_addr_7_reg_1800, p_A_V_addr_8_reg_1805, p_A_V_addr_9_reg_1811, ap_CS_fsm_pp3_stage6, ap_CS_fsm_state25, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp3_stage0, ap_block_pp3_stage6, zext_ln544_fu_793_p1, ap_block_pp2_stage0, ap_block_pp3_stage1, ap_block_pp3_stage2, ap_block_pp3_stage3, zext_ln544_105_fu_1159_p1, ap_block_pp3_stage4, zext_ln544_68_fu_1272_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            p_A_V_address1 <= zext_ln544_68_fu_1272_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            p_A_V_address1 <= p_A_V_addr_8_reg_1805;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            p_A_V_address1 <= p_A_V_addr_7_reg_1800;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_A_V_address1 <= p_A_V_addr_6_reg_1794;
        elsif ((((ap_const_boolean_0 = ap_block_pp3_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2)))) then 
            p_A_V_address1 <= p_A_V_addr_9_reg_1811;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_A_V_address1 <= zext_ln544_105_fu_1159_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_A_V_address1 <= zext_ln544_72_reg_1644(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_A_V_address1 <= zext_ln544_fu_793_p1(5 - 1 downto 0);
        else 
            p_A_V_address1 <= "XXXXX";
        end if; 
    end process;


    p_A_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4_11001, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_state25, ap_CS_fsm_state35, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001)))) then 
            p_A_V_ce0 <= ap_const_logic_1;
        else 
            p_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_A_V_ce1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_pp3_stage6, ap_block_pp3_stage6_11001, ap_CS_fsm_state25, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then 
            p_A_V_ce1 <= ap_const_logic_1;
        else 
            p_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_A_V_d1_assign_proc : process(rs_mem_1_q0, p_B_3_V_reg_600, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, fr_V_q0, ap_block_pp0_stage0, ap_block_pp3_stage0, ap_phi_mux_p_B_0_V_phi_fu_574_p4, ap_block_pp3_stage6, ap_block_pp2_stage0, ap_block_pp3_stage1, ap_block_pp3_stage2, ret_V_118_fu_1211_p2, ret_V_119_fu_1218_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then 
            p_A_V_d1 <= p_B_3_V_reg_600;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            p_A_V_d1 <= ret_V_119_fu_1218_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            p_A_V_d1 <= ret_V_118_fu_1211_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            p_A_V_d1 <= ap_phi_mux_p_B_0_V_phi_fu_574_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            p_A_V_d1 <= fr_V_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_A_V_d1 <= rs_mem_1_q0;
        else 
            p_A_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    p_A_V_we1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, icmp_ln176_reg_1735, icmp_ln887_reg_1578, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln887_34_reg_1635, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln176_reg_1735_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage6, ap_block_pp3_stage6_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln176_reg_1735_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_34_reg_1635 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_1578 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln176_reg_1735 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage6) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln176_reg_1735 = ap_const_lv1_0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln176_reg_1735_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)))) then 
            p_A_V_we1 <= ap_const_logic_1;
        else 
            p_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    perm_r_address0 <= zext_ln544_98_fu_859_p1(7 - 1 downto 0);

    perm_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            perm_r_ce0 <= ap_const_logic_1;
        else 
            perm_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_5_fu_1113_p2 <= std_logic_vector(shift_left(unsigned(zext_ln887_1_fu_1110_p1),to_integer(unsigned('0' & zext_ln790_reg_1690(9-1 downto 0)))));
    r_V_6_fu_911_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_C0),to_integer(unsigned('0' & zext_ln166_reg_1601(8-1 downto 0)))));
    r_V_fu_1419_p2 <= std_logic_vector(shift_left(unsigned(zext_ln887_fu_1411_p1),to_integer(unsigned('0' & zext_ln208_reg_1933(8-1 downto 0)))));
    ret_V_101_fu_1266_p2 <= (ret_V_fu_1253_p3 or ap_const_lv5_1);
    ret_V_102_fu_824_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln1354_fu_820_p1));
    ret_V_103_fu_1277_p3 <= (trunc_ln1352_reg_1876 & ap_const_lv5_0);
    ret_V_104_fu_1296_p3 <= (trunc_ln1352_reg_1876 & p_02751_0_reg_622);
    ret_V_105_fu_1436_p3 <= (trunc_ln1352_2_reg_1972 & ap_const_lv2_0);
    ret_V_106_fu_1443_p2 <= (ret_V_105_fu_1436_p3 or ap_const_lv5_2);
    ret_V_107_fu_1457_p2 <= std_logic_vector(unsigned(zext_ln215_12_fu_1454_p1) + unsigned(zext_ln215_11_reg_1954));
    ret_V_108_fu_1478_p2 <= (big_W_V_q0 xor A_local_V_5_reg_2014);
    ret_V_109_fu_1322_p2 <= std_logic_vector(unsigned(ret_V_103_reg_1892) + unsigned(zext_ln202_fu_1318_p1));
    ret_V_110_fu_1493_p2 <= std_logic_vector(unsigned(ret_V_107_reg_2003) + unsigned(zext_ln1598_fu_1489_p1));
    ret_V_111_fu_1503_p2 <= std_logic_vector(unsigned(zext_ln1598_fu_1489_p1) + unsigned(zext_ln215_12_reg_1998));
    ret_V_112_fu_1513_p2 <= std_logic_vector(unsigned(zext_ln210_1_reg_1959) + unsigned(p_03344_1_reg_700));
    ret_V_114_fu_1536_p2 <= (ret_V_120_fu_1530_p2 xor A_local_V_6_reg_2044);
    ret_V_115_fu_916_p1 <= r_V_6_fu_911_p2(5 - 1 downto 0);
    ret_V_118_fu_1211_p2 <= (xor_ln1357_fu_1205_p2 xor ap_phi_mux_p_B_2_V_phi_fu_593_p4);
    ret_V_119_fu_1218_p2 <= (p_B_3_V_reg_600 xor p_B_2_V_reg_590);
    ret_V_120_fu_1530_p2 <= (reg_765 xor lhs_V_21_reg_2056);
    ret_V_2_fu_1388_p3 <= (trunc_ln1352_1_fu_1384_p1 & ap_const_lv4_0);
    ret_V_fu_1253_p3 <= (trunc_ln1352_fu_1249_p1 & ap_const_lv2_0);
    round_V_1_fu_804_p2 <= std_logic_vector(unsigned(t_V_7_reg_472) + unsigned(ap_const_lv3_1));
    round_V_fu_1344_p2 <= std_logic_vector(unsigned(t_V_6_reg_668) + unsigned(ap_const_lv3_1));
    rs_mem_1_address0 <= zext_ln321_fu_788_p1(10 - 1 downto 0);
    rs_mem_1_address1 <= zext_ln321_8_fu_1574_p1(10 - 1 downto 0);

    rs_mem_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rs_mem_1_ce0 <= ap_const_logic_1;
        else 
            rs_mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_ce1_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            rs_mem_1_ce1 <= ap_const_logic_1;
        else 
            rs_mem_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rs_mem_1_d1 <= big_W_V_q0;

    rs_mem_1_we1_assign_proc : process(icmp_ln230_reg_2071, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln230_reg_2071 = ap_const_lv1_0))) then 
            rs_mem_1_we1 <= ap_const_logic_1;
        else 
            rs_mem_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1598_1_fu_1080_p3 <= 
        ap_phi_mux_p_02419_3_phi_fu_553_p4 when (icmp_ln177_fu_1067_p2(0) = '1') else 
        i_V_23_fu_1061_p2;
    select_ln1598_fu_1072_p3 <= 
        ap_phi_mux_p_03344_0_phi_fu_564_p4 when (icmp_ln177_fu_1067_p2(0) = '1') else 
        ap_const_lv4_0;
        sext_ln215_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_8_reg_518),8));

    shl_ln176_fu_948_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln176_1_fu_944_p1(4-1 downto 0)))));
    shl_ln177_fu_958_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln177_fu_954_p1(4-1 downto 0)))));
    shl_ln210_fu_1362_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln210_fu_1358_p1(4-1 downto 0)))));
    shl_ln215_fu_1374_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_10),to_integer(unsigned('0' & zext_ln208_1_fu_1354_p1(8-1 downto 0)))));
    shl_ln790_1_fu_993_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv5_3),to_integer(unsigned('0' & zext_ln176_fu_940_p1(5-1 downto 0)))));
    shl_ln790_fu_983_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv5_2),to_integer(unsigned('0' & zext_ln176_fu_940_p1(5-1 downto 0)))));
    shl_ln_fu_830_p3 <= (ret_V_102_fu_824_p2 & ap_const_lv5_0);
    trunc_ln1352_1_fu_1384_p1 <= t_V_6_reg_668(2 - 1 downto 0);
    trunc_ln1352_2_fu_1415_p1 <= p_02813_0_reg_679(3 - 1 downto 0);
    trunc_ln1352_fu_1249_p1 <= p_02419_4_reg_611(3 - 1 downto 0);
    trunc_ln1354_fu_820_p1 <= t_V_7_reg_472(2 - 1 downto 0);
    trunc_ln214_fu_901_p1 <= t_V_7_reg_472(2 - 1 downto 0);

    w16_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, grp_leaves_butterfly_fu_723_small_w_V_address0, zext_ln544_71_fu_1303_p1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            w16_address0 <= zext_ln544_71_fu_1303_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w16_address0 <= grp_leaves_butterfly_fu_723_small_w_V_address0;
        else 
            w16_address0 <= "XXXX";
        end if; 
    end process;


    w16_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, grp_leaves_butterfly_fu_723_small_w_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            w16_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w16_ce0 <= grp_leaves_butterfly_fu_723_small_w_V_ce0;
        else 
            w16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w16_ce1_assign_proc : process(ap_CS_fsm_state27, grp_leaves_butterfly_fu_723_small_w_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w16_ce1 <= grp_leaves_butterfly_fu_723_small_w_V_ce1;
        else 
            w16_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w16_we1_assign_proc : process(ap_CS_fsm_state27, grp_leaves_butterfly_fu_723_small_w_V_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w16_we1 <= grp_leaves_butterfly_fu_723_small_w_V_we1;
        else 
            w16_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1357_fu_1205_p2 <= (ap_phi_reg_pp3_iter1_p_B_1_V_reg_581 xor ap_phi_mux_p_B_3_V_phi_fu_604_p4);
    zext_ln1353_1_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln790_fu_983_p2),6));
    zext_ln1353_2_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln176_fu_948_p2),6));
    zext_ln1353_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln790_1_fu_993_p2),6));
    zext_ln1598_1_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_1_reg_1750),10));
    zext_ln1598_2_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1598_reg_1779),64));
    zext_ln1598_3_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1598_1_fu_1101_p2),64));
    zext_ln1598_4_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1598_2_fu_1091_p2),64));
    zext_ln1598_5_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1598_3_fu_1125_p2),64));
    zext_ln1598_6_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_1_reg_1750),6));
    zext_ln1598_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_03344_1_reg_700),9));
    zext_ln166_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_7_reg_472),8));
    zext_ln176_1_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_9_reg_528),4));
    zext_ln176_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_9_reg_528),5));
    zext_ln177_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01982_0_reg_507),4));
    zext_ln202_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02751_1_reg_633),8));
    zext_ln208_1_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_6_reg_668),8));
    zext_ln208_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_644),8));
    zext_ln210_1_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_1388_p3),8));
    zext_ln210_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_656),4));
    zext_ln214_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind_1_V_1_fu_891_p2),4));
    zext_ln215_11_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln215_fu_1374_p2),9));
    zext_ln215_12_fu_1454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1977),9));
    zext_ln215_13_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_115_fu_916_p1),6));
    zext_ln215_14_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln176_fu_948_p2),10));
    zext_ln215_15_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln790_fu_983_p2),10));
    zext_ln215_16_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln790_1_fu_993_p2),10));
    zext_ln215_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_02419_1_phi_fu_488_p4),7));
    zext_ln321_7_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_03344_2_reg_712),10));
    zext_ln321_8_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_5_reg_2085),64));
    zext_ln321_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_782_p2),64));
    zext_ln544_100_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_107_fu_1457_p2),64));
    zext_ln544_101_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_109_fu_1322_p2),64));
    zext_ln544_102_fu_1498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_110_fu_1493_p2),64));
    zext_ln544_103_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_112_fu_1513_p2),64));
    zext_ln544_104_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_1137_p2),64));
    zext_ln544_105_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_10_fu_1153_p2),64));
    zext_ln544_106_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_13_fu_1169_p2),64));
    zext_ln544_107_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_15_fu_1185_p2),64));
    zext_ln544_67_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_1253_p3),64));
    zext_ln544_68_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_101_fu_1266_p2),64));
    zext_ln544_69_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02419_1_reg_484_pp1_iter1_reg),64));
    zext_ln544_70_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(perm_r_q0),64));
    zext_ln544_71_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02751_0_reg_622),64));
    zext_ln544_72_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02419_2_reg_496),64));
    zext_ln544_73_fu_1559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_03344_2_reg_712),64));
    zext_ln544_74_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_106_fu_1443_p2),64));
    zext_ln544_75_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1977),64));
    zext_ln544_76_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_111_fu_1503_p2),64));
    zext_ln544_98_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_854_p2),64));
    zext_ln544_99_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_104_reg_1906),64));
    zext_ln544_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02419_0_reg_448),64));
    zext_ln790_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln215_fu_936_p1),9));
    zext_ln887_1_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_reg_1744),9));
    zext_ln887_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_02813_0_reg_679),8));
end behav;
