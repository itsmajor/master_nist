-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity leaves_butterfly is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    small_w_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    small_w_V_ce0 : OUT STD_LOGIC;
    small_w_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    small_w_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    small_w_V_ce1 : OUT STD_LOGIC;
    small_w_V_we1 : OUT STD_LOGIC;
    small_w_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    A_1_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of leaves_butterfly is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal betas_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal betas_ce0 : STD_LOGIC;
    signal betas_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_054_0_reg_262 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_1166 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1355_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_1_fu_309_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln841_1_reg_1176 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1355_1_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_1_reg_1181 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_2_fu_323_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln841_2_reg_1186 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1355_2_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_2_reg_1191 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_3_fu_337_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln841_3_reg_1196 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1355_3_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_3_reg_1201 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_4_fu_351_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln841_4_reg_1206 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1355_4_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_4_reg_1211 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_5_fu_365_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln841_5_reg_1216 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1355_5_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_5_reg_1221 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln841_6_fu_379_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln841_6_reg_1226 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1355_6_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1355_6_reg_1231 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_fu_399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln321_fu_410_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_1250 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_1250_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln1355_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1355_reg_1254 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1266 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_463_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_fu_517_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln719_reg_1300 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln38_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_V_16_fu_1050_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_16_reg_1309 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln39_fu_1072_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln39_reg_1314 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_fu_1082_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_reg_1320 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_fu_1101_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_1328 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ret_V_fu_1107_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_reg_1333 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln39_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_054_1_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_080_0_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln544_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln544_60_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_89_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_V_fu_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_V_fu_1018_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_V_1_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_V_2_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_V_3_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_98_fu_1121_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1355_fu_414_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1355_fu_418_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_11_fu_471_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln1355_5_fu_479_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1355_13_fu_496_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1355_3_fu_484_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln1355_6_fu_504_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1355_3_fu_526_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln1355_1_fu_540_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1355_4_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_5_fu_554_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1355_6_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_7_fu_578_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln1355_3_fu_592_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1355_8_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_9_fu_606_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1355_10_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_12_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_14_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1355_15_fu_654_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1355_16_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1355_4_fu_620_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1355_2_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln719_19_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln719_fu_684_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln719_20_fu_688_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1355_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln1355_2_fu_568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln719_21_fu_697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1355_1_fu_545_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln1355_7_fu_668_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln719_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_6_fu_673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_22_fu_711_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln719_3_fu_703_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln719_23_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln719_2_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_24_fu_727_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln719_2_fu_693_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln719_25_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln719_3_fu_733_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_26_fu_743_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_14_fu_755_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln1503_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln_fu_773_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_785_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_811_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln841_fu_781_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln841_7_fu_803_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln719_27_fu_847_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln717_fu_769_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln841_8_fu_829_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_28_fu_857_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln717_1_fu_765_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_29_fu_863_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln719_4_fu_853_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln719_30_fu_869_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_875_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln719_9_fu_885_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln719_1_fu_905_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln719_5_fu_893_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln3_fu_897_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln209_fu_917_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_837_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln_fu_927_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln209_fu_923_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_943_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln719_1_fu_821_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_8_fu_795_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_33_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln209_1_fu_951_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_34_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_32_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_1_fu_573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_3_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_37_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_36_fu_977_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_2_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_5_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln719_4_fu_637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln719_6_fu_913_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_40_fu_1000_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_39_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_41_fu_1006_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_38_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_42_fu_1012_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln209_35_fu_971_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln39_fu_1068_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_fu_1082_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component crypto_kem_dec_hlrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component leaves_butterfly_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    betas_U : component leaves_butterfly_qcK
    generic map (
        DataWidth => 8,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => betas_address0,
        ce0 => betas_ce0,
        q0 => betas_q0);

    crypto_kem_dec_hlrcU_U70 : component crypto_kem_dec_hlrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_3_V_fu_188,
        din1 => tmp_3_V_1_fu_192,
        din2 => tmp_3_V_2_fu_196,
        din3 => tmp_3_V_3_fu_200,
        din4 => rhs_V_fu_1082_p5,
        dout => rhs_V_fu_1082_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_054_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                p_054_0_reg_262 <= i_V_fu_399_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_054_0_reg_262 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_054_1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_054_1_reg_273 <= i_V_16_reg_1309;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_054_1_reg_273 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_080_0_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_080_0_reg_284 <= j_V_reg_1328;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_1044_p2 = ap_const_lv1_0))) then 
                p_080_0_reg_284 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln1355_reg_1254 <= and_ln1355_fu_426_p2;
                tmp_18_reg_1260 <= betas_q0(1 downto 1);
                tmp_19_reg_1266 <= betas_q0(2 downto 2);
                tmp_24_reg_1272 <= betas_q0(3 downto 3);
                tmp_25_reg_1278 <= betas_q0(4 downto 4);
                tmp_26_reg_1284 <= betas_q0(5 downto 5);
                tmp_27_reg_1289 <= betas_q0(6 downto 6);
                tmp_28_reg_1294 <= betas_q0(7 downto 7);
                trunc_ln321_reg_1250_pp0_iter1_reg <= trunc_ln321_reg_1250;
                xor_ln719_reg_1300 <= xor_ln719_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_V_16_reg_1309 <= i_V_16_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_V_reg_1328 <= j_V_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_1096_p2 = ap_const_lv1_0))) then
                ret_V_reg_1333 <= ret_V_fu_1107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_1044_p2 = ap_const_lv1_0))) then
                rhs_V_reg_1320 <= rhs_V_fu_1082_p6;
                shl_ln39_reg_1314 <= shl_ln39_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    shl_ln1355_1_reg_1181(7 downto 2) <= shl_ln1355_1_fu_317_p2(7 downto 2);
                    shl_ln1355_2_reg_1191(7 downto 3) <= shl_ln1355_2_fu_331_p2(7 downto 3);
                    shl_ln1355_3_reg_1201(7 downto 4) <= shl_ln1355_3_fu_345_p2(7 downto 4);
                    shl_ln1355_4_reg_1211(7 downto 5) <= shl_ln1355_4_fu_359_p2(7 downto 5);
                    shl_ln1355_5_reg_1221(7 downto 6) <= shl_ln1355_5_fu_373_p2(7 downto 6);
                    shl_ln1355_6_reg_1231(7) <= shl_ln1355_6_fu_387_p2(7);
                    shl_ln1355_reg_1171(7 downto 1) <= shl_ln1355_fu_303_p2(7 downto 1);
                    shl_ln841_1_reg_1176(9 downto 2) <= shl_ln841_1_fu_309_p3(9 downto 2);
                    shl_ln841_2_reg_1186(10 downto 3) <= shl_ln841_2_fu_323_p3(10 downto 3);
                    shl_ln841_3_reg_1196(11 downto 4) <= shl_ln841_3_fu_337_p3(11 downto 4);
                    shl_ln841_4_reg_1206(12 downto 5) <= shl_ln841_4_fu_351_p3(12 downto 5);
                    shl_ln841_5_reg_1216(13 downto 6) <= shl_ln841_5_fu_365_p3(13 downto 6);
                    shl_ln841_6_reg_1226(14 downto 7) <= shl_ln841_6_fu_379_p3(14 downto 7);
                    shl_ln_reg_1166(8 downto 1) <= shl_ln_fu_295_p3(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln321_reg_1250_pp0_iter1_reg = ap_const_lv2_1))) then
                tmp_3_V_1_fu_192 <= tmp_0_V_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln321_reg_1250_pp0_iter1_reg = ap_const_lv2_2))) then
                tmp_3_V_2_fu_196 <= tmp_0_V_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln321_reg_1250_pp0_iter1_reg = ap_const_lv2_3))) then
                tmp_3_V_3_fu_200 <= tmp_0_V_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln321_reg_1250_pp0_iter1_reg = ap_const_lv2_0))) then
                tmp_3_V_fu_188 <= tmp_0_V_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln321_reg_1250 <= trunc_ln321_fu_410_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1166(0) <= '0';
    shl_ln1355_reg_1171(0) <= '0';
    shl_ln841_1_reg_1176(1 downto 0) <= "00";
    shl_ln1355_1_reg_1181(1 downto 0) <= "00";
    shl_ln841_2_reg_1186(2 downto 0) <= "000";
    shl_ln1355_2_reg_1191(2 downto 0) <= "000";
    shl_ln841_3_reg_1196(3 downto 0) <= "0000";
    shl_ln1355_3_reg_1201(3 downto 0) <= "0000";
    shl_ln841_4_reg_1206(4 downto 0) <= "00000";
    shl_ln1355_4_reg_1211(4 downto 0) <= "00000";
    shl_ln841_5_reg_1216(5 downto 0) <= "000000";
    shl_ln1355_5_reg_1221(5 downto 0) <= "000000";
    shl_ln841_6_reg_1226(6 downto 0) <= "0000000";
    shl_ln1355_6_reg_1231(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln887_fu_393_p2, ap_enable_reg_pp0_iter0, icmp_ln38_fu_1044_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln39_fu_1096_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln887_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln887_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_1044_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_1096_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    and_ln1355_1_fu_540_p2 <= (shl_ln_reg_1166 and select_ln1355_3_fu_526_p3);
    and_ln1355_2_fu_568_p2 <= (shl_ln841_1_reg_1176 and select_ln1355_5_fu_554_p3);
    and_ln1355_3_fu_592_p2 <= (shl_ln841_2_reg_1186 and select_ln1355_7_fu_578_p3);
    and_ln1355_4_fu_620_p2 <= (shl_ln841_3_reg_1196 and select_ln1355_9_fu_606_p3);
    and_ln1355_5_fu_479_p2 <= (shl_ln841_4_reg_1206 and select_ln1355_11_fu_471_p3);
    and_ln1355_6_fu_504_p2 <= (shl_ln841_5_reg_1216 and select_ln1355_13_fu_496_p3);
    and_ln1355_7_fu_668_p2 <= (shl_ln841_6_reg_1226 and select_ln1355_15_fu_654_p3);
    and_ln1355_fu_426_p2 <= (select_ln1355_fu_418_p3 and A_1_V);
    and_ln719_1_fu_573_p2 <= (shl_ln1355_1_reg_1181 and select_ln1355_6_fu_561_p3);
    and_ln719_2_fu_601_p2 <= (shl_ln1355_2_reg_1191 and select_ln1355_8_fu_585_p3);
    and_ln719_3_fu_625_p2 <= (shl_ln1355_3_reg_1201 and select_ln1355_10_fu_613_p3);
    and_ln719_4_fu_637_p2 <= (shl_ln1355_4_reg_1211 and select_ln1355_12_fu_630_p3);
    and_ln719_5_fu_649_p2 <= (shl_ln1355_5_reg_1221 and select_ln1355_14_fu_642_p3);
    and_ln719_6_fu_673_p2 <= (shl_ln1355_6_reg_1231 and select_ln1355_16_fu_661_p3);
    and_ln719_8_fu_795_p3 <= (tmp_15_fu_785_p4 & ap_const_lv2_0);
    and_ln719_9_fu_885_p3 <= (tmp_21_fu_875_p4 & ap_const_lv2_0);
    and_ln719_fu_549_p2 <= (shl_ln1355_reg_1171 and select_ln1355_4_fu_533_p3);
    and_ln_fu_773_p3 <= (tmp_14_fu_755_p4 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_393_p2)
    begin
        if ((icmp_ln887_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln38_fu_1044_p2, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_1044_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln38_fu_1044_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_1044_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    betas_address0 <= zext_ln544_fu_405_p1(2 - 1 downto 0);

    betas_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            betas_ce0 <= ap_const_logic_1;
        else 
            betas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_16_fu_1050_p2 <= std_logic_vector(unsigned(p_054_1_reg_273) + unsigned(ap_const_lv3_1));
    i_V_fu_399_p2 <= std_logic_vector(unsigned(p_054_0_reg_262) + unsigned(ap_const_lv3_1));
    icmp_ln38_fu_1044_p2 <= "1" when (p_054_1_reg_273 = ap_const_lv3_4) else "0";
    icmp_ln39_fu_1096_p2 <= "1" when (p_080_0_reg_284 = shl_ln39_reg_1314) else "0";
    icmp_ln887_fu_393_p2 <= "1" when (p_054_0_reg_262 = ap_const_lv3_4) else "0";
    j_V_fu_1101_p2 <= std_logic_vector(unsigned(p_080_0_reg_284) + unsigned(ap_const_lv4_1));
    or_ln209_1_fu_951_p3 <= (tmp_29_fu_943_p3 & tmp_14_fu_755_p4);
    or_ln_fu_927_p4 <= ((tmp_20_fu_837_p4 & ap_const_lv1_0) & tmp_21_fu_875_p4);
    ret_V_98_fu_1121_p2 <= (small_w_V_q0 xor rhs_V_reg_1320);
    ret_V_fu_1107_p2 <= std_logic_vector(unsigned(shl_ln39_reg_1314) + unsigned(p_080_0_reg_284));
    rhs_V_fu_1082_p5 <= p_054_1_reg_273(2 - 1 downto 0);
    select_ln1355_10_fu_613_p3 <= 
        ap_const_lv8_FF when (tmp_25_reg_1278(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_11_fu_471_p3 <= 
        ap_const_lv13_1FFF when (tmp_26_fu_463_p3(0) = '1') else 
        ap_const_lv13_0;
    select_ln1355_12_fu_630_p3 <= 
        ap_const_lv8_FF when (tmp_26_reg_1284(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_13_fu_496_p3 <= 
        ap_const_lv14_3FFF when (tmp_27_fu_488_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln1355_14_fu_642_p3 <= 
        ap_const_lv8_FF when (tmp_27_reg_1289(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_15_fu_654_p3 <= 
        ap_const_lv15_7FFF when (tmp_28_reg_1294(0) = '1') else 
        ap_const_lv15_0;
    select_ln1355_16_fu_661_p3 <= 
        ap_const_lv8_FF when (tmp_28_reg_1294(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_3_fu_526_p3 <= 
        ap_const_lv9_1FF when (tmp_18_reg_1260(0) = '1') else 
        ap_const_lv9_0;
    select_ln1355_4_fu_533_p3 <= 
        ap_const_lv8_FF when (tmp_18_reg_1260(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_5_fu_554_p3 <= 
        ap_const_lv10_3FF when (tmp_19_reg_1266(0) = '1') else 
        ap_const_lv10_0;
    select_ln1355_6_fu_561_p3 <= 
        ap_const_lv8_FF when (tmp_19_reg_1266(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_7_fu_578_p3 <= 
        ap_const_lv11_7FF when (tmp_24_reg_1272(0) = '1') else 
        ap_const_lv11_0;
    select_ln1355_8_fu_585_p3 <= 
        ap_const_lv8_FF when (tmp_24_reg_1272(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_9_fu_606_p3 <= 
        ap_const_lv12_FFF when (tmp_25_reg_1278(0) = '1') else 
        ap_const_lv12_0;
    select_ln1355_fu_418_p3 <= 
        ap_const_lv8_FF when (trunc_ln1355_fu_414_p1(0) = '1') else 
        ap_const_lv8_0;
    shl_ln1355_1_fu_317_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    shl_ln1355_2_fu_331_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_3(8-1 downto 0)))));
    shl_ln1355_3_fu_345_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_4(8-1 downto 0)))));
    shl_ln1355_4_fu_359_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_5(8-1 downto 0)))));
    shl_ln1355_5_fu_373_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_6(8-1 downto 0)))));
    shl_ln1355_6_fu_387_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_7(8-1 downto 0)))));
    shl_ln1355_fu_303_p2 <= std_logic_vector(shift_left(unsigned(A_1_V),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln39_fu_1072_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln39_fu_1068_p1(4-1 downto 0)))));
    shl_ln3_fu_897_p3 <= (tmp_21_fu_875_p4 & ap_const_lv3_0);
    shl_ln719_1_fu_905_p3 <= (tmp_21_fu_875_p4 & ap_const_lv4_0);
    shl_ln841_1_fu_309_p3 <= (A_1_V & ap_const_lv2_0);
    shl_ln841_2_fu_323_p3 <= (A_1_V & ap_const_lv3_0);
    shl_ln841_3_fu_337_p3 <= (A_1_V & ap_const_lv4_0);
    shl_ln841_4_fu_351_p3 <= (A_1_V & ap_const_lv5_0);
    shl_ln841_5_fu_365_p3 <= (A_1_V & ap_const_lv6_0);
    shl_ln841_6_fu_379_p3 <= (A_1_V & ap_const_lv7_0);
    shl_ln841_7_fu_803_p3 <= (tmp_14_fu_755_p4 & ap_const_lv3_0);
    shl_ln841_8_fu_829_p3 <= (tmp_14_fu_755_p4 & ap_const_lv4_0);
    shl_ln_fu_295_p3 <= (A_1_V & ap_const_lv1_0);
    small_w_V_address0 <= zext_ln544_60_fu_1112_p1(4 - 1 downto 0);

    small_w_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln544_89_fu_1117_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            small_w_V_address1 <= zext_ln544_89_fu_1117_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            small_w_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            small_w_V_address1 <= "XXXX";
        end if; 
    end process;


    small_w_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            small_w_V_ce0 <= ap_const_logic_1;
        else 
            small_w_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    small_w_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            small_w_V_ce1 <= ap_const_logic_1;
        else 
            small_w_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    small_w_V_d1_assign_proc : process(A_0_V, ap_CS_fsm_state5, ap_CS_fsm_state8, ret_V_98_fu_1121_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            small_w_V_d1 <= ret_V_98_fu_1121_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            small_w_V_d1 <= A_0_V;
        else 
            small_w_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    small_w_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            small_w_V_we1 <= ap_const_logic_1;
        else 
            small_w_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_0_V_fu_1018_p2 <= (xor_ln209_42_fu_1012_p2 xor xor_ln209_35_fu_971_p2);
    tmp_14_fu_755_p4 <= xor_ln719_26_fu_743_p2(14 downto 8);
    tmp_15_fu_785_p4 <= xor_ln719_26_fu_743_p2(13 downto 8);
    tmp_16_fu_811_p4 <= xor_ln719_26_fu_743_p2(12 downto 8);
    tmp_20_fu_837_p4 <= xor_ln719_26_fu_743_p2(11 downto 8);
    tmp_21_fu_875_p4 <= xor_ln719_30_fu_869_p2(10 downto 8);
    tmp_26_fu_463_p3 <= betas_q0(5 downto 5);
    tmp_27_fu_488_p3 <= betas_q0(6 downto 6);
    tmp_29_fu_943_p3 <= and_ln719_6_fu_673_p2(7 downto 7);
    trunc_ln1355_fu_414_p1 <= betas_q0(1 - 1 downto 0);
    trunc_ln321_fu_410_p1 <= p_054_0_reg_262(2 - 1 downto 0);
    trunc_ln719_1_fu_821_p3 <= (tmp_16_fu_811_p4 & ap_const_lv3_0);
    trunc_ln719_2_fu_717_p1 <= xor_ln719_21_fu_697_p2(8 - 1 downto 0);
    trunc_ln719_3_fu_733_p1 <= xor_ln719_20_fu_688_p2(8 - 1 downto 0);
    trunc_ln719_fu_707_p1 <= and_ln1355_1_fu_540_p2(8 - 1 downto 0);
    xor_ln1503_fu_749_p2 <= (xor_ln719_25_fu_737_p2 xor trunc_ln719_3_fu_733_p1);
    xor_ln209_32_fu_937_p2 <= (zext_ln209_fu_923_p1 xor or_ln_fu_927_p4);
    xor_ln209_33_fu_959_p2 <= (trunc_ln719_1_fu_821_p3 xor and_ln719_8_fu_795_p3);
    xor_ln209_34_fu_965_p2 <= (xor_ln209_33_fu_959_p2 xor or_ln209_1_fu_951_p3);
    xor_ln209_35_fu_971_p2 <= (xor_ln209_34_fu_965_p2 xor xor_ln209_32_fu_937_p2);
    xor_ln209_36_fu_977_p2 <= (and_ln719_1_fu_573_p2 xor and_ln1355_reg_1254);
    xor_ln209_37_fu_982_p2 <= (and_ln719_fu_549_p2 xor and_ln719_3_fu_625_p2);
    xor_ln209_38_fu_988_p2 <= (xor_ln209_37_fu_982_p2 xor xor_ln209_36_fu_977_p2);
    xor_ln209_39_fu_994_p2 <= (and_ln719_5_fu_649_p2 xor and_ln719_2_fu_601_p2);
    xor_ln209_40_fu_1000_p2 <= (zext_ln719_6_fu_913_p1 xor and_ln719_4_fu_637_p2);
    xor_ln209_41_fu_1006_p2 <= (xor_ln209_40_fu_1000_p2 xor xor_ln209_39_fu_994_p2);
    xor_ln209_42_fu_1012_p2 <= (xor_ln209_41_fu_1006_p2 xor xor_ln209_38_fu_988_p2);
    xor_ln209_fu_917_p2 <= (zext_ln719_5_fu_893_p1 xor shl_ln3_fu_897_p3);
    xor_ln719_19_fu_678_p2 <= (zext_ln1355_2_fu_597_p1 xor and_ln1355_4_fu_620_p2);
    xor_ln719_20_fu_688_p2 <= (zext_ln719_fu_684_p1 xor xor_ln719_reg_1300);
    xor_ln719_21_fu_697_p2 <= (zext_ln1355_fu_523_p1 xor and_ln1355_2_fu_568_p2);
    xor_ln719_22_fu_711_p2 <= (zext_ln1355_1_fu_545_p1 xor and_ln1355_7_fu_668_p2);
    xor_ln719_23_fu_721_p2 <= (trunc_ln719_fu_707_p1 xor and_ln719_6_fu_673_p2);
    xor_ln719_24_fu_727_p2 <= (zext_ln719_3_fu_703_p1 xor xor_ln719_22_fu_711_p2);
    xor_ln719_25_fu_737_p2 <= (xor_ln719_23_fu_721_p2 xor trunc_ln719_2_fu_717_p1);
    xor_ln719_26_fu_743_p2 <= (zext_ln719_2_fu_693_p1 xor xor_ln719_24_fu_727_p2);
    xor_ln719_27_fu_847_p2 <= (zext_ln841_fu_781_p1 xor shl_ln841_7_fu_803_p3);
    xor_ln719_28_fu_857_p2 <= (zext_ln717_fu_769_p1 xor shl_ln841_8_fu_829_p3);
    xor_ln719_29_fu_863_p2 <= (zext_ln717_1_fu_765_p1 xor xor_ln719_28_fu_857_p2);
    xor_ln719_30_fu_869_p2 <= (zext_ln719_4_fu_853_p1 xor xor_ln719_29_fu_863_p2);
    xor_ln719_fu_517_p2 <= (zext_ln1355_3_fu_484_p1 xor and_ln1355_6_fu_504_p2);
    zext_ln1355_1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1355_1_fu_540_p2),15));
    zext_ln1355_2_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1355_3_fu_592_p2),12));
    zext_ln1355_3_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1355_5_fu_479_p2),14));
    zext_ln1355_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1355_reg_1254),10));
    zext_ln209_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln209_fu_917_p2),8));
    zext_ln39_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_054_1_reg_273),4));
    zext_ln544_60_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_080_0_reg_284),64));
    zext_ln544_89_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1333),64));
    zext_ln544_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_054_0_reg_262),64));
    zext_ln717_1_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_755_p4),11));
    zext_ln717_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1503_fu_749_p2),11));
    zext_ln719_2_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_20_fu_688_p2),15));
    zext_ln719_3_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_21_fu_697_p2),15));
    zext_ln719_4_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_27_fu_847_p2),11));
    zext_ln719_5_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln719_9_fu_885_p3),6));
    zext_ln719_6_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln719_1_fu_905_p3),8));
    zext_ln719_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_19_fu_678_p2),14));
    zext_ln841_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_773_p3),10));
end behav;
