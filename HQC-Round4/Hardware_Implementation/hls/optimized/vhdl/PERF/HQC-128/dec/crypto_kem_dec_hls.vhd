-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_dec_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ss_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_V_ce0 : OUT STD_LOGIC;
    ss_V_we0 : OUT STD_LOGIC;
    ss_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ss_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce0 : OUT STD_LOGIC;
    ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ct_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce1 : OUT STD_LOGIC;
    ct_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sk_V_ce0 : OUT STD_LOGIC;
    sk_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_dec_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_dec_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-ftg256-1,HLS_INPUT_CLOCK=6.600000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.514000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=23538,HLS_SYN_LUT=61178,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_229 : STD_LOGIC_VECTOR (9 downto 0) := "1000101001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_4B : STD_LOGIC_VECTOR (7 downto 0) := "01001011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv14_1151 : STD_LOGIC_VECTOR (13 downto 0) := "01000101010001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv13_10 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_228 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000101000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_231 : STD_LOGIC_VECTOR (9 downto 0) := "1000110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal uv2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce0 : STD_LOGIC;
    signal uv2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal uv2_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce1 : STD_LOGIC;
    signal uv2_V_we1 : STD_LOGIC;
    signal uv2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i31_reg_537 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i32_reg_548 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i41_reg_571 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_hqc_ciphertext_from_s_fu_759_ap_ready : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_ap_done : STD_LOGIC;
    signal icmp_ln284_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_833_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln285_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_1_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_reg_995 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state22_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_2_fu_850_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_999 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal trunc_ln717_fu_876_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln717_reg_1015 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln144_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_V_fu_895_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln284_2_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_3_fu_907_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln285_2_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_2_reg_1038 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vect_compare_64_fu_821_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_d_d2_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_vect_set_random_fixe_fu_682_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_ap_done : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_ap_ready : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_ap_done : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_ap_ready : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_ap_done : STD_LOGIC;
    signal ap_block_state37_on_subcall_done : BOOLEAN;
    signal grp_vect_compare_fu_780_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_u_u2_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_vect_compare_fu_780_ap_ready : STD_LOGIC;
    signal grp_vect_compare_fu_780_ap_done : STD_LOGIC;
    signal result_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal lhs_V_fu_934_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_reg_1063 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_948_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1071 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ss_V_addr_reg_1076 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln390_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal store_rs_encode_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_encode_V_ce0 : STD_LOGIC;
    signal store_rs_encode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_ce1 : STD_LOGIC;
    signal store_rs_encode_V_we1 : STD_LOGIC;
    signal store_rs_encode_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_decode_V_ce0 : STD_LOGIC;
    signal store_rs_decode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_decode_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_decode_V_ce1 : STD_LOGIC;
    signal store_rs_decode_V_we1 : STD_LOGIC;
    signal store_rs_decode_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce0 : STD_LOGIC;
    signal state_seedexpander_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce1 : STD_LOGIC;
    signal state_seedexpander_V_we1 : STD_LOGIC;
    signal state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mc_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce0 : STD_LOGIC;
    signal mc_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce1 : STD_LOGIC;
    signal mc_V_we1 : STD_LOGIC;
    signal mc_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal theta_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal theta_V_ce0 : STD_LOGIC;
    signal theta_V_we0 : STD_LOGIC;
    signal theta_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal theta_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_V_ce0 : STD_LOGIC;
    signal d_V_we0 : STD_LOGIC;
    signal d_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_ce0 : STD_LOGIC;
    signal store_A_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_ce1 : STD_LOGIC;
    signal store_A_V_we1 : STD_LOGIC;
    signal store_A_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce0 : STD_LOGIC;
    signal store_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce1 : STD_LOGIC;
    signal store_B_V_we1 : STD_LOGIC;
    signal store_B_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_C_V_ce0 : STD_LOGIC;
    signal store_C_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_C_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal store_C_V_ce1 : STD_LOGIC;
    signal store_C_V_we1 : STD_LOGIC;
    signal store_C_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_s_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_s_V_ce0 : STD_LOGIC;
    signal h_s_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_s_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_s_V_ce1 : STD_LOGIC;
    signal h_s_V_we1 : STD_LOGIC;
    signal h_s_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_s_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal random_vector_A_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_A_V_ce0 : STD_LOGIC;
    signal random_vector_A_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_A_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_A_V_ce1 : STD_LOGIC;
    signal random_vector_A_V_we1 : STD_LOGIC;
    signal random_vector_A_V_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_B_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_B_V_ce0 : STD_LOGIC;
    signal random_vector_B_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_B_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_B_V_ce1 : STD_LOGIC;
    signal random_vector_B_V_we1 : STD_LOGIC;
    signal random_vector_B_V_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal store_seeds_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal store_seeds_V_ce0 : STD_LOGIC;
    signal store_seeds_V_we0 : STD_LOGIC;
    signal store_seeds_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_seeds_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vect_mul_add_fu_593_ap_start : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_ap_done : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_ap_idle : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_ap_ready : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_o_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_593_o_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_593_o_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_o_V_we1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_593_a1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_mul_add_fu_593_a1_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_a2_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_mul_add_fu_593_a2_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_a2_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_mul_add_fu_593_a2_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_weight_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_593_a3_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_593_a3_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_593_a3_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_593_a3_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_ap_start : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_ap_done : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_623_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_623_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_623_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_623_msg_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reed_solomon_encode_fu_623_msg_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_ap_start : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_ap_done : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_ap_idle : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_ap_ready : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_cdw_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_637_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_cdw_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_637_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_637_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_encode_fu_637_msg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_encode_fu_637_msg_V_ce0 : STD_LOGIC;
    signal grp_vect_add_fu_665_ap_start : STD_LOGIC;
    signal grp_vect_add_fu_665_ap_done : STD_LOGIC;
    signal grp_vect_add_fu_665_ap_idle : STD_LOGIC;
    signal grp_vect_add_fu_665_ap_ready : STD_LOGIC;
    signal grp_vect_add_fu_665_o_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_665_o_V_ce0 : STD_LOGIC;
    signal grp_vect_add_fu_665_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_665_o_V_ce1 : STD_LOGIC;
    signal grp_vect_add_fu_665_o_V_we1 : STD_LOGIC;
    signal grp_vect_add_fu_665_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_665_v2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_add_fu_665_v2_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_v_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_682_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_v_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_682_v_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_682_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_v_V_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_682_weight_V : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_682_state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_693_ap_start : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_ap_idle : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_output_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake256_512_ds_fu_693_output_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_output_V_we0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_output_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_693_input_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_693_input_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_input_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_693_input_V_ce1 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_693_inlen_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake256_512_ds_fu_693_domain_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_seedexpander_mult_ty_fu_711_ap_start : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_ap_done : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_ap_idle : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_ap_ready : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_output_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seedexpander_mult_ty_fu_711_output_V_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_output_V_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_output_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_ce0 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_711_state_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seedexpander_init_fu_719_ap_start : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_ap_done : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_ap_idle : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_ap_ready : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_seed_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seedexpander_init_fu_719_seed_V_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_state_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_719_state_V_2_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_state_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_719_state_V_2_ce1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_state_V_2_we1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_719_state_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reed_solomon_decode_fu_727_ap_start : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_ap_done : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_msg_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_solomon_decode_fu_727_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_msg_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_decode_fu_727_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_727_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_727_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_727_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_decode_fu_753_ap_start : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_ap_done : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_ap_idle : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_ap_ready : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_msg_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_decode_fu_753_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_msg_V_we1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_753_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_decode_fu_753_cdw_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reed_muller_decode_fu_753_cdw_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_ap_start : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_ap_idle : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_u_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_u_V_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_u_V_we1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_u_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_d_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_d_V_we0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_d_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_ct_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_ct_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_759_ct_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_759_ct_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_o_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_copyresize_mult_fu_767_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_o_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vect_copyresize_mult_fu_767_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_mult_fu_767_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_767_v_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_mult_fu_767_v_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_ap_start : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_ap_done : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_ap_idle : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_ap_ready : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_s_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_s_fu_773_s_V_ce0 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_s_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_s_fu_773_s_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_s_V_we1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_773_s_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hqc_public_key_from_s_fu_773_pk_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hqc_public_key_from_s_fu_773_pk_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_780_ap_start : STD_LOGIC;
    signal grp_vect_compare_fu_780_ap_idle : STD_LOGIC;
    signal grp_vect_compare_fu_780_v1_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_780_v1_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_780_v1_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_780_v2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_780_v2_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_780_v2_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_780_size_V_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_796_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_ap_done : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_796_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_v_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_796_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_v_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_copyresize_1_fu_802_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_o_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vect_copyresize_1_fu_802_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_802_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_1_fu_802_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_1_fu_802_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_fu_808_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_808_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_fu_808_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_fu_808_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_2_fu_815_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_815_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_2_fu_815_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_2_fu_815_v_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_ap_start : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_ap_idle : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_v1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_821_v1_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_821_v2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_821_v2_V_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_0_i32_phi_fu_552_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_025_0_i_i_i_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_0_i_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_vect_mul_add_fu_593_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_reed_solomon_encode_fu_623_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_reed_muller_encode_fu_637_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_add_fu_665_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_vect_set_random_fixe_fu_682_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_shake256_512_ds_fu_693_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_seedexpander_mult_ty_fu_711_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_seedexpander_init_fu_719_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_reed_solomon_decode_fu_727_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_reed_muller_decode_fu_753_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_hqc_ciphertext_from_s_fu_759_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_vect_copyresize_mult_fu_767_ap_start_reg : STD_LOGIC := '0';
    signal grp_hqc_public_key_from_s_fu_773_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_vect_compare_fu_780_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_vect_set_random_fixe_1_fu_796_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_vect_copyresize_1_fu_802_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_vect_copyresize_fu_808_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_copyresize_2_fu_815_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_compare_64_fu_821_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln321_6_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_1_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln391_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln717_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_959_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_856_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln321_fu_860_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln387_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1355_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_block_state35_on_subcall_done : BOOLEAN;
    signal ap_block_state43_on_subcall_done : BOOLEAN;
    signal ap_block_state45_on_subcall_done : BOOLEAN;
    signal ap_block_state47_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
  
    constant zero1                                                                   : std_logic := '0';
  constant zero64                                                                  : std_logic_vector (63 downto 0) := (others => '0');
  -- Channel A
  signal ap_start_A         : std_logic;
  signal ap_done_A          : std_logic;
  signal ap_idle_A          : std_logic;
  signal ap_ready_A         : std_logic;
  signal state_V_address0_A : std_logic_vector (4 downto 0);
  signal state_V_ce0_A      : std_logic;
  signal state_V_q0_A       : std_logic_vector (63 downto 0);
  signal state_V_address1_A : std_logic_vector (4 downto 0);
  signal state_V_ce1_A      : std_logic;
  signal state_V_we1_A      : std_logic;
  signal state_V_d1_A       : std_logic_vector (63 downto 0);
  -- Channel B
  signal ap_start_B         : std_logic;
  signal ap_done_B          : std_logic;
  signal ap_idle_B          : std_logic;
  signal ap_ready_B         : std_logic;
  signal state_V_address0_B : std_logic_vector (4 downto 0);
  signal state_V_ce0_B      : std_logic;
  signal state_V_q0_B       : std_logic_vector (63 downto 0);
  signal state_V_address1_B : std_logic_vector (4 downto 0);
  signal state_V_ce1_B      : std_logic;
  signal state_V_we1_B      : std_logic;
  signal state_V_d1_B       : std_logic_vector (63 downto 0);
  -- Channel C
  signal ap_start_C         : std_logic;
  signal ap_done_C          : std_logic;
  signal ap_idle_C          : std_logic;
  signal ap_ready_C         : std_logic;
  signal state_V_address0_C : std_logic_vector (4 downto 0);
  signal state_V_ce0_C      : std_logic;
  signal state_V_q0_C       : std_logic_vector (63 downto 0);
  signal state_V_address1_C : std_logic_vector (4 downto 0);
  signal state_V_ce1_C      : std_logic;
  signal state_V_we1_C      : std_logic;
  signal state_V_d1_C       : std_logic_vector (63 downto 0);
  -- Channel D
  signal ap_start_D         : std_logic;
  signal ap_done_D          : std_logic;
  signal ap_idle_D          : std_logic;
  signal ap_ready_D         : std_logic;
  signal state_V_address0_D : std_logic_vector (4 downto 0);
  signal state_V_ce0_D      : std_logic;
  signal state_V_q0_D       : std_logic_vector (63 downto 0);
  signal state_V_address1_D : std_logic_vector (4 downto 0);
  signal state_V_ce1_D      : std_logic;
  signal state_V_we1_D      : std_logic;
  signal state_V_d1_D       : std_logic_vector (63 downto 0);
  -- Channel E
  signal ap_start_E         : std_logic;
  signal ap_done_E          : std_logic;
  signal ap_idle_E          : std_logic;
  signal ap_ready_E         : std_logic;
  signal state_V_address0_E : std_logic_vector (4 downto 0);
  signal state_V_ce0_E      : std_logic;
  signal state_V_q0_E       : std_logic_vector (63 downto 0);
  signal state_V_address1_E : std_logic_vector (4 downto 0);
  signal state_V_ce1_E      : std_logic;
  signal state_V_we1_E      : std_logic;
  signal state_V_d1_E       : std_logic_vector (63 downto 0);
  
  component KeccakF1600_StatePer is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      -- Channel A
      ap_start_A         : in  std_logic;
      ap_done_A          : out std_logic;
      ap_idle_A          : out std_logic;
      ap_ready_A         : out std_logic;
      state_V_address0_A : out std_logic_vector (4 downto 0);
      state_V_ce0_A      : out std_logic;
      state_V_q0_A       : in  std_logic_vector (63 downto 0);
      state_V_address1_A : out std_logic_vector (4 downto 0);
      state_V_ce1_A      : out std_logic;
      state_V_we1_A      : out std_logic;
      state_V_d1_A       : out std_logic_vector (63 downto 0);
      -- Channel B
      ap_start_B         : in  std_logic;
      ap_done_B          : out std_logic;
      ap_idle_B          : out std_logic;
      ap_ready_B         : out std_logic;
      state_V_address0_B : out std_logic_vector (4 downto 0);
      state_V_ce0_B      : out std_logic;
      state_V_q0_B       : in  std_logic_vector (63 downto 0);
      state_V_address1_B : out std_logic_vector (4 downto 0);
      state_V_ce1_B      : out std_logic;
      state_V_we1_B      : out std_logic;
      state_V_d1_B       : out std_logic_vector (63 downto 0);
      -- Channel C
      ap_start_C         : in  std_logic;
      ap_done_C          : out std_logic;
      ap_idle_C          : out std_logic;
      ap_ready_C         : out std_logic;
      state_V_address0_C : out std_logic_vector (4 downto 0);
      state_V_ce0_C      : out std_logic;
      state_V_q0_C       : in  std_logic_vector (63 downto 0);
      state_V_address1_C : out std_logic_vector (4 downto 0);
      state_V_ce1_C      : out std_logic;
      state_V_we1_C      : out std_logic;
      state_V_d1_C       : out std_logic_vector (63 downto 0);
      -- Channel D
      ap_start_D         : in  std_logic;
      ap_done_D          : out std_logic;
      ap_idle_D          : out std_logic;
      ap_ready_D         : out std_logic;
      state_V_address0_D : out std_logic_vector (4 downto 0);
      state_V_ce0_D      : out std_logic;
      state_V_q0_D       : in  std_logic_vector (63 downto 0);
      state_V_address1_D : out std_logic_vector (4 downto 0);
      state_V_ce1_D      : out std_logic;
      state_V_we1_D      : out std_logic;
      state_V_d1_D       : out std_logic_vector (63 downto 0);
      -- Channel E
      ap_start_E         : in  std_logic;
      ap_done_E          : out std_logic;
      ap_idle_E          : out std_logic;
      ap_ready_E         : out std_logic;
      state_V_address0_E : out std_logic_vector (4 downto 0);
      state_V_ce0_E      : out std_logic;
      state_V_q0_E       : in  std_logic_vector (63 downto 0);
      state_V_address1_E : out std_logic_vector (4 downto 0);
      state_V_ce1_E      : out std_logic;
      state_V_we1_E      : out std_logic;
      state_V_d1_E       : out std_logic_vector (63 downto 0)
      );
  end component;
  
    component vect_mul_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a1_V_ce0 : OUT STD_LOGIC;
        a1_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        a2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a2_V_ce0 : OUT STD_LOGIC;
        a2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a2_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a2_V_ce1 : OUT STD_LOGIC;
        a2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (7 downto 0);
        a3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a3_V_ce0 : OUT STD_LOGIC;
        a3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a3_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a3_V_ce1 : OUT STD_LOGIC;
        a3_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        msg_V_ce0 : OUT STD_LOGIC;
        msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce0 : OUT STD_LOGIC;
        msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v2_V_ce0 : OUT STD_LOGIC;
        v2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_set_random_fixe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
        state_seedexpander_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce0 : OUT STD_LOGIC;
        state_seedexpander_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_seedexpander_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce1 : OUT STD_LOGIC;
        state_seedexpander_V_we1 : OUT STD_LOGIC;
        state_seedexpander_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component shake256_512_ds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        inlen_V : IN STD_LOGIC_VECTOR (13 downto 0);
        domain_V : IN STD_LOGIC_VECTOR (3 downto 0) 
      );
    end component;


    component seedexpander_mult_ty IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce0 : OUT STD_LOGIC;
        state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce1 : OUT STD_LOGIC;
        state_V_2_we1 : OUT STD_LOGIC;
        state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	  );
    end component;


    component seedexpander_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        seed_V_ce0 : OUT STD_LOGIC;
        seed_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce0 : OUT STD_LOGIC;
        state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce1 : OUT STD_LOGIC;
        state_V_2_we1 : OUT STD_LOGIC;
        state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
    end component;


    component reed_solomon_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_ciphertext_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_V_ce1 : OUT STD_LOGIC;
        u_V_we1 : OUT STD_LOGIC;
        u_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        d_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_ce0 : OUT STD_LOGIC;
        d_V_we0 : OUT STD_LOGIC;
        d_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_ce0 : OUT STD_LOGIC;
        ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ct_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_ce1 : OUT STD_LOGIC;
        ct_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_public_key_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce0 : OUT STD_LOGIC;
        s_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce1 : OUT STD_LOGIC;
        s_V_we1 : OUT STD_LOGIC;
        s_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pk_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pk_V_ce0 : OUT STD_LOGIC;
        pk_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vect_compare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v1_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v1_V_ce0 : OUT STD_LOGIC;
        v1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v1_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        v2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v2_V_ce0 : OUT STD_LOGIC;
        v2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v2_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        size_V_offset : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vect_set_random_fixe_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fixed_weight_by_coord_vector_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fixed_weight_by_coord_vector_V_ce0 : OUT STD_LOGIC;
        fixed_weight_by_coord_vector_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component vect_copyresize_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_compare_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        v1_V_ce0 : OUT STD_LOGIC;
        v1_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        v2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        v2_V_ce0 : OUT STD_LOGIC;
        v2_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crypto_kem_dec_hlHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_dec_hlLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_dec_hlOgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_hlRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_kem_dec_hlShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component crypto_kem_dec_hlUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
  
  KeccakF1600_StatePer_U : KeccakF1600_StatePer
    port map(
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      -- Channel A         
      ap_start_A         => ap_start_A,
      ap_done_A          => ap_done_A,
      ap_idle_A          => ap_idle_A,
      ap_ready_A         => ap_ready_A,
      state_V_address0_A => state_V_address0_A,
      state_V_ce0_A      => state_V_ce0_A,
      state_V_q0_A       => state_V_q0_A,
      state_V_address1_A => state_V_address1_A,
      state_V_ce1_A      => state_V_ce1_A,
      state_V_we1_A      => state_V_we1_A,
      state_V_d1_A       => state_V_d1_A,
      -- Channel B         
      ap_start_B         => ap_start_B,
      ap_done_B          => ap_done_B,
      ap_idle_B          => ap_idle_B,
      ap_ready_B         => ap_ready_B,
      state_V_address0_B => state_V_address0_B,
      state_V_ce0_B      => state_V_ce0_B,
      state_V_q0_B       => state_V_q0_B,
      state_V_address1_B => state_V_address1_B,
      state_V_ce1_B      => state_V_ce1_B,
      state_V_we1_B      => state_V_we1_B,
      state_V_d1_B       => state_V_d1_B,
      -- Channel C         
      ap_start_C         => ap_start_C,
      ap_done_C          => ap_done_C,
      ap_idle_C          => ap_idle_C,
      ap_ready_C         => ap_ready_C,
      state_V_address0_C => state_V_address0_C,
      state_V_ce0_C      => state_V_ce0_C,
      state_V_q0_C       => state_V_q0_C,
      state_V_address1_C => state_V_address1_C,
      state_V_ce1_C      => state_V_ce1_C,
      state_V_we1_C      => state_V_we1_C,
      state_V_d1_C       => state_V_d1_C,
      -- Channel D         
      ap_start_D         => zero1,
      ap_done_D          => open,
      ap_idle_D          => open,
      ap_ready_D         => open,
      state_V_address0_D => open,
      state_V_ce0_D      => open,
      state_V_q0_D       => zero64,
      state_V_address1_D => open,
      state_V_ce1_D      => open,
      state_V_we1_D      => open,
      state_V_d1_D       => open,
      -- Channel E         
      ap_start_E         => zero1,
      ap_done_E          => open,
      ap_idle_E          => open,
      ap_ready_E         => open,
      state_V_address0_E => open,
      state_V_ce0_E      => open,
      state_V_q0_E       => zero64,
      state_V_address1_E => open,
      state_V_ce1_E      => open,
      state_V_we1_E      => open,
      state_V_d1_E       => open
      );
	  
    uv2_V_U : component crypto_kem_dec_hlHfu
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => uv2_V_address0,
        ce0 => uv2_V_ce0,
        q0 => uv2_V_q0,
        address1 => uv2_V_address1,
        ce1 => uv2_V_ce1,
        we1 => uv2_V_we1,
        d1 => uv2_V_d1);

    store_rs_encode_V_U : component crypto_kem_dec_hlIfE
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_rs_encode_V_address0,
        ce0 => store_rs_encode_V_ce0,
        q0 => store_rs_encode_V_q0,
        address1 => grp_reed_solomon_encode_fu_623_cdw_V_address1,
        ce1 => store_rs_encode_V_ce1,
        we1 => store_rs_encode_V_we1,
        d1 => grp_reed_solomon_encode_fu_623_cdw_V_d1,
        q1 => store_rs_encode_V_q1);

    store_rs_decode_V_U : component crypto_kem_dec_hlJfO
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_reed_solomon_decode_fu_727_cdw_V_address0,
        ce0 => store_rs_decode_V_ce0,
        q0 => store_rs_decode_V_q0,
        address1 => store_rs_decode_V_address1,
        ce1 => store_rs_decode_V_ce1,
        we1 => store_rs_decode_V_we1,
        d1 => store_rs_decode_V_d1);

    state_seedexpander_V_U : component crypto_kem_dec_hlKfY
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_seedexpander_V_address0,
        ce0 => state_seedexpander_V_ce0,
        q0 => state_seedexpander_V_q0,
        address1 => state_seedexpander_V_address1,
        ce1 => state_seedexpander_V_ce1,
        we1 => state_seedexpander_V_we1,
        d1 => state_seedexpander_V_d1);

    mc_V_U : component crypto_kem_dec_hlLf8
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mc_V_address0,
        ce0 => mc_V_ce0,
        q0 => mc_V_q0,
        address1 => mc_V_address1,
        ce1 => mc_V_ce1,
        we1 => mc_V_we1,
        d1 => mc_V_d1,
        q1 => mc_V_q1);

    theta_V_U : component crypto_kem_dec_hlMgi
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => theta_V_address0,
        ce0 => theta_V_ce0,
        we0 => theta_V_we0,
        d0 => theta_V_d0,
        q0 => theta_V_q0);

    d_V_U : component crypto_kem_dec_hlMgi
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_V_address0,
        ce0 => d_V_ce0,
        we0 => d_V_we0,
        d0 => d_V_d0,
        q0 => d_V_q0);

    store_A_V_U : component crypto_kem_dec_hlOgC
    generic map (
        DataWidth => 8,
        AddressRange => 2240,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_A_V_address0,
        ce0 => store_A_V_ce0,
        q0 => store_A_V_q0,
        address1 => store_A_V_address1,
        ce1 => store_A_V_ce1,
        we1 => store_A_V_we1,
        d1 => store_A_V_d1);

    store_B_V_U : component crypto_kem_dec_hlPgM
    generic map (
        DataWidth => 8,
        AddressRange => 2209,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_B_V_address0,
        ce0 => store_B_V_ce0,
        q0 => store_B_V_q0,
        address1 => store_B_V_address1,
        ce1 => store_B_V_ce1,
        we1 => store_B_V_we1,
        d1 => store_B_V_d1,
        q1 => store_B_V_q1);

    store_C_V_U : component crypto_kem_dec_hlQgW
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_reed_solomon_encode_fu_623_msg_V_address0,
        ce0 => store_C_V_ce0,
        q0 => store_C_V_q0,
        address1 => store_C_V_address1,
        ce1 => store_C_V_ce1,
        we1 => store_C_V_we1,
        d1 => store_C_V_d1);

    h_s_V_U : component crypto_kem_dec_hlRg6
    generic map (
        DataWidth => 32,
        AddressRange => 561,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_s_V_address0,
        ce0 => h_s_V_ce0,
        q0 => h_s_V_q0,
        address1 => h_s_V_address1,
        ce1 => h_s_V_ce1,
        we1 => h_s_V_we1,
        d1 => h_s_V_d1,
        q1 => h_s_V_q1);

    random_vector_A_V_U : component crypto_kem_dec_hlShg
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_A_V_address0,
        ce0 => random_vector_A_V_ce0,
        q0 => random_vector_A_V_q0,
        address1 => random_vector_A_V_address1,
        ce1 => random_vector_A_V_ce1,
        we1 => random_vector_A_V_we1,
        d1 => random_vector_A_V_d1);

    random_vector_B_V_U : component crypto_kem_dec_hlShg
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_B_V_address0,
        ce0 => random_vector_B_V_ce0,
        q0 => random_vector_B_V_q0,
        address1 => random_vector_B_V_address1,
        ce1 => random_vector_B_V_ce1,
        we1 => random_vector_B_V_we1,
        d1 => random_vector_B_V_d1);

    store_seeds_V_U : component crypto_kem_dec_hlUhA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_seeds_V_address0,
        ce0 => store_seeds_V_ce0,
        we0 => store_seeds_V_we0,
        d0 => store_seeds_V_d0,
        q0 => store_seeds_V_q0);

    grp_vect_mul_add_fu_593 : component vect_mul_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_mul_add_fu_593_ap_start,
        ap_done => grp_vect_mul_add_fu_593_ap_done,
        ap_idle => grp_vect_mul_add_fu_593_ap_idle,
        ap_ready => grp_vect_mul_add_fu_593_ap_ready,
        o_V_address0 => grp_vect_mul_add_fu_593_o_V_address0,
        o_V_ce0 => grp_vect_mul_add_fu_593_o_V_ce0,
        o_V_q0 => store_A_V_q0,
        o_V_address1 => grp_vect_mul_add_fu_593_o_V_address1,
        o_V_ce1 => grp_vect_mul_add_fu_593_o_V_ce1,
        o_V_we1 => grp_vect_mul_add_fu_593_o_V_we1,
        o_V_d1 => grp_vect_mul_add_fu_593_o_V_d1,
        a1_V_address0 => grp_vect_mul_add_fu_593_a1_V_address0,
        a1_V_ce0 => grp_vect_mul_add_fu_593_a1_V_ce0,
        a1_V_q0 => random_vector_A_V_q0,
        a2_V_address0 => grp_vect_mul_add_fu_593_a2_V_address0,
        a2_V_ce0 => grp_vect_mul_add_fu_593_a2_V_ce0,
        a2_V_q0 => h_s_V_q0,
        a2_V_address1 => grp_vect_mul_add_fu_593_a2_V_address1,
        a2_V_ce1 => grp_vect_mul_add_fu_593_a2_V_ce1,
        a2_V_q1 => h_s_V_q1,
        weight_V => grp_vect_mul_add_fu_593_weight_V,
        a3_V_address0 => grp_vect_mul_add_fu_593_a3_V_address0,
        a3_V_ce0 => grp_vect_mul_add_fu_593_a3_V_ce0,
        a3_V_q0 => store_B_V_q0,
        a3_V_address1 => grp_vect_mul_add_fu_593_a3_V_address1,
        a3_V_ce1 => grp_vect_mul_add_fu_593_a3_V_ce1,
        a3_V_q1 => store_B_V_q1);

    grp_reed_solomon_encode_fu_623 : component reed_solomon_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_encode_fu_623_ap_start,
        ap_done => grp_reed_solomon_encode_fu_623_ap_done,
        ap_idle => grp_reed_solomon_encode_fu_623_ap_idle,
        ap_ready => grp_reed_solomon_encode_fu_623_ap_ready,
        cdw_V_address0 => grp_reed_solomon_encode_fu_623_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_encode_fu_623_cdw_V_ce0,
        cdw_V_q0 => store_rs_encode_V_q0,
        cdw_V_address1 => grp_reed_solomon_encode_fu_623_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_encode_fu_623_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_encode_fu_623_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_encode_fu_623_cdw_V_d1,
        cdw_V_q1 => store_rs_encode_V_q1,
        msg_V_address0 => grp_reed_solomon_encode_fu_623_msg_V_address0,
        msg_V_ce0 => grp_reed_solomon_encode_fu_623_msg_V_ce0,
        msg_V_q0 => store_C_V_q0);

    grp_reed_muller_encode_fu_637 : component reed_muller_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_encode_fu_637_ap_start,
        ap_done => grp_reed_muller_encode_fu_637_ap_done,
        ap_idle => grp_reed_muller_encode_fu_637_ap_idle,
        ap_ready => grp_reed_muller_encode_fu_637_ap_ready,
        cdw_V_address0 => grp_reed_muller_encode_fu_637_cdw_V_address0,
        cdw_V_ce0 => grp_reed_muller_encode_fu_637_cdw_V_ce0,
        cdw_V_q0 => uv2_V_q0,
        cdw_V_address1 => grp_reed_muller_encode_fu_637_cdw_V_address1,
        cdw_V_ce1 => grp_reed_muller_encode_fu_637_cdw_V_ce1,
        cdw_V_we1 => grp_reed_muller_encode_fu_637_cdw_V_we1,
        cdw_V_d1 => grp_reed_muller_encode_fu_637_cdw_V_d1,
        msg_V_address0 => grp_reed_muller_encode_fu_637_msg_V_address0,
        msg_V_ce0 => grp_reed_muller_encode_fu_637_msg_V_ce0,
        msg_V_q0 => store_rs_encode_V_q0);

    grp_vect_add_fu_665 : component vect_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_add_fu_665_ap_start,
        ap_done => grp_vect_add_fu_665_ap_done,
        ap_idle => grp_vect_add_fu_665_ap_idle,
        ap_ready => grp_vect_add_fu_665_ap_ready,
        o_V_address0 => grp_vect_add_fu_665_o_V_address0,
        o_V_ce0 => grp_vect_add_fu_665_o_V_ce0,
        o_V_q0 => uv2_V_q0,
        o_V_address1 => grp_vect_add_fu_665_o_V_address1,
        o_V_ce1 => grp_vect_add_fu_665_o_V_ce1,
        o_V_we1 => grp_vect_add_fu_665_o_V_we1,
        o_V_d1 => grp_vect_add_fu_665_o_V_d1,
        v2_V_address0 => grp_vect_add_fu_665_v2_V_address0,
        v2_V_ce0 => grp_vect_add_fu_665_v2_V_ce0,
        v2_V_q0 => store_A_V_q0);

    grp_vect_set_random_fixe_fu_682 : component vect_set_random_fixe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_fu_682_ap_start,
        ap_done => grp_vect_set_random_fixe_fu_682_ap_done,
        ap_idle => grp_vect_set_random_fixe_fu_682_ap_idle,
        ap_ready => grp_vect_set_random_fixe_fu_682_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_fu_682_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_fu_682_v_V_ce0,
        v_V_q0 => grp_vect_set_random_fixe_fu_682_v_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_fu_682_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_fu_682_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_fu_682_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_fu_682_v_V_d1,
        weight_V => grp_vect_set_random_fixe_fu_682_weight_V,
        state_seedexpander_V_address0 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address0,
        state_seedexpander_V_ce0 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce0,
        state_seedexpander_V_q0 => state_seedexpander_V_q0,
        state_seedexpander_V_address1 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address1,
        state_seedexpander_V_ce1 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce1,
        state_seedexpander_V_we1 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_we1,
        state_seedexpander_V_d1 => grp_vect_set_random_fixe_fu_682_state_seedexpander_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel A
      ap_start_permute         => ap_start_A,
      ap_done_permute          => ap_done_A,
      ap_idle_permute          => ap_idle_A,
      ap_ready_permute         => ap_ready_A,
      state_V_address0_permute => state_V_address0_A,
      state_V_ce0_permute      => state_V_ce0_A,
      state_V_q0_permute       => state_V_q0_A,
      state_V_address1_permute => state_V_address1_A,
      state_V_ce1_permute      => state_V_ce1_A,
      state_V_we1_permute      => state_V_we1_A,
      state_V_d1_permute       => state_V_d1_A
      );

    grp_shake256_512_ds_fu_693 : component shake256_512_ds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake256_512_ds_fu_693_ap_start,
        ap_done => grp_shake256_512_ds_fu_693_ap_done,
        ap_idle => grp_shake256_512_ds_fu_693_ap_idle,
        ap_ready => grp_shake256_512_ds_fu_693_ap_ready,
        output_V_address0 => grp_shake256_512_ds_fu_693_output_V_address0,
        output_V_ce0 => grp_shake256_512_ds_fu_693_output_V_ce0,
        output_V_we0 => grp_shake256_512_ds_fu_693_output_V_we0,
        output_V_d0 => grp_shake256_512_ds_fu_693_output_V_d0,
        input_V_address0 => grp_shake256_512_ds_fu_693_input_V_address0,
        input_V_ce0 => grp_shake256_512_ds_fu_693_input_V_ce0,
        input_V_q0 => mc_V_q0,
        input_V_address1 => grp_shake256_512_ds_fu_693_input_V_address1,
        input_V_ce1 => grp_shake256_512_ds_fu_693_input_V_ce1,
        input_V_q1 => mc_V_q1,
        inlen_V => grp_shake256_512_ds_fu_693_inlen_V,
        domain_V => grp_shake256_512_ds_fu_693_domain_V
      );

    grp_seedexpander_mult_ty_fu_711 : component seedexpander_mult_ty
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_mult_ty_fu_711_ap_start,
        ap_done => grp_seedexpander_mult_ty_fu_711_ap_done,
        ap_idle => grp_seedexpander_mult_ty_fu_711_ap_idle,
        ap_ready => grp_seedexpander_mult_ty_fu_711_ap_ready,
        output_V_address1 => grp_seedexpander_mult_ty_fu_711_output_V_address1,
        output_V_ce1 => grp_seedexpander_mult_ty_fu_711_output_V_ce1,
        output_V_we1 => grp_seedexpander_mult_ty_fu_711_output_V_we1,
        output_V_d1 => grp_seedexpander_mult_ty_fu_711_output_V_d1,
        state_V_2_address0 => grp_seedexpander_mult_ty_fu_711_state_V_2_address0,
        state_V_2_ce0 => grp_seedexpander_mult_ty_fu_711_state_V_2_ce0,
        state_V_2_q0 => state_seedexpander_V_q0,
        state_V_2_address1 => grp_seedexpander_mult_ty_fu_711_state_V_2_address1,
        state_V_2_ce1 => grp_seedexpander_mult_ty_fu_711_state_V_2_ce1,
        state_V_2_we1 => grp_seedexpander_mult_ty_fu_711_state_V_2_we1,
        state_V_2_d1 => grp_seedexpander_mult_ty_fu_711_state_V_2_d1,
	  -- Channel to KeccakF1600_StatePermute Channel B
	  ap_start_permute         => ap_start_B,
      ap_done_permute          => ap_done_B,
      ap_idle_permute          => ap_idle_B,
      ap_ready_permute         => ap_ready_B,
      state_V_address0_permute => state_V_address0_B,
      state_V_ce0_permute      => state_V_ce0_B,
      state_V_q0_permute       => state_V_q0_B,
      state_V_address1_permute => state_V_address1_B,
      state_V_ce1_permute      => state_V_ce1_B,
      state_V_we1_permute      => state_V_we1_B,
      state_V_d1_permute       => state_V_d1_B
	  );

    grp_seedexpander_init_fu_719 : component seedexpander_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_init_fu_719_ap_start,
        ap_done => grp_seedexpander_init_fu_719_ap_done,
        ap_idle => grp_seedexpander_init_fu_719_ap_idle,
        ap_ready => grp_seedexpander_init_fu_719_ap_ready,
        seed_V_address0 => grp_seedexpander_init_fu_719_seed_V_address0,
        seed_V_ce0 => grp_seedexpander_init_fu_719_seed_V_ce0,
        seed_V_q0 => store_seeds_V_q0,
        state_V_2_address0 => grp_seedexpander_init_fu_719_state_V_2_address0,
        state_V_2_ce0 => grp_seedexpander_init_fu_719_state_V_2_ce0,
        state_V_2_q0 => state_seedexpander_V_q0,
        state_V_2_address1 => grp_seedexpander_init_fu_719_state_V_2_address1,
        state_V_2_ce1 => grp_seedexpander_init_fu_719_state_V_2_ce1,
        state_V_2_we1 => grp_seedexpander_init_fu_719_state_V_2_we1,
        state_V_2_d1 => grp_seedexpander_init_fu_719_state_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel D
      ap_start_permute         => ap_start_C,
      ap_done_permute          => ap_done_C,
      ap_idle_permute          => ap_idle_C,
      ap_ready_permute         => ap_ready_C,
      state_V_address0_permute => state_V_address0_C,
      state_V_ce0_permute      => state_V_ce0_C,
      state_V_q0_permute       => state_V_q0_C,
      state_V_address1_permute => state_V_address1_C,
      state_V_ce1_permute      => state_V_ce1_C,
      state_V_we1_permute      => state_V_we1_C,
      state_V_d1_permute       => state_V_d1_C
      );

    grp_reed_solomon_decode_fu_727 : component reed_solomon_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_decode_fu_727_ap_start,
        ap_done => grp_reed_solomon_decode_fu_727_ap_done,
        ap_idle => grp_reed_solomon_decode_fu_727_ap_idle,
        ap_ready => grp_reed_solomon_decode_fu_727_ap_ready,
        msg_V_address1 => grp_reed_solomon_decode_fu_727_msg_V_address1,
        msg_V_ce1 => grp_reed_solomon_decode_fu_727_msg_V_ce1,
        msg_V_we1 => grp_reed_solomon_decode_fu_727_msg_V_we1,
        msg_V_d1 => grp_reed_solomon_decode_fu_727_msg_V_d1,
        cdw_V_address0 => grp_reed_solomon_decode_fu_727_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_decode_fu_727_cdw_V_ce0,
        cdw_V_q0 => store_rs_decode_V_q0,
        cdw_V_address1 => grp_reed_solomon_decode_fu_727_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_decode_fu_727_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_decode_fu_727_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_decode_fu_727_cdw_V_d1);

    grp_reed_muller_decode_fu_753 : component reed_muller_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_decode_fu_753_ap_start,
        ap_done => grp_reed_muller_decode_fu_753_ap_done,
        ap_idle => grp_reed_muller_decode_fu_753_ap_idle,
        ap_ready => grp_reed_muller_decode_fu_753_ap_ready,
        msg_V_address1 => grp_reed_muller_decode_fu_753_msg_V_address1,
        msg_V_ce1 => grp_reed_muller_decode_fu_753_msg_V_ce1,
        msg_V_we1 => grp_reed_muller_decode_fu_753_msg_V_we1,
        msg_V_d1 => grp_reed_muller_decode_fu_753_msg_V_d1,
        cdw_V_address0 => grp_reed_muller_decode_fu_753_cdw_V_address0,
        cdw_V_ce0 => grp_reed_muller_decode_fu_753_cdw_V_ce0,
        cdw_V_q0 => store_A_V_q0);

    grp_hqc_ciphertext_from_s_fu_759 : component hqc_ciphertext_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_ciphertext_from_s_fu_759_ap_start,
        ap_done => grp_hqc_ciphertext_from_s_fu_759_ap_done,
        ap_idle => grp_hqc_ciphertext_from_s_fu_759_ap_idle,
        ap_ready => grp_hqc_ciphertext_from_s_fu_759_ap_ready,
        u_V_address1 => grp_hqc_ciphertext_from_s_fu_759_u_V_address1,
        u_V_ce1 => grp_hqc_ciphertext_from_s_fu_759_u_V_ce1,
        u_V_we1 => grp_hqc_ciphertext_from_s_fu_759_u_V_we1,
        u_V_d1 => grp_hqc_ciphertext_from_s_fu_759_u_V_d1,
        d_V_address0 => grp_hqc_ciphertext_from_s_fu_759_d_V_address0,
        d_V_ce0 => grp_hqc_ciphertext_from_s_fu_759_d_V_ce0,
        d_V_we0 => grp_hqc_ciphertext_from_s_fu_759_d_V_we0,
        d_V_d0 => grp_hqc_ciphertext_from_s_fu_759_d_V_d0,
        ct_V_address0 => grp_hqc_ciphertext_from_s_fu_759_ct_V_address0,
        ct_V_ce0 => grp_hqc_ciphertext_from_s_fu_759_ct_V_ce0,
        ct_V_q0 => ct_V_q0,
        ct_V_address1 => grp_hqc_ciphertext_from_s_fu_759_ct_V_address1,
        ct_V_ce1 => grp_hqc_ciphertext_from_s_fu_759_ct_V_ce1,
        ct_V_q1 => ct_V_q1);

    grp_vect_copyresize_mult_fu_767 : component vect_copyresize_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_mult_fu_767_ap_start,
        ap_done => grp_vect_copyresize_mult_fu_767_ap_done,
        ap_idle => grp_vect_copyresize_mult_fu_767_ap_idle,
        ap_ready => grp_vect_copyresize_mult_fu_767_ap_ready,
        o_V_address1 => grp_vect_copyresize_mult_fu_767_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_mult_fu_767_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_mult_fu_767_o_V_we1,
        o_V_d1 => grp_vect_copyresize_mult_fu_767_o_V_d1,
        v_V_address0 => grp_vect_copyresize_mult_fu_767_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_mult_fu_767_v_V_ce0,
        v_V_q0 => mc_V_q0,
        v_V_address1 => grp_vect_copyresize_mult_fu_767_v_V_address1,
        v_V_ce1 => grp_vect_copyresize_mult_fu_767_v_V_ce1,
        v_V_q1 => mc_V_q1);

    grp_hqc_public_key_from_s_fu_773 : component hqc_public_key_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_public_key_from_s_fu_773_ap_start,
        ap_done => grp_hqc_public_key_from_s_fu_773_ap_done,
        ap_idle => grp_hqc_public_key_from_s_fu_773_ap_idle,
        ap_ready => grp_hqc_public_key_from_s_fu_773_ap_ready,
        s_V_address0 => grp_hqc_public_key_from_s_fu_773_s_V_address0,
        s_V_ce0 => grp_hqc_public_key_from_s_fu_773_s_V_ce0,
        s_V_q0 => h_s_V_q0,
        s_V_address1 => grp_hqc_public_key_from_s_fu_773_s_V_address1,
        s_V_ce1 => grp_hqc_public_key_from_s_fu_773_s_V_ce1,
        s_V_we1 => grp_hqc_public_key_from_s_fu_773_s_V_we1,
        s_V_d1 => grp_hqc_public_key_from_s_fu_773_s_V_d1,
        pk_V_address0 => grp_hqc_public_key_from_s_fu_773_pk_V_address0,
        pk_V_ce0 => grp_hqc_public_key_from_s_fu_773_pk_V_ce0,
        pk_V_q0 => sk_V_q0);

    grp_vect_compare_fu_780 : component vect_compare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_fu_780_ap_start,
        ap_done => grp_vect_compare_fu_780_ap_done,
        ap_idle => grp_vect_compare_fu_780_ap_idle,
        ap_ready => grp_vect_compare_fu_780_ap_ready,
        v1_V_address0 => grp_vect_compare_fu_780_v1_V_address0,
        v1_V_ce0 => grp_vect_compare_fu_780_v1_V_ce0,
        v1_V_q0 => mc_V_q0,
        v1_V_offset => grp_vect_compare_fu_780_v1_V_offset,
        v2_V_address0 => grp_vect_compare_fu_780_v2_V_address0,
        v2_V_ce0 => grp_vect_compare_fu_780_v2_V_ce0,
        v2_V_q0 => uv2_V_q0,
        v2_V_offset => grp_vect_compare_fu_780_v2_V_offset,
        size_V_offset => grp_vect_compare_fu_780_size_V_offset,
        ap_return => grp_vect_compare_fu_780_ap_return);

    grp_vect_set_random_fixe_1_fu_796 : component vect_set_random_fixe_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_1_fu_796_ap_start,
        ap_done => grp_vect_set_random_fixe_1_fu_796_ap_done,
        ap_idle => grp_vect_set_random_fixe_1_fu_796_ap_idle,
        ap_ready => grp_vect_set_random_fixe_1_fu_796_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_1_fu_796_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_1_fu_796_v_V_ce0,
        v_V_q0 => store_B_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_1_fu_796_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_1_fu_796_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_1_fu_796_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_1_fu_796_v_V_d1,
        fixed_weight_by_coord_vector_V_address0 => grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0,
        fixed_weight_by_coord_vector_V_ce0 => grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0,
        fixed_weight_by_coord_vector_V_q0 => grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0);

    grp_vect_copyresize_1_fu_802 : component vect_copyresize_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_1_fu_802_ap_start,
        ap_done => grp_vect_copyresize_1_fu_802_ap_done,
        ap_idle => grp_vect_copyresize_1_fu_802_ap_idle,
        ap_ready => grp_vect_copyresize_1_fu_802_ap_ready,
        o_V_address1 => grp_vect_copyresize_1_fu_802_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_1_fu_802_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_1_fu_802_o_V_we1,
        o_V_d1 => grp_vect_copyresize_1_fu_802_o_V_d1,
        v_V_address0 => grp_vect_copyresize_1_fu_802_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_1_fu_802_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_copyresize_fu_808 : component vect_copyresize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_fu_808_ap_start,
        ap_done => grp_vect_copyresize_fu_808_ap_done,
        ap_idle => grp_vect_copyresize_fu_808_ap_idle,
        ap_ready => grp_vect_copyresize_fu_808_ap_ready,
        o_V_address1 => grp_vect_copyresize_fu_808_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_fu_808_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_fu_808_o_V_we1,
        o_V_d1 => grp_vect_copyresize_fu_808_o_V_d1,
        v_V_address0 => grp_vect_copyresize_fu_808_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_fu_808_v_V_ce0,
        v_V_q0 => store_A_V_q0);

    grp_vect_copyresize_2_fu_815 : component vect_copyresize_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_2_fu_815_ap_start,
        ap_done => grp_vect_copyresize_2_fu_815_ap_done,
        ap_idle => grp_vect_copyresize_2_fu_815_ap_idle,
        ap_ready => grp_vect_copyresize_2_fu_815_ap_ready,
        o_V_address1 => grp_vect_copyresize_2_fu_815_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_2_fu_815_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_2_fu_815_o_V_we1,
        o_V_d1 => grp_vect_copyresize_2_fu_815_o_V_d1,
        v_V_address0 => grp_vect_copyresize_2_fu_815_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_2_fu_815_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_compare_64_fu_821 : component vect_compare_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_64_fu_821_ap_start,
        ap_done => grp_vect_compare_64_fu_821_ap_done,
        ap_idle => grp_vect_compare_64_fu_821_ap_idle,
        ap_ready => grp_vect_compare_64_fu_821_ap_ready,
        v1_V_address0 => grp_vect_compare_64_fu_821_v1_V_address0,
        v1_V_ce0 => grp_vect_compare_64_fu_821_v1_V_ce0,
        v1_V_q0 => d_V_q0,
        v2_V_address0 => grp_vect_compare_64_fu_821_v2_V_address0,
        v2_V_ce0 => grp_vect_compare_64_fu_821_v2_V_ce0,
        v2_V_q0 => theta_V_q0,
        ap_return => grp_vect_compare_64_fu_821_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state22);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_ciphertext_from_s_fu_759_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_ciphertext_from_s_fu_759_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_hqc_ciphertext_from_s_fu_759_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_ciphertext_from_s_fu_759_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_ciphertext_from_s_fu_759_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_public_key_from_s_fu_773_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_public_key_from_s_fu_773_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_hqc_public_key_from_s_fu_773_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_public_key_from_s_fu_773_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_public_key_from_s_fu_773_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_decode_fu_753_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_decode_fu_753_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_reed_muller_decode_fu_753_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_decode_fu_753_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_decode_fu_753_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_encode_fu_637_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_encode_fu_637_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    grp_reed_muller_encode_fu_637_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_encode_fu_637_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_encode_fu_637_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_decode_fu_727_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_decode_fu_727_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_reed_solomon_decode_fu_727_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_decode_fu_727_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_decode_fu_727_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_encode_fu_623_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_encode_fu_623_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    grp_reed_solomon_encode_fu_623_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_encode_fu_623_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_encode_fu_623_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_init_fu_719_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_init_fu_719_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_seedexpander_init_fu_719_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_init_fu_719_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_init_fu_719_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_mult_ty_fu_711_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_mult_ty_fu_711_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_seedexpander_mult_ty_fu_711_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_mult_ty_fu_711_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_mult_ty_fu_711_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake256_512_ds_fu_693_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake256_512_ds_fu_693_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    grp_shake256_512_ds_fu_693_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake256_512_ds_fu_693_ap_ready = ap_const_logic_1)) then 
                    grp_shake256_512_ds_fu_693_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_add_fu_665_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_add_fu_665_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    grp_vect_add_fu_665_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_add_fu_665_ap_ready = ap_const_logic_1)) then 
                    grp_vect_add_fu_665_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_64_fu_821_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_64_fu_821_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    grp_vect_compare_64_fu_821_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_64_fu_821_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_64_fu_821_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_fu_780_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_fu_780_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    grp_vect_compare_fu_780_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_fu_780_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_fu_780_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_1_fu_802_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_1_fu_802_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_vect_copyresize_1_fu_802_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_1_fu_802_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_1_fu_802_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_2_fu_815_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_2_fu_815_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_vect_copyresize_2_fu_815_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_2_fu_815_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_2_fu_815_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_fu_808_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_fu_808_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_vect_copyresize_fu_808_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_fu_808_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_fu_808_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_mult_fu_767_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_mult_fu_767_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_vect_copyresize_mult_fu_767_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_mult_fu_767_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_mult_fu_767_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_mul_add_fu_593_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_mul_add_fu_593_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    grp_vect_mul_add_fu_593_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_mul_add_fu_593_ap_ready = ap_const_logic_1)) then 
                    grp_vect_mul_add_fu_593_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_1_fu_796_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_1_fu_796_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    grp_vect_set_random_fixe_1_fu_796_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_1_fu_796_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_1_fu_796_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_fu_682_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_fu_682_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    grp_vect_set_random_fixe_fu_682_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_fu_682_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_fu_682_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i31_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_fu_827_p2 = ap_const_lv1_0))) then 
                i_0_i31_reg_537 <= i_1_fu_833_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
                i_0_i31_reg_537 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i32_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln284_1_reg_995 = ap_const_lv1_0))) then 
                i_0_i32_reg_548 <= i_2_reg_999;
            elsif (((grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_i32_reg_548 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i41_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_1))) then 
                i_0_i41_reg_571 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln284_2_fu_901_p2 = ap_const_lv1_0))) then 
                i_0_i41_reg_571 <= i_3_fu_907_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_0_i_reg_582 <= i_reg_1071;
            elsif (((grp_vect_compare_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_0_i_reg_582 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_025_0_i_i_i_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_0))) then 
                p_025_0_i_i_i_reg_560 <= i_V_fu_895_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_025_0_i_i_i_reg_560 <= ap_const_lv10_229;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state37_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                cmp_d_d2_reg_1048 <= grp_vect_compare_64_fu_821_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                cmp_u_u2_reg_1053 <= grp_vect_compare_fu_780_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_2_reg_999 <= i_2_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_reg_1071 <= i_fu_948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln284_1_reg_995 <= icmp_ln284_1_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln284_2_reg_1029 <= icmp_ln284_2_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln284_reg_976 <= icmp_ln284_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                lhs_V_reg_1063 <= lhs_V_fu_934_p3;
                result_reg_1058 <= result_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln390_fu_942_p2 = ap_const_lv1_0))) then
                ss_V_addr_reg_1076 <= zext_ln391_fu_954_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                trunc_ln717_reg_1015 <= trunc_ln717_fu_876_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln284_2_fu_901_p2 = ap_const_lv1_0))) then
                    zext_ln285_2_reg_1038(2 downto 0) <= zext_ln285_2_fu_913_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_fu_827_p2 = ap_const_lv1_0))) then
                    zext_ln285_reg_985(2 downto 0) <= zext_ln285_fu_839_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln285_reg_985(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_2_reg_1038(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, icmp_ln284_fu_827_p2, ap_enable_reg_pp0_iter0, icmp_ln284_1_fu_844_p2, ap_enable_reg_pp1_iter0, icmp_ln144_fu_884_p2, ap_CS_fsm_state31, icmp_ln284_2_fu_901_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_ap_done, grp_shake256_512_ds_fu_693_ap_done, ap_block_state37_on_subcall_done, ap_CS_fsm_state51, grp_vect_compare_fu_780_ap_done, ap_CS_fsm_state53, ap_CS_fsm_state54, icmp_ln390_fu_942_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state21, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, grp_vect_mul_add_fu_593_ap_done, grp_vect_add_fu_665_ap_done, grp_seedexpander_mult_ty_fu_711_ap_done, grp_seedexpander_init_fu_719_ap_done, grp_reed_solomon_decode_fu_727_ap_done, grp_reed_muller_decode_fu_753_ap_done, grp_vect_set_random_fixe_1_fu_796_ap_done, grp_vect_copyresize_1_fu_802_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state35, ap_CS_fsm_state49, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state45, ap_CS_fsm_state39, ap_CS_fsm_state19, ap_block_state7_on_subcall_done, ap_block_state9_on_subcall_done, ap_block_state35_on_subcall_done, ap_block_state43_on_subcall_done, ap_block_state45_on_subcall_done, ap_block_state47_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln284_fu_827_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln284_fu_827_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_vect_set_random_fixe_fu_682_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_vect_mul_add_fu_593_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_reed_muller_decode_fu_753_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_reed_solomon_decode_fu_727_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_vect_copyresize_1_fu_802_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln284_1_fu_844_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln284_1_fu_844_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_seedexpander_init_fu_719_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_seedexpander_mult_ty_fu_711_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln284_2_fu_901_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln284_2_fu_901_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_boolean_0 = ap_block_state35_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_boolean_0 = ap_block_state37_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_vect_set_random_fixe_1_fu_796_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_vect_set_random_fixe_fu_682_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_boolean_0 = ap_block_state43_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_boolean_0 = ap_block_state45_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_const_boolean_0 = ap_block_state47_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((grp_vect_add_fu_665_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((grp_vect_compare_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_vect_compare_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln390_fu_942_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln321_fu_860_p2 <= std_logic_vector(unsigned(zext_ln321_fu_856_p1) + unsigned(ap_const_lv4_5));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(35);
    ap_CS_fsm_state40 <= ap_CS_fsm(36);
    ap_CS_fsm_state41 <= ap_CS_fsm(37);
    ap_CS_fsm_state42 <= ap_CS_fsm(38);
    ap_CS_fsm_state43 <= ap_CS_fsm(39);
    ap_CS_fsm_state44 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(41);
    ap_CS_fsm_state46 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(43);
    ap_CS_fsm_state48 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(45);
    ap_CS_fsm_state50 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(47);
    ap_CS_fsm_state52 <= ap_CS_fsm(48);
    ap_CS_fsm_state53 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(50);
    ap_CS_fsm_state55 <= ap_CS_fsm(51);
    ap_CS_fsm_state56 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_on_subcall_done_assign_proc : process(grp_shake256_512_ds_fu_693_ap_done, grp_reed_solomon_encode_fu_623_ap_done, grp_seedexpander_init_fu_719_ap_done)
    begin
                ap_block_state35_on_subcall_done <= ((grp_seedexpander_init_fu_719_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_623_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_0));
    end process;


    ap_block_state37_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_682_ap_done, grp_shake256_512_ds_fu_693_ap_done, grp_vect_compare_64_fu_821_ap_done)
    begin
                ap_block_state37_on_subcall_done <= ((grp_vect_compare_64_fu_821_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_693_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_682_ap_done = ap_const_logic_0));
    end process;


    ap_block_state43_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_682_ap_done, grp_vect_mul_add_fu_593_ap_done)
    begin
                ap_block_state43_on_subcall_done <= ((grp_vect_mul_add_fu_593_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_682_ap_done = ap_const_logic_0));
    end process;


    ap_block_state45_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_s_fu_773_ap_done, grp_vect_set_random_fixe_1_fu_796_ap_done, grp_vect_copyresize_fu_808_ap_done)
    begin
                ap_block_state45_on_subcall_done <= ((grp_vect_copyresize_fu_808_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_796_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_s_fu_773_ap_done = ap_const_logic_0));
    end process;


    ap_block_state47_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_593_ap_done, grp_reed_muller_encode_fu_637_ap_done)
    begin
                ap_block_state47_on_subcall_done <= ((grp_reed_muller_encode_fu_637_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_593_ap_done = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_on_subcall_done_assign_proc : process(grp_seedexpander_init_fu_719_ap_done, grp_vect_copyresize_mult_fu_767_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_vect_copyresize_mult_fu_767_ap_done = ap_const_logic_0) or (grp_seedexpander_init_fu_719_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_682_ap_done, grp_vect_copyresize_2_fu_815_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_vect_copyresize_2_fu_815_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_682_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln284_fu_827_p2)
    begin
        if ((icmp_ln284_fu_827_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state22_assign_proc : process(icmp_ln284_1_fu_844_p2)
    begin
        if ((icmp_ln284_1_fu_844_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(icmp_ln284_2_fu_901_p2)
    begin
        if ((icmp_ln284_2_fu_901_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i32_phi_fu_552_p4_assign_proc : process(i_0_i32_reg_548, icmp_ln284_1_reg_995, ap_CS_fsm_pp1_stage0, i_2_reg_999, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln284_1_reg_995 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i32_phi_fu_552_p4 <= i_2_reg_999;
        else 
            ap_phi_mux_i_0_i32_phi_fu_552_p4 <= i_0_i32_reg_548;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_reg_1058),32));
    ct_V_address0 <= grp_hqc_ciphertext_from_s_fu_759_ct_V_address0;
    ct_V_address1 <= grp_hqc_ciphertext_from_s_fu_759_ct_V_address1;
    ct_V_ce0 <= grp_hqc_ciphertext_from_s_fu_759_ct_V_ce0;
    ct_V_ce1 <= grp_hqc_ciphertext_from_s_fu_759_ct_V_ce1;

    d_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state37, grp_hqc_ciphertext_from_s_fu_759_d_V_address0, grp_vect_compare_64_fu_821_v1_V_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            d_V_address0 <= grp_vect_compare_64_fu_821_v1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_V_address0 <= grp_hqc_ciphertext_from_s_fu_759_d_V_address0;
        else 
            d_V_address0 <= "XXX";
        end if; 
    end process;


    d_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state37, grp_hqc_ciphertext_from_s_fu_759_d_V_ce0, grp_vect_compare_64_fu_821_v1_V_ce0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            d_V_ce0 <= grp_vect_compare_64_fu_821_v1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_V_ce0 <= grp_hqc_ciphertext_from_s_fu_759_d_V_ce0;
        else 
            d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_d_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_V_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_V_d0 <= grp_hqc_ciphertext_from_s_fu_759_d_V_d0;
        else 
            d_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_d_V_we0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_V_we0 <= grp_hqc_ciphertext_from_s_fu_759_d_V_we0;
        else 
            d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_hqc_ciphertext_from_s_fu_759_ap_start <= grp_hqc_ciphertext_from_s_fu_759_ap_start_reg;
    grp_hqc_public_key_from_s_fu_773_ap_start <= grp_hqc_public_key_from_s_fu_773_ap_start_reg;
    grp_reed_muller_decode_fu_753_ap_start <= grp_reed_muller_decode_fu_753_ap_start_reg;
    grp_reed_muller_encode_fu_637_ap_start <= grp_reed_muller_encode_fu_637_ap_start_reg;
    grp_reed_solomon_decode_fu_727_ap_start <= grp_reed_solomon_decode_fu_727_ap_start_reg;
    grp_reed_solomon_encode_fu_623_ap_start <= grp_reed_solomon_encode_fu_623_ap_start_reg;
    grp_seedexpander_init_fu_719_ap_start <= grp_seedexpander_init_fu_719_ap_start_reg;
    grp_seedexpander_mult_ty_fu_711_ap_start <= grp_seedexpander_mult_ty_fu_711_ap_start_reg;
    grp_shake256_512_ds_fu_693_ap_start <= grp_shake256_512_ds_fu_693_ap_start_reg;

    grp_shake256_512_ds_fu_693_domain_V_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state21, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_shake256_512_ds_fu_693_domain_V <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_shake256_512_ds_fu_693_domain_V <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_shake256_512_ds_fu_693_domain_V <= ap_const_lv4_3;
        else 
            grp_shake256_512_ds_fu_693_domain_V <= "XXXX";
        end if; 
    end process;


    grp_shake256_512_ds_fu_693_inlen_V_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state21, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_shake256_512_ds_fu_693_inlen_V <= ap_const_lv14_1151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_shake256_512_ds_fu_693_inlen_V <= ap_const_lv14_10;
        else 
            grp_shake256_512_ds_fu_693_inlen_V <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_add_fu_665_ap_start <= grp_vect_add_fu_665_ap_start_reg;
    grp_vect_compare_64_fu_821_ap_start <= grp_vect_compare_64_fu_821_ap_start_reg;
    grp_vect_compare_fu_780_ap_start <= grp_vect_compare_fu_780_ap_start_reg;

    grp_vect_compare_fu_780_size_V_offset_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_vect_compare_fu_780_size_V_offset <= ap_const_lv12_8A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_vect_compare_fu_780_size_V_offset <= ap_const_lv12_8A1;
        else 
            grp_vect_compare_fu_780_size_V_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_780_v1_V_offset_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_vect_compare_fu_780_v1_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_vect_compare_fu_780_v1_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_780_v1_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_780_v2_V_offset_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_vect_compare_fu_780_v2_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_vect_compare_fu_780_v2_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_780_v2_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_copyresize_1_fu_802_ap_start <= grp_vect_copyresize_1_fu_802_ap_start_reg;
    grp_vect_copyresize_2_fu_815_ap_start <= grp_vect_copyresize_2_fu_815_ap_start_reg;
    grp_vect_copyresize_fu_808_ap_start <= grp_vect_copyresize_fu_808_ap_start_reg;
    grp_vect_copyresize_mult_fu_767_ap_start <= grp_vect_copyresize_mult_fu_767_ap_start_reg;
    grp_vect_mul_add_fu_593_ap_start <= grp_vect_mul_add_fu_593_ap_start_reg;

    grp_vect_mul_add_fu_593_weight_V_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_vect_mul_add_fu_593_weight_V <= ap_const_lv8_4B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_vect_mul_add_fu_593_weight_V <= ap_const_lv8_42;
        else 
            grp_vect_mul_add_fu_593_weight_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_1_fu_796_ap_start <= grp_vect_set_random_fixe_1_fu_796_ap_start_reg;

    grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0 <= random_vector_B_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_fu_682_ap_start <= grp_vect_set_random_fixe_fu_682_ap_start_reg;

    grp_vect_set_random_fixe_fu_682_v_V_q0_assign_proc : process(ap_CS_fsm_state37, random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state43, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_vect_set_random_fixe_fu_682_v_V_q0 <= random_vector_B_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_vect_set_random_fixe_fu_682_v_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_fu_682_v_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_set_random_fixe_fu_682_weight_V_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state43, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_vect_set_random_fixe_fu_682_weight_V <= ap_const_lv7_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_vect_set_random_fixe_fu_682_weight_V <= ap_const_lv7_42;
        else 
            grp_vect_set_random_fixe_fu_682_weight_V <= "XXXXXXX";
        end if; 
    end process;


    h_s_V_address0_assign_proc : process(ap_CS_fsm_state28, grp_vect_mul_add_fu_593_a2_V_address0, grp_hqc_public_key_from_s_fu_773_s_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            h_s_V_address0 <= ap_const_lv64_228(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_address0 <= grp_hqc_public_key_from_s_fu_773_s_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            h_s_V_address0 <= grp_vect_mul_add_fu_593_a2_V_address0;
        else 
            h_s_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_s_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state31, grp_vect_mul_add_fu_593_a2_V_address1, grp_seedexpander_mult_ty_fu_711_output_V_address1, grp_vect_copyresize_mult_fu_767_o_V_address1, grp_hqc_public_key_from_s_fu_773_s_V_address1, ap_CS_fsm_state30, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state45, zext_ln544_fu_890_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            h_s_V_address1 <= zext_ln544_fu_890_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            h_s_V_address1 <= ap_const_lv64_228(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_s_V_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_address1 <= grp_hqc_public_key_from_s_fu_773_s_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_s_V_address1 <= grp_vect_copyresize_mult_fu_767_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            h_s_V_address1 <= grp_seedexpander_mult_ty_fu_711_output_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            h_s_V_address1 <= grp_vect_mul_add_fu_593_a2_V_address1;
        else 
            h_s_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_s_V_ce0_assign_proc : process(ap_CS_fsm_state28, grp_vect_mul_add_fu_593_a2_V_ce0, grp_hqc_public_key_from_s_fu_773_s_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            h_s_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_ce0 <= grp_hqc_public_key_from_s_fu_773_s_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            h_s_V_ce0 <= grp_vect_mul_add_fu_593_a2_V_ce0;
        else 
            h_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state31, grp_vect_mul_add_fu_593_a2_V_ce1, grp_seedexpander_mult_ty_fu_711_output_V_ce1, grp_vect_copyresize_mult_fu_767_o_V_ce1, grp_hqc_public_key_from_s_fu_773_s_V_ce1, ap_CS_fsm_state30, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1)))) then 
            h_s_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_ce1 <= grp_hqc_public_key_from_s_fu_773_s_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_s_V_ce1 <= grp_vect_copyresize_mult_fu_767_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            h_s_V_ce1 <= grp_seedexpander_mult_ty_fu_711_output_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            h_s_V_ce1 <= grp_vect_mul_add_fu_593_a2_V_ce1;
        else 
            h_s_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state31, grp_seedexpander_mult_ty_fu_711_output_V_d1, grp_vect_copyresize_mult_fu_767_o_V_d1, grp_hqc_public_key_from_s_fu_773_s_V_d1, ap_CS_fsm_state30, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state45, zext_ln717_fu_880_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            h_s_V_d1 <= zext_ln717_fu_880_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            h_s_V_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_d1 <= grp_hqc_public_key_from_s_fu_773_s_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_s_V_d1 <= grp_vect_copyresize_mult_fu_767_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            h_s_V_d1 <= grp_seedexpander_mult_ty_fu_711_output_V_d1;
        else 
            h_s_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_s_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, icmp_ln144_fu_884_p2, ap_CS_fsm_state31, grp_seedexpander_mult_ty_fu_711_output_V_we1, grp_vect_copyresize_mult_fu_767_o_V_we1, grp_hqc_public_key_from_s_fu_773_s_V_we1, ap_CS_fsm_state30, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln144_fu_884_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1)))) then 
            h_s_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_s_V_we1 <= grp_hqc_public_key_from_s_fu_773_s_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_s_V_we1 <= grp_vect_copyresize_mult_fu_767_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            h_s_V_we1 <= grp_seedexpander_mult_ty_fu_711_output_V_we1;
        else 
            h_s_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_833_p2 <= std_logic_vector(unsigned(i_0_i31_reg_537) + unsigned(ap_const_lv3_1));
    i_2_fu_850_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i32_phi_fu_552_p4) + unsigned(ap_const_lv3_1));
    i_3_fu_907_p2 <= std_logic_vector(unsigned(i_0_i41_reg_571) + unsigned(ap_const_lv3_1));
    i_V_fu_895_p2 <= std_logic_vector(unsigned(p_025_0_i_i_i_reg_560) + unsigned(ap_const_lv10_1));
    i_fu_948_p2 <= std_logic_vector(unsigned(i_0_i_reg_582) + unsigned(ap_const_lv4_1));
    icmp_ln144_fu_884_p2 <= "1" when (p_025_0_i_i_i_reg_560 = ap_const_lv10_231) else "0";
    icmp_ln284_1_fu_844_p2 <= "1" when (ap_phi_mux_i_0_i32_phi_fu_552_p4 = ap_const_lv3_5) else "0";
    icmp_ln284_2_fu_901_p2 <= "1" when (i_0_i41_reg_571 = ap_const_lv3_5) else "0";
    icmp_ln284_fu_827_p2 <= "1" when (i_0_i31_reg_537 = ap_const_lv3_5) else "0";
    icmp_ln390_fu_942_p2 <= "1" when (i_0_i_reg_582 = ap_const_lv4_8) else "0";
    lhs_V_fu_934_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln1355_fu_928_p2(0) = '1') else 
        ap_const_lv64_0;

    mc_V_address0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_input_V_address0, grp_vect_copyresize_mult_fu_767_v_V_address0, grp_vect_compare_fu_780_v1_V_address0, grp_vect_copyresize_1_fu_802_v_V_address0, grp_vect_copyresize_2_fu_815_v_V_address0, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mc_V_address0 <= grp_vect_copyresize_2_fu_815_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mc_V_address0 <= grp_vect_copyresize_1_fu_802_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            mc_V_address0 <= grp_vect_compare_fu_780_v1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mc_V_address0 <= grp_vect_copyresize_mult_fu_767_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            mc_V_address0 <= grp_shake256_512_ds_fu_693_input_V_address0;
        else 
            mc_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state37, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_input_V_address1, grp_reed_solomon_decode_fu_727_msg_V_address1, grp_hqc_ciphertext_from_s_fu_759_u_V_address1, grp_vect_copyresize_mult_fu_767_v_V_address1, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mc_V_address1 <= ap_const_lv64_0(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mc_V_address1 <= grp_vect_copyresize_mult_fu_767_v_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mc_V_address1 <= grp_hqc_ciphertext_from_s_fu_759_u_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mc_V_address1 <= grp_reed_solomon_decode_fu_727_msg_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            mc_V_address1 <= grp_shake256_512_ds_fu_693_input_V_address1;
        else 
            mc_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_ce0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_input_V_ce0, grp_vect_copyresize_mult_fu_767_v_V_ce0, grp_vect_compare_fu_780_v1_V_ce0, grp_vect_copyresize_1_fu_802_v_V_ce0, grp_vect_copyresize_2_fu_815_v_V_ce0, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mc_V_ce0 <= grp_vect_copyresize_2_fu_815_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mc_V_ce0 <= grp_vect_copyresize_1_fu_802_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            mc_V_ce0 <= grp_vect_compare_fu_780_v1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mc_V_ce0 <= grp_vect_copyresize_mult_fu_767_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            mc_V_ce0 <= grp_shake256_512_ds_fu_693_input_V_ce0;
        else 
            mc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state37, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_input_V_ce1, grp_reed_solomon_decode_fu_727_msg_V_ce1, grp_hqc_ciphertext_from_s_fu_759_u_V_ce1, grp_vect_copyresize_mult_fu_767_v_V_ce1, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state17)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mc_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mc_V_ce1 <= grp_vect_copyresize_mult_fu_767_v_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mc_V_ce1 <= grp_hqc_ciphertext_from_s_fu_759_u_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mc_V_ce1 <= grp_reed_solomon_decode_fu_727_msg_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            mc_V_ce1 <= grp_shake256_512_ds_fu_693_input_V_ce1;
        else 
            mc_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_reed_solomon_decode_fu_727_msg_V_d1, grp_hqc_ciphertext_from_s_fu_759_u_V_d1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mc_V_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mc_V_d1 <= grp_hqc_ciphertext_from_s_fu_759_u_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mc_V_d1 <= grp_reed_solomon_decode_fu_727_msg_V_d1;
        else 
            mc_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    mc_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_reed_solomon_decode_fu_727_msg_V_we1, grp_hqc_ciphertext_from_s_fu_759_u_V_we1, ap_CS_fsm_state17)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mc_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mc_V_we1 <= grp_hqc_ciphertext_from_s_fu_759_u_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mc_V_we1 <= grp_reed_solomon_decode_fu_727_msg_V_we1;
        else 
            mc_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln387_fu_918_p2 <= (grp_vect_compare_fu_780_ap_return or cmp_d_d2_reg_1048);

    random_vector_A_V_address0_assign_proc : process(ap_CS_fsm_state37, grp_vect_mul_add_fu_593_a1_V_address0, grp_vect_set_random_fixe_fu_682_v_V_address0, grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_fu_682_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            random_vector_A_V_address0 <= grp_vect_mul_add_fu_593_a1_V_address0;
        else 
            random_vector_A_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_A_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_v_V_address1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            random_vector_A_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_address1 <= grp_vect_set_random_fixe_fu_682_v_V_address1;
        else 
            random_vector_A_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_A_V_ce0_assign_proc : process(ap_CS_fsm_state37, grp_vect_mul_add_fu_593_a1_V_ce0, grp_vect_set_random_fixe_fu_682_v_V_ce0, grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_fu_682_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            random_vector_A_V_ce0 <= grp_vect_mul_add_fu_593_a1_V_ce0;
        else 
            random_vector_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_v_V_ce1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            random_vector_A_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_ce1 <= grp_vect_set_random_fixe_fu_682_v_V_ce1;
        else 
            random_vector_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_v_V_d1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            random_vector_A_V_d1 <= ap_const_lv15_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_d1 <= grp_vect_set_random_fixe_fu_682_v_V_d1;
        else 
            random_vector_A_V_d1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    random_vector_A_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_v_V_we1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            random_vector_A_V_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            random_vector_A_V_we1 <= grp_vect_set_random_fixe_fu_682_v_V_we1;
        else 
            random_vector_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_address0_assign_proc : process(grp_vect_set_random_fixe_fu_682_v_V_address0, grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_fu_682_v_V_address0;
        else 
            random_vector_B_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_B_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_fu_682_v_V_address1, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            random_vector_B_V_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_address1 <= grp_vect_set_random_fixe_fu_682_v_V_address1;
        else 
            random_vector_B_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_B_V_ce0_assign_proc : process(grp_vect_set_random_fixe_fu_682_v_V_ce0, grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state43, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_796_fixed_weight_by_coord_vector_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_fu_682_v_V_ce0;
        else 
            random_vector_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_set_random_fixe_fu_682_v_V_ce1, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            random_vector_B_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_ce1 <= grp_vect_set_random_fixe_fu_682_v_V_ce1;
        else 
            random_vector_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_fu_682_v_V_d1, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            random_vector_B_V_d1 <= ap_const_lv15_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_d1 <= grp_vect_set_random_fixe_fu_682_v_V_d1;
        else 
            random_vector_B_V_d1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    random_vector_B_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_set_random_fixe_fu_682_v_V_we1, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            random_vector_B_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            random_vector_B_V_we1 <= grp_vect_set_random_fixe_fu_682_v_V_we1;
        else 
            random_vector_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_923_p2 <= (or_ln387_fu_918_p2 or cmp_u_u2_reg_1053);
    ret_V_fu_959_p2 <= (ss_V_q0 and lhs_V_reg_1063);

    sk_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln285_fu_839_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_hqc_public_key_from_s_fu_773_pk_V_address0, ap_block_pp1_stage0, ap_CS_fsm_state45, ap_block_pp0_stage0, zext_ln321_6_fu_866_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sk_V_address0 <= zext_ln321_6_fu_866_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            sk_V_address0 <= zext_ln285_fu_839_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sk_V_address0 <= grp_hqc_public_key_from_s_fu_773_pk_V_address0;
        else 
            sk_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    sk_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_hqc_public_key_from_s_fu_773_pk_V_ce0, ap_CS_fsm_state45)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sk_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sk_V_ce0 <= grp_hqc_public_key_from_s_fu_773_pk_V_ce0;
        else 
            sk_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ss_V_address0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state54, ss_V_addr_reg_1076, grp_shake256_512_ds_fu_693_output_V_address0, ap_CS_fsm_state55, zext_ln391_fu_954_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ss_V_address0 <= ss_V_addr_reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ss_V_address0 <= zext_ln391_fu_954_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ss_V_address0 <= grp_shake256_512_ds_fu_693_output_V_address0;
        else 
            ss_V_address0 <= "XXX";
        end if; 
    end process;


    ss_V_ce0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state54, grp_shake256_512_ds_fu_693_output_V_ce0, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            ss_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ss_V_ce0 <= grp_shake256_512_ds_fu_693_output_V_ce0;
        else 
            ss_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ss_V_d0_assign_proc : process(ap_CS_fsm_state37, grp_shake256_512_ds_fu_693_output_V_d0, ap_CS_fsm_state55, ret_V_fu_959_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ss_V_d0 <= ret_V_fu_959_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ss_V_d0 <= grp_shake256_512_ds_fu_693_output_V_d0;
        else 
            ss_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ss_V_we0_assign_proc : process(ap_CS_fsm_state37, grp_shake256_512_ds_fu_693_output_V_we0, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ss_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ss_V_we0 <= grp_shake256_512_ds_fu_693_output_V_we0;
        else 
            ss_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address0, grp_seedexpander_mult_ty_fu_711_state_V_2_address0, grp_seedexpander_init_fu_719_state_V_2_address0, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_address0 <= grp_seedexpander_init_fu_719_state_V_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_address0 <= grp_seedexpander_mult_ty_fu_711_state_V_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_address0 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address0;
        else 
            state_seedexpander_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address1, grp_seedexpander_mult_ty_fu_711_state_V_2_address1, grp_seedexpander_init_fu_719_state_V_2_address1, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_seedexpander_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_address1 <= grp_seedexpander_init_fu_719_state_V_2_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_address1 <= grp_seedexpander_mult_ty_fu_711_state_V_2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_address1 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_address1;
        else 
            state_seedexpander_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce0, grp_seedexpander_mult_ty_fu_711_state_V_2_ce0, grp_seedexpander_init_fu_719_state_V_2_ce0, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_init_fu_719_state_V_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_mult_ty_fu_711_state_V_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_ce0 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce0;
        else 
            state_seedexpander_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce1, grp_seedexpander_mult_ty_fu_711_state_V_2_ce1, grp_seedexpander_init_fu_719_state_V_2_ce1, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            state_seedexpander_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_init_fu_719_state_V_2_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_mult_ty_fu_711_state_V_2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_ce1 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_ce1;
        else 
            state_seedexpander_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_d1, grp_seedexpander_mult_ty_fu_711_state_V_2_d1, grp_seedexpander_init_fu_719_state_V_2_d1, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_seedexpander_V_d1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_d1 <= grp_seedexpander_init_fu_719_state_V_2_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_d1 <= grp_seedexpander_mult_ty_fu_711_state_V_2_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_d1 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_d1;
        else 
            state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state37, grp_vect_set_random_fixe_fu_682_state_seedexpander_V_we1, grp_seedexpander_mult_ty_fu_711_state_V_2_we1, grp_seedexpander_init_fu_719_state_V_2_we1, ap_CS_fsm_state43, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            state_seedexpander_V_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_seedexpander_V_we1 <= grp_seedexpander_init_fu_719_state_V_2_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_seedexpander_V_we1 <= grp_seedexpander_mult_ty_fu_711_state_V_2_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            state_seedexpander_V_we1 <= grp_vect_set_random_fixe_fu_682_state_seedexpander_V_we1;
        else 
            state_seedexpander_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_address0_assign_proc : process(grp_vect_mul_add_fu_593_o_V_address0, grp_vect_add_fu_665_v2_V_address0, grp_reed_muller_decode_fu_753_cdw_V_address0, grp_vect_copyresize_fu_808_v_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state15, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            store_A_V_address0 <= grp_vect_copyresize_fu_808_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_A_V_address0 <= grp_reed_muller_decode_fu_753_cdw_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            store_A_V_address0 <= grp_vect_add_fu_665_v2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_address0 <= grp_vect_mul_add_fu_593_o_V_address0;
        else 
            store_A_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_A_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_mul_add_fu_593_o_V_address1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_A_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_address1 <= grp_vect_mul_add_fu_593_o_V_address1;
        else 
            store_A_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_A_V_ce0_assign_proc : process(grp_vect_mul_add_fu_593_o_V_ce0, grp_vect_add_fu_665_v2_V_ce0, grp_reed_muller_decode_fu_753_cdw_V_ce0, grp_vect_copyresize_fu_808_v_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state15, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            store_A_V_ce0 <= grp_vect_copyresize_fu_808_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_A_V_ce0 <= grp_reed_muller_decode_fu_753_cdw_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            store_A_V_ce0 <= grp_vect_add_fu_665_v2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_ce0 <= grp_vect_mul_add_fu_593_o_V_ce0;
        else 
            store_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_mul_add_fu_593_o_V_ce1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_A_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_ce1 <= grp_vect_mul_add_fu_593_o_V_ce1;
        else 
            store_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_mul_add_fu_593_o_V_d1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_A_V_d1 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_d1 <= grp_vect_mul_add_fu_593_o_V_d1;
        else 
            store_A_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_A_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_mul_add_fu_593_o_V_we1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_A_V_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_A_V_we1 <= grp_vect_mul_add_fu_593_o_V_we1;
        else 
            store_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_593_a3_V_address0, grp_vect_set_random_fixe_1_fu_796_v_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_address0 <= grp_vect_set_random_fixe_1_fu_796_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_B_V_address0 <= grp_vect_mul_add_fu_593_a3_V_address0;
        else 
            store_B_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_mul_add_fu_593_a3_V_address1, grp_vect_set_random_fixe_1_fu_796_v_V_address1, grp_vect_copyresize_2_fu_815_o_V_address1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_B_V_address1 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            store_B_V_address1 <= grp_vect_copyresize_2_fu_815_o_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_address1 <= grp_vect_set_random_fixe_1_fu_796_v_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_B_V_address1 <= grp_vect_mul_add_fu_593_a3_V_address1;
        else 
            store_B_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_593_a3_V_ce0, grp_vect_set_random_fixe_1_fu_796_v_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_796_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_B_V_ce0 <= grp_vect_mul_add_fu_593_a3_V_ce0;
        else 
            store_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_mul_add_fu_593_a3_V_ce1, grp_vect_set_random_fixe_1_fu_796_v_V_ce1, grp_vect_copyresize_2_fu_815_o_V_ce1, ap_CS_fsm_state13, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_B_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            store_B_V_ce1 <= grp_vect_copyresize_2_fu_815_o_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_ce1 <= grp_vect_set_random_fixe_1_fu_796_v_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            store_B_V_ce1 <= grp_vect_mul_add_fu_593_a3_V_ce1;
        else 
            store_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_set_random_fixe_1_fu_796_v_V_d1, grp_vect_copyresize_2_fu_815_o_V_d1, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_B_V_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            store_B_V_d1 <= grp_vect_copyresize_2_fu_815_o_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_d1 <= grp_vect_set_random_fixe_1_fu_796_v_V_d1;
        else 
            store_B_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_B_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_set_random_fixe_1_fu_796_v_V_we1, grp_vect_copyresize_2_fu_815_o_V_we1, ap_CS_fsm_state9, ap_CS_fsm_state45, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_B_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            store_B_V_we1 <= grp_vect_copyresize_2_fu_815_o_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            store_B_V_we1 <= grp_vect_set_random_fixe_1_fu_796_v_V_we1;
        else 
            store_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_vect_copyresize_1_fu_802_o_V_address1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_C_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            store_C_V_address1 <= grp_vect_copyresize_1_fu_802_o_V_address1;
        else 
            store_C_V_address1 <= "XXXX";
        end if; 
    end process;


    store_C_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_623_msg_V_ce0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_C_V_ce0 <= grp_reed_solomon_encode_fu_623_msg_V_ce0;
        else 
            store_C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_ce1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_copyresize_1_fu_802_o_V_ce1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_C_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            store_C_V_ce1 <= grp_vect_copyresize_1_fu_802_o_V_ce1;
        else 
            store_C_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_vect_copyresize_1_fu_802_o_V_d1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_C_V_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            store_C_V_d1 <= grp_vect_copyresize_1_fu_802_o_V_d1;
        else 
            store_C_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_C_V_we1_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, grp_vect_copyresize_1_fu_802_o_V_we1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            store_C_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            store_C_V_we1 <= grp_vect_copyresize_1_fu_802_o_V_we1;
        else 
            store_C_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_address1_assign_proc : process(grp_reed_solomon_decode_fu_727_cdw_V_address1, grp_reed_muller_decode_fu_753_msg_V_address1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_rs_decode_V_address1 <= grp_reed_muller_decode_fu_753_msg_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            store_rs_decode_V_address1 <= grp_reed_solomon_decode_fu_727_cdw_V_address1;
        else 
            store_rs_decode_V_address1 <= "XXXXXX";
        end if; 
    end process;


    store_rs_decode_V_ce0_assign_proc : process(grp_reed_solomon_decode_fu_727_cdw_V_ce0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            store_rs_decode_V_ce0 <= grp_reed_solomon_decode_fu_727_cdw_V_ce0;
        else 
            store_rs_decode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_ce1_assign_proc : process(grp_reed_solomon_decode_fu_727_cdw_V_ce1, grp_reed_muller_decode_fu_753_msg_V_ce1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_rs_decode_V_ce1 <= grp_reed_muller_decode_fu_753_msg_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            store_rs_decode_V_ce1 <= grp_reed_solomon_decode_fu_727_cdw_V_ce1;
        else 
            store_rs_decode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_d1_assign_proc : process(grp_reed_solomon_decode_fu_727_cdw_V_d1, grp_reed_muller_decode_fu_753_msg_V_d1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_rs_decode_V_d1 <= grp_reed_muller_decode_fu_753_msg_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            store_rs_decode_V_d1 <= grp_reed_solomon_decode_fu_727_cdw_V_d1;
        else 
            store_rs_decode_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_rs_decode_V_we1_assign_proc : process(grp_reed_solomon_decode_fu_727_cdw_V_we1, grp_reed_muller_decode_fu_753_msg_V_we1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            store_rs_decode_V_we1 <= grp_reed_muller_decode_fu_753_msg_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            store_rs_decode_V_we1 <= grp_reed_solomon_decode_fu_727_cdw_V_we1;
        else 
            store_rs_decode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_address0_assign_proc : process(grp_reed_solomon_encode_fu_623_cdw_V_address0, grp_reed_muller_encode_fu_637_msg_V_address0, ap_CS_fsm_state47, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            store_rs_encode_V_address0 <= grp_reed_muller_encode_fu_637_msg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_rs_encode_V_address0 <= grp_reed_solomon_encode_fu_623_cdw_V_address0;
        else 
            store_rs_encode_V_address0 <= "XXXXXX";
        end if; 
    end process;


    store_rs_encode_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_623_cdw_V_ce0, grp_reed_muller_encode_fu_637_msg_V_ce0, ap_CS_fsm_state47, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            store_rs_encode_V_ce0 <= grp_reed_muller_encode_fu_637_msg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_rs_encode_V_ce0 <= grp_reed_solomon_encode_fu_623_cdw_V_ce0;
        else 
            store_rs_encode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_ce1_assign_proc : process(grp_reed_solomon_encode_fu_623_cdw_V_ce1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_rs_encode_V_ce1 <= grp_reed_solomon_encode_fu_623_cdw_V_ce1;
        else 
            store_rs_encode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_we1_assign_proc : process(grp_reed_solomon_encode_fu_623_cdw_V_we1, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            store_rs_encode_V_we1 <= grp_reed_solomon_encode_fu_623_cdw_V_we1;
        else 
            store_rs_encode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, zext_ln285_reg_985, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, zext_ln285_2_reg_1038, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_seedexpander_init_fu_719_seed_V_address0, ap_block_pp1_stage0, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_block_pp0_stage0, zext_ln285_1_fu_871_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_2_reg_1038(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_1_fu_871_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_reg_985(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_seeds_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            store_seeds_V_address0 <= grp_seedexpander_init_fu_719_seed_V_address0;
        else 
            store_seeds_V_address0 <= "XXX";
        end if; 
    end process;


    store_seeds_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, grp_seedexpander_init_fu_719_seed_V_ce0, ap_CS_fsm_state35, ap_CS_fsm_state7, ap_CS_fsm_state25)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1)))) then 
            store_seeds_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            store_seeds_V_ce0 <= grp_seedexpander_init_fu_719_seed_V_ce0;
        else 
            store_seeds_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_d0_assign_proc : process(sk_V_q0, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, theta_V_q0, ap_block_pp1_stage0, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            store_seeds_V_d0 <= theta_V_q0;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            store_seeds_V_d0 <= sk_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            store_seeds_V_d0 <= ap_const_lv64_0;
        else 
            store_seeds_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    store_seeds_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, icmp_ln284_reg_976, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln284_1_reg_995, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln284_2_reg_1029, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln284_2_reg_1029 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln284_1_reg_995 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_reg_976 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1)))) then 
            store_seeds_V_we0 <= ap_const_logic_1;
        else 
            store_seeds_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln285_2_fu_913_p1, ap_CS_fsm_state37, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_output_V_address0, grp_vect_compare_64_fu_821_v2_V_address0, ap_CS_fsm_state35, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            theta_V_address0 <= zext_ln285_2_fu_913_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            theta_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            theta_V_address0 <= grp_vect_compare_64_fu_821_v2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            theta_V_address0 <= grp_shake256_512_ds_fu_693_output_V_address0;
        else 
            theta_V_address0 <= "XXX";
        end if; 
    end process;


    theta_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state37, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_output_V_ce0, grp_vect_compare_64_fu_821_v2_V_ce0, ap_CS_fsm_state35)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1)))) then 
            theta_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            theta_V_ce0 <= grp_vect_compare_64_fu_821_v2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            theta_V_ce0 <= grp_shake256_512_ds_fu_693_output_V_ce0;
        else 
            theta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_output_V_d0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            theta_V_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            theta_V_d0 <= grp_shake256_512_ds_fu_693_output_V_d0;
        else 
            theta_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    theta_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_hqc_ciphertext_from_s_fu_759_ap_done, ap_CS_fsm_state21, grp_shake256_512_ds_fu_693_output_V_we0, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_hqc_ciphertext_from_s_fu_759_ap_done = ap_const_logic_1))) then 
            theta_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            theta_V_we0 <= grp_shake256_512_ds_fu_693_output_V_we0;
        else 
            theta_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln717_fu_876_p1 <= h_s_V_q0(5 - 1 downto 0);

    uv2_V_address0_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53, grp_reed_muller_encode_fu_637_cdw_V_address0, grp_vect_add_fu_665_o_V_address0, grp_vect_compare_fu_780_v2_V_address0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            uv2_V_address0 <= grp_vect_compare_fu_780_v2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_address0 <= grp_vect_add_fu_665_o_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_address0 <= grp_reed_muller_encode_fu_637_cdw_V_address0;
        else 
            uv2_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_address1_assign_proc : process(grp_reed_muller_encode_fu_637_cdw_V_address1, grp_vect_add_fu_665_o_V_address1, grp_vect_copyresize_fu_808_o_V_address1, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            uv2_V_address1 <= grp_vect_copyresize_fu_808_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_address1 <= grp_vect_add_fu_665_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_address1 <= grp_reed_muller_encode_fu_637_cdw_V_address1;
        else 
            uv2_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_ce0_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53, grp_reed_muller_encode_fu_637_cdw_V_ce0, grp_vect_add_fu_665_o_V_ce0, grp_vect_compare_fu_780_v2_V_ce0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            uv2_V_ce0 <= grp_vect_compare_fu_780_v2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_ce0 <= grp_vect_add_fu_665_o_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_ce0 <= grp_reed_muller_encode_fu_637_cdw_V_ce0;
        else 
            uv2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_ce1_assign_proc : process(grp_reed_muller_encode_fu_637_cdw_V_ce1, grp_vect_add_fu_665_o_V_ce1, grp_vect_copyresize_fu_808_o_V_ce1, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            uv2_V_ce1 <= grp_vect_copyresize_fu_808_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_ce1 <= grp_vect_add_fu_665_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_ce1 <= grp_reed_muller_encode_fu_637_cdw_V_ce1;
        else 
            uv2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_d1_assign_proc : process(grp_reed_muller_encode_fu_637_cdw_V_d1, grp_vect_add_fu_665_o_V_d1, grp_vect_copyresize_fu_808_o_V_d1, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            uv2_V_d1 <= grp_vect_copyresize_fu_808_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_d1 <= grp_vect_add_fu_665_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_d1 <= grp_reed_muller_encode_fu_637_cdw_V_d1;
        else 
            uv2_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    uv2_V_we1_assign_proc : process(grp_reed_muller_encode_fu_637_cdw_V_we1, grp_vect_add_fu_665_o_V_we1, grp_vect_copyresize_fu_808_o_V_we1, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            uv2_V_we1 <= grp_vect_copyresize_fu_808_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            uv2_V_we1 <= grp_vect_add_fu_665_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            uv2_V_we1 <= grp_reed_muller_encode_fu_637_cdw_V_we1;
        else 
            uv2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1355_fu_928_p2 <= (result_fu_923_p2 xor ap_const_lv1_1);
    zext_ln285_1_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i32_reg_548),64));
    zext_ln285_2_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i41_reg_571),64));
    zext_ln285_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i31_reg_537),64));
    zext_ln321_6_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_860_p2),64));
    zext_ln321_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i32_phi_fu_552_p4),4));
    zext_ln391_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_582),64));
    zext_ln544_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_i_i_reg_560),64));
    zext_ln717_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_reg_1015),32));
end behav;
