-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expand_and_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_0_V_ce0 : OUT STD_LOGIC;
    dst_0_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_0_V_ce1 : OUT STD_LOGIC;
    dst_0_V_we1 : OUT STD_LOGIC;
    dst_0_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_1_V_ce0 : OUT STD_LOGIC;
    dst_1_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_1_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_1_V_ce1 : OUT STD_LOGIC;
    dst_1_V_we1 : OUT STD_LOGIC;
    dst_1_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_2_V_ce0 : OUT STD_LOGIC;
    dst_2_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_2_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_2_V_ce1 : OUT STD_LOGIC;
    dst_2_V_we1 : OUT STD_LOGIC;
    dst_2_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_3_V_ce0 : OUT STD_LOGIC;
    dst_3_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_3_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_3_V_ce1 : OUT STD_LOGIC;
    dst_3_V_we1 : OUT STD_LOGIC;
    dst_3_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_4_V_ce0 : OUT STD_LOGIC;
    dst_4_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_4_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_4_V_ce1 : OUT STD_LOGIC;
    dst_4_V_we1 : OUT STD_LOGIC;
    dst_4_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_5_V_ce0 : OUT STD_LOGIC;
    dst_5_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_5_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_5_V_ce1 : OUT STD_LOGIC;
    dst_5_V_we1 : OUT STD_LOGIC;
    dst_5_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_6_V_ce0 : OUT STD_LOGIC;
    dst_6_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_6_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_6_V_ce1 : OUT STD_LOGIC;
    dst_6_V_we1 : OUT STD_LOGIC;
    dst_6_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_7_V_ce0 : OUT STD_LOGIC;
    dst_7_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    dst_7_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_7_V_ce1 : OUT STD_LOGIC;
    dst_7_V_we1 : OUT STD_LOGIC;
    dst_7_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    src_V_ce0 : OUT STD_LOGIC;
    src_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    offset_V : IN STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of expand_and_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_245 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0110_0_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_282_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_reg_580 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln887_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln887_reg_585_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln887_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln887_reg_589 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln879_8_fu_310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln879_8_reg_594 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln879_9_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_9_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_9_reg_600_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_10_fu_338_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_10_reg_612 : STD_LOGIC_VECTOR (1 downto 0);
    signal dst_0_V_addr_reg_618 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_0_V_addr_reg_618_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_1_V_addr_reg_624 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_1_V_addr_reg_624_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_2_V_addr_reg_630 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_2_V_addr_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_3_V_addr_reg_636 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_3_V_addr_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_4_V_addr_reg_642 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_4_V_addr_reg_642_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_5_V_addr_reg_648 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_5_V_addr_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_6_V_addr_reg_654 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_6_V_addr_reg_654_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_7_V_addr_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_7_V_addr_reg_660_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_377_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_666 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal dst_0_V_load_reg_671 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_1_V_load_reg_676 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_2_V_load_reg_681 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_3_V_load_reg_686 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_4_V_load_reg_691 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_5_V_load_reg_696 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_6_V_load_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_7_V_load_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal part_V_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal part_V_reg_716 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln68_fu_392_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_249_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_0110_0_phi_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_t_V_phi_fu_271_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln180_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal offset_V_cast_fu_278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln124_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal copies_V_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln879_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_83_mid2_v_v_fu_358_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln879_fu_365_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln879_fu_369_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_10_fu_374_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln68_fu_452_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_1_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_1_fu_471_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_2_fu_484_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_2_fu_487_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_3_fu_500_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_3_fu_503_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_4_fu_516_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_4_fu_519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_5_fu_532_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_5_fu_535_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_6_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_6_fu_551_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_7_fu_564_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_7_fu_567_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
                indvar_flatten_reg_245 <= add_ln887_reg_589;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_245 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_0110_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
                p_0110_0_reg_256 <= select_ln879_10_reg_612;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0110_0_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
                t_V_reg_267 <= part_V_reg_716;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_267 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln887_reg_589 <= add_ln887_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_286_p2 = ap_const_lv1_0))) then
                dst_0_V_addr_reg_618 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_1_V_addr_reg_624 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_2_V_addr_reg_630 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_3_V_addr_reg_636 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_4_V_addr_reg_642 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_5_V_addr_reg_648 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_6_V_addr_reg_654 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                dst_7_V_addr_reg_660 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
                select_ln879_8_reg_594 <= select_ln879_8_fu_310_p3;
                select_ln879_9_reg_600 <= select_ln879_9_fu_330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dst_0_V_addr_reg_618_pp0_iter1_reg <= dst_0_V_addr_reg_618;
                dst_1_V_addr_reg_624_pp0_iter1_reg <= dst_1_V_addr_reg_624;
                dst_2_V_addr_reg_630_pp0_iter1_reg <= dst_2_V_addr_reg_630;
                dst_3_V_addr_reg_636_pp0_iter1_reg <= dst_3_V_addr_reg_636;
                dst_4_V_addr_reg_642_pp0_iter1_reg <= dst_4_V_addr_reg_642;
                dst_5_V_addr_reg_648_pp0_iter1_reg <= dst_5_V_addr_reg_648;
                dst_6_V_addr_reg_654_pp0_iter1_reg <= dst_6_V_addr_reg_654;
                dst_7_V_addr_reg_660_pp0_iter1_reg <= dst_7_V_addr_reg_660;
                icmp_ln887_reg_585 <= icmp_ln887_fu_286_p2;
                icmp_ln887_reg_585_pp0_iter1_reg <= icmp_ln887_reg_585;
                select_ln879_9_reg_600_pp0_iter1_reg <= select_ln879_9_reg_600;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then
                dst_0_V_load_reg_671 <= dst_0_V_q0;
                dst_1_V_load_reg_676 <= dst_1_V_q0;
                dst_2_V_load_reg_681 <= dst_2_V_q0;
                dst_3_V_load_reg_686 <= dst_3_V_q0;
                dst_4_V_load_reg_691 <= dst_4_V_q0;
                dst_5_V_load_reg_696 <= dst_5_V_q0;
                dst_6_V_load_reg_701 <= dst_6_V_q0;
                dst_7_V_load_reg_706 <= dst_7_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then
                part_V_reg_716 <= part_V_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then
                ret_V_reg_666 <= ret_V_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_286_p2 = ap_const_lv1_0))) then
                select_ln879_10_reg_612 <= select_ln879_10_fu_338_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then
                tmp_42_reg_731 <= src_V_q0(2 downto 2);
                tmp_43_reg_736 <= src_V_q0(3 downto 3);
                tmp_44_reg_741 <= src_V_q0(4 downto 4);
                tmp_45_reg_746 <= src_V_q0(5 downto 5);
                tmp_46_reg_751 <= src_V_q0(6 downto 6);
                tmp_47_reg_756 <= src_V_q0(7 downto 7);
                tmp_reg_726 <= src_V_q0(1 downto 1);
                trunc_ln68_reg_721 <= trunc_ln68_fu_392_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln215_reg_580(15 downto 0) <= zext_ln215_fu_282_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_reg_580(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln887_fu_286_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_286_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln700_1_fu_471_p2 <= std_logic_vector(unsigned(dst_1_V_load_reg_676) + unsigned(zext_ln68_1_fu_468_p1));
    add_ln700_2_fu_487_p2 <= std_logic_vector(unsigned(dst_2_V_load_reg_681) + unsigned(zext_ln68_2_fu_484_p1));
    add_ln700_3_fu_503_p2 <= std_logic_vector(unsigned(dst_3_V_load_reg_686) + unsigned(zext_ln68_3_fu_500_p1));
    add_ln700_4_fu_519_p2 <= std_logic_vector(unsigned(dst_4_V_load_reg_691) + unsigned(zext_ln68_4_fu_516_p1));
    add_ln700_5_fu_535_p2 <= std_logic_vector(unsigned(dst_5_V_load_reg_696) + unsigned(zext_ln68_5_fu_532_p1));
    add_ln700_6_fu_551_p2 <= std_logic_vector(unsigned(dst_6_V_load_reg_701) + unsigned(zext_ln68_6_fu_548_p1));
    add_ln700_7_fu_567_p2 <= std_logic_vector(unsigned(dst_7_V_load_reg_706) + unsigned(zext_ln68_7_fu_564_p1));
    add_ln700_fu_455_p2 <= std_logic_vector(unsigned(dst_0_V_load_reg_671) + unsigned(zext_ln68_fu_452_p1));
    add_ln879_fu_369_p2 <= std_logic_vector(unsigned(zext_ln879_fu_365_p1) + unsigned(zext_ln215_reg_580));
    add_ln887_fu_292_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_249_p4) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_286_p2)
    begin
        if ((icmp_ln887_fu_286_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_249_p4_assign_proc : process(indvar_flatten_reg_245, icmp_ln887_reg_585, ap_CS_fsm_pp0_stage0, add_ln887_reg_589, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_249_p4 <= add_ln887_reg_589;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_249_p4 <= indvar_flatten_reg_245;
        end if; 
    end process;


    ap_phi_mux_p_0110_0_phi_fu_260_p4_assign_proc : process(p_0110_0_reg_256, icmp_ln887_reg_585, ap_CS_fsm_pp0_stage0, select_ln879_10_reg_612, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0110_0_phi_fu_260_p4 <= select_ln879_10_reg_612;
        else 
            ap_phi_mux_p_0110_0_phi_fu_260_p4 <= p_0110_0_reg_256;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_271_p4_assign_proc : process(t_V_reg_267, icmp_ln887_reg_585, ap_CS_fsm_pp0_stage0, part_V_reg_716, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_reg_585 = ap_const_lv1_0))) then 
            ap_phi_mux_t_V_phi_fu_271_p4 <= part_V_reg_716;
        else 
            ap_phi_mux_t_V_phi_fu_271_p4 <= t_V_reg_267;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    copies_V_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_p_0110_0_phi_fu_260_p4));
    dst_0_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_0_V_address1 <= dst_0_V_addr_reg_618_pp0_iter1_reg;

    dst_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_0_V_ce0 <= ap_const_logic_1;
        else 
            dst_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_0_V_ce1 <= ap_const_logic_1;
        else 
            dst_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_0_V_d1 <= 
        zext_ln68_fu_452_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_fu_455_p2;

    dst_0_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_0_V_we1 <= ap_const_logic_1;
        else 
            dst_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_1_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_1_V_address1 <= dst_1_V_addr_reg_624_pp0_iter1_reg;

    dst_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_1_V_ce0 <= ap_const_logic_1;
        else 
            dst_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_1_V_ce1 <= ap_const_logic_1;
        else 
            dst_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_1_V_d1 <= 
        zext_ln68_1_fu_468_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_1_fu_471_p2;

    dst_1_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_1_V_we1 <= ap_const_logic_1;
        else 
            dst_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_2_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_2_V_address1 <= dst_2_V_addr_reg_630_pp0_iter1_reg;

    dst_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_2_V_ce0 <= ap_const_logic_1;
        else 
            dst_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_2_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_2_V_ce1 <= ap_const_logic_1;
        else 
            dst_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_2_V_d1 <= 
        zext_ln68_2_fu_484_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_2_fu_487_p2;

    dst_2_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_2_V_we1 <= ap_const_logic_1;
        else 
            dst_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_3_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_3_V_address1 <= dst_3_V_addr_reg_636_pp0_iter1_reg;

    dst_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_3_V_ce0 <= ap_const_logic_1;
        else 
            dst_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_3_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_3_V_ce1 <= ap_const_logic_1;
        else 
            dst_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_3_V_d1 <= 
        zext_ln68_3_fu_500_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_3_fu_503_p2;

    dst_3_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_3_V_we1 <= ap_const_logic_1;
        else 
            dst_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_4_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_4_V_address1 <= dst_4_V_addr_reg_642_pp0_iter1_reg;

    dst_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_4_V_ce0 <= ap_const_logic_1;
        else 
            dst_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_4_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_4_V_ce1 <= ap_const_logic_1;
        else 
            dst_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_4_V_d1 <= 
        zext_ln68_4_fu_516_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_4_fu_519_p2;

    dst_4_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_4_V_we1 <= ap_const_logic_1;
        else 
            dst_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_5_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_5_V_address1 <= dst_5_V_addr_reg_648_pp0_iter1_reg;

    dst_5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_5_V_ce0 <= ap_const_logic_1;
        else 
            dst_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_5_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_5_V_ce1 <= ap_const_logic_1;
        else 
            dst_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_5_V_d1 <= 
        zext_ln68_5_fu_532_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_5_fu_535_p2;

    dst_5_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_5_V_we1 <= ap_const_logic_1;
        else 
            dst_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_6_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_6_V_address1 <= dst_6_V_addr_reg_654_pp0_iter1_reg;

    dst_6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_6_V_ce0 <= ap_const_logic_1;
        else 
            dst_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_6_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_6_V_ce1 <= ap_const_logic_1;
        else 
            dst_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_6_V_d1 <= 
        zext_ln68_6_fu_548_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_6_fu_551_p2;

    dst_6_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_6_V_we1 <= ap_const_logic_1;
        else 
            dst_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_7_V_address0 <= zext_ln180_fu_346_p1(4 - 1 downto 0);
    dst_7_V_address1 <= dst_7_V_addr_reg_660_pp0_iter1_reg;

    dst_7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_7_V_ce0 <= ap_const_logic_1;
        else 
            dst_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_7_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dst_7_V_ce1 <= ap_const_logic_1;
        else 
            dst_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_7_V_d1 <= 
        zext_ln68_7_fu_564_p1 when (select_ln879_9_reg_600_pp0_iter1_reg(0) = '1') else 
        add_ln700_7_fu_567_p2;

    dst_7_V_we1_assign_proc : process(icmp_ln887_reg_585_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln887_reg_585_pp0_iter1_reg = ap_const_lv1_0))) then 
            dst_7_V_we1 <= ap_const_logic_1;
        else 
            dst_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln124_fu_304_p2 <= "1" when (ap_phi_mux_t_V_phi_fu_271_p4 = ap_const_lv5_10) else "0";
    icmp_ln879_2_fu_324_p2 <= "1" when (ap_phi_mux_p_0110_0_phi_fu_260_p4 = ap_const_lv2_0) else "0";
    icmp_ln879_fu_318_p2 <= "1" when (copies_V_fu_298_p2 = ap_const_lv2_0) else "0";
    icmp_ln887_fu_286_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_249_p4 = ap_const_lv6_30) else "0";
        offset_V_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset_V),16));

    part_V_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln879_8_reg_594));
    ret_V_83_mid2_v_v_fu_358_p3 <= (select_ln879_10_reg_612 & ap_const_lv4_0);
    ret_V_fu_377_p2 <= std_logic_vector(unsigned(add_ln879_fu_369_p2) + unsigned(zext_ln215_10_fu_374_p1));
    select_ln879_10_fu_338_p3 <= 
        copies_V_fu_298_p2 when (icmp_ln124_fu_304_p2(0) = '1') else 
        ap_phi_mux_p_0110_0_phi_fu_260_p4;
    select_ln879_8_fu_310_p3 <= 
        ap_const_lv5_0 when (icmp_ln124_fu_304_p2(0) = '1') else 
        ap_phi_mux_t_V_phi_fu_271_p4;
    select_ln879_9_fu_330_p3 <= 
        icmp_ln879_fu_318_p2 when (icmp_ln124_fu_304_p2(0) = '1') else 
        icmp_ln879_2_fu_324_p2;
    src_V_address0 <= zext_ln544_fu_383_p1(12 - 1 downto 0);

    src_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            src_V_ce0 <= ap_const_logic_1;
        else 
            src_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln68_fu_392_p1 <= src_V_q0(1 - 1 downto 0);
    zext_ln180_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln879_8_fu_310_p3),64));
    zext_ln215_10_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln879_8_reg_594),17));
    zext_ln215_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_V_cast_fu_278_p1),17));
    zext_ln544_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_666),64));
    zext_ln68_1_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_726),10));
    zext_ln68_2_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_731),10));
    zext_ln68_3_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_736),10));
    zext_ln68_4_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_741),10));
    zext_ln68_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_reg_746),10));
    zext_ln68_6_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_751),10));
    zext_ln68_7_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_reg_756),10));
    zext_ln68_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln68_reg_721),10));
    zext_ln879_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_83_mid2_v_v_fu_358_p3),17));
end behav;
