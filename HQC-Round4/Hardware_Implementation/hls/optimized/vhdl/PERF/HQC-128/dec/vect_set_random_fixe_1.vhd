-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_set_random_fixe_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_V_ce0 : OUT STD_LOGIC;
    v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v_V_ce1 : OUT STD_LOGIC;
    v_V_we1 : OUT STD_LOGIC;
    v_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fixed_weight_by_coord_vector_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fixed_weight_by_coord_vector_V_ce0 : OUT STD_LOGIC;
    fixed_weight_by_coord_vector_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of vect_set_random_fixe_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_107_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_reg_155 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln98_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal random_vector_local_s_reg_165 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v_V_addr_reg_170 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_146_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_vector_init_3_fu_95_ap_start : STD_LOGIC;
    signal grp_vector_init_3_fu_95_ap_done : STD_LOGIC;
    signal grp_vector_init_3_fu_95_ap_idle : STD_LOGIC;
    signal grp_vector_init_3_fu_95_ap_ready : STD_LOGIC;
    signal grp_vector_init_3_fu_95_array_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vector_init_3_fu_95_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_3_fu_95_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_3_fu_95_array_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_vector_init_3_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_V_fu_118_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos_V_fu_133_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln209_fu_136_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_140_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component vector_init_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_vector_init_3_fu_95 : component vector_init_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_3_fu_95_ap_start,
        ap_done => grp_vector_init_3_fu_95_ap_done,
        ap_idle => grp_vector_init_3_fu_95_ap_idle,
        ap_ready => grp_vector_init_3_fu_95_ap_ready,
        array_V_address1 => grp_vector_init_3_fu_95_array_V_address1,
        array_V_ce1 => grp_vector_init_3_fu_95_array_V_ce1,
        array_V_we1 => grp_vector_init_3_fu_95_array_V_we1,
        array_V_d1 => grp_vector_init_3_fu_95_array_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_vector_init_3_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_3_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_vector_init_3_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_3_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_3_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vector_init_3_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_84 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_84 <= i_V_reg_155;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_V_reg_155 <= i_V_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                random_vector_local_s_reg_165 <= fixed_weight_by_coord_vector_V_q0;
                v_V_addr_reg_170 <= zext_ln544_1_fu_128_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ret_V_reg_176 <= ret_V_fu_146_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln98_fu_101_p2, grp_vector_init_3_fu_95_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_vector_init_3_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln98_fu_101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    fixed_weight_by_coord_vector_V_address0 <= zext_ln544_fu_113_p1(7 - 1 downto 0);

    fixed_weight_by_coord_vector_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fixed_weight_by_coord_vector_V_ce0 <= ap_const_logic_1;
        else 
            fixed_weight_by_coord_vector_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_vector_init_3_fu_95_ap_start <= grp_vector_init_3_fu_95_ap_start_reg;
    i_V_fu_107_p2 <= std_logic_vector(unsigned(t_V_reg_84) + unsigned(ap_const_lv7_1));
    icmp_ln98_fu_101_p2 <= "1" when (t_V_reg_84 = ap_const_lv7_4B) else "0";
    index_V_fu_118_p4 <= fixed_weight_by_coord_vector_V_q0(14 downto 3);
    pos_V_fu_133_p1 <= random_vector_local_s_reg_165(3 - 1 downto 0);
    r_V_fu_140_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln209_fu_136_p1(8-1 downto 0)))));
    ret_V_fu_146_p2 <= (v_V_q0 or r_V_fu_140_p2);
    v_V_address0 <= zext_ln544_1_fu_128_p1(12 - 1 downto 0);

    v_V_address1_assign_proc : process(v_V_addr_reg_170, grp_vector_init_3_fu_95_array_V_address1, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v_V_address1 <= v_V_addr_reg_170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_address1 <= grp_vector_init_3_fu_95_array_V_address1;
        else 
            v_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    v_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_V_ce0 <= ap_const_logic_1;
        else 
            v_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_ce1_assign_proc : process(grp_vector_init_3_fu_95_array_V_ce1, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_ce1 <= grp_vector_init_3_fu_95_array_V_ce1;
        else 
            v_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_d1_assign_proc : process(ret_V_reg_176, grp_vector_init_3_fu_95_array_V_d1, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v_V_d1 <= ret_V_reg_176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_d1 <= grp_vector_init_3_fu_95_array_V_d1;
        else 
            v_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    v_V_we1_assign_proc : process(grp_vector_init_3_fu_95_array_V_we1, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_we1 <= grp_vector_init_3_fu_95_array_V_we1;
        else 
            v_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln209_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_V_fu_133_p1),8));
    zext_ln544_1_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_118_p4),64));
    zext_ln544_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_84),64));
end behav;
