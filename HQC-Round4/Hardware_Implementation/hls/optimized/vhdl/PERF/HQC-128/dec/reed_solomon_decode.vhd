-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_solomon_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    msg_V_ce1 : OUT STD_LOGIC;
    msg_V_we1 : OUT STD_LOGIC;
    msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_solomon_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage1 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_13E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111110";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_13F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_4F : STD_LOGIC_VECTOR (11 downto 0) := "000001001111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv10_19A : STD_LOGIC_VECTOR (9 downto 0) := "0110011010";
    constant ap_const_lv9_3E : STD_LOGIC_VECTOR (8 downto 0) := "000111110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_13E : STD_LOGIC_VECTOR (8 downto 0) := "100111110";
    constant ap_const_lv9_1E : STD_LOGIC_VECTOR (8 downto 0) := "000011110";
    constant ap_const_lv7_3E : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_16C : STD_LOGIC_VECTOR (8 downto 0) := "101101100";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alpha_ij_pow_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha_ij_pow_V_ce0 : STD_LOGIC;
    signal alpha_ij_pow_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks2_ce0 : STD_LOGIC;
    signal masks2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_ce0 : STD_LOGIC;
    signal index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_ce1 : STD_LOGIC;
    signal index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal masks3_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks3_ce0 : STD_LOGIC;
    signal masks3_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal masks4_ce0 : STD_LOGIC;
    signal masks4_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_array_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_array_V_ce0 : STD_LOGIC;
    signal exp_array_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_063_0_i_reg_701 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_5_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_8_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_25_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_0_i_reg_812 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0390_1_i_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0459_1_i_reg_835 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_01206_0_i_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0249_0_i_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0243_0_i_reg_963 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_039_reg_975 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_022_0_i_reg_1010 : STD_LOGIC_VECTOR (5 downto 0);
    signal rs_mem_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal rs_mem_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state35_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal icmp_ln277_reg_2484 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state32_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state46_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal icmp_ln183_reg_2613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_gf_mul_fu_1053_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln71_reg_2297 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state26_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln151_reg_2450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_block_state48_pp4_stage3_iter0 : BOOLEAN;
    signal ap_block_pp4_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln232_fu_1959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gf_inverse_fu_1046_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_gf_inverse_fu_1046_ap_ready : STD_LOGIC;
    signal grp_gf_inverse_fu_1046_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state27_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_block_state47_pp4_stage2_iter0 : BOOLEAN;
    signal ap_block_pp4_stage2_11001 : BOOLEAN;
    signal reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state22_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln140_reg_2399 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state23_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_pp7_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage1 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_state68_pp7_stage1_iter0 : BOOLEAN;
    signal ap_block_state70_pp7_stage1_iter1 : BOOLEAN;
    signal ap_block_state72_pp7_stage1_iter2 : BOOLEAN;
    signal ap_block_pp7_stage1_11001 : BOOLEAN;
    signal icmp_ln236_reg_2751 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_2751_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal beta_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1134 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state67_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state71_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state73_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_vector_init_11_fu_1068_ap_ready : STD_LOGIC;
    signal grp_vector_init_11_fu_1068_ap_done : STD_LOGIC;
    signal rhs_V_7_reg_2268 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_fu_1140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_reg_2273 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_V_fu_1152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_2281 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs_mem_1_addr_4_reg_2286 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln69_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_38_fu_1174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_38_reg_2306 : STD_LOGIC_VECTOR (5 downto 0);
    signal cdw_V_load_reg_2311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state12_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal alpha_ij_pow_V_load_reg_2321 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state13_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal j_V_fu_1194_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_V_reg_2326 : STD_LOGIC_VECTOR (5 downto 0);
    signal syndrome_local_V_1_fu_1200_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal mu_add_V_fu_1218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mu_add_V_reg_2339 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln120_fu_1224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln120_reg_2348 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln120_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deg_X_V_fu_1228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_X_V_reg_2353 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln895_1_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_2358 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_1278_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_reg_2373 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_fu_1303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_V_reg_2379 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_fu_1320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_V_reg_2384 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_fu_1338_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_p_V_reg_2389 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln140_fu_1344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal X_sigma_p_V_addr_2_reg_2408 : STD_LOGIC_VECTOR (3 downto 0);
    signal rs_mem_1_addr_12_reg_2414 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_76_fu_1394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_76_reg_2420 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_79_fu_1411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_79_reg_2425 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_7_fu_1418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_7_reg_2430 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigma_local_V_1_fu_1424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal deg_sigma_p_V_fu_1442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal deg_sigma_p_V_reg_2440 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln151_fu_1448_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln151_reg_2445 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln151_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_2450_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_2454 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_8_fu_1487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_8_reg_2469 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_V_2_fu_1517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln277_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_2484_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_6_fu_1529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_6_reg_2488 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_fu_1544_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_reg_2498 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1353_fu_1550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1353_reg_2503 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_load_reg_2513 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state33_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state39_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal index_load_1_reg_2518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_state34_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal rs_mem_1_addr_9_reg_2528 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1354_fu_1583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1354_reg_2533 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp3_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage5 : signal is "none";
    signal ap_block_state37_pp3_stage5_iter0 : BOOLEAN;
    signal ap_block_pp3_stage5_11001 : BOOLEAN;
    signal rs_mem_1_addr_11_reg_2543 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1354_1_fu_1645_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1354_1_reg_2548 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ret_V_fu_1675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_2558 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ret_V_55_fu_1685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_55_reg_2563 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal lhs_V_14_fu_1701_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_14_reg_2571 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln180_fu_1691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_fu_1741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_reg_2592 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal select_ln321_1_fu_1745_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln321_1_reg_2597 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_82_fu_1759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_82_reg_2602 : STD_LOGIC_VECTOR (7 downto 0);
    signal rs_mem_1_addr_15_reg_2607 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln183_fu_1775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state45_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ret_V_64_fu_1800_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_64_reg_2622 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_7_fu_1810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_V_7_reg_2632 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_9_fu_1839_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln887_10_fu_1845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal j_V_6_fu_1851_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_10_fu_1868_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_10_reg_2654 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln887_11_fu_1862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_12_fu_1894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_12_reg_2664 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_j_V_addr_1_reg_2674 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln220_fu_1905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_reg_2679 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_21_reg_2684 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal retrieved_mask_V_reg_2694 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal add_ln700_fu_1927_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_reg_2699 : STD_LOGIC_VECTOR (7 downto 0);
    signal delta_counter_V_fu_1936_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_ln226_fu_1942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_V_13_fu_1948_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_13_reg_2713 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln544_46_fu_1954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_46_reg_2718 : STD_LOGIC_VECTOR (63 downto 0);
    signal error_values_a_V_fu_1980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal j_V_8_fu_1986_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_fu_1992_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln236_reg_2746 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln236_fu_1996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_2751_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_70_fu_2006_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_70_reg_2755 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_V_fu_2033_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_V_reg_2767 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal xor_ln214_fu_2039_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln214_reg_2772 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal icmp_ln887_17_fu_2049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_17_reg_2782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal e_j_V_addr_1_reg_2787 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_17_reg_2797 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_11_fu_2091_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_11_reg_2805 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal icmp_ln887_13_fu_2085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_15_fu_2117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_15_reg_2815 : STD_LOGIC_VECTOR (0 downto 0);
    signal rs_mem_1_addr_22_reg_2825 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln246_fu_2138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln246_reg_2830 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_j_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_22_reg_2835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal add_ln700_4_fu_2160_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_4_reg_2845 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal delta_counter_V_1_fu_2170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal delta_counter_V_1_reg_2850 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln887_14_fu_2176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_14_reg_2855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_block_state84_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state86_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal i_V_12_fu_2182_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_12_reg_2859 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal cdw_V_addr_33_reg_2869 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln719_5_fu_2208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln719_5_reg_2875 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp9_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage1 : signal is "none";
    signal ap_block_state85_pp9_stage1_iter0 : BOOLEAN;
    signal ap_block_pp9_stage1_11001 : BOOLEAN;
    signal i_V_14_fu_2220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_14_reg_2883 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal icmp_ln887_16_fu_2214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state26 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_add_fft_fu_1033_ap_ready : STD_LOGIC;
    signal grp_add_fft_fu_1033_ap_done : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state32 : STD_LOGIC;
    signal ap_block_pp3_stage5_subdone : BOOLEAN;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state45 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage3_subdone : BOOLEAN;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state67 : STD_LOGIC;
    signal ap_block_pp7_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state84 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage1_subdone : BOOLEAN;
    signal rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce0 : STD_LOGIC;
    signal rs_mem_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rs_mem_1_ce1 : STD_LOGIC;
    signal rs_mem_1_we1 : STD_LOGIC;
    signal rs_mem_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_j_V_ce0 : STD_LOGIC;
    signal beta_j_V_we0 : STD_LOGIC;
    signal beta_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_j_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_j_V_ce0 : STD_LOGIC;
    signal e_j_V_we0 : STD_LOGIC;
    signal e_j_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_sigma_p_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce0 : STD_LOGIC;
    signal X_sigma_p_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal X_sigma_p_V_ce1 : STD_LOGIC;
    signal X_sigma_p_V_we1 : STD_LOGIC;
    signal X_sigma_p_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_add_fft_fu_1033_ap_start : STD_LOGIC;
    signal grp_add_fft_fu_1033_ap_idle : STD_LOGIC;
    signal grp_add_fft_fu_1033_rs_mem_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_fft_fu_1033_rs_mem_1_ce0 : STD_LOGIC;
    signal grp_add_fft_fu_1033_rs_mem_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_fft_fu_1033_rs_mem_1_ce1 : STD_LOGIC;
    signal grp_add_fft_fu_1033_rs_mem_1_we1 : STD_LOGIC;
    signal grp_add_fft_fu_1033_rs_mem_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_inverse_fu_1046_ap_start : STD_LOGIC;
    signal grp_gf_inverse_fu_1046_ap_idle : STD_LOGIC;
    signal grp_gf_inverse_fu_1046_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1053_ap_ready : STD_LOGIC;
    signal grp_gf_mul_fu_1053_a_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_gf_mul_fu_1053_b_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vector_init_fu_1063_ap_start : STD_LOGIC;
    signal grp_vector_init_fu_1063_ap_done : STD_LOGIC;
    signal grp_vector_init_fu_1063_ap_idle : STD_LOGIC;
    signal grp_vector_init_fu_1063_ap_ready : STD_LOGIC;
    signal grp_vector_init_fu_1063_array_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_init_fu_1063_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_fu_1063_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_fu_1063_array_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vector_init_11_fu_1068_ap_start : STD_LOGIC;
    signal grp_vector_init_11_fu_1068_ap_idle : STD_LOGIC;
    signal grp_vector_init_11_fu_1068_array_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_init_11_fu_1068_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_11_fu_1068_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_11_fu_1068_array_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vector_init_1_fu_1073_ap_start : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_ap_done : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_ap_idle : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_ap_ready : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_array_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_init_1_fu_1073_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_1_fu_1073_array_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vector_init_2_fu_1078_ap_start : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_ap_done : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_ap_idle : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_ap_ready : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_array_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_init_2_fu_1078_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_2_fu_1078_array_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_088_0_i_reg_678 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal phi_mul_reg_689 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_p_063_0_i_phi_fu_705_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal deg_sigma_copy_V_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal rhs_V_8_reg_735 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_3_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_5_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_3_reg_781 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_p_0459_0_i_phi_fu_816_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_p_0459_1_i_phi_fu_839_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_p_01206_0_i_phi_fu_851_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal indvars_iv_i_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_p_0249_0_i_phi_fu_874_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal p_0260_0_i_reg_882 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0312_0_i_reg_893 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_905 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0426_1_i_reg_916 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal p_0260_1_i_reg_928 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_044_reg_940 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_034_reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_0243_0_i_phi_fu_967_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal p_0312_1_i_reg_987 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal p_0426_2_i_reg_999 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_022_0_i_phi_fu_1014_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal p_071_0_reg_1021 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_add_fft_fu_1033_ap_start_reg : STD_LOGIC := '0';
    signal grp_gf_inverse_fu_1046_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_block_pp4_stage3 : BOOLEAN;
    signal ap_block_pp7_stage1 : BOOLEAN;
    signal grp_vector_init_fu_1063_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_vector_init_11_fu_1068_ap_start_reg : STD_LOGIC := '0';
    signal grp_vector_init_1_fu_1073_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_vector_init_2_fu_1078_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln544_fu_1158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_38_fu_1169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln130_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_37_fu_1274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_40_fu_1366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_4_fu_1381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_2_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_1_fu_1482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_1498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_39_fu_1535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_43_fu_1556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_9_fu_1564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal zext_ln719_2_fu_1574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_11_fu_1625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage5 : BOOLEAN;
    signal zext_ln719_3_fu_1636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_1710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_fu_1736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_49_fu_1725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_2_fu_1770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_1790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_fu_1806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal zext_ln544_41_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_3_fu_1889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_44_fu_1874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_45_fu_1900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_1910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_1_fu_1975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_51_fu_2028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln239_fu_2055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln883_5_fu_2112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_47_fu_2097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_3_fu_2133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_2143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln719_6_fu_2203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_50_fu_2188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_53_fu_2236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_52_fu_2241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_35_fu_1206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage4 : signal is "none";
    signal ap_block_state36_pp3_stage4_iter0 : BOOLEAN;
    signal ap_block_pp3_stage4_11001 : BOOLEAN;
    signal xor_ln719_9_fu_1606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage4 : BOOLEAN;
    signal xor_ln719_10_fu_1668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal xor_ln719_fu_1832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln72_fu_1180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln72_fu_1183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln209_1_fu_1238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln209_fu_1234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal deg_X_sigma_p_V_fu_1242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln895_fu_1248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln895_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln130_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_1_fu_1286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_73_fu_1291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_26_fu_1297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_74_fu_1309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_32_fu_1314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_75_fu_1326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_34_fu_1332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln899_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1355_fu_1371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln719_2_fu_1375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1355_fu_1386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_77_fu_1400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_78_fu_1406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_80_fu_1431_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_44_fu_1437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln152_1_fu_1462_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln152_fu_1466_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_59_fu_1477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal xor_ln899_1_fu_1493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1355_1_fu_1503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_60_fu_1511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_42_fu_1540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_8_fu_1561_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_fu_1568_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal zext_ln215_3_fu_1579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_1589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_13_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln719_fu_1602_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_48_fu_1613_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_4_fu_1619_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_10_fu_1616_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_1_fu_1630_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_4_fu_1641_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_1651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_14_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln719_1_fu_1664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1354_fu_1681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_fu_1697_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_56_fu_1719_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1354_1_fu_1715_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1357_fu_1730_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_81_fu_1753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1357_1_fu_1765_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_18_fu_1780_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln184_fu_1784_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_61_fu_1795_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1357_fu_1816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_83_fu_1821_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_66_fu_1827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_fu_1879_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_fu_1883_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_2_fu_1914_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln700_fu_1922_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_fu_1933_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln234_fu_1965_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln234_fu_1969_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln236_1_fu_2002_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1372_fu_2011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1372_fu_2016_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_71_fu_2021_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln887_fu_2045_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1355_2_fu_2065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_84_fu_2059_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_69_fu_2072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln883_4_fu_2102_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln883_2_fu_2106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1355_1_fu_2123_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln700_15_fu_2127_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln321_3_fu_2147_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_67_fu_2155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_2_fu_2166_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln719_5_fu_2193_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln719_3_fu_2197_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp9_stage1 : BOOLEAN;
    signal zext_ln215_fu_2226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_72_fu_2230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage4_subdone : BOOLEAN;
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;

    component add_fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rs_mem_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rs_mem_1_ce0 : OUT STD_LOGIC;
        rs_mem_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rs_mem_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        rs_mem_1_ce1 : OUT STD_LOGIC;
        rs_mem_1_we1 : OUT STD_LOGIC;
        rs_mem_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gf_mul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_init_11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_init_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_init_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decotde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component reed_solomon_decovdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decozec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_decoAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_fft_w16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    alpha_ij_pow_V_U : component reed_solomon_decotde
    generic map (
        DataWidth => 8,
        AddressRange => 3792,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_ij_pow_V_address0,
        ce0 => alpha_ij_pow_V_ce0,
        q0 => alpha_ij_pow_V_q0);

    masks2_U : component reed_solomon_decoudo
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks2_address0,
        ce0 => masks2_ce0,
        q0 => masks2_q0);

    index_U : component reed_solomon_decovdy
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => index_address0,
        ce0 => index_ce0,
        q0 => index_q0,
        address1 => index_address1,
        ce1 => index_ce1,
        q1 => index_q1);

    masks3_U : component reed_solomon_decoudo
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks3_address0,
        ce0 => masks3_ce0,
        q0 => masks3_q0);

    masks4_U : component reed_solomon_decoudo
    generic map (
        DataWidth => 1,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => masks4_address0,
        ce0 => masks4_ce0,
        q0 => masks4_q0);

    exp_array_V_U : component reed_solomon_decoyd2
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_array_V_address0,
        ce0 => exp_array_V_ce0,
        q0 => exp_array_V_q0);

    rs_mem_1_U : component reed_solomon_decozec
    generic map (
        DataWidth => 8,
        AddressRange => 666,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rs_mem_1_address0,
        ce0 => rs_mem_1_ce0,
        q0 => rs_mem_1_q0,
        address1 => rs_mem_1_address1,
        ce1 => rs_mem_1_ce1,
        we1 => rs_mem_1_we1,
        d1 => rs_mem_1_d1,
        q1 => rs_mem_1_q1);

    beta_j_V_U : component reed_solomon_decoAem
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_j_V_address0,
        ce0 => beta_j_V_ce0,
        we0 => beta_j_V_we0,
        d0 => beta_j_V_d0,
        q0 => beta_j_V_q0);

    e_j_V_U : component reed_solomon_decoAem
    generic map (
        DataWidth => 8,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_j_V_address0,
        ce0 => e_j_V_ce0,
        we0 => e_j_V_we0,
        d0 => e_j_V_d0,
        q0 => e_j_V_q0);

    X_sigma_p_V_U : component add_fft_w16
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_sigma_p_V_address0,
        ce0 => X_sigma_p_V_ce0,
        q0 => X_sigma_p_V_q0,
        address1 => X_sigma_p_V_address1,
        ce1 => X_sigma_p_V_ce1,
        we1 => X_sigma_p_V_we1,
        d1 => X_sigma_p_V_d1);

    grp_add_fft_fu_1033 : component add_fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_fft_fu_1033_ap_start,
        ap_done => grp_add_fft_fu_1033_ap_done,
        ap_idle => grp_add_fft_fu_1033_ap_idle,
        ap_ready => grp_add_fft_fu_1033_ap_ready,
        rs_mem_1_address0 => grp_add_fft_fu_1033_rs_mem_1_address0,
        rs_mem_1_ce0 => grp_add_fft_fu_1033_rs_mem_1_ce0,
        rs_mem_1_q0 => rs_mem_1_q0,
        rs_mem_1_address1 => grp_add_fft_fu_1033_rs_mem_1_address1,
        rs_mem_1_ce1 => grp_add_fft_fu_1033_rs_mem_1_ce1,
        rs_mem_1_we1 => grp_add_fft_fu_1033_rs_mem_1_we1,
        rs_mem_1_d1 => grp_add_fft_fu_1033_rs_mem_1_d1);

    grp_gf_inverse_fu_1046 : component gf_inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gf_inverse_fu_1046_ap_start,
        ap_done => grp_gf_inverse_fu_1046_ap_done,
        ap_idle => grp_gf_inverse_fu_1046_ap_idle,
        ap_ready => grp_gf_inverse_fu_1046_ap_ready,
        a_V => grp_gf_inverse_fu_1046_a_V,
        ap_return => grp_gf_inverse_fu_1046_ap_return);

    grp_gf_mul_fu_1053 : component gf_mul
    port map (
        ap_ready => grp_gf_mul_fu_1053_ap_ready,
        a_V => grp_gf_mul_fu_1053_a_V,
        b_V => grp_gf_mul_fu_1053_b_V,
        ap_return => grp_gf_mul_fu_1053_ap_return);

    grp_vector_init_fu_1063 : component vector_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_fu_1063_ap_start,
        ap_done => grp_vector_init_fu_1063_ap_done,
        ap_idle => grp_vector_init_fu_1063_ap_idle,
        ap_ready => grp_vector_init_fu_1063_ap_ready,
        array_V_address1 => grp_vector_init_fu_1063_array_V_address1,
        array_V_ce1 => grp_vector_init_fu_1063_array_V_ce1,
        array_V_we1 => grp_vector_init_fu_1063_array_V_we1,
        array_V_d1 => grp_vector_init_fu_1063_array_V_d1);

    grp_vector_init_11_fu_1068 : component vector_init_11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_11_fu_1068_ap_start,
        ap_done => grp_vector_init_11_fu_1068_ap_done,
        ap_idle => grp_vector_init_11_fu_1068_ap_idle,
        ap_ready => grp_vector_init_11_fu_1068_ap_ready,
        array_V_address1 => grp_vector_init_11_fu_1068_array_V_address1,
        array_V_ce1 => grp_vector_init_11_fu_1068_array_V_ce1,
        array_V_we1 => grp_vector_init_11_fu_1068_array_V_we1,
        array_V_d1 => grp_vector_init_11_fu_1068_array_V_d1);

    grp_vector_init_1_fu_1073 : component vector_init_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_1_fu_1073_ap_start,
        ap_done => grp_vector_init_1_fu_1073_ap_done,
        ap_idle => grp_vector_init_1_fu_1073_ap_idle,
        ap_ready => grp_vector_init_1_fu_1073_ap_ready,
        array_V_address1 => grp_vector_init_1_fu_1073_array_V_address1,
        array_V_ce1 => grp_vector_init_1_fu_1073_array_V_ce1,
        array_V_we1 => grp_vector_init_1_fu_1073_array_V_we1,
        array_V_d1 => grp_vector_init_1_fu_1073_array_V_d1);

    grp_vector_init_2_fu_1078 : component vector_init_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_2_fu_1078_ap_start,
        ap_done => grp_vector_init_2_fu_1078_ap_done,
        ap_idle => grp_vector_init_2_fu_1078_ap_idle,
        ap_ready => grp_vector_init_2_fu_1078_ap_ready,
        array_V_address1 => grp_vector_init_2_fu_1078_array_V_address1,
        array_V_ce1 => grp_vector_init_2_fu_1078_array_V_ce1,
        array_V_we1 => grp_vector_init_2_fu_1078_array_V_we1,
        array_V_d1 => grp_vector_init_2_fu_1078_array_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state26) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state32) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_add_fft_fu_1033_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_const_boolean_0 = ap_block_pp3_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_add_fft_fu_1033_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state45) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state67) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone)))) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state84) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp9_stage1) and (ap_const_boolean_0 = ap_block_pp9_stage1_subdone)))) then 
                    ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_add_fft_fu_1033_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_fft_fu_1033_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln120_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_add_fft_fu_1033_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_fft_fu_1033_ap_ready = ap_const_logic_1)) then 
                    grp_add_fft_fu_1033_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gf_inverse_fu_1046_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gf_inverse_fu_1046_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state60) or ((icmp_ln120_fu_1212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                    grp_gf_inverse_fu_1046_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gf_inverse_fu_1046_ap_ready = ap_const_logic_1)) then 
                    grp_gf_inverse_fu_1046_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_11_fu_1068_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_11_fu_1068_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_vector_init_11_fu_1068_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_11_fu_1068_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_11_fu_1068_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_1_fu_1073_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_1_fu_1073_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_vector_init_1_fu_1073_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_1_fu_1073_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_1_fu_1073_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_2_fu_1078_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_2_fu_1078_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_vector_init_2_fu_1078_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_2_fu_1078_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_2_fu_1078_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_fu_1063_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_fu_1063_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_vector_init_fu_1063_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_fu_1063_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_fu_1063_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    deg_sigma_copy_V_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                deg_sigma_copy_V_reg_723 <= deg_sigma_V_reg_2379;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                deg_sigma_copy_V_reg_723 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_858_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                indvars_iv_i_reg_858 <= ap_const_lv5_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                indvars_iv_i_reg_858 <= i_V_9_fu_1839_p2;
            end if; 
        end if;
    end process;

    lhs_V_3_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                lhs_V_3_reg_781 <= mu_add_V_reg_2339;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                lhs_V_3_reg_781 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    lhs_V_4_reg_771_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                lhs_V_4_reg_771 <= p_0390_1_i_reg_824;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                lhs_V_4_reg_771 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_5_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lhs_V_5_reg_713 <= syndrome_local_V_1_fu_1200_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                lhs_V_5_reg_713 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    lhs_V_8_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                lhs_V_8_reg_792 <= sigma_local_V_1_fu_1424_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                lhs_V_8_reg_792 <= reg_1111;
            end if; 
        end if;
    end process;

    p_01206_0_i_reg_847_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                p_01206_0_i_reg_847 <= i_V_6_reg_2488;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_add_fft_fu_1033_ap_done = ap_const_logic_1))) then 
                p_01206_0_i_reg_847 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_022_0_i_reg_1010_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                p_022_0_i_reg_1010 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln887_14_reg_2855 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
                p_022_0_i_reg_1010 <= i_V_12_reg_2859;
            end if; 
        end if;
    end process;

    p_0243_0_i_reg_963_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                p_0243_0_i_reg_963 <= ap_const_lv4_1;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln236_reg_2751 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
                p_0243_0_i_reg_963 <= k_V_reg_2767;
            end if; 
        end if;
    end process;

    p_0249_0_i_reg_870_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                p_0249_0_i_reg_870 <= j_V_7_reg_2632;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                p_0249_0_i_reg_870 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_1845_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                p_0260_0_i_reg_882 <= j_V_6_fu_1851_p2;
            elsif (((icmp_ln180_fu_1691_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                p_0260_0_i_reg_882 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0260_1_i_reg_928_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                p_0260_1_i_reg_928 <= j_V_8_fu_1986_p2;
            elsif (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                p_0260_1_i_reg_928 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_0312_0_i_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_1845_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                p_0312_0_i_reg_893 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                p_0312_0_i_reg_893 <= delta_counter_V_fu_1936_p2;
            end if; 
        end if;
    end process;

    p_0312_1_i_reg_987_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_1942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                p_0312_1_i_reg_987 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                p_0312_1_i_reg_987 <= delta_counter_V_1_reg_2850;
            end if; 
        end if;
    end process;

    p_034_reg_951_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                p_034_reg_951 <= error_values_a_V_fu_1980_p2;
            elsif (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                p_034_reg_951 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0390_1_i_reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln151_reg_2450_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
                p_0390_1_i_reg_824 <= d_V_2_fu_1517_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_0390_1_i_reg_824 <= reg_1117;
            end if; 
        end if;
    end process;

    p_039_reg_975_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                p_039_reg_975 <= ap_const_lv8_1;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln236_reg_2751_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                p_039_reg_975 <= grp_gf_mul_fu_1053_ap_return;
            end if; 
        end if;
    end process;

    p_0426_1_i_reg_916_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                p_0426_1_i_reg_916 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                p_0426_1_i_reg_916 <= i_V_13_reg_2713;
            end if; 
        end if;
    end process;

    p_0426_2_i_reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_1942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                p_0426_2_i_reg_999 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                p_0426_2_i_reg_999 <= i_V_11_reg_2805;
            end if; 
        end if;
    end process;

    p_044_reg_940_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                p_044_reg_940 <= reg_1099;
            elsif (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                p_044_reg_940 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    p_0459_0_i_reg_812_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                p_0459_0_i_reg_812 <= i_V_7_reg_2430;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_0459_0_i_reg_812 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_0459_1_i_reg_835_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                p_0459_1_i_reg_835 <= i_V_8_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_0459_1_i_reg_835 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_063_0_i_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_063_0_i_reg_701 <= j_V_reg_2326;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_063_0_i_reg_701 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    p_071_0_reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                p_071_0_reg_1021 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                p_071_0_reg_1021 <= i_V_14_reg_2883;
            end if; 
        end if;
    end process;

    p_088_0_i_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_088_0_i_reg_678 <= i_V_reg_2281;
            elsif (((grp_vector_init_11_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_088_0_i_reg_678 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_mul_reg_689 <= add_ln69_reg_2273;
            elsif (((grp_vector_init_11_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_mul_reg_689 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    reg_1090_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3)))) then 
                reg_1090 <= rs_mem_1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)))) then 
                reg_1090 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    reg_1117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
                reg_1117 <= rs_mem_1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_1117 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    reg_1124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                reg_1124 <= rs_mem_1_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                reg_1124 <= rs_mem_1_q0;
            end if; 
        end if;
    end process;

    rhs_V_25_reg_802_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                rhs_V_25_reg_802 <= ret_V_79_reg_2425;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                rhs_V_25_reg_802 <= X_sigma_p_V_q0;
            end if; 
        end if;
    end process;

    rhs_V_3_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                rhs_V_3_reg_747 <= pp_V_reg_2384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                rhs_V_3_reg_747 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;

    rhs_V_5_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                rhs_V_5_reg_759 <= d_p_V_reg_2389;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                rhs_V_5_reg_759 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    rhs_V_8_reg_735_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                rhs_V_8_reg_735 <= deg_sigma_p_V_reg_2440;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                rhs_V_8_reg_735 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_reg_905_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_10_fu_1845_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                t_V_reg_905 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                t_V_reg_905 <= i_V_10_reg_2654;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln140_fu_1344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                X_sigma_p_V_addr_2_reg_2408 <= zext_ln544_40_fu_1366_p1(4 - 1 downto 0);
                    rs_mem_1_addr_12_reg_2414(5 downto 0) <= zext_ln719_4_fu_1381_p1(10 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_fu_1523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln215_reg_2498 <= add_ln215_fu_1544_p2;
                xor_ln1353_reg_2503 <= xor_ln1353_fu_1550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln69_reg_2273 <= add_ln69_fu_1140_p2;
                i_V_reg_2281 <= i_V_fu_1152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                add_ln700_4_reg_2845 <= add_ln700_4_fu_2160_p2;
                delta_counter_V_1_reg_2850 <= delta_counter_V_1_fu_2170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                add_ln700_reg_2699 <= add_ln700_fu_1927_p2;
                retrieved_mask_V_reg_2694 <= masks4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                alpha_ij_pow_V_load_reg_2321 <= alpha_ij_pow_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                and_ln220_reg_2679 <= and_ln220_fu_1905_p2;
                rhs_V_21_reg_2684 <= exp_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                and_ln246_reg_2830 <= and_ln246_fu_2138_p2;
                rhs_V_22_reg_2835 <= e_j_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_11_fu_1862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                beta_j_V_addr_1_reg_2674 <= zext_ln544_45_fu_1900_p1(4 - 1 downto 0);
                icmp_ln887_12_reg_2664 <= icmp_ln887_12_fu_1894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln887_14_fu_2176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                cdw_V_addr_33_reg_2869 <= zext_ln544_50_fu_2188_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                cdw_V_load_reg_2311 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                d_p_V_reg_2389 <= d_p_V_fu_1338_p2;
                deg_sigma_V_reg_2379 <= deg_sigma_V_fu_1303_p2;
                pp_V_reg_2384 <= pp_V_fu_1320_p2;
                select_ln321_reg_2373 <= select_ln321_fu_1278_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_1212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                deg_X_V_reg_2353 <= deg_X_V_fu_1228_p2;
                icmp_ln895_1_reg_2358 <= icmp_ln895_1_fu_1252_p2;
                    zext_ln120_reg_2348(4 downto 0) <= zext_ln120_fu_1224_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                deg_sigma_p_V_reg_2440 <= deg_sigma_p_V_fu_1442_p2;
                    zext_ln151_reg_2445(4 downto 0) <= zext_ln151_fu_1448_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                e_j_V_addr_1_reg_2787 <= zext_ln544_46_reg_2718(4 - 1 downto 0);
                icmp_ln887_17_reg_2782 <= icmp_ln887_17_fu_2049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                i_V_10_reg_2654 <= i_V_10_fu_1868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                i_V_11_reg_2805 <= i_V_11_fu_2091_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                i_V_12_reg_2859 <= i_V_12_fu_2182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                i_V_13_reg_2713 <= i_V_13_fu_1948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                i_V_14_reg_2883 <= i_V_14_fu_2220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                i_V_6_reg_2488 <= i_V_6_fu_1529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_V_7_reg_2430 <= i_V_7_fu_1418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                i_V_8_reg_2469 <= i_V_8_fu_1487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln140_reg_2399 <= icmp_ln140_fu_1344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln151_reg_2450 <= icmp_ln151_fu_1451_p2;
                icmp_ln151_reg_2450_pp2_iter1_reg <= icmp_ln151_reg_2450;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln183_reg_2613 <= icmp_ln183_fu_1775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln236_reg_2751 <= icmp_ln236_fu_1996_p2;
                icmp_ln236_reg_2751_pp7_iter1_reg <= icmp_ln236_reg_2751;
                icmp_ln236_reg_2751_pp7_iter2_reg <= icmp_ln236_reg_2751_pp7_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln277_reg_2484 <= icmp_ln277_fu_1523_p2;
                icmp_ln277_reg_2484_pp3_iter1_reg <= icmp_ln277_reg_2484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln71_reg_2297 <= icmp_ln71_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                icmp_ln887_14_reg_2855 <= icmp_ln887_14_fu_2176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_13_fu_2085_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                icmp_ln887_15_reg_2815 <= icmp_ln887_15_fu_2117_p2;
                    rs_mem_1_addr_22_reg_2825(8 downto 0) <= zext_ln700_3_fu_2133_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln151_fu_1451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln899_1_reg_2454 <= icmp_ln899_1_fu_1457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                index_load_1_reg_2518 <= index_q1;
                index_load_reg_2513 <= index_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                j_V_7_reg_2632 <= j_V_7_fu_1810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                j_V_reg_2326 <= j_V_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (icmp_ln236_reg_2751 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then
                k_V_reg_2767 <= k_V_fu_2033_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_1691_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    lhs_V_14_reg_2571(4 downto 0) <= lhs_V_14_fu_1701_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                lhs_V_17_reg_2797 <= masks4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mu_add_V_reg_2339 <= mu_add_V_fu_1218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln232_fu_1959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                reg_1099 <= grp_gf_mul_fu_1053_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then
                reg_1105 <= grp_gf_inverse_fu_1046_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                reg_1111 <= rs_mem_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (icmp_ln236_reg_2751_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                reg_1130 <= grp_gf_mul_fu_1053_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state53) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln236_reg_2751 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)))) then
                reg_1134 <= beta_j_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln71_fu_1163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_38_reg_2306 <= ret_V_38_fu_1174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                ret_V_55_reg_2563 <= ret_V_55_fu_1685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln183_fu_1775_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                ret_V_64_reg_2622 <= ret_V_64_fu_1800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln236_fu_1996_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                ret_V_70_reg_2755 <= ret_V_70_fu_2006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                ret_V_76_reg_2420 <= ret_V_76_fu_1394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                ret_V_79_reg_2425 <= ret_V_79_fu_1411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                ret_V_82_reg_2602 <= ret_V_82_fu_1759_p2;
                    rs_mem_1_addr_15_reg_2607(8 downto 0) <= zext_ln1357_2_fu_1770_p1(10 - 1 downto 0)(8 downto 0);
                select_ln321_1_reg_2597 <= select_ln321_1_fu_1745_p3;
                    zext_ln180_reg_2592(4 downto 0) <= zext_ln180_fu_1741_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                ret_V_reg_2558 <= ret_V_fu_1675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vector_init_11_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                rhs_V_7_reg_2268 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5))) then
                    rs_mem_1_addr_11_reg_2543(8 downto 0) <= zext_ln719_3_fu_1636_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    rs_mem_1_addr_4_reg_2286(4 downto 0) <= zext_ln544_fu_1158_p1(10 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2))) then
                    rs_mem_1_addr_9_reg_2528(8 downto 0) <= zext_ln719_2_fu_1574_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                sub_ln1354_1_reg_2548 <= sub_ln1354_1_fu_1645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3))) then
                sub_ln1354_reg_2533 <= sub_ln1354_fu_1583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (icmp_ln236_reg_2751_pp7_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then
                xor_ln214_reg_2772 <= xor_ln214_fu_2039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_14_reg_2855 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage1) and (ap_const_boolean_0 = ap_block_pp9_stage1_11001))) then
                xor_ln719_5_reg_2875 <= xor_ln719_5_fu_2208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                    zext_ln236_reg_2746(3 downto 0) <= zext_ln236_fu_1992_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_1942_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    zext_ln544_46_reg_2718(3 downto 0) <= zext_ln544_46_fu_1954_p1(3 downto 0);
            end if;
        end if;
    end process;
    rs_mem_1_addr_4_reg_2286(9 downto 5) <= "00000";
    zext_ln120_reg_2348(7 downto 5) <= "000";
    rs_mem_1_addr_12_reg_2414(9 downto 6) <= "0000";
    zext_ln151_reg_2445(5) <= '0';
    rs_mem_1_addr_9_reg_2528(9) <= '0';
    rs_mem_1_addr_11_reg_2543(9) <= '0';
    lhs_V_14_reg_2571(8 downto 5) <= "0000";
    zext_ln180_reg_2592(7 downto 5) <= "000";
    rs_mem_1_addr_15_reg_2607(9) <= '0';
    zext_ln544_46_reg_2718(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln236_reg_2746(4) <= '0';
    rs_mem_1_addr_22_reg_2825(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state62, icmp_ln232_fu_1959_p2, ap_CS_fsm_state19, grp_gf_inverse_fu_1046_ap_done, ap_CS_fsm_state61, ap_CS_fsm_state75, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage0, ap_CS_fsm_state8, grp_vector_init_11_fu_1068_ap_done, ap_CS_fsm_state9, icmp_ln69_fu_1146_p2, icmp_ln71_fu_1163_p2, ap_CS_fsm_state18, icmp_ln120_fu_1212_p2, icmp_ln140_fu_1344_p2, icmp_ln151_fu_1451_p2, icmp_ln277_fu_1523_p2, ap_CS_fsm_pp3_stage1, ap_CS_fsm_state43, icmp_ln180_fu_1691_p2, icmp_ln183_fu_1775_p2, icmp_ln887_10_fu_1845_p2, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln887_11_fu_1862_p2, icmp_ln226_fu_1942_p2, ap_CS_fsm_state58, icmp_ln236_fu_1996_p2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter3, ap_CS_fsm_state78, icmp_ln887_13_fu_2085_p2, icmp_ln887_14_fu_2176_p2, ap_enable_reg_pp9_iter0, ap_CS_fsm_state88, icmp_ln887_16_fu_2214_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_CS_fsm_state31, grp_add_fft_fu_1033_ap_done, ap_block_pp3_stage0_subdone, ap_block_pp3_stage5_subdone, ap_block_pp3_stage1_subdone, ap_block_pp4_stage0_subdone, ap_block_pp4_stage3_subdone, ap_block_pp7_stage0_subdone, ap_block_pp7_stage1_subdone, ap_enable_reg_pp7_iter2, ap_block_pp9_stage0_subdone, ap_block_pp9_stage1_subdone, grp_vector_init_fu_1063_ap_done, grp_vector_init_1_fu_1073_ap_done, grp_vector_init_2_fu_1078_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage1_subdone, ap_block_pp3_stage2_subdone, ap_block_pp3_stage3_subdone, ap_block_pp3_stage4_subdone, ap_block_pp4_stage1_subdone, ap_block_pp4_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_vector_init_2_fu_1078_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_1_fu_1073_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_vector_init_fu_1063_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_vector_init_11_fu_1068_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln69_fu_1146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln71_fu_1163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln71_fu_1163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln120_fu_1212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln140_fu_1344_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln140_fu_1344_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln151_fu_1451_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((icmp_ln151_fu_1451_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_add_fft_fu_1033_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln277_fu_1523_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((icmp_ln277_fu_1523_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_pp3_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage4;
                end if;
            when ap_ST_fsm_pp3_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage5;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln180_fu_1691_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln183_fu_1775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif (((icmp_ln183_fu_1775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln887_10_fu_1845_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln887_11_fu_1862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln226_fu_1942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln232_fu_1959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((icmp_ln236_fu_1996_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                elsif ((((icmp_ln236_fu_1996_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_pp7_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp7_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state78 => 
                if (((icmp_ln887_13_fu_2085_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((icmp_ln887_14_fu_2176_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage1;
                elsif (((icmp_ln887_14_fu_2176_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_pp9_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp9_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage1;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((icmp_ln887_16_fu_2214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_sigma_p_V_address0_assign_proc : process(ap_CS_fsm_state19, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, zext_ln544_40_fu_1366_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            X_sigma_p_V_address0 <= zext_ln544_40_fu_1366_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            X_sigma_p_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address0 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, X_sigma_p_V_addr_2_reg_2408, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            X_sigma_p_V_address1 <= X_sigma_p_V_addr_2_reg_2408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            X_sigma_p_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            X_sigma_p_V_address1 <= "XXXX";
        end if; 
    end process;


    X_sigma_p_V_ce0_assign_proc : process(ap_CS_fsm_state19, grp_gf_inverse_fu_1046_ap_done, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            X_sigma_p_V_ce0 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            X_sigma_p_V_ce1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_sigma_p_V_d1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, ret_V_79_fu_1411_p2, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            X_sigma_p_V_d1 <= ret_V_79_fu_1411_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            X_sigma_p_V_d1 <= ap_const_lv8_0;
        else 
            X_sigma_p_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    X_sigma_p_V_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, icmp_ln140_reg_2399, ap_CS_fsm_state9, icmp_ln69_fu_1146_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((icmp_ln69_fu_1146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            X_sigma_p_V_we1 <= ap_const_logic_1;
        else 
            X_sigma_p_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1357_1_fu_1765_p2 <= std_logic_vector(signed(ap_const_lv9_13E) + signed(lhs_V_14_reg_2571));
    add_ln1357_fu_1730_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1354_1_fu_1715_p1));
    add_ln1372_fu_2016_p2 <= std_logic_vector(unsigned(ret_V_70_reg_2755) + unsigned(ap_const_lv5_11));
    add_ln152_fu_1466_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln152_1_fu_1462_p1));
    add_ln184_fu_1784_p2 <= std_logic_vector(unsigned(rhs_V_18_fu_1780_p1) + unsigned(ap_const_lv9_1E));
    add_ln215_4_fu_1619_p2 <= std_logic_vector(unsigned(zext_ln544_48_fu_1613_p1) + unsigned(ap_const_lv10_19A));
    add_ln215_fu_1544_p2 <= std_logic_vector(unsigned(zext_ln544_42_fu_1540_p1) + unsigned(ap_const_lv10_19A));
    add_ln234_fu_1969_p2 <= std_logic_vector(unsigned(zext_ln234_fu_1965_p1) + unsigned(ap_const_lv9_13E));
    add_ln69_fu_1140_p2 <= std_logic_vector(unsigned(phi_mul_reg_689) + unsigned(ap_const_lv12_4F));
    add_ln700_15_fu_2127_p2 <= std_logic_vector(signed(ap_const_lv9_16C) + signed(zext_ln1355_1_fu_2123_p1));
    add_ln700_4_fu_2160_p2 <= std_logic_vector(unsigned(ret_V_67_fu_2155_p2) + unsigned(reg_1090));
    add_ln700_fu_1927_p2 <= std_logic_vector(unsigned(and_ln700_fu_1922_p2) + unsigned(reg_1134));
    add_ln719_1_fu_1630_p2 <= std_logic_vector(unsigned(zext_ln215_10_fu_1616_p1) + unsigned(ap_const_lv9_3E));
    add_ln719_2_fu_1375_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln1355_fu_1371_p1));
    add_ln719_3_fu_2197_p2 <= std_logic_vector(unsigned(zext_ln719_5_fu_2193_p1) + unsigned(ap_const_lv9_16C));
    add_ln719_fu_1568_p2 <= std_logic_vector(unsigned(zext_ln215_8_fu_1561_p1) + unsigned(ap_const_lv9_3E));
    add_ln72_fu_1183_p2 <= std_logic_vector(unsigned(phi_mul_reg_689) + unsigned(zext_ln72_fu_1180_p1));
    add_ln883_2_fu_2106_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_4_fu_2102_p1));
    add_ln883_fu_1883_p2 <= std_logic_vector(unsigned(ap_const_lv7_3E) + unsigned(zext_ln883_fu_1879_p1));
    alpha_ij_pow_V_address0 <= zext_ln72_1_fu_1189_p1(12 - 1 downto 0);

    alpha_ij_pow_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            alpha_ij_pow_V_ce0 <= ap_const_logic_1;
        else 
            alpha_ij_pow_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln130_fu_1264_p2 <= (icmp_ln895_fu_1258_p2 and icmp_ln895_1_reg_2358);
    and_ln220_fu_1905_p2 <= (icmp_ln887_12_reg_2664 and grp_fu_1084_p2);
    and_ln246_fu_2138_p2 <= (icmp_ln887_15_reg_2815 and grp_fu_1084_p2);
    and_ln700_fu_1922_p2 <= (select_ln321_2_fu_1914_p3 and rhs_V_21_reg_2684);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(20);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(28);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(29);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(30);
    ap_CS_fsm_pp3_stage4 <= ap_CS_fsm(31);
    ap_CS_fsm_pp3_stage5 <= ap_CS_fsm(32);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(39);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(40);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(41);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(59);
    ap_CS_fsm_pp7_stage1 <= ap_CS_fsm(60);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_pp9_stage1 <= ap_CS_fsm(72);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(25);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(33);
    ap_CS_fsm_state41 <= ap_CS_fsm(34);
    ap_CS_fsm_state42 <= ap_CS_fsm(35);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state44 <= ap_CS_fsm(37);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(42);
    ap_CS_fsm_state51 <= ap_CS_fsm(43);
    ap_CS_fsm_state52 <= ap_CS_fsm(44);
    ap_CS_fsm_state53 <= ap_CS_fsm(45);
    ap_CS_fsm_state54 <= ap_CS_fsm(46);
    ap_CS_fsm_state55 <= ap_CS_fsm(47);
    ap_CS_fsm_state56 <= ap_CS_fsm(48);
    ap_CS_fsm_state57 <= ap_CS_fsm(49);
    ap_CS_fsm_state58 <= ap_CS_fsm(50);
    ap_CS_fsm_state59 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(52);
    ap_CS_fsm_state61 <= ap_CS_fsm(53);
    ap_CS_fsm_state62 <= ap_CS_fsm(54);
    ap_CS_fsm_state63 <= ap_CS_fsm(55);
    ap_CS_fsm_state64 <= ap_CS_fsm(56);
    ap_CS_fsm_state65 <= ap_CS_fsm(57);
    ap_CS_fsm_state66 <= ap_CS_fsm(58);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state74 <= ap_CS_fsm(61);
    ap_CS_fsm_state75 <= ap_CS_fsm(62);
    ap_CS_fsm_state76 <= ap_CS_fsm(63);
    ap_CS_fsm_state77 <= ap_CS_fsm(64);
    ap_CS_fsm_state78 <= ap_CS_fsm(65);
    ap_CS_fsm_state79 <= ap_CS_fsm(66);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(67);
    ap_CS_fsm_state81 <= ap_CS_fsm(68);
    ap_CS_fsm_state82 <= ap_CS_fsm(69);
    ap_CS_fsm_state83 <= ap_CS_fsm(70);
    ap_CS_fsm_state87 <= ap_CS_fsm(73);
    ap_CS_fsm_state88 <= ap_CS_fsm(74);
    ap_CS_fsm_state89 <= ap_CS_fsm(75);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(76);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp7_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp7_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp7_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp9_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln71_fu_1163_p2)
    begin
        if ((icmp_ln71_fu_1163_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln140_fu_1344_p2)
    begin
        if ((icmp_ln140_fu_1344_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state26_assign_proc : process(icmp_ln151_fu_1451_p2)
    begin
        if ((icmp_ln151_fu_1451_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state32_assign_proc : process(icmp_ln277_fu_1523_p2)
    begin
        if ((icmp_ln277_fu_1523_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state45_assign_proc : process(icmp_ln183_fu_1775_p2)
    begin
        if ((icmp_ln183_fu_1775_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state45 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state67_assign_proc : process(icmp_ln236_fu_1996_p2)
    begin
        if ((icmp_ln236_fu_1996_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state67 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state84_assign_proc : process(icmp_ln887_14_fu_2176_p2)
    begin
        if ((icmp_ln887_14_fu_2176_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state84 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state84 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state90) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_01206_0_i_phi_fu_851_p4_assign_proc : process(p_01206_0_i_reg_847, icmp_ln277_reg_2484, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, i_V_6_reg_2488, ap_block_pp3_stage0)
    begin
        if (((icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_p_01206_0_i_phi_fu_851_p4 <= i_V_6_reg_2488;
        else 
            ap_phi_mux_p_01206_0_i_phi_fu_851_p4 <= p_01206_0_i_reg_847;
        end if; 
    end process;


    ap_phi_mux_p_022_0_i_phi_fu_1014_p4_assign_proc : process(p_022_0_i_reg_1010, icmp_ln887_14_reg_2855, ap_CS_fsm_pp9_stage0, i_V_12_reg_2859, ap_enable_reg_pp9_iter1, ap_block_pp9_stage0)
    begin
        if (((icmp_ln887_14_reg_2855 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0))) then 
            ap_phi_mux_p_022_0_i_phi_fu_1014_p4 <= i_V_12_reg_2859;
        else 
            ap_phi_mux_p_022_0_i_phi_fu_1014_p4 <= p_022_0_i_reg_1010;
        end if; 
    end process;


    ap_phi_mux_p_0243_0_i_phi_fu_967_p4_assign_proc : process(p_0243_0_i_reg_963, ap_enable_reg_pp7_iter1, icmp_ln236_reg_2751, ap_CS_fsm_pp7_stage0, k_V_reg_2767, ap_block_pp7_stage0)
    begin
        if (((icmp_ln236_reg_2751 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            ap_phi_mux_p_0243_0_i_phi_fu_967_p4 <= k_V_reg_2767;
        else 
            ap_phi_mux_p_0243_0_i_phi_fu_967_p4 <= p_0243_0_i_reg_963;
        end if; 
    end process;


    ap_phi_mux_p_0249_0_i_phi_fu_874_p4_assign_proc : process(p_0249_0_i_reg_870, icmp_ln183_reg_2613, ap_CS_fsm_pp4_stage0, j_V_7_reg_2632, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_p_0249_0_i_phi_fu_874_p4 <= j_V_7_reg_2632;
        else 
            ap_phi_mux_p_0249_0_i_phi_fu_874_p4 <= p_0249_0_i_reg_870;
        end if; 
    end process;


    ap_phi_mux_p_0459_0_i_phi_fu_816_p4_assign_proc : process(p_0459_0_i_reg_812, icmp_ln140_reg_2399, ap_CS_fsm_pp1_stage0, i_V_7_reg_2430, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_p_0459_0_i_phi_fu_816_p4 <= i_V_7_reg_2430;
        else 
            ap_phi_mux_p_0459_0_i_phi_fu_816_p4 <= p_0459_0_i_reg_812;
        end if; 
    end process;


    ap_phi_mux_p_0459_1_i_phi_fu_839_p4_assign_proc : process(p_0459_1_i_reg_835, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln151_reg_2450, i_V_8_reg_2469, ap_block_pp2_stage0)
    begin
        if (((icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_p_0459_1_i_phi_fu_839_p4 <= i_V_8_reg_2469;
        else 
            ap_phi_mux_p_0459_1_i_phi_fu_839_p4 <= p_0459_1_i_reg_835;
        end if; 
    end process;


    ap_phi_mux_p_063_0_i_phi_fu_705_p4_assign_proc : process(p_063_0_i_reg_701, icmp_ln71_reg_2297, ap_CS_fsm_pp0_stage0, j_V_reg_2326, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_063_0_i_phi_fu_705_p4 <= j_V_reg_2326;
        else 
            ap_phi_mux_p_063_0_i_phi_fu_705_p4 <= p_063_0_i_reg_701;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_address0_assign_proc : process(ap_CS_fsm_pp7_stage1, ap_CS_fsm_state51, ap_CS_fsm_state52, beta_j_V_addr_1_reg_2674, ap_CS_fsm_state56, ap_CS_fsm_state58, zext_ln544_46_fu_1954_p1, ap_enable_reg_pp7_iter0, ap_block_pp7_stage1, zext_ln544_41_fu_1857_p1, zext_ln544_45_fu_1900_p1, zext_ln544_51_fu_2028_p1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            beta_j_V_address0 <= zext_ln544_51_fu_2028_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            beta_j_V_address0 <= zext_ln544_46_fu_1954_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            beta_j_V_address0 <= beta_j_V_addr_1_reg_2674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            beta_j_V_address0 <= zext_ln544_45_fu_1900_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            beta_j_V_address0 <= zext_ln544_41_fu_1857_p1(4 - 1 downto 0);
        else 
            beta_j_V_address0 <= "XXXX";
        end if; 
    end process;


    beta_j_V_ce0_assign_proc : process(ap_CS_fsm_pp7_stage1, ap_block_pp7_stage1_11001, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state56, ap_CS_fsm_state58, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)))) then 
            beta_j_V_ce0 <= ap_const_logic_1;
        else 
            beta_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_j_V_d0_assign_proc : process(ap_CS_fsm_state51, add_ln700_reg_2699, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            beta_j_V_d0 <= add_ln700_reg_2699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            beta_j_V_d0 <= ap_const_lv8_0;
        else 
            beta_j_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    beta_j_V_we0_assign_proc : process(icmp_ln887_10_fu_1845_p2, ap_CS_fsm_state51, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((icmp_ln887_10_fu_1845_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            beta_j_V_we0 <= ap_const_logic_1;
        else 
            beta_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_CS_fsm_state88, ap_block_pp0_stage0, ap_block_pp9_stage0, zext_ln544_38_fu_1169_p1, zext_ln544_50_fu_2188_p1, zext_ln544_53_fu_2236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cdw_V_address0 <= zext_ln544_53_fu_2236_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0))) then 
            cdw_V_address0 <= zext_ln544_50_fu_2188_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cdw_V_address0 <= zext_ln544_38_fu_1169_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cdw_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            cdw_V_address0 <= "XXXXXX";
        end if; 
    end process;

    cdw_V_address1 <= cdw_V_addr_33_reg_2869;

    cdw_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cdw_V_d1 <= xor_ln719_5_reg_2875;

    cdw_V_we1_assign_proc : process(icmp_ln887_14_reg_2855, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln887_14_reg_2855 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_2_fu_1517_p2 <= (ret_V_60_fu_1511_p2 xor p_0390_1_i_reg_824);
    d_p_V_fu_1338_p2 <= (rhs_V_5_reg_759 xor ret_V_34_fu_1332_p2);
    deg_X_V_fu_1228_p2 <= std_logic_vector(unsigned(zext_ln120_fu_1224_p1) - unsigned(rhs_V_3_reg_747));
    deg_X_sigma_p_V_fu_1242_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_1238_p1) + unsigned(zext_ln209_fu_1234_p1));
    deg_sigma_V_fu_1303_p2 <= (ret_V_26_fu_1297_p2 xor deg_sigma_copy_V_reg_723);
    deg_sigma_p_V_fu_1442_p2 <= (rhs_V_8_reg_735 xor ret_V_44_fu_1437_p2);
    delta_counter_V_1_fu_2170_p2 <= std_logic_vector(unsigned(p_0312_1_i_reg_987) + unsigned(zext_ln700_2_fu_2166_p1));
    delta_counter_V_fu_1936_p2 <= std_logic_vector(unsigned(p_0312_0_i_reg_893) + unsigned(zext_ln700_fu_1933_p1));

    e_j_V_address0_assign_proc : process(ap_CS_fsm_state76, e_j_V_addr_1_reg_2787, ap_CS_fsm_state78, ap_CS_fsm_state77, zext_ln544_47_fu_2097_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            e_j_V_address0 <= zext_ln544_47_fu_2097_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            e_j_V_address0 <= e_j_V_addr_1_reg_2787;
        else 
            e_j_V_address0 <= "XXXX";
        end if; 
    end process;


    e_j_V_ce0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            e_j_V_ce0 <= ap_const_logic_1;
        else 
            e_j_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_j_V_d0 <= (ret_V_69_fu_2072_p2 xor e_j_V_q0);

    e_j_V_we0_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            e_j_V_we0 <= ap_const_logic_1;
        else 
            e_j_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    error_values_a_V_fu_1980_p2 <= (reg_1130 xor p_034_reg_951);
    exp_array_V_address0 <= zext_ln544_44_fu_1874_p1(8 - 1 downto 0);

    exp_array_V_ce0_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            exp_array_V_ce0 <= ap_const_logic_1;
        else 
            exp_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_add_fft_fu_1033_ap_start <= grp_add_fft_fu_1033_ap_start_reg;
    grp_fu_1084_p2 <= "0" when (rs_mem_1_q0 = ap_const_lv8_0) else "1";

    grp_gf_inverse_fu_1046_a_V_assign_proc : process(p_039_reg_975, ap_CS_fsm_state19, ap_CS_fsm_state61, ap_CS_fsm_state75, reg_1134, rhs_V_5_reg_759)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_gf_inverse_fu_1046_a_V <= p_039_reg_975;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_gf_inverse_fu_1046_a_V <= reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_gf_inverse_fu_1046_a_V <= rhs_V_5_reg_759;
        else 
            grp_gf_inverse_fu_1046_a_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_gf_inverse_fu_1046_ap_start <= grp_gf_inverse_fu_1046_ap_start_reg;

    grp_gf_mul_fu_1053_a_V_assign_proc : process(p_039_reg_975, reg_1090, ap_enable_reg_pp4_iter0, icmp_ln183_reg_2613, reg_1099, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, icmp_ln71_reg_2297, ap_CS_fsm_state20, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln151_reg_2450, ap_CS_fsm_pp4_stage3, ap_CS_fsm_state62, icmp_ln232_fu_1959_p2, reg_1105, reg_1111, ap_enable_reg_pp1_iter0, icmp_ln140_reg_2399, ap_CS_fsm_pp1_stage2, ap_CS_fsm_state64, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter1, icmp_ln236_reg_2751_pp7_iter1_reg, ap_CS_fsm_state76, ap_CS_fsm_pp7_stage0, cdw_V_load_reg_2311, icmp_ln236_reg_2751_pp7_iter2_reg, ap_enable_reg_pp7_iter3, lhs_V_4_reg_771, ap_block_pp2_stage0, p_044_reg_940, p_034_reg_951, ap_block_pp7_stage0, ap_block_pp0_stage3, ap_block_pp1_stage2, ap_block_pp4_stage3, ap_block_pp7_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_gf_mul_fu_1053_a_V <= p_034_reg_951;
        elsif (((icmp_ln236_reg_2751_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_gf_mul_fu_1053_a_V <= p_039_reg_975;
        elsif (((icmp_ln236_reg_2751_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            grp_gf_mul_fu_1053_a_V <= reg_1105;
        elsif (((icmp_ln232_fu_1959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            grp_gf_mul_fu_1053_a_V <= p_044_reg_940;
        elsif (((icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3))) then 
            grp_gf_mul_fu_1053_a_V <= reg_1090;
        elsif (((icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_gf_mul_fu_1053_a_V <= reg_1111;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2)))) then 
            grp_gf_mul_fu_1053_a_V <= reg_1099;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_gf_mul_fu_1053_a_V <= lhs_V_4_reg_771;
        elsif (((icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_gf_mul_fu_1053_a_V <= cdw_V_load_reg_2311;
        else 
            grp_gf_mul_fu_1053_a_V <= "XXXXXXXX";
        end if; 
    end process;


    grp_gf_mul_fu_1053_b_V_assign_proc : process(reg_1090, ap_enable_reg_pp4_iter0, icmp_ln183_reg_2613, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, icmp_ln71_reg_2297, ap_CS_fsm_state20, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln151_reg_2450, ap_CS_fsm_pp4_stage3, ap_CS_fsm_state62, icmp_ln232_fu_1959_p2, reg_1105, reg_1117, reg_1124, ap_enable_reg_pp1_iter0, icmp_ln140_reg_2399, ap_CS_fsm_pp1_stage2, ap_CS_fsm_state64, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter1, icmp_ln236_reg_2751_pp7_iter1_reg, ap_CS_fsm_state76, reg_1134, ap_CS_fsm_pp7_stage0, alpha_ij_pow_V_load_reg_2321, ret_V_76_reg_2420, icmp_ln236_reg_2751_pp7_iter2_reg, xor_ln214_reg_2772, ap_enable_reg_pp7_iter3, ap_block_pp2_stage0, ap_block_pp7_stage0, ap_block_pp0_stage3, ap_block_pp1_stage2, ap_block_pp4_stage3, ap_block_pp7_stage1)
    begin
        if (((icmp_ln236_reg_2751_pp7_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_gf_mul_fu_1053_b_V <= xor_ln214_reg_2772;
        elsif (((icmp_ln236_reg_2751_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_const_boolean_0 = ap_block_pp7_stage1))) then 
            grp_gf_mul_fu_1053_b_V <= reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_gf_mul_fu_1053_b_V <= reg_1090;
        elsif (((icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3))) then 
            grp_gf_mul_fu_1053_b_V <= reg_1117;
        elsif (((icmp_ln151_reg_2450 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_gf_mul_fu_1053_b_V <= reg_1124;
        elsif (((icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_gf_mul_fu_1053_b_V <= ret_V_76_reg_2420;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln232_fu_1959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
            grp_gf_mul_fu_1053_b_V <= reg_1105;
        elsif (((icmp_ln71_reg_2297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_gf_mul_fu_1053_b_V <= alpha_ij_pow_V_load_reg_2321;
        else 
            grp_gf_mul_fu_1053_b_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_vector_init_11_fu_1068_ap_start <= grp_vector_init_11_fu_1068_ap_start_reg;
    grp_vector_init_1_fu_1073_ap_start <= grp_vector_init_1_fu_1073_ap_start_reg;
    grp_vector_init_2_fu_1078_ap_start <= grp_vector_init_2_fu_1078_ap_start_reg;
    grp_vector_init_fu_1063_ap_start <= grp_vector_init_fu_1063_ap_start_reg;
    i_V_10_fu_1868_p2 <= std_logic_vector(unsigned(t_V_reg_905) + unsigned(ap_const_lv6_1));
    i_V_11_fu_2091_p2 <= std_logic_vector(unsigned(p_0426_2_i_reg_999) + unsigned(ap_const_lv6_1));
    i_V_12_fu_2182_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_022_0_i_phi_fu_1014_p4) + unsigned(ap_const_lv6_1));
    i_V_13_fu_1948_p2 <= std_logic_vector(unsigned(p_0426_1_i_reg_916) + unsigned(ap_const_lv4_1));
    i_V_14_fu_2220_p2 <= std_logic_vector(unsigned(p_071_0_reg_1021) + unsigned(ap_const_lv5_1));
    i_V_6_fu_1529_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_01206_0_i_phi_fu_851_p4) + unsigned(ap_const_lv8_1));
    i_V_7_fu_1418_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_0_i_reg_812));
    i_V_8_fu_1487_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_0459_1_i_reg_835));
    i_V_9_fu_1839_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_858) + unsigned(ap_const_lv5_1));
    i_V_fu_1152_p2 <= std_logic_vector(unsigned(p_088_0_i_reg_678) + unsigned(ap_const_lv5_1));
    icmp_ln120_fu_1212_p2 <= "1" when (lhs_V_3_reg_781 = ap_const_lv5_1E) else "0";
    icmp_ln1372_fu_2011_p2 <= "1" when (unsigned(ret_V_70_reg_2755) < unsigned(ap_const_lv5_F)) else "0";
    icmp_ln140_fu_1344_p2 <= "1" when (ap_phi_mux_p_0459_0_i_phi_fu_816_p4 = ap_const_lv5_10) else "0";
    icmp_ln151_fu_1451_p2 <= "1" when (ap_phi_mux_p_0459_1_i_phi_fu_839_p4 = ap_const_lv5_10) else "0";
    icmp_ln180_fu_1691_p2 <= "1" when (indvars_iv_i_reg_858 = ap_const_lv5_10) else "0";
    icmp_ln183_fu_1775_p2 <= "1" when (ap_phi_mux_p_0249_0_i_phi_fu_874_p4 = zext_ln180_reg_2592) else "0";
    icmp_ln226_fu_1942_p2 <= "1" when (p_0426_1_i_reg_916 = ap_const_lv4_F) else "0";
    icmp_ln232_fu_1959_p2 <= "1" when (p_0260_1_i_reg_928 = ap_const_lv5_10) else "0";
    icmp_ln236_fu_1996_p2 <= "1" when (ap_phi_mux_p_0243_0_i_phi_fu_967_p4 = ap_const_lv4_F) else "0";
    icmp_ln277_fu_1523_p2 <= "1" when (ap_phi_mux_p_01206_0_i_phi_fu_851_p4 = ap_const_lv8_80) else "0";
    icmp_ln69_fu_1146_p2 <= "1" when (p_088_0_i_reg_678 = ap_const_lv5_1E) else "0";
    icmp_ln71_fu_1163_p2 <= "1" when (ap_phi_mux_p_063_0_i_phi_fu_705_p4 = ap_const_lv6_2E) else "0";
    icmp_ln887_10_fu_1845_p2 <= "1" when (p_0260_0_i_reg_882 = ap_const_lv4_F) else "0";
    icmp_ln887_11_fu_1862_p2 <= "1" when (t_V_reg_905 = ap_const_lv6_2E) else "0";
    icmp_ln887_12_fu_1894_p2 <= "1" when (unsigned(p_0312_0_i_reg_893) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_13_fu_2085_p2 <= "1" when (p_0426_2_i_reg_999 = ap_const_lv6_2E) else "0";
    icmp_ln887_14_fu_2176_p2 <= "1" when (ap_phi_mux_p_022_0_i_phi_fu_1014_p4 = ap_const_lv6_2E) else "0";
    icmp_ln887_15_fu_2117_p2 <= "1" when (unsigned(p_0312_1_i_reg_987) < unsigned(ap_const_lv6_F)) else "0";
    icmp_ln887_16_fu_2214_p2 <= "1" when (p_071_0_reg_1021 = ap_const_lv5_10) else "0";
    icmp_ln887_17_fu_2049_p2 <= "1" when (unsigned(zext_ln887_fu_2045_p1) < unsigned(p_0312_0_i_reg_893)) else "0";
    icmp_ln887_fu_1705_p2 <= "1" when (signed(lhs_V_14_fu_1701_p1) < signed(ret_V_55_reg_2563)) else "0";
    icmp_ln895_1_fu_1252_p2 <= "1" when (unsigned(deg_X_sigma_p_V_fu_1242_p2) > unsigned(zext_ln895_fu_1248_p1)) else "0";
    icmp_ln895_fu_1258_p2 <= "0" when (lhs_V_4_reg_771 = ap_const_lv8_0) else "1";
    icmp_ln899_1_fu_1457_p2 <= "1" when (unsigned(mu_add_V_reg_2339) < unsigned(ap_phi_mux_p_0459_1_i_phi_fu_839_p4)) else "0";
    icmp_ln899_fu_1350_p2 <= "1" when (unsigned(mu_add_V_reg_2339) < unsigned(ap_phi_mux_p_0459_0_i_phi_fu_816_p4)) else "0";
    index_address0 <= zext_ln544_39_fu_1535_p1(8 - 1 downto 0);
    index_address1 <= zext_ln544_43_fu_1556_p1(8 - 1 downto 0);

    index_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            index_ce0 <= ap_const_logic_1;
        else 
            index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    index_ce1_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            index_ce1 <= ap_const_logic_1;
        else 
            index_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_V_6_fu_1851_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_882) + unsigned(ap_const_lv4_1));
    j_V_7_fu_1810_p2 <= std_logic_vector(unsigned(p_0249_0_i_reg_870) + unsigned(ap_const_lv8_1));
    j_V_8_fu_1986_p2 <= std_logic_vector(unsigned(p_0260_1_i_reg_928) + unsigned(ap_const_lv5_1));
    j_V_fu_1194_p2 <= std_logic_vector(unsigned(p_063_0_i_reg_701) + unsigned(ap_const_lv6_1));
    k_V_fu_2033_p2 <= std_logic_vector(unsigned(p_0243_0_i_reg_963) + unsigned(ap_const_lv4_1));
    lhs_V_14_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_858),9));
    lhs_V_1_fu_1286_p2 <= std_logic_vector(unsigned(deg_X_V_reg_2353) + unsigned(rhs_V_8_reg_735));

    masks2_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state19, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln130_fu_1269_p1, zext_ln141_fu_1361_p1, zext_ln152_fu_1498_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            masks2_address0 <= zext_ln152_fu_1498_p1(1 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            masks2_address0 <= zext_ln141_fu_1361_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            masks2_address0 <= zext_ln130_fu_1269_p1(1 - 1 downto 0);
        else 
            masks2_address0 <= "X";
        end if; 
    end process;


    masks2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state19, grp_gf_inverse_fu_1046_ap_done, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            masks2_ce0 <= ap_const_logic_1;
        else 
            masks2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    masks3_address0 <= zext_ln181_fu_1710_p1(1 - 1 downto 0);

    masks3_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            masks3_ce0 <= ap_const_logic_1;
        else 
            masks3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    masks4_address0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state54, ap_CS_fsm_state80, zext_ln220_fu_1910_p1, zext_ln239_fu_2055_p1, zext_ln246_fu_2143_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            masks4_address0 <= zext_ln246_fu_2143_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            masks4_address0 <= zext_ln239_fu_2055_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            masks4_address0 <= zext_ln220_fu_1910_p1(1 - 1 downto 0);
        else 
            masks4_address0 <= "X";
        end if; 
    end process;


    masks4_ce0_assign_proc : process(grp_gf_inverse_fu_1046_ap_done, ap_CS_fsm_state75, ap_CS_fsm_state54, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state54) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            masks4_ce0 <= ap_const_logic_1;
        else 
            masks4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_address1 <= zext_ln544_52_fu_2241_p1(13 - 1 downto 0);

    msg_V_ce1_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            msg_V_ce1 <= ap_const_logic_1;
        else 
            msg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_d1 <= cdw_V_q0;

    msg_V_we1_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            msg_V_we1 <= ap_const_logic_1;
        else 
            msg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mu_add_V_fu_1218_p2 <= std_logic_vector(unsigned(lhs_V_3_reg_781) + unsigned(ap_const_lv5_1));
    pp_V_fu_1320_p2 <= (rhs_V_3_reg_747 xor ret_V_32_fu_1314_p2);
    ret_V_26_fu_1297_p2 <= (select_ln321_fu_1278_p3 and ret_V_73_fu_1291_p2);
    ret_V_32_fu_1314_p2 <= (select_ln321_fu_1278_p3 and ret_V_74_fu_1309_p2);
    ret_V_34_fu_1332_p2 <= (select_ln321_fu_1278_p3 and ret_V_75_fu_1326_p2);
    ret_V_35_fu_1206_p2 <= (rhs_V_7_reg_2268 xor lhs_V_5_reg_713);
    ret_V_38_fu_1174_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_063_0_i_phi_fu_705_p4) + unsigned(ap_const_lv6_3F));
    ret_V_44_fu_1437_p2 <= (select_ln321_reg_2373 and ret_V_80_fu_1431_p2);
    ret_V_55_fu_1685_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_1681_p1) + unsigned(ap_const_lv9_1FF));
    ret_V_56_fu_1719_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(trunc_ln887_fu_1697_p1));
    ret_V_59_fu_1477_p2 <= std_logic_vector(unsigned(zext_ln151_reg_2445) - unsigned(zext_ln152_1_fu_1462_p1));
    ret_V_60_fu_1511_p2 <= (select_ln1355_1_fu_1503_p3 and reg_1099);
    ret_V_61_fu_1795_p2 <= std_logic_vector(unsigned(lhs_V_14_reg_2571) - unsigned(rhs_V_18_fu_1780_p1));
    ret_V_64_fu_1800_p2 <= std_logic_vector(unsigned(ret_V_61_fu_1795_p2) + unsigned(ap_const_lv9_1FF));
    ret_V_66_fu_1827_p2 <= (select_ln321_1_reg_2597 and ret_V_83_fu_1821_p2);
    ret_V_67_fu_2155_p2 <= (select_ln321_3_fu_2147_p3 and rhs_V_22_reg_2835);
    ret_V_69_fu_2072_p2 <= (select_ln1355_2_fu_2065_p3 and ret_V_84_fu_2059_p2);
    ret_V_70_fu_2006_p2 <= std_logic_vector(unsigned(zext_ln236_1_fu_2002_p1) + unsigned(zext_ln236_reg_2746));
    ret_V_71_fu_2021_p3 <= 
        ret_V_70_reg_2755 when (icmp_ln1372_fu_2011_p2(0) = '1') else 
        add_ln1372_fu_2016_p2;
    ret_V_72_fu_2230_p2 <= std_logic_vector(unsigned(zext_ln215_fu_2226_p1) + unsigned(ap_const_lv6_1E));
    ret_V_73_fu_1291_p2 <= (lhs_V_1_fu_1286_p2 xor deg_sigma_copy_V_reg_723);
    ret_V_74_fu_1309_p2 <= (zext_ln120_reg_2348 xor rhs_V_3_reg_747);
    ret_V_75_fu_1326_p2 <= (rhs_V_5_reg_759 xor lhs_V_4_reg_771);
    ret_V_76_fu_1394_p2 <= (select_ln1355_fu_1386_p3 and X_sigma_p_V_q0);
    ret_V_77_fu_1400_p2 <= (rhs_V_25_reg_802 xor lhs_V_8_reg_792);
    ret_V_78_fu_1406_p2 <= (select_ln321_reg_2373 and ret_V_77_fu_1400_p2);
    ret_V_79_fu_1411_p2 <= (rhs_V_25_reg_802 xor ret_V_78_fu_1406_p2);
    ret_V_80_fu_1431_p2 <= (rhs_V_8_reg_735 xor deg_sigma_copy_V_reg_723);
    ret_V_81_fu_1753_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    ret_V_82_fu_1759_p2 <= (select_ln321_1_fu_1745_p3 and ret_V_81_fu_1753_p2);
    ret_V_83_fu_1821_p2 <= (xor_ln1357_fu_1816_p2 xor reg_1111);
    ret_V_84_fu_2059_p2 <= (reg_1130 xor e_j_V_q0);
    ret_V_fu_1675_p2 <= (rs_mem_1_q1 xor rs_mem_1_q0);
    rhs_V_18_fu_1780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0249_0_i_phi_fu_874_p4),9));

    rs_mem_1_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state62, ap_CS_fsm_state19, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, icmp_ln69_fu_1146_p2, ap_CS_fsm_state18, icmp_ln120_fu_1212_p2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp3_stage5, ap_CS_fsm_state40, ap_CS_fsm_state43, rs_mem_1_addr_15_reg_2607, ap_CS_fsm_pp4_stage0, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_CS_fsm_state31, grp_add_fft_fu_1033_rs_mem_1_address0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp4_stage0, ap_block_pp9_stage0, zext_ln544_fu_1158_p1, zext_ln544_37_fu_1274_p1, zext_ln719_4_fu_1381_p1, zext_ln152_2_fu_1472_p1, zext_ln215_9_fu_1564_p1, ap_block_pp3_stage2, zext_ln215_11_fu_1625_p1, ap_block_pp3_stage5, zext_ln1357_fu_1736_p1, zext_ln184_1_fu_1790_p1, ap_block_pp4_stage1, zext_ln883_3_fu_1889_p1, zext_ln234_1_fu_1975_p1, zext_ln883_5_fu_2112_p1, zext_ln719_6_fu_2203_p1)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0))) then 
            rs_mem_1_address0 <= zext_ln719_6_fu_2203_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            rs_mem_1_address0 <= zext_ln883_5_fu_2112_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            rs_mem_1_address0 <= zext_ln234_1_fu_1975_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            rs_mem_1_address0 <= zext_ln883_3_fu_1889_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            rs_mem_1_address0 <= rs_mem_1_addr_15_reg_2607;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            rs_mem_1_address0 <= zext_ln184_1_fu_1790_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            rs_mem_1_address0 <= zext_ln1357_fu_1736_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            rs_mem_1_address0 <= ap_const_lv64_1F(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5))) then 
            rs_mem_1_address0 <= zext_ln215_11_fu_1625_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            rs_mem_1_address0 <= zext_ln215_9_fu_1564_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            rs_mem_1_address0 <= zext_ln152_2_fu_1472_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            rs_mem_1_address0 <= zext_ln719_4_fu_1381_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rs_mem_1_address0 <= zext_ln544_37_fu_1274_p1(10 - 1 downto 0);
        elsif (((icmp_ln120_fu_1212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            rs_mem_1_address0 <= ap_const_lv64_1E(10 - 1 downto 0);
        elsif (((icmp_ln69_fu_1146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            rs_mem_1_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((icmp_ln69_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            rs_mem_1_address0 <= zext_ln544_fu_1158_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_address0 <= grp_add_fft_fu_1033_rs_mem_1_address0;
        else 
            rs_mem_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_address1_assign_proc : process(ap_CS_fsm_state17, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, rs_mem_1_addr_4_reg_2286, ap_CS_fsm_pp1_stage0, rs_mem_1_addr_12_reg_2414, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp3_stage1, ap_CS_fsm_pp3_stage2, rs_mem_1_addr_9_reg_2528, ap_CS_fsm_pp3_stage5, rs_mem_1_addr_11_reg_2543, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, rs_mem_1_addr_15_reg_2607, ap_CS_fsm_pp4_stage0, ap_CS_fsm_state78, rs_mem_1_addr_22_reg_2825, ap_CS_fsm_state31, ap_enable_reg_pp4_iter1, grp_add_fft_fu_1033_rs_mem_1_address1, grp_vector_init_fu_1063_array_V_address1, grp_vector_init_11_fu_1068_array_V_address1, grp_vector_init_1_fu_1073_array_V_address1, grp_vector_init_2_fu_1078_array_V_address1, ap_CS_fsm_state16, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp4_stage0, ap_CS_fsm_state82, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2, sext_ln544_1_fu_1482_p1, ap_block_pp3_stage2, zext_ln719_2_fu_1574_p1, ap_block_pp3_stage5, zext_ln719_3_fu_1636_p1, zext_ln544_49_fu_1725_p1, sext_ln544_fu_1806_p1, ap_block_pp4_stage1, zext_ln700_3_fu_2133_p1, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4, ap_block_pp3_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_22_reg_2825;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            rs_mem_1_address1 <= zext_ln700_3_fu_2133_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            rs_mem_1_address1 <= rs_mem_1_addr_15_reg_2607;
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            rs_mem_1_address1 <= sext_ln544_fu_1806_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            rs_mem_1_address1 <= zext_ln544_49_fu_1725_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            rs_mem_1_address1 <= ap_const_lv64_13F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            rs_mem_1_address1 <= ap_const_lv64_13E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            rs_mem_1_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            rs_mem_1_address1 <= rs_mem_1_addr_11_reg_2543;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage5))) then 
            rs_mem_1_address1 <= zext_ln719_3_fu_1636_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_const_boolean_0 = ap_block_pp3_stage4))) then 
            rs_mem_1_address1 <= rs_mem_1_addr_9_reg_2528;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            rs_mem_1_address1 <= zext_ln719_2_fu_1574_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            rs_mem_1_address1 <= sext_ln544_1_fu_1482_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            rs_mem_1_address1 <= rs_mem_1_addr_12_reg_2414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            rs_mem_1_address1 <= ap_const_lv64_1E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            rs_mem_1_address1 <= rs_mem_1_addr_4_reg_2286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_address1 <= grp_vector_init_2_fu_1078_array_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_address1 <= grp_vector_init_1_fu_1073_array_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rs_mem_1_address1 <= grp_vector_init_11_fu_1068_array_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rs_mem_1_address1 <= grp_vector_init_fu_1063_array_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_address1 <= grp_add_fft_fu_1033_rs_mem_1_address1;
        else 
            rs_mem_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    rs_mem_1_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state62, ap_CS_fsm_state19, grp_gf_inverse_fu_1046_ap_done, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, icmp_ln69_fu_1146_p2, ap_CS_fsm_state18, icmp_ln120_fu_1212_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_CS_fsm_pp3_stage5, ap_block_pp3_stage5_11001, ap_CS_fsm_state40, ap_CS_fsm_state43, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0, ap_CS_fsm_state31, grp_add_fft_fu_1033_rs_mem_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((icmp_ln120_fu_1212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln69_fu_1146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln69_fu_1146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((grp_gf_inverse_fu_1046_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            rs_mem_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_ce0 <= grp_add_fft_fu_1033_rs_mem_1_ce0;
        else 
            rs_mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_ce1_assign_proc : process(ap_CS_fsm_state17, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_CS_fsm_pp3_stage5, ap_block_pp3_stage5_11001, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state78, ap_CS_fsm_state31, ap_enable_reg_pp4_iter1, grp_add_fft_fu_1033_rs_mem_1_ce1, grp_vector_init_fu_1063_array_V_ce1, grp_vector_init_11_fu_1068_array_V_ce1, grp_vector_init_1_fu_1073_array_V_ce1, grp_vector_init_2_fu_1078_array_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state82, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage5) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001)))) then 
            rs_mem_1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_ce1 <= grp_vector_init_2_fu_1078_array_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_ce1 <= grp_vector_init_1_fu_1073_array_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rs_mem_1_ce1 <= grp_vector_init_11_fu_1068_array_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rs_mem_1_ce1 <= grp_vector_init_fu_1063_array_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_ce1 <= grp_add_fft_fu_1033_rs_mem_1_ce1;
        else 
            rs_mem_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rs_mem_1_d1_assign_proc : process(ap_CS_fsm_state17, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, sigma_local_V_1_fu_1424_p2, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp3_stage1, ret_V_reg_2558, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, add_ln700_4_reg_2845, ap_CS_fsm_state31, ap_enable_reg_pp4_iter1, grp_add_fft_fu_1033_rs_mem_1_d1, grp_vector_init_fu_1063_array_V_d1, grp_vector_init_11_fu_1068_array_V_d1, grp_vector_init_1_fu_1073_array_V_d1, grp_vector_init_2_fu_1078_array_V_d1, ap_CS_fsm_state16, ap_block_pp1_stage0, ap_block_pp4_stage0, ap_CS_fsm_state82, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2, ret_V_35_fu_1206_p2, ap_CS_fsm_pp3_stage4, xor_ln719_9_fu_1606_p2, ap_block_pp3_stage4, xor_ln719_10_fu_1668_p2, ap_block_pp3_stage1, xor_ln719_fu_1832_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            rs_mem_1_d1 <= add_ln700_4_reg_2845;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            rs_mem_1_d1 <= xor_ln719_fu_1832_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            rs_mem_1_d1 <= ret_V_reg_2558;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            rs_mem_1_d1 <= xor_ln719_10_fu_1668_p2;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_const_boolean_0 = ap_block_pp3_stage4))) then 
            rs_mem_1_d1 <= xor_ln719_9_fu_1606_p2;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            rs_mem_1_d1 <= sigma_local_V_1_fu_1424_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rs_mem_1_d1 <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            rs_mem_1_d1 <= ret_V_35_fu_1206_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_d1 <= grp_vector_init_2_fu_1078_array_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_d1 <= grp_vector_init_1_fu_1073_array_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rs_mem_1_d1 <= grp_vector_init_11_fu_1068_array_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rs_mem_1_d1 <= grp_vector_init_fu_1063_array_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_d1 <= grp_add_fft_fu_1033_rs_mem_1_d1;
        else 
            rs_mem_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    rs_mem_1_we1_assign_proc : process(ap_CS_fsm_state17, ap_enable_reg_pp3_iter0, icmp_ln277_reg_2484, ap_enable_reg_pp3_iter1, icmp_ln183_reg_2613, icmp_ln140_reg_2399, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, icmp_ln277_reg_2484_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state31, ap_enable_reg_pp4_iter1, grp_add_fft_fu_1033_rs_mem_1_we1, grp_vector_init_fu_1063_array_V_we1, grp_vector_init_11_fu_1068_array_V_we1, grp_vector_init_1_fu_1073_array_V_we1, grp_vector_init_2_fu_1078_array_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state82, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_pp3_stage4, ap_block_pp3_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln140_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln183_reg_2613 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (icmp_ln277_reg_2484_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((icmp_ln277_reg_2484 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage4) and (ap_const_boolean_0 = ap_block_pp3_stage4_11001)))) then 
            rs_mem_1_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rs_mem_1_we1 <= grp_vector_init_2_fu_1078_array_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rs_mem_1_we1 <= grp_vector_init_1_fu_1073_array_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rs_mem_1_we1 <= grp_vector_init_11_fu_1068_array_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rs_mem_1_we1 <= grp_vector_init_fu_1063_array_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rs_mem_1_we1 <= grp_add_fft_fu_1033_rs_mem_1_we1;
        else 
            rs_mem_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1355_1_fu_1503_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_2_fu_2065_p3 <= 
        ap_const_lv8_FF when (lhs_V_17_reg_2797(0) = '1') else 
        ap_const_lv8_0;
    select_ln1355_fu_1386_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_1_fu_1745_p3 <= 
        ap_const_lv8_FF when (masks3_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_2_fu_1914_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_3_fu_2147_p3 <= 
        ap_const_lv8_FF when (masks4_q0(0) = '1') else 
        ap_const_lv8_0;
    select_ln321_fu_1278_p3 <= 
        ap_const_lv8_FF when (masks2_q0(0) = '1') else 
        ap_const_lv8_0;
        sext_ln544_1_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_59_fu_1477_p2),64));

        sext_ln544_fu_1806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_64_reg_2622),64));

    sigma_local_V_1_fu_1424_p2 <= (reg_1130 xor reg_1124);
    sub_ln1354_1_fu_1645_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(zext_ln215_4_fu_1641_p1));
    sub_ln1354_fu_1583_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(zext_ln215_3_fu_1579_p1));
    syndrome_local_V_1_fu_1200_p2 <= (reg_1099 xor lhs_V_5_reg_713);
    tmp_15_fu_1589_p3 <= sub_ln1354_reg_2533(8 downto 8);
    tmp_16_fu_1651_p3 <= sub_ln1354_1_reg_2548(8 downto 8);
    trunc_ln887_fu_1697_p1 <= indvars_iv_i_reg_858(4 - 1 downto 0);
    xor_ln1353_fu_1550_p2 <= (ap_phi_mux_p_01206_0_i_phi_fu_851_p4 xor ap_const_lv8_80);
    xor_ln1357_fu_1816_p2 <= (ret_V_82_reg_2602 xor reg_1099);
    xor_ln214_fu_2039_p2 <= (reg_1130 xor ap_const_lv8_1);
    xor_ln719_10_fu_1668_p2 <= (zext_ln719_1_fu_1664_p1 xor reg_1090);
    xor_ln719_13_fu_1596_p2 <= (tmp_15_fu_1589_p3 xor ap_const_lv1_1);
    xor_ln719_14_fu_1658_p2 <= (tmp_16_fu_1651_p3 xor ap_const_lv1_1);
    xor_ln719_5_fu_2208_p2 <= (rs_mem_1_q0 xor cdw_V_q0);
    xor_ln719_9_fu_1606_p2 <= (zext_ln719_fu_1602_p1 xor reg_1090);
    xor_ln719_fu_1832_p2 <= (ret_V_66_fu_1827_p2 xor reg_1111);
    xor_ln899_1_fu_1493_p2 <= (icmp_ln899_1_reg_2454 xor ap_const_lv1_1);
    xor_ln899_fu_1355_p2 <= (icmp_ln899_fu_1350_p2 xor ap_const_lv1_1);
    zext_ln120_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_3_reg_781),8));
    zext_ln130_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln130_fu_1264_p2),64));
    zext_ln1354_1_fu_1715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_858),6));
    zext_ln1354_fu_1681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_723),9));
    zext_ln1355_1_fu_2123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_1_i_reg_987),9));
    zext_ln1355_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0459_0_i_phi_fu_816_p4),6));
    zext_ln1357_2_fu_1770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_1_fu_1765_p2),64));
    zext_ln1357_fu_1736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_fu_1730_p2),64));
    zext_ln141_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_fu_1355_p2),64));
    zext_ln151_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2339),6));
    zext_ln152_1_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0459_1_i_phi_fu_839_p4),6));
    zext_ln152_2_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_fu_1466_p2),64));
    zext_ln152_fu_1498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_1_fu_1493_p2),64));
    zext_ln180_fu_1741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i_reg_858),8));
    zext_ln181_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_fu_1705_p2),64));
    zext_ln184_1_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln184_fu_1784_p2),64));
    zext_ln209_1_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_8_reg_735),9));
    zext_ln209_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_X_V_fu_1228_p2),9));
    zext_ln215_10_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_load_1_reg_2518),9));
    zext_ln215_11_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_4_fu_1619_p2),64));
    zext_ln215_3_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs_mem_1_q0),9));
    zext_ln215_4_fu_1641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs_mem_1_q0),9));
    zext_ln215_8_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_load_reg_2513),9));
    zext_ln215_9_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_reg_2498),64));
    zext_ln215_fu_2226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1021),6));
    zext_ln220_fu_1910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln220_reg_2679),64));
    zext_ln234_1_fu_1975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln234_fu_1969_p2),64));
    zext_ln234_fu_1965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_1_i_reg_928),9));
    zext_ln236_1_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0243_0_i_phi_fu_967_p4),5));
    zext_ln236_fu_1992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_916),5));
    zext_ln239_fu_2055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln887_17_reg_2782),64));
    zext_ln246_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln246_reg_2830),64));
    zext_ln544_37_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_add_V_reg_2339),64));
    zext_ln544_38_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_063_0_i_phi_fu_705_p4),64));
    zext_ln544_39_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_01206_0_i_phi_fu_851_p4),64));
    zext_ln544_40_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0459_0_i_phi_fu_816_p4),64));
    zext_ln544_41_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_882),64));
    zext_ln544_42_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_01206_0_i_phi_fu_851_p4),10));
    zext_ln544_43_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1353_fu_1550_p2),64));
    zext_ln544_44_fu_1874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_905),64));
    zext_ln544_45_fu_1900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0312_0_i_reg_893),64));
    zext_ln544_46_fu_1954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_916),64));
    zext_ln544_47_fu_2097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_999),64));
    zext_ln544_48_fu_1613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1353_reg_2503),10));
    zext_ln544_49_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_56_fu_1719_p2),64));
    zext_ln544_50_fu_2188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_022_0_i_phi_fu_1014_p4),64));
    zext_ln544_51_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_71_fu_2021_p3),64));
    zext_ln544_52_fu_2241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_071_0_reg_1021),64));
    zext_ln544_53_fu_2236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_72_fu_2230_p2),64));
    zext_ln544_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_088_0_i_reg_678),64));
    zext_ln700_2_fu_2166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(masks4_q0),6));
    zext_ln700_3_fu_2133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_15_fu_2127_p2),64));
    zext_ln700_fu_1933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retrieved_mask_V_reg_2694),6));
    zext_ln719_1_fu_1664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_14_fu_1658_p2),8));
    zext_ln719_2_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_fu_1568_p2),64));
    zext_ln719_3_fu_1636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_1_fu_1630_p2),64));
    zext_ln719_4_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_2_fu_1375_p2),64));
    zext_ln719_5_fu_2193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_022_0_i_phi_fu_1014_p4),9));
    zext_ln719_6_fu_2203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln719_3_fu_2197_p2),64));
    zext_ln719_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln719_13_fu_1596_p2),8));
    zext_ln72_1_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_1183_p2),64));
    zext_ln72_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_38_reg_2306),12));
    zext_ln883_3_fu_1889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_fu_1883_p2),64));
    zext_ln883_4_fu_2102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_2_i_reg_999),7));
    zext_ln883_5_fu_2112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln883_2_fu_2106_p2),64));
    zext_ln883_fu_1879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_905),7));
    zext_ln887_fu_2045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0426_1_i_reg_916),6));
    zext_ln895_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deg_sigma_copy_V_reg_723),9));
end behav;
