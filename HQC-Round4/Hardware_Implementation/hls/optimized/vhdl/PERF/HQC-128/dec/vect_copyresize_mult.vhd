-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_copyresize_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    o_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    o_V_ce1 : OUT STD_LOGIC;
    o_V_we1 : OUT STD_LOGIC;
    o_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    v_V_ce0 : OUT STD_LOGIC;
    v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    v_V_ce1 : OUT STD_LOGIC;
    v_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of vect_copyresize_mult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_230 : STD_LOGIC_VECTOR (9 downto 0) := "1000110000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv13_10 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv10_228 : STD_LOGIC_VECTOR (9 downto 0) := "1000101000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_140_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_296 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_146_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_reg_301 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln308_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_1_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_V_load_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln311_1_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_1_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln311_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_2_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_3_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_3_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_2_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_2_reg_352 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln311_3_fu_258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_3_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_122 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln215_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_2_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_4_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_6_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln312_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln215_fu_154_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln311_fu_165_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_1_fu_177_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln215_1_fu_181_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln311_1_fu_199_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_3_fu_210_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln215_2_fu_214_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln311_2_fu_225_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_5_fu_236_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln215_3_fu_240_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln311_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_122 <= i_reg_296;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_122 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_296 <= i_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln311_1_reg_312 <= icmp_ln311_1_fu_171_p2;
                    shl_ln_reg_301(11 downto 2) <= shl_ln_fu_146_p3(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln311_2_reg_332 <= icmp_ln311_2_fu_204_p2;
                icmp_ln311_3_reg_342 <= icmp_ln311_3_fu_230_p2;
                select_ln311_1_reg_327 <= select_ln311_1_fu_192_p3;
                v_V_load_reg_322 <= v_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln311_2_reg_352 <= select_ln311_2_fu_251_p3;
                select_ln311_3_reg_357 <= select_ln311_3_fu_258_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_301(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln308_fu_134_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln308_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln215_1_fu_181_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_177_p1) + unsigned(ap_const_lv13_10));
    add_ln215_2_fu_214_p2 <= std_logic_vector(unsigned(zext_ln215_3_fu_210_p1) + unsigned(ap_const_lv13_10));
    add_ln215_3_fu_240_p2 <= std_logic_vector(unsigned(zext_ln215_5_fu_236_p1) + unsigned(ap_const_lv13_10));
    add_ln215_fu_154_p2 <= std_logic_vector(unsigned(shl_ln_fu_146_p3) + unsigned(ap_const_lv12_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_140_p2 <= std_logic_vector(unsigned(i_0_reg_122) + unsigned(ap_const_lv10_1));
    icmp_ln308_fu_134_p2 <= "1" when (i_0_reg_122 = ap_const_lv10_230) else "0";
    icmp_ln311_1_fu_171_p2 <= "1" when (unsigned(or_ln311_fu_165_p2) > unsigned(ap_const_lv12_8A0)) else "0";
    icmp_ln311_2_fu_204_p2 <= "1" when (unsigned(or_ln311_1_fu_199_p2) > unsigned(ap_const_lv12_8A0)) else "0";
    icmp_ln311_3_fu_230_p2 <= "1" when (unsigned(or_ln311_2_fu_225_p2) > unsigned(ap_const_lv12_8A0)) else "0";
    icmp_ln311_fu_270_p2 <= "1" when (unsigned(i_0_reg_122) > unsigned(ap_const_lv10_228)) else "0";
    o_V_address1 <= zext_ln312_fu_265_p1(10 - 1 downto 0);

    o_V_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            o_V_ce1 <= ap_const_logic_1;
        else 
            o_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    o_V_d1 <= (((select_ln311_3_reg_357 & select_ln311_2_reg_352) & select_ln311_1_reg_327) & select_ln311_fu_276_p3);

    o_V_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            o_V_we1 <= ap_const_logic_1;
        else 
            o_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln311_1_fu_199_p2 <= (shl_ln_reg_301 or ap_const_lv12_2);
    or_ln311_2_fu_225_p2 <= (shl_ln_reg_301 or ap_const_lv12_3);
    or_ln311_fu_165_p2 <= (shl_ln_fu_146_p3 or ap_const_lv12_1);
    select_ln311_1_fu_192_p3 <= 
        ap_const_lv8_0 when (icmp_ln311_1_reg_312(0) = '1') else 
        v_V_q1;
    select_ln311_2_fu_251_p3 <= 
        ap_const_lv8_0 when (icmp_ln311_2_reg_332(0) = '1') else 
        v_V_q0;
    select_ln311_3_fu_258_p3 <= 
        ap_const_lv8_0 when (icmp_ln311_3_reg_342(0) = '1') else 
        v_V_q1;
    select_ln311_fu_276_p3 <= 
        ap_const_lv8_0 when (icmp_ln311_fu_270_p2(0) = '1') else 
        v_V_load_reg_322;
    shl_ln_fu_146_p3 <= (i_0_reg_122 & ap_const_lv2_0);

    v_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln215_fu_160_p1, zext_ln215_4_fu_220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_V_address0 <= zext_ln215_4_fu_220_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_address0 <= zext_ln215_fu_160_p1(13 - 1 downto 0);
        else 
            v_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    v_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln215_2_fu_187_p1, zext_ln215_6_fu_246_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_V_address1 <= zext_ln215_6_fu_246_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_address1 <= zext_ln215_2_fu_187_p1(13 - 1 downto 0);
        else 
            v_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    v_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            v_V_ce0 <= ap_const_logic_1;
        else 
            v_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            v_V_ce1 <= ap_const_logic_1;
        else 
            v_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln311_fu_165_p2),13));
    zext_ln215_2_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_181_p2),64));
    zext_ln215_3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln311_1_fu_199_p2),13));
    zext_ln215_4_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_214_p2),64));
    zext_ln215_5_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln311_2_fu_225_p2),13));
    zext_ln215_6_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_3_fu_240_p2),64));
    zext_ln215_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_154_p2),64));
    zext_ln312_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_122),64));
end behav;
