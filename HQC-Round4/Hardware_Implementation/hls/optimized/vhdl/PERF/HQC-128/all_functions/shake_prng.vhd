-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_prng is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outlen : IN STD_LOGIC_VECTOR (3 downto 0);
    state_prng_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_prng_V_ce0 : OUT STD_LOGIC;
    state_prng_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_prng_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_prng_V_ce1 : OUT STD_LOGIC;
    state_prng_V_we1 : OUT STD_LOGIC;
    state_prng_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0)  ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of shake_prng is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal op2_assign_reg_129 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_op_assign_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal cnt_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cnt_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln44_fu_191_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln44_reg_352 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_fu_195_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln45_reg_357 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln44_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_208_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln45_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_V_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal outputwordsize_assig_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_reg_394 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_173_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_ap_done : STD_LOGIC;
    signal zext_ln1595_fu_279_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1595_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln887_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_408 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_V_1_fu_324_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln69_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran3to5_state3 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran8to10_state8 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal grp_KeccakF1600_StatePer_fu_173_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_173_state_V_4_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_op2_assign_phi_fu_133_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_0204_0_i_reg_141 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_0201_i_reg_151 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_165_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln58_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_2_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln301_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_state_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_1_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_1_fu_219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_fu_251_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_2_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_258_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_23_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln700_fu_320_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_4_ce0 : OUT STD_LOGIC;
        -- state_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_4_ce1 : OUT STD_LOGIC;
        -- state_V_4_we1 : OUT STD_LOGIC;
        -- state_V_4_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;



begin
    -- grp_KeccakF1600_StatePer_fu_173 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_173_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_173_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_173_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_173_ap_ready,
        -- state_V_4_address0 => grp_KeccakF1600_StatePer_fu_173_state_V_4_address0,
        -- state_V_4_ce0 => grp_KeccakF1600_StatePer_fu_173_state_V_4_ce0,
        -- state_V_4_q0 => state_prng_V_q0,
        -- state_V_4_address1 => grp_KeccakF1600_StatePer_fu_173_state_V_4_address1,
        -- state_V_4_ce1 => grp_KeccakF1600_StatePer_fu_173_state_V_4_ce1,
        -- state_V_4_we1 => grp_KeccakF1600_StatePer_fu_173_state_V_4_we1,
        -- state_V_4_d1 => grp_KeccakF1600_StatePer_fu_173_state_V_4_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_173_ap_start;
  state_V_q0_permute <= state_prng_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_173_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_173_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_173_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_173_state_V_4_d1       <= state_V_d1_permute;



    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_173_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_173_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_269_p2 = ap_const_lv1_0))) then 
                    grp_KeccakF1600_StatePer_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_173_ap_done = ap_const_logic_1))) then 
                i_op_assign_reg_161 <= ap_const_lv5_0;
            elsif (((icmp_ln63_reg_413 = ap_const_lv1_1) and (icmp_ln887_reg_404 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_reg_161 <= i_1_reg_408;
            end if; 
        end if;
    end process;

    op2_assign_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                op2_assign_reg_129 <= i_reg_367;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                op2_assign_reg_129 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0201_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0201_i_reg_151 <= outputwordsize_assig_fu_247_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0201_i_reg_151 <= sub_ln69_fu_330_p2;
            end if; 
        end if;
    end process;

    p_0204_0_i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0204_0_i_reg_141 <= offset_V_fu_238_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0204_0_i_reg_141 <= offset_V_1_fu_324_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cnt_reg_346 <= cnt_fu_181_p1;
                trunc_ln45_reg_357 <= trunc_ln45_fu_195_p1;
                    zext_ln44_reg_352(7 downto 0) <= zext_ln44_fu_191_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_408 <= i_1_fu_289_p2;
                    zext_ln1595_reg_399(4 downto 0) <= zext_ln1595_fu_279_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_367 <= i_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln44_reg_363 <= icmp_ln44_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln45_reg_372 <= icmp_ln45_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln63_reg_413 <= icmp_ln63_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_reg_404 <= icmp_ln887_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_173_ap_done = ap_const_logic_1))) then
                    lhs_V_reg_394(10 downto 0) <= lhs_V_fu_275_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln44_reg_352(8) <= '0';
    lhs_V_reg_394(11) <= '0';
    zext_ln1595_reg_399(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_173_ap_done, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_predicate_tran3to5_state3, ap_block_pp1_stage0_subdone, ap_predicate_tran8to10_state8, ap_CS_fsm_state6, icmp_ln58_fu_269_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln58_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_173_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_tran8to10_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_tran8to10_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln49_fu_223_p2 <= std_logic_vector(unsigned(zext_ln44_reg_352) + unsigned(zext_ln49_1_fu_219_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(ap_predicate_tran3to5_state3)
    begin
        if ((ap_predicate_tran3to5_state3 = ap_const_boolean_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(ap_predicate_tran8to10_state8)
    begin
        if ((ap_predicate_tran8to10_state8 = ap_const_boolean_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln58_fu_269_p2)
    begin
        if ((((icmp_ln58_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_165_p4_assign_proc : process(i_op_assign_reg_161, ap_CS_fsm_pp1_stage0, icmp_ln887_reg_404, i_1_reg_408, icmp_ln63_reg_413, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln63_reg_413 = ap_const_lv1_1) and (icmp_ln887_reg_404 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_op_assign_phi_fu_165_p4 <= i_1_reg_408;
        else 
            ap_phi_mux_i_op_assign_phi_fu_165_p4 <= i_op_assign_reg_161;
        end if; 
    end process;


    ap_phi_mux_op2_assign_phi_fu_133_p4_assign_proc : process(op2_assign_reg_129, icmp_ln44_reg_363, ap_CS_fsm_pp0_stage0, i_reg_367, icmp_ln45_reg_372, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln45_reg_372 = ap_const_lv1_1) and (icmp_ln44_reg_363 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_op2_assign_phi_fu_133_p4 <= i_reg_367;
        else 
            ap_phi_mux_op2_assign_phi_fu_133_p4 <= op2_assign_reg_129;
        end if; 
    end process;


    ap_predicate_tran3to5_state3_assign_proc : process(icmp_ln44_fu_203_p2, icmp_ln45_fu_214_p2)
    begin
                ap_predicate_tran3to5_state3 <= ((icmp_ln45_fu_214_p2 = ap_const_lv1_0) or (icmp_ln44_fu_203_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_tran8to10_state8_assign_proc : process(icmp_ln887_fu_283_p2, icmp_ln63_fu_295_p2)
    begin
                ap_predicate_tran8to10_state8 <= ((icmp_ln63_fu_295_p2 = ap_const_lv1_0) or (icmp_ln887_fu_283_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln58_fu_269_p2)
    begin
        if (((icmp_ln58_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_181_p1 <= state_prng_V_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_173_ap_start <= grp_KeccakF1600_StatePer_fu_173_ap_start_reg;
    i_1_fu_289_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_165_p4) + unsigned(ap_const_lv5_1));
    i_fu_208_p2 <= std_logic_vector(unsigned(ap_phi_mux_op2_assign_phi_fu_133_p4) + unsigned(ap_const_lv3_1));
    icmp_ln44_fu_203_p2 <= "1" when (unsigned(zext_ln44_1_fu_199_p1) < unsigned(cnt_reg_346)) else "0";
    icmp_ln45_fu_214_p2 <= "1" when (unsigned(ap_phi_mux_op2_assign_phi_fu_133_p4) < unsigned(trunc_ln45_reg_357)) else "0";
    icmp_ln58_fu_269_p2 <= "1" when (p_0201_i_reg_151 = ap_const_lv8_0) else "0";
    icmp_ln63_fu_295_p2 <= "1" when (unsigned(zext_ln1595_fu_279_p1) < unsigned(p_0201_i_reg_151)) else "0";
    icmp_ln887_fu_283_p2 <= "1" when (unsigned(ap_phi_mux_i_op_assign_phi_fu_165_p4) < unsigned(ap_const_lv5_11)) else "0";
    lhs_V_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0204_0_i_reg_141),12));
    offset_V_1_fu_324_p2 <= std_logic_vector(unsigned(zext_ln700_fu_320_p1) + unsigned(p_0204_0_i_reg_141));
    offset_V_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_129),11));
    offset_state_fu_185_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_fu_181_p1));

    output_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln49_fu_233_p1, zext_ln544_fu_315_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_V_address0 <= zext_ln544_fu_315_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_V_address0 <= zext_ln49_fu_233_p1(3 - 1 downto 0);
        else 
            output_V_address0 <= "XXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= state_prng_V_q0;

    output_V_we0_assign_proc : process(icmp_ln44_reg_363, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln45_reg_372, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln887_reg_404, icmp_ln63_reg_413, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln45_reg_372 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln63_reg_413 = ap_const_lv1_1) and (icmp_ln887_reg_404 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outputwordsize_assig_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln53_fu_242_p2),8));
    ret_V_23_fu_310_p2 <= std_logic_vector(unsigned(lhs_V_reg_394) + unsigned(rhs_V_fu_306_p1));
    ret_V_fu_335_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_161));
    rhs_V_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_161),12));
        sext_ln301_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_258_p2),64));


    state_prng_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_KeccakF1600_StatePer_fu_173_state_V_4_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln49_2_fu_228_p1, zext_ln65_fu_301_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            state_prng_V_address0 <= zext_ln65_fu_301_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_prng_V_address0 <= zext_ln49_2_fu_228_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_prng_V_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_address0 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_address0;
        else 
            state_prng_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_173_state_V_4_address1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_prng_V_address1 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_address1 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_address1;
        else 
            state_prng_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_KeccakF1600_StatePer_fu_173_state_V_4_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            state_prng_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_ce0 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_ce0;
        else 
            state_prng_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_173_state_V_4_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_prng_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_ce1 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_ce1;
        else 
            state_prng_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_173_state_V_4_d1, sext_ln301_fu_264_p1, zext_ln214_fu_341_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_prng_V_d1 <= zext_ln214_fu_341_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_prng_V_d1 <= sext_ln301_fu_264_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_d1 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_d1;
        else 
            state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_prng_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_173_state_V_4_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_prng_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_prng_V_we1 <= grp_KeccakF1600_StatePer_fu_173_state_V_4_we1;
        else 
            state_prng_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln53_fu_242_p2 <= std_logic_vector(unsigned(trunc_ln45_reg_357) - unsigned(op2_assign_reg_129));
    sub_ln54_fu_258_p2 <= std_logic_vector(unsigned(zext_ln54_fu_251_p1) - unsigned(zext_ln54_2_fu_254_p1));
    sub_ln69_fu_330_p2 <= std_logic_vector(unsigned(p_0201_i_reg_151) - unsigned(zext_ln1595_reg_399));
    trunc_ln45_fu_195_p1 <= outlen(3 - 1 downto 0);
    zext_ln1595_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_165_p4),8));
    zext_ln214_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_335_p2),64));
    zext_ln44_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_op2_assign_phi_fu_133_p4),8));
    zext_ln44_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_185_p2),9));
    zext_ln49_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_op2_assign_phi_fu_133_p4),9));
    zext_ln49_2_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_223_p2),64));
    zext_ln49_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_129),64));
    zext_ln544_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_23_fu_310_p2),64));
    zext_ln54_2_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_129),9));
    zext_ln54_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_346),9));
    zext_ln65_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_165_p4),64));
    zext_ln700_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_161),11));
end behav;
