-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hqc_ciphertext_from_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    u_V_ce1 : OUT STD_LOGIC;
    u_V_we1 : OUT STD_LOGIC;
    u_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    d_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_V_6_ce0 : OUT STD_LOGIC;
    d_V_6_we0 : OUT STD_LOGIC;
    d_V_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce0 : OUT STD_LOGIC;
    ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ct_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_V_ce1 : OUT STD_LOGIC;
    ct_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of hqc_ciphertext_from_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv13_8A1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010100001";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_45 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv13_1148 : STD_LOGIC_VECTOR (12 downto 0) := "1000101001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0281_0_reg_219 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_0281_1_reg_230 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_253 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln887_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln887_33_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln887_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_264_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln321_fu_275_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_reg_523 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln887_33_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_33_reg_528_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_20_fu_291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln215_fu_297_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_reg_537 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_reg_537_pp1_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_21_fu_328_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_21_reg_550 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_V_119_fu_338_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_119_reg_555 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln887_34_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ct_V_load_3_reg_575 : STD_LOGIC_VECTOR (7 downto 0);
    signal ct_V_load_4_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ct_V_load_5_reg_595 : STD_LOGIC_VECTOR (7 downto 0);
    signal ct_V_load_6_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ct_V_load_7_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal p_0281_2_reg_241 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln544_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln321_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_85_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln321_6_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_116_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_117_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_118_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_119_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_120_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_121_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_122_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_123_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_86_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_fu_301_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln321_5_fu_312_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1352_fu_334_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1353_16_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln_fu_352_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_fu_365_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_s_fu_371_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_17_fu_384_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_3_fu_389_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_18_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_4_fu_407_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_19_fu_420_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_5_fu_425_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_20_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_6_fu_443_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln1353_21_fu_459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln1353_7_fu_464_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln414_fu_456_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1353_fu_477_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0281_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_258_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                p_0281_0_reg_219 <= i_V_fu_264_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0281_0_reg_219 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0281_1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0281_1_reg_230 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_33_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                p_0281_1_reg_230 <= i_V_20_fu_291_p2;
            end if; 
        end if;
    end process;

    p_0281_2_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0281_2_reg_241 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_0281_2_reg_241 <= i_V_21_reg_550;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_258_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln321_reg_523 <= add_ln321_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln321_reg_523_pp0_iter1_reg <= add_ln321_reg_523;
                icmp_ln887_reg_509 <= icmp_ln887_fu_258_p2;
                icmp_ln887_reg_509_pp0_iter1_reg <= icmp_ln887_reg_509;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ct_V_load_3_reg_575 <= ct_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ct_V_load_4_reg_590 <= ct_V_q0;
                ct_V_load_5_reg_595 <= ct_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ct_V_load_6_reg_610 <= ct_V_q0;
                ct_V_load_7_reg_615 <= ct_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_V_21_reg_550 <= i_V_21_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln887_33_reg_528 <= icmp_ln887_33_fu_285_p2;
                icmp_ln887_33_reg_528_pp1_iter1_reg <= icmp_ln887_33_reg_528;
                    zext_ln215_reg_537_pp1_iter1_reg(11 downto 0) <= zext_ln215_reg_537(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_33_reg_528 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln887_reg_509 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_253 <= ct_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_34_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ret_V_119_reg_555(5 downto 3) <= ret_V_119_fu_338_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_33_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    zext_ln215_reg_537(11 downto 0) <= zext_ln215_fu_297_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_reg_537(12) <= '0';
    zext_ln215_reg_537_pp1_iter1_reg(12) <= '0';
    ret_V_119_reg_555(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, icmp_ln887_fu_258_p2, ap_enable_reg_pp0_iter0, icmp_ln887_33_fu_285_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, icmp_ln887_34_fu_322_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_258_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_258_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_33_fu_285_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_33_fu_285_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln887_34_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln1353_fu_477_p2 <= std_logic_vector(signed(ap_const_lv13_1148) + signed(zext_ln414_fu_456_p1));
    add_ln321_5_fu_312_p2 <= std_logic_vector(unsigned(zext_ln215_reg_537_pp1_iter1_reg) + unsigned(ap_const_lv13_8B1));
    add_ln321_fu_275_p2 <= std_logic_vector(unsigned(p_0281_0_reg_219) + unsigned(ap_const_lv12_10));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_258_p2)
    begin
        if ((icmp_ln887_fu_258_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln887_33_fu_285_p2)
    begin
        if ((icmp_ln887_33_fu_285_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln544_fu_270_p1, ap_block_pp0_stage0, zext_ln544_85_fu_307_p1, ap_block_pp1_stage0, zext_ln544_116_fu_360_p1, zext_ln544_118_fu_397_p1, zext_ln544_120_fu_433_p1, zext_ln544_122_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ct_V_address0 <= zext_ln544_122_fu_472_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ct_V_address0 <= zext_ln544_120_fu_433_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ct_V_address0 <= zext_ln544_118_fu_397_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ct_V_address0 <= zext_ln544_116_fu_360_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ct_V_address0 <= zext_ln544_85_fu_307_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ct_V_address0 <= zext_ln544_fu_270_p1(13 - 1 downto 0);
        else 
            ct_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_V_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln544_117_fu_379_p1, zext_ln544_119_fu_415_p1, zext_ln544_121_fu_451_p1, zext_ln544_123_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ct_V_address1 <= zext_ln544_123_fu_483_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ct_V_address1 <= zext_ln544_121_fu_451_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ct_V_address1 <= zext_ln544_119_fu_415_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ct_V_address1 <= zext_ln544_117_fu_379_p1(13 - 1 downto 0);
        else 
            ct_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            ct_V_ce0 <= ap_const_logic_1;
        else 
            ct_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ct_V_ce1 <= ap_const_logic_1;
        else 
            ct_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_6_address0 <= zext_ln544_86_fu_488_p1(3 - 1 downto 0);

    d_V_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            d_V_6_ce0 <= ap_const_logic_1;
        else 
            d_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_V_6_d0 <= (((((((ct_V_q1 & ct_V_q0) & ct_V_load_7_reg_615) & ct_V_load_6_reg_610) & ct_V_load_5_reg_595) & ct_V_load_4_reg_590) & ct_V_load_3_reg_575) & reg_253);

    d_V_6_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            d_V_6_we0 <= ap_const_logic_1;
        else 
            d_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_20_fu_291_p2 <= std_logic_vector(unsigned(p_0281_1_reg_230) + unsigned(ap_const_lv12_1));
    i_V_21_fu_328_p2 <= std_logic_vector(unsigned(p_0281_2_reg_241) + unsigned(ap_const_lv4_1));
    i_V_fu_264_p2 <= std_logic_vector(unsigned(p_0281_0_reg_219) + unsigned(ap_const_lv12_1));
    icmp_ln887_33_fu_285_p2 <= "1" when (p_0281_1_reg_230 = ap_const_lv12_8A0) else "0";
    icmp_ln887_34_fu_322_p2 <= "1" when (p_0281_2_reg_241 = ap_const_lv4_8) else "0";
    icmp_ln887_fu_258_p2 <= "1" when (p_0281_0_reg_219 = ap_const_lv12_8A1) else "0";
    or_ln1353_16_fu_346_p2 <= (ret_V_119_fu_338_p3 or ap_const_lv6_1);
    or_ln1353_17_fu_384_p2 <= (ret_V_119_reg_555 or ap_const_lv6_3);
    or_ln1353_18_fu_402_p2 <= (ret_V_119_reg_555 or ap_const_lv6_4);
    or_ln1353_19_fu_420_p2 <= (ret_V_119_reg_555 or ap_const_lv6_5);
    or_ln1353_20_fu_438_p2 <= (ret_V_119_reg_555 or ap_const_lv6_6);
    or_ln1353_21_fu_459_p2 <= (ret_V_119_reg_555 or ap_const_lv6_7);
    or_ln1353_3_fu_389_p3 <= (ap_const_lv7_45 & or_ln1353_17_fu_384_p2);
    or_ln1353_4_fu_407_p3 <= (ap_const_lv7_45 & or_ln1353_18_fu_402_p2);
    or_ln1353_5_fu_425_p3 <= (ap_const_lv7_45 & or_ln1353_19_fu_420_p2);
    or_ln1353_6_fu_443_p3 <= (ap_const_lv7_45 & or_ln1353_20_fu_438_p2);
    or_ln1353_7_fu_464_p3 <= (ap_const_lv7_45 & or_ln1353_21_fu_459_p2);
    or_ln1353_fu_365_p2 <= (ret_V_119_fu_338_p3 or ap_const_lv6_2);
    or_ln1353_s_fu_371_p3 <= (ap_const_lv7_45 & or_ln1353_fu_365_p2);
    or_ln_fu_352_p3 <= (ap_const_lv7_45 & or_ln1353_16_fu_346_p2);
    ret_V_119_fu_338_p3 <= (trunc_ln1352_fu_334_p1 & ap_const_lv3_0);
    ret_V_fu_301_p2 <= std_logic_vector(unsigned(zext_ln215_fu_297_p1) + unsigned(ap_const_lv13_8A1));
    trunc_ln1352_fu_334_p1 <= p_0281_2_reg_241(3 - 1 downto 0);

    u_V_address1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, zext_ln321_fu_281_p1, ap_block_pp1_stage0, zext_ln321_6_fu_317_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            u_V_address1 <= zext_ln321_6_fu_317_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            u_V_address1 <= zext_ln321_fu_281_p1(13 - 1 downto 0);
        else 
            u_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    u_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            u_V_ce1 <= ap_const_logic_1;
        else 
            u_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    u_V_d1 <= reg_253;

    u_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln887_reg_509_pp0_iter1_reg, icmp_ln887_33_reg_528_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_33_reg_528_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln887_reg_509_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            u_V_we1 <= ap_const_logic_1;
        else 
            u_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_1_reg_230),13));
    zext_ln321_6_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_5_fu_312_p2),64));
    zext_ln321_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_523_pp0_iter1_reg),64));
    zext_ln414_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_119_reg_555),13));
    zext_ln544_116_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_352_p3),64));
    zext_ln544_117_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_s_fu_371_p3),64));
    zext_ln544_118_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_3_fu_389_p3),64));
    zext_ln544_119_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_4_fu_407_p3),64));
    zext_ln544_120_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_5_fu_425_p3),64));
    zext_ln544_121_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_6_fu_443_p3),64));
    zext_ln544_122_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_7_fu_464_p3),64));
    zext_ln544_123_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_477_p2),64));
    zext_ln544_85_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_301_p2),64));
    zext_ln544_86_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_2_reg_241),64));
    zext_ln544_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0281_0_reg_219),64));
end behav;
