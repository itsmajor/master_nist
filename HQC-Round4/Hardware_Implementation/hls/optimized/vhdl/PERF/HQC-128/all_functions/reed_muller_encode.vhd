-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reed_muller_encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cdw_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cdw_V_ce0 : OUT STD_LOGIC;
    cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    cdw_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cdw_V_ce1 : OUT STD_LOGIC;
    cdw_V_we1 : OUT STD_LOGIC;
    cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    msg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    msg_V_ce0 : OUT STD_LOGIC;
    msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of reed_muller_encode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_8B1 : STD_LOGIC_VECTOR (11 downto 0) := "100010110001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv14_8B1 : STD_LOGIC_VECTOR (13 downto 0) := "00100010110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_message_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_message_ce0 : STD_LOGIC;
    signal shift_message_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mask_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_ce0 : STD_LOGIC;
    signal mask_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_adress_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal word_adress_ce0 : STD_LOGIC;
    signal word_adress_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0410_0_i_reg_193 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0290_0_i_reg_203 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_095_0_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_050_0_reg_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_16_fu_253_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_V_16_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_288_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_reg_493 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal msg_V_load_reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_word_V_fu_302_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_18_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_18_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln887_18_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal shift_message_load_reg_533 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mask_load_reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_adress_load_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal first_word_V_1_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_word_V_1_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln321_1_fu_373_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln321_1_reg_554 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_19_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_19_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln887_19_reg_559_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln887_fu_388_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln887_reg_563 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln188_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln188_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln188_1_fu_414_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln188_1_reg_573 : STD_LOGIC_VECTOR (1 downto 0);
    signal adr2_fu_426_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal adr2_reg_579 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal j_V_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_V_reg_590 : STD_LOGIC_VECTOR (4 downto 0);
    signal adr1_fu_461_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal adr1_reg_595 : STD_LOGIC_VECTOR (12 downto 0);
    signal cdw_V_load_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal t_V_reg_181 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_p_0290_0_i_phi_fu_207_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_218_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_p_095_0_phi_fu_229_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_050_0_phi_fu_240_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln544_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_71_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_4_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln321_1_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal sext_ln321_2_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_264_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1352_1_fu_276_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1352_fu_272_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1352_1_fu_284_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln556_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln808_fu_337_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1355_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_fu_360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_fu_363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln321_3_fu_369_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln187_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln188_1_fu_422_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln321_fu_431_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_2_fu_434_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln188_5_mid2_v_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln188_fu_457_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln190_fu_466_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_3_fu_469_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component reed_muller_encodjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component reed_muller_encodkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_encodlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    shift_message_U : component reed_muller_encodjbC
    generic map (
        DataWidth => 3,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_message_address0,
        ce0 => shift_message_ce0,
        q0 => shift_message_q0);

    mask_U : component reed_muller_encodkbM
    generic map (
        DataWidth => 8,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_address0,
        ce0 => mask_ce0,
        q0 => mask_q0);

    word_adress_U : component reed_muller_encodlbW
    generic map (
        DataWidth => 4,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => word_adress_address0,
        ce0 => word_adress_ce0,
        q0 => word_adress_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_214 <= ap_const_lv6_0;
            elsif (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_214 <= add_ln887_reg_563;
            end if; 
        end if;
    end process;

    p_0290_0_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_18_reg_509 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_0290_0_i_reg_203 <= i_V_reg_513;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0290_0_i_reg_203 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0410_0_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_18_reg_509_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                p_0410_0_i_reg_193 <= first_word_V_1_reg_548;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0410_0_i_reg_193 <= first_word_V_fu_302_p3;
            end if; 
        end if;
    end process;

    p_050_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_050_0_reg_236 <= ap_const_lv5_0;
            elsif (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_050_0_reg_236 <= j_V_reg_590;
            end if; 
        end if;
    end process;

    p_095_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_095_0_reg_225 <= ap_const_lv2_0;
            elsif (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_095_0_reg_225 <= select_ln188_1_reg_573;
            end if; 
        end if;
    end process;

    t_V_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_V_reg_181 <= i_V_16_reg_483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_181 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_18_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln321_1_reg_554 <= add_ln321_1_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln887_reg_563 <= add_ln887_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                adr1_reg_595 <= adr1_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                adr2_reg_579 <= adr2_fu_426_p2;
                select_ln188_reg_568 <= select_ln188_fu_406_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                cdw_V_load_reg_600 <= cdw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_18_reg_509 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                first_word_V_1_reg_548 <= first_word_V_1_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_16_reg_483 <= i_V_16_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_V_reg_513 <= i_V_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln887_18_reg_509 <= icmp_ln887_18_fu_310_p2;
                icmp_ln887_18_reg_509_pp0_iter1_reg <= icmp_ln887_18_reg_509;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_19_reg_559 <= icmp_ln887_19_fu_382_p2;
                icmp_ln887_19_reg_559_pp1_iter1_reg <= icmp_ln887_19_reg_559;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                j_V_reg_590 <= j_V_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_18_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mask_load_reg_538 <= mask_q0;
                shift_message_load_reg_533 <= shift_message_q0;
                word_adress_load_reg_543 <= word_adress_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                msg_V_load_reg_499 <= msg_V_q0;
                    ret_V_reg_493(12 downto 4) <= ret_V_fu_288_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_19_fu_382_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln188_1_reg_573 <= select_ln188_1_fu_414_p3;
            end if;
        end if;
    end process;
    ret_V_reg_493(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_247_p2, icmp_ln887_18_fu_310_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln887_19_fu_382_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln887_18_fu_310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln887_18_fu_310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_19_fu_382_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_19_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln321_1_fu_373_p2 <= std_logic_vector(unsigned(ret_V_reg_493) + unsigned(zext_ln321_3_fu_369_p1));
    add_ln321_2_fu_434_p2 <= std_logic_vector(signed(sext_ln321_fu_431_p1) + signed(ap_const_lv14_8B1));
    add_ln321_3_fu_469_p2 <= std_logic_vector(signed(sext_ln190_fu_466_p1) + signed(ap_const_lv14_8B1));
    add_ln321_fu_363_p2 <= std_logic_vector(signed(ap_const_lv12_8B1) + signed(zext_ln321_fu_360_p1));
    add_ln887_fu_388_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_218_p4) + unsigned(ap_const_lv6_1));
    adr1_fu_461_p2 <= std_logic_vector(unsigned(zext_ln188_fu_457_p1) + unsigned(adr2_reg_579));
    adr2_fu_426_p2 <= std_logic_vector(unsigned(zext_ln188_1_fu_422_p1) + unsigned(ret_V_reg_493));
    and_ln1355_fu_349_p2 <= (select_ln41_fu_341_p3 and mask_load_reg_538);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln887_18_fu_310_p2)
    begin
        if ((icmp_ln887_18_fu_310_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln887_19_fu_382_p2)
    begin
        if ((icmp_ln887_19_fu_382_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_247_p2)
    begin
        if ((((icmp_ln887_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_218_p4_assign_proc : process(indvar_flatten_reg_214, icmp_ln887_19_reg_559, ap_CS_fsm_pp1_stage0, add_ln887_reg_563, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_218_p4 <= add_ln887_reg_563;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_218_p4 <= indvar_flatten_reg_214;
        end if; 
    end process;


    ap_phi_mux_p_0290_0_i_phi_fu_207_p4_assign_proc : process(p_0290_0_i_reg_203, icmp_ln887_18_reg_509, ap_CS_fsm_pp0_stage0, i_V_reg_513, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln887_18_reg_509 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_0290_0_i_phi_fu_207_p4 <= i_V_reg_513;
        else 
            ap_phi_mux_p_0290_0_i_phi_fu_207_p4 <= p_0290_0_i_reg_203;
        end if; 
    end process;


    ap_phi_mux_p_050_0_phi_fu_240_p4_assign_proc : process(p_050_0_reg_236, icmp_ln887_19_reg_559, ap_CS_fsm_pp1_stage0, j_V_reg_590, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_p_050_0_phi_fu_240_p4 <= j_V_reg_590;
        else 
            ap_phi_mux_p_050_0_phi_fu_240_p4 <= p_050_0_reg_236;
        end if; 
    end process;


    ap_phi_mux_p_095_0_phi_fu_229_p4_assign_proc : process(p_095_0_reg_225, icmp_ln887_19_reg_559, ap_CS_fsm_pp1_stage0, select_ln188_1_reg_573, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln887_19_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_p_095_0_phi_fu_229_p4 <= select_ln188_1_reg_573;
        else 
            ap_phi_mux_p_095_0_phi_fu_229_p4 <= p_095_0_reg_225;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_247_p2)
    begin
        if (((icmp_ln887_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cdw_V_address0 <= sext_ln321_1_fu_440_p1(13 - 1 downto 0);

    cdw_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, zext_ln321_4_fu_378_p1, ap_block_pp0_stage1, ap_block_pp1_stage1, sext_ln321_2_fu_475_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            cdw_V_address1 <= sext_ln321_2_fu_475_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cdw_V_address1 <= zext_ln321_4_fu_378_p1(13 - 1 downto 0);
        else 
            cdw_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cdw_V_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            cdw_V_ce0 <= ap_const_logic_1;
        else 
            cdw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            cdw_V_ce1 <= ap_const_logic_1;
        else 
            cdw_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cdw_V_d1_assign_proc : process(ap_CS_fsm_pp0_stage1, first_word_V_1_reg_548, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, cdw_V_load_reg_600, ap_enable_reg_pp1_iter1, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            cdw_V_d1 <= cdw_V_load_reg_600;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cdw_V_d1 <= first_word_V_1_reg_548;
        else 
            cdw_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    cdw_V_we1_assign_proc : process(icmp_ln887_18_reg_509_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, icmp_ln887_19_reg_559_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln887_19_reg_559_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((icmp_ln887_18_reg_509_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            cdw_V_we1 <= ap_const_logic_1;
        else 
            cdw_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    first_word_V_1_fu_354_p2 <= (p_0410_0_i_reg_193 xor and_ln1355_fu_349_p2);
    first_word_V_fu_302_p3 <= 
        ap_const_lv8_FF when (tmp_17_fu_294_p3(0) = '1') else 
        ap_const_lv8_0;
    i_V_16_fu_253_p2 <= std_logic_vector(unsigned(t_V_reg_181) + unsigned(ap_const_lv6_1));
    i_V_fu_316_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_0290_0_i_phi_fu_207_p4) + unsigned(ap_const_lv5_1));
    icmp_ln187_fu_400_p2 <= "1" when (ap_phi_mux_p_050_0_phi_fu_240_p4 = ap_const_lv5_10) else "0";
    icmp_ln887_18_fu_310_p2 <= "1" when (ap_phi_mux_p_0290_0_i_phi_fu_207_p4 = ap_const_lv5_12) else "0";
    icmp_ln887_19_fu_382_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_218_p4 = ap_const_lv6_30) else "0";
    icmp_ln887_fu_247_p2 <= "1" when (t_V_reg_181 = ap_const_lv6_2E) else "0";
    j_V_fu_445_p2 <= std_logic_vector(unsigned(select_ln188_reg_568) + unsigned(ap_const_lv5_1));
    k_V_fu_394_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_095_0_phi_fu_229_p4) + unsigned(ap_const_lv2_1));
    mask_address0 <= zext_ln544_71_fu_322_p1(5 - 1 downto 0);

    mask_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mask_ce0 <= ap_const_logic_1;
        else 
            mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_address0 <= zext_ln544_fu_259_p1(6 - 1 downto 0);

    msg_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            msg_V_ce0 <= ap_const_logic_1;
        else 
            msg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_332_p2 <= std_logic_vector(shift_right(unsigned(msg_V_load_reg_499),to_integer(unsigned('0' & zext_ln556_fu_329_p1(8-1 downto 0)))));
    ret_V_fu_288_p2 <= std_logic_vector(unsigned(zext_ln1352_fu_272_p1) - unsigned(zext_ln1352_1_fu_284_p1));
    select_ln188_1_fu_414_p3 <= 
        k_V_fu_394_p2 when (icmp_ln187_fu_400_p2(0) = '1') else 
        ap_phi_mux_p_095_0_phi_fu_229_p4;
    select_ln188_fu_406_p3 <= 
        ap_const_lv5_0 when (icmp_ln187_fu_400_p2(0) = '1') else 
        ap_phi_mux_p_050_0_phi_fu_240_p4;
    select_ln41_fu_341_p3 <= 
        ap_const_lv8_FF when (trunc_ln808_fu_337_p1(0) = '1') else 
        ap_const_lv8_0;
        sext_ln190_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(adr1_reg_595),14));

        sext_ln321_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_2_fu_434_p2),64));

        sext_ln321_2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_3_fu_469_p2),64));

        sext_ln321_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(adr2_reg_579),14));

    shift_message_address0 <= zext_ln544_71_fu_322_p1(5 - 1 downto 0);

    shift_message_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            shift_message_ce0 <= ap_const_logic_1;
        else 
            shift_message_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1352_1_fu_276_p3 <= (t_V_reg_181 & ap_const_lv4_0);
    shl_ln_fu_264_p3 <= (t_V_reg_181 & ap_const_lv6_0);
    tmp_17_fu_294_p3 <= msg_V_q0(7 downto 7);
    trunc_ln808_fu_337_p1 <= r_V_fu_332_p2(1 - 1 downto 0);
    word_adress_address0 <= zext_ln544_71_fu_322_p1(5 - 1 downto 0);

    word_adress_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            word_adress_ce0 <= ap_const_logic_1;
        else 
            word_adress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1352_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_1_fu_276_p3),13));
    zext_ln1352_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_264_p3),13));
    zext_ln188_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln188_fu_406_p3),13));
    zext_ln188_5_mid2_v_fu_450_p3 <= (select_ln188_1_reg_573 & ap_const_lv4_0);
    zext_ln188_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln188_5_mid2_v_fu_450_p3),13));
    zext_ln321_3_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_363_p2),13));
    zext_ln321_4_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_reg_554),64));
    zext_ln321_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_adress_load_reg_543),12));
    zext_ln544_71_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0290_0_i_phi_fu_207_p4),64));
    zext_ln544_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_181),64));
    zext_ln556_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_message_load_reg_533),8));
end behav;
