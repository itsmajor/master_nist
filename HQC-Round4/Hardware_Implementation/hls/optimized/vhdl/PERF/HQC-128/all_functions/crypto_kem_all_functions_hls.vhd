-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_all_functions_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ss1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss1_V_ce0 : OUT STD_LOGIC;
    ss1_V_we0 : OUT STD_LOGIC;
    ss1_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ss2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss2_V_ce0 : OUT STD_LOGIC;
    ss2_V_we0 : OUT STD_LOGIC;
    ss2_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ss2_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    prng_seed_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    prng_seed_V_ce0 : OUT STD_LOGIC;
    prng_seed_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_bytesize_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_all_functions_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_all_functions_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-ftg256-1,HLS_INPUT_CLOCK=6.600000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.100000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=25,HLS_SYN_DSP=0,HLS_SYN_FF=31481,HLS_SYN_LUT=82581,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_229 : STD_LOGIC_VECTOR (9 downto 0) := "1000101001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_4B : STD_LOGIC_VECTOR (7 downto 0) := "01001011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv14_1151 : STD_LOGIC_VECTOR (13 downto 0) := "01000101010001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv13_10 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_const_lv13_8B1 : STD_LOGIC_VECTOR (12 downto 0) := "0100010110001";
    constant ap_const_lv12_8A1 : STD_LOGIC_VECTOR (11 downto 0) := "100010100001";
    constant ap_const_lv12_8A0 : STD_LOGIC_VECTOR (11 downto 0) := "100010100000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_228 : STD_LOGIC_VECTOR (9 downto 0) := "1000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_231 : STD_LOGIC_VECTOR (9 downto 0) := "1000110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_115 : STD_LOGIC_VECTOR (8 downto 0) := "100010101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv9_11A : STD_LOGIC_VECTOR (8 downto 0) := "100011010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_prng_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_prng_V_ce0 : STD_LOGIC;
    signal state_prng_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_prng_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_prng_V_ce1 : STD_LOGIC;
    signal state_prng_V_we1 : STD_LOGIC;
    signal state_prng_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_seeds_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal store_seeds_V_ce0 : STD_LOGIC;
    signal store_seeds_V_we0 : STD_LOGIC;
    signal store_seeds_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_seeds_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce0 : STD_LOGIC;
    signal state_seedexpander_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_seedexpander_V_ce1 : STD_LOGIC;
    signal state_seedexpander_V_we1 : STD_LOGIC;
    signal state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sk64_V_ce0 : STD_LOGIC;
    signal sk64_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sk64_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sk64_V_ce1 : STD_LOGIC;
    signal sk64_V_we1 : STD_LOGIC;
    signal sk64_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal random_vector_A_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_A_V_ce0 : STD_LOGIC;
    signal random_vector_A_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_A_V_ce1 : STD_LOGIC;
    signal random_vector_A_V_we1 : STD_LOGIC;
    signal store_B_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce0 : STD_LOGIC;
    signal store_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_B_V_ce1 : STD_LOGIC;
    signal store_B_V_we1 : STD_LOGIC;
    signal store_B_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_B_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal random_vector_B_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal random_vector_B_V_ce0 : STD_LOGIC;
    signal random_vector_B_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal random_vector_B_V_ce1 : STD_LOGIC;
    signal random_vector_B_V_we1 : STD_LOGIC;
    signal pk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pk64_V_ce0 : STD_LOGIC;
    signal pk64_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pk64_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pk64_V_ce1 : STD_LOGIC;
    signal pk64_V_we1 : STD_LOGIC;
    signal pk64_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_s_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_s_V_ce0 : STD_LOGIC;
    signal h_s_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_s_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_s_V_ce1 : STD_LOGIC;
    signal h_s_V_we1 : STD_LOGIC;
    signal h_s_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_s_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_ce0 : STD_LOGIC;
    signal store_A_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_ce1 : STD_LOGIC;
    signal store_A_V_we1 : STD_LOGIC;
    signal store_A_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce0 : STD_LOGIC;
    signal mc_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mc_V_ce1 : STD_LOGIC;
    signal mc_V_we1 : STD_LOGIC;
    signal mc_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mc_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal theta_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal theta_V_ce0 : STD_LOGIC;
    signal theta_V_we0 : STD_LOGIC;
    signal theta_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_C_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal store_C_V_ce0 : STD_LOGIC;
    signal store_C_V_we0 : STD_LOGIC;
    signal store_C_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_V_ce0 : STD_LOGIC;
    signal d_V_we0 : STD_LOGIC;
    signal d_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ct_V_ce0 : STD_LOGIC;
    signal ct_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ct_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ct_V_ce1 : STD_LOGIC;
    signal ct_V_we1 : STD_LOGIC;
    signal ct_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal uv2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce0 : STD_LOGIC;
    signal uv2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal uv2_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal uv2_V_ce1 : STD_LOGIC;
    signal uv2_V_we1 : STD_LOGIC;
    signal uv2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i51_reg_634 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i52_reg_645 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_047_0_i_reg_678 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_V_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_reg_689_pp4_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state36_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state39_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal t_V_reg_689_pp4_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i69_reg_701 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i77_reg_723 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i85_reg_734 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i93_reg_745 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i102_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln45_fu_1156_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln45_reg_1621 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln284_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_1626 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_fu_1167_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln285_fu_1173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_reg_1635 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_1_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state15_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_1184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln285_1_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_1_reg_1654 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln717_fu_1195_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln717_reg_1664 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_V_fu_1214_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln144_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_22_fu_1226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_22_reg_1680 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ret_V_fu_1232_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1685 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln887_51_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_121_fu_1238_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_121_reg_1690 : STD_LOGIC_VECTOR (11 downto 0);
    signal store_A_V_load_reg_1710 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal store_A_V_load_1_reg_1715 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_load_2_reg_1730 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal store_A_V_load_3_reg_1735 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_load_4_reg_1750 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal store_A_V_load_5_reg_1755 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_A_V_load_6_reg_1770 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal store_A_V_load_7_reg_1775 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_52_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_52_reg_1780 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state31_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln887_52_reg_1780_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_23_fu_1345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ret_V_122_fu_1351_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_122_reg_1789 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_122_reg_1789_pp3_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal pk64_V_load_reg_1799 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln887_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1804_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1804_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_24_fu_1372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_24_reg_1808 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal store_seeds_V_load_reg_1818 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal trunc_ln802_fu_1412_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln802_reg_1823 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln284_2_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_reg_1828 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state44_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal i_4_fu_1427_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal zext_ln285_2_fu_1433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_2_reg_1837 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln717_1_fu_1438_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln717_1_reg_1847 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal icmp_ln144_1_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_V_25_fu_1457_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln284_3_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_reg_1861 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state54_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal i_5_fu_1469_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal zext_ln285_3_fu_1475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_3_reg_1870 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_4_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_4_reg_1880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state80_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state81_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal i_6_fu_1486_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal zext_ln285_4_fu_1492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_4_reg_1889 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_5_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_5_reg_1899 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state98_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state99_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal i_7_fu_1503_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_1903 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal trunc_ln717_2_fu_1529_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln717_2_reg_1913 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal icmp_ln144_2_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal i_V_26_fu_1548_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln284_6_fu_1554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_6_reg_1927 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_block_state108_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state109_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal i_8_fu_1560_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal zext_ln285_6_fu_1566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_6_reg_1936 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vect_compare_64_fu_1148_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_d_d2_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_vect_set_random_fixe_fu_949_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_ap_done : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_ap_ready : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_ap_done : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_ap_ready : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_ap_done : STD_LOGIC;
    signal ap_block_state113_on_subcall_done : BOOLEAN;
    signal grp_vect_compare_fu_1094_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_u_u2_reg_1951 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal grp_vect_compare_fu_1094_ap_ready : STD_LOGIC;
    signal grp_vect_compare_fu_1094_ap_done : STD_LOGIC;
    signal result_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_1956 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal lhs_V_fu_1587_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_reg_1961 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_1601_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1969 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ss2_V_addr_reg_1974 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln390_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_seedexpander_init_fu_1006_ap_ready : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_shake_prng_fu_790_ap_ready : STD_LOGIC;
    signal grp_shake_prng_fu_790_ap_done : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state36 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_vect_copyresize_1_fu_1123_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1123_ap_done : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_hqc_ciphertext_from_s_fu_1050_ap_ready : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_ap_done : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state80 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state98 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state108 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal store_rs_decode_V_ce0 : STD_LOGIC;
    signal store_rs_decode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_decode_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_decode_V_ce1 : STD_LOGIC;
    signal store_rs_decode_V_we1 : STD_LOGIC;
    signal store_rs_decode_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_encode_V_1_ce0 : STD_LOGIC;
    signal store_rs_encode_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_1_ce1 : STD_LOGIC;
    signal store_rs_encode_V_1_we1 : STD_LOGIC;
    signal store_rs_encode_V_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal store_rs_encode_V_ce0 : STD_LOGIC;
    signal store_rs_encode_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_rs_encode_V_ce1 : STD_LOGIC;
    signal store_rs_encode_V_we1 : STD_LOGIC;
    signal store_rs_encode_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_shake_prng_fu_790_ap_start : STD_LOGIC;
    signal grp_shake_prng_fu_790_ap_idle : STD_LOGIC;
    signal grp_shake_prng_fu_790_output_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake_prng_fu_790_output_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_fu_790_output_V_we0 : STD_LOGIC;
    signal grp_shake_prng_fu_790_output_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake_prng_fu_790_outlen : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_prng_fu_790_state_prng_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_fu_790_state_prng_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_fu_790_state_prng_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_fu_790_state_prng_V_ce1 : STD_LOGIC;
    signal grp_shake_prng_fu_790_state_prng_V_we1 : STD_LOGIC;
    signal grp_shake_prng_fu_790_state_prng_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vect_mul_add_fu_824_ap_start : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_ap_done : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_ap_idle : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_ap_ready : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_o_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_824_o_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_824_o_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_o_V_we1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_824_a1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_mul_add_fu_824_a1_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_a1_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_mul_add_fu_824_a2_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_mul_add_fu_824_a2_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_a2_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_mul_add_fu_824_a2_V_ce1 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_weight_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_mul_add_fu_824_store_B_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_824_store_B_V_ce0 : STD_LOGIC;
    signal grp_vect_mul_add_fu_824_store_B_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_mul_add_fu_824_store_B_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_ap_start : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_ap_done : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_873_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_cdw_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_873_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_encode_fu_873_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_encode_fu_873_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_873_cdw_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_encode_fu_873_store_C_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reed_solomon_encode_fu_873_store_C_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_ap_start : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_ap_done : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_ap_idle : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_ap_ready : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_cdw_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_892_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_cdw_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_encode_fu_892_cdw_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_muller_encode_fu_892_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_encode_fu_892_msg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_encode_fu_892_msg_V_ce0 : STD_LOGIC;
    signal grp_reed_muller_encode_fu_892_msg_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_925_ap_start : STD_LOGIC;
    signal grp_vect_add_fu_925_ap_done : STD_LOGIC;
    signal grp_vect_add_fu_925_ap_idle : STD_LOGIC;
    signal grp_vect_add_fu_925_ap_ready : STD_LOGIC;
    signal grp_vect_add_fu_925_o_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_925_o_V_ce0 : STD_LOGIC;
    signal grp_vect_add_fu_925_o_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_925_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_add_fu_925_o_V_ce1 : STD_LOGIC;
    signal grp_vect_add_fu_925_o_V_we1 : STD_LOGIC;
    signal grp_vect_add_fu_925_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_add_fu_925_v2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_add_fu_925_v2_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_v_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_949_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_v_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_949_v_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_949_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_v_V_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_set_random_fixe_fu_949_weight_V : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_963_ap_start : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_ap_idle : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_output_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake256_512_ds_fu_963_output_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_output_V_we0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_output_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_shake256_512_ds_fu_963_input_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_963_input_V_ce0 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_input_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake256_512_ds_fu_963_input_V_ce1 : STD_LOGIC;
    signal grp_shake256_512_ds_fu_963_inlen_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake256_512_ds_fu_963_domain_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_prng_init_fu_985_ap_start : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_ap_done : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_ap_idle : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_ap_ready : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_entropy_input_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_shake_prng_init_fu_985_entropy_input_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce0 : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce1 : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_we1 : STD_LOGIC;
    signal grp_shake_prng_init_fu_985_shake_prng_state_array_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seedexpander_mult_ty_fu_996_ap_start : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_ap_done : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_ap_idle : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_ap_ready : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_output_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_seedexpander_mult_ty_fu_996_output_V_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_output_V_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_output_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce0 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_we1 : STD_LOGIC;
    signal grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_seedexpander_init_fu_1006_ap_start : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_ap_idle : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_seed_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_seedexpander_init_fu_1006_seed_V_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_state_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_1006_state_V_2_ce0 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_state_V_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_seedexpander_init_fu_1006_state_V_2_ce1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_state_V_2_we1 : STD_LOGIC;
    signal grp_seedexpander_init_fu_1006_state_V_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reed_solomon_decode_fu_1016_ap_start : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_ap_done : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_ap_idle : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_ap_ready : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_msg_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reed_solomon_decode_fu_1016_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_msg_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_solomon_decode_fu_1016_cdw_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_1016_cdw_V_ce0 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_cdw_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_solomon_decode_fu_1016_cdw_V_ce1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_cdw_V_we1 : STD_LOGIC;
    signal grp_reed_solomon_decode_fu_1016_cdw_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_decode_fu_1043_ap_start : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_ap_done : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_ap_idle : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_ap_ready : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_msg_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reed_muller_decode_fu_1043_msg_V_ce1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_msg_V_we1 : STD_LOGIC;
    signal grp_reed_muller_decode_fu_1043_msg_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reed_muller_decode_fu_1043_store_A_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reed_muller_decode_fu_1043_store_A_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_ap_start : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_ap_idle : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_u_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_u_V_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_u_V_we1 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_u_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_d_V_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_d_V_6_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_d_V_6_we0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_d_V_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_ct_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_from_s_fu_1050_ct_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ap_start : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ap_done : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ap_idle : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ap_ready : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_u_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1060_u_V_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_d_V_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1060_d_V_4_ce0 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_ce1 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_we1 : STD_LOGIC;
    signal grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_mult_fu_1070_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_o_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vect_copyresize_mult_fu_1070_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_o_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vect_copyresize_mult_fu_1070_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_mult_fu_1070_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_mult_fu_1070_v_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_mult_fu_1070_v_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_ap_start : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_ap_done : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_ap_idle : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_ap_ready : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_s_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_s_fu_1078_s_V_ce0 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_s_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_s_fu_1078_s_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_s_V_we1 : STD_LOGIC;
    signal grp_hqc_public_key_from_s_fu_1078_s_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hqc_public_key_from_s_fu_1078_pk64_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hqc_public_key_from_s_fu_1078_pk64_V_ce0 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_ap_start : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_ap_done : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_ap_idle : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_ap_ready : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_s_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_1_fu_1086_s_V_ce0 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_s_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hqc_public_key_from_1_fu_1086_s_V_ce1 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_s_V_we1 : STD_LOGIC;
    signal grp_hqc_public_key_from_1_fu_1086_s_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hqc_public_key_from_1_fu_1086_pk_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hqc_public_key_from_1_fu_1086_pk_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_1094_ap_start : STD_LOGIC;
    signal grp_vect_compare_fu_1094_ap_idle : STD_LOGIC;
    signal grp_vect_compare_fu_1094_v1_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1094_v1_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_fu_1094_v1_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1094_v2_V_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1094_size_V_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_compare_fu_1094_uv2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_compare_fu_1094_uv2_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_ap_start : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_ap_done : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_ap_idle : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_ap_ready : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_ce1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_we1 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_v_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1111_weight_V : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0 : STD_LOGIC;
    signal grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_vect_copyresize_1_fu_1123_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1123_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1123_o_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vect_copyresize_1_fu_1123_o_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1123_o_V_we0 : STD_LOGIC;
    signal grp_vect_copyresize_1_fu_1123_o_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_1_fu_1123_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_1_fu_1123_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_o_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_fu_1131_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_fu_1131_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_fu_1131_v_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_fu_1131_v_V_ce0 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_ap_start : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_ap_done : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_ap_idle : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_ap_ready : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_vect_copyresize_2_fu_1140_o_V_ce1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_o_V_we1 : STD_LOGIC;
    signal grp_vect_copyresize_2_fu_1140_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vect_copyresize_2_fu_1140_v_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vect_copyresize_2_fu_1140_v_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_ap_start : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_ap_idle : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_d_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_1148_d_V_ce0 : STD_LOGIC;
    signal grp_vect_compare_64_fu_1148_theta_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_vect_compare_64_fu_1148_theta_V_ce0 : STD_LOGIC;
    signal p_025_0_i_i_i_reg_656 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_0189_0_i_reg_667 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_phi_mux_t_V_phi_fu_693_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal p_025_0_i_i_i180_reg_712 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_phi_mux_i_0_i93_phi_fu_749_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal p_025_0_i_i_i195_reg_757 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal i_0_i_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal grp_shake_prng_fu_790_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_vect_mul_add_fu_824_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal grp_reed_solomon_encode_fu_873_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal grp_reed_muller_encode_fu_892_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_add_fu_925_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal grp_vect_set_random_fixe_fu_949_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal grp_shake256_512_ds_fu_963_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_shake_prng_init_fu_985_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_seedexpander_mult_ty_fu_996_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_seedexpander_init_fu_1006_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_reed_solomon_decode_fu_1016_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_reed_muller_decode_fu_1043_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_vect_copyresize_mult_fu_1070_ap_start_reg : STD_LOGIC := '0';
    signal grp_hqc_public_key_from_s_fu_1078_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_hqc_public_key_from_1_fu_1086_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal grp_vect_compare_fu_1094_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_vect_set_random_fixe_1_fu_1111_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_vect_copyresize_1_fu_1123_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_vect_copyresize_fu_1131_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_copyresize_2_fu_1140_ap_start_reg : STD_LOGIC := '0';
    signal grp_vect_compare_64_fu_1148_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln544_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_125_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_126_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_127_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_128_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_129_fu_1287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_130_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_131_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_132_fu_1317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_124_fu_1322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_134_fu_1357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln544_133_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_91_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_90_fu_1416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln544_92_fu_1452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln321_7_fu_1519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_5_fu_1524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_93_fu_1543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal zext_ln391_fu_1607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_7_i_fu_1326_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln717_fu_1199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal zext_ln717_1_fu_1442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal zext_ln717_2_fu_1533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_123_fu_1612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1353_fu_1251_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_7_fu_1262_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_8_fu_1272_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_9_fu_1282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_10_fu_1292_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_11_fu_1302_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1353_12_fu_1312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_49_fu_1378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_fu_1391_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1395_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln808_fu_1403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_1407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_1509_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln321_fu_1513_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln387_fu_1571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1355_fu_1581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_block_state57_on_subcall_done : BOOLEAN;
    signal ap_block_state65_on_subcall_done : BOOLEAN;
    signal ap_block_state67_on_subcall_done : BOOLEAN;
    signal ap_block_state69_on_subcall_done : BOOLEAN;
    signal ap_block_state83_on_subcall_done : BOOLEAN;
    signal ap_block_state85_on_subcall_done : BOOLEAN;
    signal ap_block_state111_on_subcall_done : BOOLEAN;
    signal ap_block_state119_on_subcall_done : BOOLEAN;
    signal ap_block_state121_on_subcall_done : BOOLEAN;
    signal ap_block_state123_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
constant zero1                                                                   : std_logic := '0';
  constant zero64                                                                  : std_logic_vector (63 downto 0) := (others => '0');
  -- Channel A
  signal ap_start_A         : std_logic;
  signal ap_done_A          : std_logic;
  signal ap_idle_A          : std_logic;
  signal ap_ready_A         : std_logic;
  signal state_V_address0_A : std_logic_vector (4 downto 0);
  signal state_V_ce0_A      : std_logic;
  signal state_V_q0_A       : std_logic_vector (63 downto 0);
  signal state_V_address1_A : std_logic_vector (4 downto 0);
  signal state_V_ce1_A      : std_logic;
  signal state_V_we1_A      : std_logic;
  signal state_V_d1_A       : std_logic_vector (63 downto 0);
  -- Channel B
  signal ap_start_B         : std_logic;
  signal ap_done_B          : std_logic;
  signal ap_idle_B          : std_logic;
  signal ap_ready_B         : std_logic;
  signal state_V_address0_B : std_logic_vector (4 downto 0);
  signal state_V_ce0_B      : std_logic;
  signal state_V_q0_B       : std_logic_vector (63 downto 0);
  signal state_V_address1_B : std_logic_vector (4 downto 0);
  signal state_V_ce1_B      : std_logic;
  signal state_V_we1_B      : std_logic;
  signal state_V_d1_B       : std_logic_vector (63 downto 0);
  -- Channel C
  signal ap_start_C         : std_logic;
  signal ap_done_C          : std_logic;
  signal ap_idle_C          : std_logic;
  signal ap_ready_C         : std_logic;
  signal state_V_address0_C : std_logic_vector (4 downto 0);
  signal state_V_ce0_C      : std_logic;
  signal state_V_q0_C       : std_logic_vector (63 downto 0);
  signal state_V_address1_C : std_logic_vector (4 downto 0);
  signal state_V_ce1_C      : std_logic;
  signal state_V_we1_C      : std_logic;
  signal state_V_d1_C       : std_logic_vector (63 downto 0);
  -- Channel D
  signal ap_start_D         : std_logic;
  signal ap_done_D          : std_logic;
  signal ap_idle_D          : std_logic;
  signal ap_ready_D         : std_logic;
  signal state_V_address0_D : std_logic_vector (4 downto 0);
  signal state_V_ce0_D      : std_logic;
  signal state_V_q0_D       : std_logic_vector (63 downto 0);
  signal state_V_address1_D : std_logic_vector (4 downto 0);
  signal state_V_ce1_D      : std_logic;
  signal state_V_we1_D      : std_logic;
  signal state_V_d1_D       : std_logic_vector (63 downto 0);
  -- Channel E
  signal ap_start_E         : std_logic;
  signal ap_done_E          : std_logic;
  signal ap_idle_E          : std_logic;
  signal ap_ready_E         : std_logic;
  signal state_V_address0_E : std_logic_vector (4 downto 0);
  signal state_V_ce0_E      : std_logic;
  signal state_V_q0_E       : std_logic_vector (63 downto 0);
  signal state_V_address1_E : std_logic_vector (4 downto 0);
  signal state_V_ce1_E      : std_logic;
  signal state_V_we1_E      : std_logic;
  signal state_V_d1_E       : std_logic_vector (63 downto 0);
    
  component KeccakF1600_StatePer is
    port (
      ap_clk             : in  std_logic;
      ap_rst             : in  std_logic;
      -- Channel A
      ap_start_A         : in  std_logic;
      ap_done_A          : out std_logic;
      ap_idle_A          : out std_logic;
      ap_ready_A         : out std_logic;
      state_V_address0_A : out std_logic_vector (4 downto 0);
      state_V_ce0_A      : out std_logic;
      state_V_q0_A       : in  std_logic_vector (63 downto 0);
      state_V_address1_A : out std_logic_vector (4 downto 0);
      state_V_ce1_A      : out std_logic;
      state_V_we1_A      : out std_logic;
      state_V_d1_A       : out std_logic_vector (63 downto 0);
      -- Channel B
      ap_start_B         : in  std_logic;
      ap_done_B          : out std_logic;
      ap_idle_B          : out std_logic;
      ap_ready_B         : out std_logic;
      state_V_address0_B : out std_logic_vector (4 downto 0);
      state_V_ce0_B      : out std_logic;
      state_V_q0_B       : in  std_logic_vector (63 downto 0);
      state_V_address1_B : out std_logic_vector (4 downto 0);
      state_V_ce1_B      : out std_logic;
      state_V_we1_B      : out std_logic;
      state_V_d1_B       : out std_logic_vector (63 downto 0);
      -- Channel C
      ap_start_C         : in  std_logic;
      ap_done_C          : out std_logic;
      ap_idle_C          : out std_logic;
      ap_ready_C         : out std_logic;
      state_V_address0_C : out std_logic_vector (4 downto 0);
      state_V_ce0_C      : out std_logic;
      state_V_q0_C       : in  std_logic_vector (63 downto 0);
      state_V_address1_C : out std_logic_vector (4 downto 0);
      state_V_ce1_C      : out std_logic;
      state_V_we1_C      : out std_logic;
      state_V_d1_C       : out std_logic_vector (63 downto 0);
      -- Channel D
      ap_start_D         : in  std_logic;
      ap_done_D          : out std_logic;
      ap_idle_D          : out std_logic;
      ap_ready_D         : out std_logic;
      state_V_address0_D : out std_logic_vector (4 downto 0);
      state_V_ce0_D      : out std_logic;
      state_V_q0_D       : in  std_logic_vector (63 downto 0);
      state_V_address1_D : out std_logic_vector (4 downto 0);
      state_V_ce1_D      : out std_logic;
      state_V_we1_D      : out std_logic;
      state_V_d1_D       : out std_logic_vector (63 downto 0);
      -- Channel E
      ap_start_E         : in  std_logic;
      ap_done_E          : out std_logic;
      ap_idle_E          : out std_logic;
      ap_ready_E         : out std_logic;
      state_V_address0_E : out std_logic_vector (4 downto 0);
      state_V_ce0_E      : out std_logic;
      state_V_q0_E       : in  std_logic_vector (63 downto 0);
      state_V_address1_E : out std_logic_vector (4 downto 0);
      state_V_ce1_E      : out std_logic;
      state_V_we1_E      : out std_logic;
      state_V_d1_E       : out std_logic_vector (63 downto 0)
      );
  end component;
  
    component shake_prng IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        outlen : IN STD_LOGIC_VECTOR (3 downto 0);
        state_prng_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_prng_V_ce0 : OUT STD_LOGIC;
        state_prng_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_prng_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_prng_V_ce1 : OUT STD_LOGIC;
        state_prng_V_we1 : OUT STD_LOGIC;
        state_prng_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	   );
    end component;


    component vect_mul_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a1_V_ce0 : OUT STD_LOGIC;
        a1_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        a2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a2_V_ce0 : OUT STD_LOGIC;
        a2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a2_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a2_V_ce1 : OUT STD_LOGIC;
        a2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (7 downto 0);
        store_B_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_B_V_ce0 : OUT STD_LOGIC;
        store_B_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        store_B_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_B_V_ce1 : OUT STD_LOGIC;
        store_B_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_solomon_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        store_C_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        store_C_V_ce0 : OUT STD_LOGIC;
        store_C_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce0 : OUT STD_LOGIC;
        msg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v2_V_ce0 : OUT STD_LOGIC;
        v2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_set_random_fixe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
        state_seedexpander_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_2_ce0 : OUT STD_LOGIC;
        state_seedexpander_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_seedexpander_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_2_ce1 : OUT STD_LOGIC;
        state_seedexpander_V_2_we1 : OUT STD_LOGIC;
        state_seedexpander_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0)  ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	  );
    end component;


    component shake256_512_ds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        inlen_V : IN STD_LOGIC_VECTOR (13 downto 0);
        domain_V : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component shake_prng_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        entropy_input_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        entropy_input_V_ce0 : OUT STD_LOGIC;
        entropy_input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        enlen_V : IN STD_LOGIC_VECTOR (6 downto 0);
        shake_prng_state_array_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        shake_prng_state_array_V_ce0 : OUT STD_LOGIC;
        shake_prng_state_array_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        shake_prng_state_array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        shake_prng_state_array_V_ce1 : OUT STD_LOGIC;
        shake_prng_state_array_V_we1 : OUT STD_LOGIC;
        shake_prng_state_array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0)  ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	  );
    end component;


    component seedexpander_mult_ty IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_seedexpander_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce0 : OUT STD_LOGIC;
        state_seedexpander_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_seedexpander_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_seedexpander_V_ce1 : OUT STD_LOGIC;
        state_seedexpander_V_we1 : OUT STD_LOGIC;
        state_seedexpander_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0)  ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	  );
    end component;


    component seedexpander_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        seed_V_ce0 : OUT STD_LOGIC;
        seed_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce0 : OUT STD_LOGIC;
        state_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_V_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_V_2_ce1 : OUT STD_LOGIC;
        state_V_2_we1 : OUT STD_LOGIC;
        state_V_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
	   );
    end component;


    component reed_solomon_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce0 : OUT STD_LOGIC;
        cdw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cdw_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        cdw_V_ce1 : OUT STD_LOGIC;
        cdw_V_we1 : OUT STD_LOGIC;
        cdw_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reed_muller_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        msg_V_ce1 : OUT STD_LOGIC;
        msg_V_we1 : OUT STD_LOGIC;
        msg_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        store_A_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        store_A_V_ce0 : OUT STD_LOGIC;
        store_A_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_ciphertext_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_V_ce1 : OUT STD_LOGIC;
        u_V_we1 : OUT STD_LOGIC;
        u_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        d_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_6_ce0 : OUT STD_LOGIC;
        d_V_6_we0 : OUT STD_LOGIC;
        d_V_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ct_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_ce0 : OUT STD_LOGIC;
        ct_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ct_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_ce1 : OUT STD_LOGIC;
        ct_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_ciphertext_to_st IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_V_ce0 : OUT STD_LOGIC;
        u_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_4_ce0 : OUT STD_LOGIC;
        d_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ct_V_2_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ct_V_2_ce1 : OUT STD_LOGIC;
        ct_V_2_we1 : OUT STD_LOGIC;
        ct_V_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hqc_public_key_from_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce0 : OUT STD_LOGIC;
        s_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce1 : OUT STD_LOGIC;
        s_V_we1 : OUT STD_LOGIC;
        s_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pk64_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pk64_V_ce0 : OUT STD_LOGIC;
        pk64_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hqc_public_key_from_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce0 : OUT STD_LOGIC;
        s_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_V_ce1 : OUT STD_LOGIC;
        s_V_we1 : OUT STD_LOGIC;
        s_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pk_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pk_V_ce0 : OUT STD_LOGIC;
        pk_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vect_compare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v1_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v1_V_ce0 : OUT STD_LOGIC;
        v1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v1_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        v2_V_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        size_V_offset : IN STD_LOGIC_VECTOR (11 downto 0);
        uv2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        uv2_V_ce0 : OUT STD_LOGIC;
        uv2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vect_set_random_fixe_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        v_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce1 : OUT STD_LOGIC;
        v_V_we1 : OUT STD_LOGIC;
        v_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_V : IN STD_LOGIC_VECTOR (6 downto 0);
        fixed_weight_by_coord_vector_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fixed_weight_by_coord_vector_V_ce0 : OUT STD_LOGIC;
        fixed_weight_by_coord_vector_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component vect_copyresize_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_we0 : OUT STD_LOGIC;
        o_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_copyresize_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        v_V_ce0 : OUT STD_LOGIC;
        v_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_compare_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        d_V_ce0 : OUT STD_LOGIC;
        d_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        theta_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        theta_V_ce0 : OUT STD_LOGIC;
        theta_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component shake256_512_ds_sibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component crypto_kem_all_fuNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_kem_all_fuRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuThq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_kem_all_fuUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuXh4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuYie IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_all_fuZio IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin

  KeccakF1600_StatePer_U : KeccakF1600_StatePer
    port map(
      ap_clk             => ap_clk,
      ap_rst             => ap_rst,
      -- Channel A         
      ap_start_A         => ap_start_A,
      ap_done_A          => ap_done_A,
      ap_idle_A          => ap_idle_A,
      ap_ready_A         => ap_ready_A,
      state_V_address0_A => state_V_address0_A,
      state_V_ce0_A      => state_V_ce0_A,
      state_V_q0_A       => state_V_q0_A,
      state_V_address1_A => state_V_address1_A,
      state_V_ce1_A      => state_V_ce1_A,
      state_V_we1_A      => state_V_we1_A,
      state_V_d1_A       => state_V_d1_A,
      -- Channel B         
      ap_start_B         => ap_start_B,
      ap_done_B          => ap_done_B,
      ap_idle_B          => ap_idle_B,
      ap_ready_B         => ap_ready_B,
      state_V_address0_B => state_V_address0_B,
      state_V_ce0_B      => state_V_ce0_B,
      state_V_q0_B       => state_V_q0_B,
      state_V_address1_B => state_V_address1_B,
      state_V_ce1_B      => state_V_ce1_B,
      state_V_we1_B      => state_V_we1_B,
      state_V_d1_B       => state_V_d1_B,
      -- Channel C         
      ap_start_C         => ap_start_C,
      ap_done_C          => ap_done_C,
      ap_idle_C          => ap_idle_C,
      ap_ready_C         => ap_ready_C,
      state_V_address0_C => state_V_address0_C,
      state_V_ce0_C      => state_V_ce0_C,
      state_V_q0_C       => state_V_q0_C,
      state_V_address1_C => state_V_address1_C,
      state_V_ce1_C      => state_V_ce1_C,
      state_V_we1_C      => state_V_we1_C,
      state_V_d1_C       => state_V_d1_C,
      -- Channel D         
      ap_start_D         => ap_start_D,
      ap_done_D          => ap_done_D,
      ap_idle_D          => ap_idle_D,
      ap_ready_D         => ap_ready_D,
      state_V_address0_D => state_V_address0_D,
      state_V_ce0_D      => state_V_ce0_D,
      state_V_q0_D       => state_V_q0_D,
      state_V_address1_D => state_V_address1_D,
      state_V_ce1_D      => state_V_ce1_D,
      state_V_we1_D      => state_V_we1_D,
      state_V_d1_D       => state_V_d1_D,
      -- Channel E         
      ap_start_E         => ap_start_E,
      ap_done_E          => ap_done_E,
      ap_idle_E          => ap_idle_E,
      ap_ready_E         => ap_ready_E,
      state_V_address0_E => state_V_address0_E,
      state_V_ce0_E      => state_V_ce0_E,
      state_V_q0_E       => state_V_q0_E,
      state_V_address1_E => state_V_address1_E,
      state_V_ce1_E      => state_V_ce1_E,
      state_V_we1_E      => state_V_we1_E,
      state_V_d1_E       => state_V_d1_E
      );
	  
    state_prng_V_U : component shake256_512_ds_sibs
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_prng_V_address0,
        ce0 => state_prng_V_ce0,
        q0 => state_prng_V_q0,
        address1 => state_prng_V_address1,
        ce1 => state_prng_V_ce1,
        we1 => state_prng_V_we1,
        d1 => state_prng_V_d1);

    store_seeds_V_U : component crypto_kem_all_fuJfO
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_seeds_V_address0,
        ce0 => store_seeds_V_ce0,
        we0 => store_seeds_V_we0,
        d0 => store_seeds_V_d0,
        q0 => store_seeds_V_q0);

    state_seedexpander_V_U : component shake256_512_ds_sibs
    generic map (
        DataWidth => 64,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_seedexpander_V_address0,
        ce0 => state_seedexpander_V_ce0,
        q0 => state_seedexpander_V_q0,
        address1 => state_seedexpander_V_address1,
        ce1 => state_seedexpander_V_ce1,
        we1 => state_seedexpander_V_we1,
        d1 => state_seedexpander_V_d1);

    sk64_V_U : component crypto_kem_all_fuLf8
    generic map (
        DataWidth => 64,
        AddressRange => 287,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sk64_V_address0,
        ce0 => sk64_V_ce0,
        q0 => sk64_V_q0,
        address1 => sk64_V_address1,
        ce1 => sk64_V_ce1,
        we1 => sk64_V_we1,
        d1 => sk64_V_d1);

    random_vector_A_V_U : component crypto_kem_all_fuMgi
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_A_V_address0,
        ce0 => random_vector_A_V_ce0,
        q0 => random_vector_A_V_q0,
        address1 => grp_vect_set_random_fixe_fu_949_v_V_address1,
        ce1 => random_vector_A_V_ce1,
        we1 => random_vector_A_V_we1,
        d1 => grp_vect_set_random_fixe_fu_949_v_V_d1);

    store_B_V_U : component crypto_kem_all_fuNgs
    generic map (
        DataWidth => 8,
        AddressRange => 2209,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_B_V_address0,
        ce0 => store_B_V_ce0,
        q0 => store_B_V_q0,
        address1 => store_B_V_address1,
        ce1 => store_B_V_ce1,
        we1 => store_B_V_we1,
        d1 => store_B_V_d1,
        q1 => store_B_V_q1);

    random_vector_B_V_U : component crypto_kem_all_fuMgi
    generic map (
        DataWidth => 15,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => random_vector_B_V_address0,
        ce0 => random_vector_B_V_ce0,
        q0 => random_vector_B_V_q0,
        address1 => grp_vect_set_random_fixe_fu_949_v_V_address1,
        ce1 => random_vector_B_V_ce1,
        we1 => random_vector_B_V_we1,
        d1 => grp_vect_set_random_fixe_fu_949_v_V_d1);

    pk64_V_U : component crypto_kem_all_fuLf8
    generic map (
        DataWidth => 64,
        AddressRange => 287,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pk64_V_address0,
        ce0 => pk64_V_ce0,
        q0 => pk64_V_q0,
        address1 => pk64_V_address1,
        ce1 => pk64_V_ce1,
        we1 => pk64_V_we1,
        d1 => pk64_V_d1);

    h_s_V_U : component crypto_kem_all_fuQgW
    generic map (
        DataWidth => 32,
        AddressRange => 561,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_s_V_address0,
        ce0 => h_s_V_ce0,
        q0 => h_s_V_q0,
        address1 => h_s_V_address1,
        ce1 => h_s_V_ce1,
        we1 => h_s_V_we1,
        d1 => h_s_V_d1,
        q1 => h_s_V_q1);

    store_A_V_U : component crypto_kem_all_fuRg6
    generic map (
        DataWidth => 8,
        AddressRange => 2240,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_A_V_address0,
        ce0 => store_A_V_ce0,
        q0 => store_A_V_q0,
        address1 => store_A_V_address1,
        ce1 => store_A_V_ce1,
        we1 => store_A_V_we1,
        d1 => grp_vect_mul_add_fu_824_o_V_d1,
        q1 => store_A_V_q1);

    mc_V_U : component crypto_kem_all_fuShg
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mc_V_address0,
        ce0 => mc_V_ce0,
        q0 => mc_V_q0,
        address1 => mc_V_address1,
        ce1 => mc_V_ce1,
        we1 => mc_V_we1,
        d1 => mc_V_d1,
        q1 => mc_V_q1);

    theta_V_U : component crypto_kem_all_fuThq
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => theta_V_address0,
        ce0 => theta_V_ce0,
        we0 => theta_V_we0,
        d0 => grp_shake256_512_ds_fu_963_output_V_d0,
        q0 => theta_V_q0);

    store_C_V_U : component crypto_kem_all_fuUhA
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_C_V_address0,
        ce0 => store_C_V_ce0,
        we0 => store_C_V_we0,
        d0 => grp_vect_copyresize_1_fu_1123_o_V_d0,
        q0 => store_C_V_q0);

    d_V_U : component crypto_kem_all_fuThq
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_V_address0,
        ce0 => d_V_ce0,
        we0 => d_V_we0,
        d0 => d_V_d0,
        q0 => d_V_q0);

    ct_V_U : component crypto_kem_all_fuWhU
    generic map (
        DataWidth => 8,
        AddressRange => 4481,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_hqc_ciphertext_from_s_fu_1050_ct_V_address0,
        ce0 => ct_V_ce0,
        q0 => ct_V_q0,
        address1 => ct_V_address1,
        ce1 => ct_V_ce1,
        we1 => ct_V_we1,
        d1 => grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_d1,
        q1 => ct_V_q1);

    uv2_V_U : component crypto_kem_all_fuXh4
    generic map (
        DataWidth => 8,
        AddressRange => 4433,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => uv2_V_address0,
        ce0 => uv2_V_ce0,
        q0 => uv2_V_q0,
        address1 => uv2_V_address1,
        ce1 => uv2_V_ce1,
        we1 => uv2_V_we1,
        d1 => uv2_V_d1);

    store_rs_decode_V_U : component crypto_kem_all_fuYie
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_reed_solomon_decode_fu_1016_cdw_V_address0,
        ce0 => store_rs_decode_V_ce0,
        q0 => store_rs_decode_V_q0,
        address1 => store_rs_decode_V_address1,
        ce1 => store_rs_decode_V_ce1,
        we1 => store_rs_decode_V_we1,
        d1 => store_rs_decode_V_d1);

    store_rs_encode_V_1_U : component crypto_kem_all_fuZio
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_rs_encode_V_1_address0,
        ce0 => store_rs_encode_V_1_ce0,
        q0 => store_rs_encode_V_1_q0,
        address1 => grp_reed_solomon_encode_fu_873_cdw_V_address1,
        ce1 => store_rs_encode_V_1_ce1,
        we1 => store_rs_encode_V_1_we1,
        d1 => grp_reed_solomon_encode_fu_873_cdw_V_d1,
        q1 => store_rs_encode_V_1_q1);

    store_rs_encode_V_U : component crypto_kem_all_fuZio
    generic map (
        DataWidth => 8,
        AddressRange => 46,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => store_rs_encode_V_address0,
        ce0 => store_rs_encode_V_ce0,
        q0 => store_rs_encode_V_q0,
        address1 => grp_reed_solomon_encode_fu_873_cdw_V_address1,
        ce1 => store_rs_encode_V_ce1,
        we1 => store_rs_encode_V_we1,
        d1 => grp_reed_solomon_encode_fu_873_cdw_V_d1,
        q1 => store_rs_encode_V_q1);

    grp_shake_prng_fu_790 : component shake_prng
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_prng_fu_790_ap_start,
        ap_done => grp_shake_prng_fu_790_ap_done,
        ap_idle => grp_shake_prng_fu_790_ap_idle,
        ap_ready => grp_shake_prng_fu_790_ap_ready,
        output_V_address0 => grp_shake_prng_fu_790_output_V_address0,
        output_V_ce0 => grp_shake_prng_fu_790_output_V_ce0,
        output_V_we0 => grp_shake_prng_fu_790_output_V_we0,
        output_V_d0 => grp_shake_prng_fu_790_output_V_d0,
        outlen => grp_shake_prng_fu_790_outlen,
        state_prng_V_address0 => grp_shake_prng_fu_790_state_prng_V_address0,
        state_prng_V_ce0 => grp_shake_prng_fu_790_state_prng_V_ce0,
        state_prng_V_q0 => state_prng_V_q0,
        state_prng_V_address1 => grp_shake_prng_fu_790_state_prng_V_address1,
        state_prng_V_ce1 => grp_shake_prng_fu_790_state_prng_V_ce1,
        state_prng_V_we1 => grp_shake_prng_fu_790_state_prng_V_we1,
        state_prng_V_d1 => grp_shake_prng_fu_790_state_prng_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel A
      ap_start_permute         => ap_start_A,
      ap_done_permute          => ap_done_A,
      ap_idle_permute          => ap_idle_A,
      ap_ready_permute         => ap_ready_A,
      state_V_address0_permute => state_V_address0_A,
      state_V_ce0_permute      => state_V_ce0_A,
      state_V_q0_permute       => state_V_q0_A,
      state_V_address1_permute => state_V_address1_A,
      state_V_ce1_permute      => state_V_ce1_A,
      state_V_we1_permute      => state_V_we1_A,
      state_V_d1_permute       => state_V_d1_A
      );

    grp_vect_mul_add_fu_824 : component vect_mul_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_mul_add_fu_824_ap_start,
        ap_done => grp_vect_mul_add_fu_824_ap_done,
        ap_idle => grp_vect_mul_add_fu_824_ap_idle,
        ap_ready => grp_vect_mul_add_fu_824_ap_ready,
        o_V_address0 => grp_vect_mul_add_fu_824_o_V_address0,
        o_V_ce0 => grp_vect_mul_add_fu_824_o_V_ce0,
        o_V_q0 => store_A_V_q0,
        o_V_address1 => grp_vect_mul_add_fu_824_o_V_address1,
        o_V_ce1 => grp_vect_mul_add_fu_824_o_V_ce1,
        o_V_we1 => grp_vect_mul_add_fu_824_o_V_we1,
        o_V_d1 => grp_vect_mul_add_fu_824_o_V_d1,
        a1_V_address0 => grp_vect_mul_add_fu_824_a1_V_address0,
        a1_V_ce0 => grp_vect_mul_add_fu_824_a1_V_ce0,
        a1_V_q0 => grp_vect_mul_add_fu_824_a1_V_q0,
        a2_V_address0 => grp_vect_mul_add_fu_824_a2_V_address0,
        a2_V_ce0 => grp_vect_mul_add_fu_824_a2_V_ce0,
        a2_V_q0 => h_s_V_q0,
        a2_V_address1 => grp_vect_mul_add_fu_824_a2_V_address1,
        a2_V_ce1 => grp_vect_mul_add_fu_824_a2_V_ce1,
        a2_V_q1 => h_s_V_q1,
        weight_V => grp_vect_mul_add_fu_824_weight_V,
        store_B_V_address0 => grp_vect_mul_add_fu_824_store_B_V_address0,
        store_B_V_ce0 => grp_vect_mul_add_fu_824_store_B_V_ce0,
        store_B_V_q0 => store_B_V_q0,
        store_B_V_address1 => grp_vect_mul_add_fu_824_store_B_V_address1,
        store_B_V_ce1 => grp_vect_mul_add_fu_824_store_B_V_ce1,
        store_B_V_q1 => store_B_V_q1);

    grp_reed_solomon_encode_fu_873 : component reed_solomon_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_encode_fu_873_ap_start,
        ap_done => grp_reed_solomon_encode_fu_873_ap_done,
        ap_idle => grp_reed_solomon_encode_fu_873_ap_idle,
        ap_ready => grp_reed_solomon_encode_fu_873_ap_ready,
        cdw_V_address0 => grp_reed_solomon_encode_fu_873_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_encode_fu_873_cdw_V_ce0,
        cdw_V_q0 => grp_reed_solomon_encode_fu_873_cdw_V_q0,
        cdw_V_address1 => grp_reed_solomon_encode_fu_873_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_encode_fu_873_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_encode_fu_873_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_encode_fu_873_cdw_V_d1,
        cdw_V_q1 => grp_reed_solomon_encode_fu_873_cdw_V_q1,
        store_C_V_address0 => grp_reed_solomon_encode_fu_873_store_C_V_address0,
        store_C_V_ce0 => grp_reed_solomon_encode_fu_873_store_C_V_ce0,
        store_C_V_q0 => store_C_V_q0);

    grp_reed_muller_encode_fu_892 : component reed_muller_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_encode_fu_892_ap_start,
        ap_done => grp_reed_muller_encode_fu_892_ap_done,
        ap_idle => grp_reed_muller_encode_fu_892_ap_idle,
        ap_ready => grp_reed_muller_encode_fu_892_ap_ready,
        cdw_V_address0 => grp_reed_muller_encode_fu_892_cdw_V_address0,
        cdw_V_ce0 => grp_reed_muller_encode_fu_892_cdw_V_ce0,
        cdw_V_q0 => grp_reed_muller_encode_fu_892_cdw_V_q0,
        cdw_V_address1 => grp_reed_muller_encode_fu_892_cdw_V_address1,
        cdw_V_ce1 => grp_reed_muller_encode_fu_892_cdw_V_ce1,
        cdw_V_we1 => grp_reed_muller_encode_fu_892_cdw_V_we1,
        cdw_V_d1 => grp_reed_muller_encode_fu_892_cdw_V_d1,
        msg_V_address0 => grp_reed_muller_encode_fu_892_msg_V_address0,
        msg_V_ce0 => grp_reed_muller_encode_fu_892_msg_V_ce0,
        msg_V_q0 => grp_reed_muller_encode_fu_892_msg_V_q0);

    grp_vect_add_fu_925 : component vect_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_add_fu_925_ap_start,
        ap_done => grp_vect_add_fu_925_ap_done,
        ap_idle => grp_vect_add_fu_925_ap_idle,
        ap_ready => grp_vect_add_fu_925_ap_ready,
        o_V_address0 => grp_vect_add_fu_925_o_V_address0,
        o_V_ce0 => grp_vect_add_fu_925_o_V_ce0,
        o_V_q0 => grp_vect_add_fu_925_o_V_q0,
        o_V_address1 => grp_vect_add_fu_925_o_V_address1,
        o_V_ce1 => grp_vect_add_fu_925_o_V_ce1,
        o_V_we1 => grp_vect_add_fu_925_o_V_we1,
        o_V_d1 => grp_vect_add_fu_925_o_V_d1,
        v2_V_address0 => grp_vect_add_fu_925_v2_V_address0,
        v2_V_ce0 => grp_vect_add_fu_925_v2_V_ce0,
        v2_V_q0 => store_A_V_q0);

    grp_vect_set_random_fixe_fu_949 : component vect_set_random_fixe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_fu_949_ap_start,
        ap_done => grp_vect_set_random_fixe_fu_949_ap_done,
        ap_idle => grp_vect_set_random_fixe_fu_949_ap_idle,
        ap_ready => grp_vect_set_random_fixe_fu_949_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_fu_949_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_fu_949_v_V_ce0,
        v_V_q0 => grp_vect_set_random_fixe_fu_949_v_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_fu_949_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_fu_949_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_fu_949_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_fu_949_v_V_d1,
        weight_V => grp_vect_set_random_fixe_fu_949_weight_V,
        state_seedexpander_V_2_address0 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address0,
        state_seedexpander_V_2_ce0 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce0,
        state_seedexpander_V_2_q0 => state_seedexpander_V_q0,
        state_seedexpander_V_2_address1 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address1,
        state_seedexpander_V_2_ce1 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce1,
        state_seedexpander_V_2_we1 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_we1,
        state_seedexpander_V_2_d1 => grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel B
      ap_start_permute              => ap_start_B,
      ap_done_permute               => ap_done_B,
      ap_idle_permute               => ap_idle_B,
      ap_ready_permute              => ap_ready_B,
      state_V_address0_permute      => state_V_address0_B,
      state_V_ce0_permute           => state_V_ce0_B,
      state_V_q0_permute            => state_V_q0_B,
      state_V_address1_permute      => state_V_address1_B,
      state_V_ce1_permute           => state_V_ce1_B,
      state_V_we1_permute           => state_V_we1_B,
      state_V_d1_permute            => state_V_d1_B
      );

    grp_shake256_512_ds_fu_963 : component shake256_512_ds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake256_512_ds_fu_963_ap_start,
        ap_done => grp_shake256_512_ds_fu_963_ap_done,
        ap_idle => grp_shake256_512_ds_fu_963_ap_idle,
        ap_ready => grp_shake256_512_ds_fu_963_ap_ready,
        output_V_address0 => grp_shake256_512_ds_fu_963_output_V_address0,
        output_V_ce0 => grp_shake256_512_ds_fu_963_output_V_ce0,
        output_V_we0 => grp_shake256_512_ds_fu_963_output_V_we0,
        output_V_d0 => grp_shake256_512_ds_fu_963_output_V_d0,
        input_V_address0 => grp_shake256_512_ds_fu_963_input_V_address0,
        input_V_ce0 => grp_shake256_512_ds_fu_963_input_V_ce0,
        input_V_q0 => mc_V_q0,
        input_V_address1 => grp_shake256_512_ds_fu_963_input_V_address1,
        input_V_ce1 => grp_shake256_512_ds_fu_963_input_V_ce1,
        input_V_q1 => mc_V_q1,
        inlen_V => grp_shake256_512_ds_fu_963_inlen_V,
        domain_V => grp_shake256_512_ds_fu_963_domain_V);

    grp_shake_prng_init_fu_985 : component shake_prng_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_prng_init_fu_985_ap_start,
        ap_done => grp_shake_prng_init_fu_985_ap_done,
        ap_idle => grp_shake_prng_init_fu_985_ap_idle,
        ap_ready => grp_shake_prng_init_fu_985_ap_ready,
        entropy_input_V_address0 => grp_shake_prng_init_fu_985_entropy_input_V_address0,
        entropy_input_V_ce0 => grp_shake_prng_init_fu_985_entropy_input_V_ce0,
        entropy_input_V_q0 => prng_seed_V_q0,
        enlen_V => trunc_ln45_reg_1621,
        shake_prng_state_array_V_address0 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_address0,
        shake_prng_state_array_V_ce0 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce0,
        shake_prng_state_array_V_q0 => state_prng_V_q0,
        shake_prng_state_array_V_address1 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_address1,
        shake_prng_state_array_V_ce1 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce1,
        shake_prng_state_array_V_we1 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_we1,
        shake_prng_state_array_V_d1 => grp_shake_prng_init_fu_985_shake_prng_state_array_V_d1,
	  -- Channel to KeccakF1600_StatePermute Channel C
	  ap_start_permute         => ap_start_C,
      ap_done_permute          => ap_done_C,
      ap_idle_permute          => ap_idle_C,
      ap_ready_permute         => ap_ready_C,
      state_V_address0_permute => state_V_address0_C,
      state_V_ce0_permute      => state_V_ce0_C,
      state_V_q0_permute       => state_V_q0_C,
      state_V_address1_permute => state_V_address1_C,
      state_V_ce1_permute      => state_V_ce1_C,
      state_V_we1_permute      => state_V_we1_C,
      state_V_d1_permute       => state_V_d1_C
	  );

    grp_seedexpander_mult_ty_fu_996 : component seedexpander_mult_ty
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_mult_ty_fu_996_ap_start,
        ap_done => grp_seedexpander_mult_ty_fu_996_ap_done,
        ap_idle => grp_seedexpander_mult_ty_fu_996_ap_idle,
        ap_ready => grp_seedexpander_mult_ty_fu_996_ap_ready,
        output_V_address1 => grp_seedexpander_mult_ty_fu_996_output_V_address1,
        output_V_ce1 => grp_seedexpander_mult_ty_fu_996_output_V_ce1,
        output_V_we1 => grp_seedexpander_mult_ty_fu_996_output_V_we1,
        output_V_d1 => grp_seedexpander_mult_ty_fu_996_output_V_d1,
        state_seedexpander_V_address0 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address0,
        state_seedexpander_V_ce0 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce0,
        state_seedexpander_V_q0 => state_seedexpander_V_q0,
        state_seedexpander_V_address1 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address1,
        state_seedexpander_V_ce1 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce1,
        state_seedexpander_V_we1 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_we1,
        state_seedexpander_V_d1 => grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_d1,
      -- Channel to KeccakF1600_StatePermute Channel D
      ap_start_permute         => ap_start_D,
      ap_done_permute          => ap_done_D,
      ap_idle_permute          => ap_idle_D,
      ap_ready_permute         => ap_ready_D,
      state_V_address0_permute => state_V_address0_D,
      state_V_ce0_permute      => state_V_ce0_D,
      state_V_q0_permute       => state_V_q0_D,
      state_V_address1_permute => state_V_address1_D,
      state_V_ce1_permute      => state_V_ce1_D,
      state_V_we1_permute      => state_V_we1_D,
      state_V_d1_permute       => state_V_d1_D
      );

    grp_seedexpander_init_fu_1006 : component seedexpander_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_seedexpander_init_fu_1006_ap_start,
        ap_done => grp_seedexpander_init_fu_1006_ap_done,
        ap_idle => grp_seedexpander_init_fu_1006_ap_idle,
        ap_ready => grp_seedexpander_init_fu_1006_ap_ready,
        seed_V_address0 => grp_seedexpander_init_fu_1006_seed_V_address0,
        seed_V_ce0 => grp_seedexpander_init_fu_1006_seed_V_ce0,
        seed_V_q0 => store_seeds_V_q0,
        state_V_2_address0 => grp_seedexpander_init_fu_1006_state_V_2_address0,
        state_V_2_ce0 => grp_seedexpander_init_fu_1006_state_V_2_ce0,
        state_V_2_q0 => state_seedexpander_V_q0,
        state_V_2_address1 => grp_seedexpander_init_fu_1006_state_V_2_address1,
        state_V_2_ce1 => grp_seedexpander_init_fu_1006_state_V_2_ce1,
        state_V_2_we1 => grp_seedexpander_init_fu_1006_state_V_2_we1,
        state_V_2_d1 => grp_seedexpander_init_fu_1006_state_V_2_d1,
      -- Channel to KeccakF1600_StatePermute Channel E
      ap_start_permute         => ap_start_E,
      ap_done_permute          => ap_done_E,
      ap_idle_permute          => ap_idle_E,
      ap_ready_permute         => ap_ready_E,
      state_V_address0_permute => state_V_address0_E,
      state_V_ce0_permute      => state_V_ce0_E,
      state_V_q0_permute       => state_V_q0_E,
      state_V_address1_permute => state_V_address1_E,
      state_V_ce1_permute      => state_V_ce1_E,
      state_V_we1_permute      => state_V_we1_E,
      state_V_d1_permute       => state_V_d1_E
      );

    grp_reed_solomon_decode_fu_1016 : component reed_solomon_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_solomon_decode_fu_1016_ap_start,
        ap_done => grp_reed_solomon_decode_fu_1016_ap_done,
        ap_idle => grp_reed_solomon_decode_fu_1016_ap_idle,
        ap_ready => grp_reed_solomon_decode_fu_1016_ap_ready,
        msg_V_address1 => grp_reed_solomon_decode_fu_1016_msg_V_address1,
        msg_V_ce1 => grp_reed_solomon_decode_fu_1016_msg_V_ce1,
        msg_V_we1 => grp_reed_solomon_decode_fu_1016_msg_V_we1,
        msg_V_d1 => grp_reed_solomon_decode_fu_1016_msg_V_d1,
        cdw_V_address0 => grp_reed_solomon_decode_fu_1016_cdw_V_address0,
        cdw_V_ce0 => grp_reed_solomon_decode_fu_1016_cdw_V_ce0,
        cdw_V_q0 => store_rs_decode_V_q0,
        cdw_V_address1 => grp_reed_solomon_decode_fu_1016_cdw_V_address1,
        cdw_V_ce1 => grp_reed_solomon_decode_fu_1016_cdw_V_ce1,
        cdw_V_we1 => grp_reed_solomon_decode_fu_1016_cdw_V_we1,
        cdw_V_d1 => grp_reed_solomon_decode_fu_1016_cdw_V_d1);

    grp_reed_muller_decode_fu_1043 : component reed_muller_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reed_muller_decode_fu_1043_ap_start,
        ap_done => grp_reed_muller_decode_fu_1043_ap_done,
        ap_idle => grp_reed_muller_decode_fu_1043_ap_idle,
        ap_ready => grp_reed_muller_decode_fu_1043_ap_ready,
        msg_V_address1 => grp_reed_muller_decode_fu_1043_msg_V_address1,
        msg_V_ce1 => grp_reed_muller_decode_fu_1043_msg_V_ce1,
        msg_V_we1 => grp_reed_muller_decode_fu_1043_msg_V_we1,
        msg_V_d1 => grp_reed_muller_decode_fu_1043_msg_V_d1,
        store_A_V_address0 => grp_reed_muller_decode_fu_1043_store_A_V_address0,
        store_A_V_ce0 => grp_reed_muller_decode_fu_1043_store_A_V_ce0,
        store_A_V_q0 => store_A_V_q0);

    grp_hqc_ciphertext_from_s_fu_1050 : component hqc_ciphertext_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_ciphertext_from_s_fu_1050_ap_start,
        ap_done => grp_hqc_ciphertext_from_s_fu_1050_ap_done,
        ap_idle => grp_hqc_ciphertext_from_s_fu_1050_ap_idle,
        ap_ready => grp_hqc_ciphertext_from_s_fu_1050_ap_ready,
        u_V_address1 => grp_hqc_ciphertext_from_s_fu_1050_u_V_address1,
        u_V_ce1 => grp_hqc_ciphertext_from_s_fu_1050_u_V_ce1,
        u_V_we1 => grp_hqc_ciphertext_from_s_fu_1050_u_V_we1,
        u_V_d1 => grp_hqc_ciphertext_from_s_fu_1050_u_V_d1,
        d_V_6_address0 => grp_hqc_ciphertext_from_s_fu_1050_d_V_6_address0,
        d_V_6_ce0 => grp_hqc_ciphertext_from_s_fu_1050_d_V_6_ce0,
        d_V_6_we0 => grp_hqc_ciphertext_from_s_fu_1050_d_V_6_we0,
        d_V_6_d0 => grp_hqc_ciphertext_from_s_fu_1050_d_V_6_d0,
        ct_V_address0 => grp_hqc_ciphertext_from_s_fu_1050_ct_V_address0,
        ct_V_ce0 => grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce0,
        ct_V_q0 => ct_V_q0,
        ct_V_address1 => grp_hqc_ciphertext_from_s_fu_1050_ct_V_address1,
        ct_V_ce1 => grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce1,
        ct_V_q1 => ct_V_q1);

    grp_hqc_ciphertext_to_st_fu_1060 : component hqc_ciphertext_to_st
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_ciphertext_to_st_fu_1060_ap_start,
        ap_done => grp_hqc_ciphertext_to_st_fu_1060_ap_done,
        ap_idle => grp_hqc_ciphertext_to_st_fu_1060_ap_idle,
        ap_ready => grp_hqc_ciphertext_to_st_fu_1060_ap_ready,
        u_V_address0 => grp_hqc_ciphertext_to_st_fu_1060_u_V_address0,
        u_V_ce0 => grp_hqc_ciphertext_to_st_fu_1060_u_V_ce0,
        u_V_q0 => mc_V_q0,
        d_V_4_address0 => grp_hqc_ciphertext_to_st_fu_1060_d_V_4_address0,
        d_V_4_ce0 => grp_hqc_ciphertext_to_st_fu_1060_d_V_4_ce0,
        d_V_4_q0 => d_V_q0,
        ct_V_2_address1 => grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_address1,
        ct_V_2_ce1 => grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_ce1,
        ct_V_2_we1 => grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_we1,
        ct_V_2_d1 => grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_d1);

    grp_vect_copyresize_mult_fu_1070 : component vect_copyresize_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_mult_fu_1070_ap_start,
        ap_done => grp_vect_copyresize_mult_fu_1070_ap_done,
        ap_idle => grp_vect_copyresize_mult_fu_1070_ap_idle,
        ap_ready => grp_vect_copyresize_mult_fu_1070_ap_ready,
        o_V_address1 => grp_vect_copyresize_mult_fu_1070_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_mult_fu_1070_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_mult_fu_1070_o_V_we1,
        o_V_d1 => grp_vect_copyresize_mult_fu_1070_o_V_d1,
        v_V_address0 => grp_vect_copyresize_mult_fu_1070_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_mult_fu_1070_v_V_ce0,
        v_V_q0 => mc_V_q0,
        v_V_address1 => grp_vect_copyresize_mult_fu_1070_v_V_address1,
        v_V_ce1 => grp_vect_copyresize_mult_fu_1070_v_V_ce1,
        v_V_q1 => mc_V_q1);

    grp_hqc_public_key_from_s_fu_1078 : component hqc_public_key_from_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_public_key_from_s_fu_1078_ap_start,
        ap_done => grp_hqc_public_key_from_s_fu_1078_ap_done,
        ap_idle => grp_hqc_public_key_from_s_fu_1078_ap_idle,
        ap_ready => grp_hqc_public_key_from_s_fu_1078_ap_ready,
        s_V_address0 => grp_hqc_public_key_from_s_fu_1078_s_V_address0,
        s_V_ce0 => grp_hqc_public_key_from_s_fu_1078_s_V_ce0,
        s_V_q0 => h_s_V_q0,
        s_V_address1 => grp_hqc_public_key_from_s_fu_1078_s_V_address1,
        s_V_ce1 => grp_hqc_public_key_from_s_fu_1078_s_V_ce1,
        s_V_we1 => grp_hqc_public_key_from_s_fu_1078_s_V_we1,
        s_V_d1 => grp_hqc_public_key_from_s_fu_1078_s_V_d1,
        pk64_V_address0 => grp_hqc_public_key_from_s_fu_1078_pk64_V_address0,
        pk64_V_ce0 => grp_hqc_public_key_from_s_fu_1078_pk64_V_ce0,
        pk64_V_q0 => pk64_V_q0);

    grp_hqc_public_key_from_1_fu_1086 : component hqc_public_key_from_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hqc_public_key_from_1_fu_1086_ap_start,
        ap_done => grp_hqc_public_key_from_1_fu_1086_ap_done,
        ap_idle => grp_hqc_public_key_from_1_fu_1086_ap_idle,
        ap_ready => grp_hqc_public_key_from_1_fu_1086_ap_ready,
        s_V_address0 => grp_hqc_public_key_from_1_fu_1086_s_V_address0,
        s_V_ce0 => grp_hqc_public_key_from_1_fu_1086_s_V_ce0,
        s_V_q0 => h_s_V_q0,
        s_V_address1 => grp_hqc_public_key_from_1_fu_1086_s_V_address1,
        s_V_ce1 => grp_hqc_public_key_from_1_fu_1086_s_V_ce1,
        s_V_we1 => grp_hqc_public_key_from_1_fu_1086_s_V_we1,
        s_V_d1 => grp_hqc_public_key_from_1_fu_1086_s_V_d1,
        pk_V_address0 => grp_hqc_public_key_from_1_fu_1086_pk_V_address0,
        pk_V_ce0 => grp_hqc_public_key_from_1_fu_1086_pk_V_ce0,
        pk_V_q0 => sk64_V_q0);

    grp_vect_compare_fu_1094 : component vect_compare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_fu_1094_ap_start,
        ap_done => grp_vect_compare_fu_1094_ap_done,
        ap_idle => grp_vect_compare_fu_1094_ap_idle,
        ap_ready => grp_vect_compare_fu_1094_ap_ready,
        v1_V_address0 => grp_vect_compare_fu_1094_v1_V_address0,
        v1_V_ce0 => grp_vect_compare_fu_1094_v1_V_ce0,
        v1_V_q0 => mc_V_q0,
        v1_V_offset => grp_vect_compare_fu_1094_v1_V_offset,
        v2_V_offset => grp_vect_compare_fu_1094_v2_V_offset,
        size_V_offset => grp_vect_compare_fu_1094_size_V_offset,
        uv2_V_address0 => grp_vect_compare_fu_1094_uv2_V_address0,
        uv2_V_ce0 => grp_vect_compare_fu_1094_uv2_V_ce0,
        uv2_V_q0 => uv2_V_q0,
        ap_return => grp_vect_compare_fu_1094_ap_return);

    grp_vect_set_random_fixe_1_fu_1111 : component vect_set_random_fixe_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_set_random_fixe_1_fu_1111_ap_start,
        ap_done => grp_vect_set_random_fixe_1_fu_1111_ap_done,
        ap_idle => grp_vect_set_random_fixe_1_fu_1111_ap_idle,
        ap_ready => grp_vect_set_random_fixe_1_fu_1111_ap_ready,
        v_V_address0 => grp_vect_set_random_fixe_1_fu_1111_v_V_address0,
        v_V_ce0 => grp_vect_set_random_fixe_1_fu_1111_v_V_ce0,
        v_V_q0 => store_B_V_q0,
        v_V_address1 => grp_vect_set_random_fixe_1_fu_1111_v_V_address1,
        v_V_ce1 => grp_vect_set_random_fixe_1_fu_1111_v_V_ce1,
        v_V_we1 => grp_vect_set_random_fixe_1_fu_1111_v_V_we1,
        v_V_d1 => grp_vect_set_random_fixe_1_fu_1111_v_V_d1,
        weight_V => grp_vect_set_random_fixe_1_fu_1111_weight_V,
        fixed_weight_by_coord_vector_V_address0 => grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0,
        fixed_weight_by_coord_vector_V_ce0 => grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0,
        fixed_weight_by_coord_vector_V_q0 => grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0);

    grp_vect_copyresize_1_fu_1123 : component vect_copyresize_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_1_fu_1123_ap_start,
        ap_done => grp_vect_copyresize_1_fu_1123_ap_done,
        ap_idle => grp_vect_copyresize_1_fu_1123_ap_idle,
        ap_ready => grp_vect_copyresize_1_fu_1123_ap_ready,
        o_V_address0 => grp_vect_copyresize_1_fu_1123_o_V_address0,
        o_V_ce0 => grp_vect_copyresize_1_fu_1123_o_V_ce0,
        o_V_we0 => grp_vect_copyresize_1_fu_1123_o_V_we0,
        o_V_d0 => grp_vect_copyresize_1_fu_1123_o_V_d0,
        v_V_address0 => grp_vect_copyresize_1_fu_1123_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_1_fu_1123_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_copyresize_fu_1131 : component vect_copyresize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_fu_1131_ap_start,
        ap_done => grp_vect_copyresize_fu_1131_ap_done,
        ap_idle => grp_vect_copyresize_fu_1131_ap_idle,
        ap_ready => grp_vect_copyresize_fu_1131_ap_ready,
        o_V_address1 => grp_vect_copyresize_fu_1131_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_fu_1131_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_fu_1131_o_V_we1,
        o_V_d1 => grp_vect_copyresize_fu_1131_o_V_d1,
        v_V_address0 => grp_vect_copyresize_fu_1131_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_fu_1131_v_V_ce0,
        v_V_q0 => store_A_V_q0);

    grp_vect_copyresize_2_fu_1140 : component vect_copyresize_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_copyresize_2_fu_1140_ap_start,
        ap_done => grp_vect_copyresize_2_fu_1140_ap_done,
        ap_idle => grp_vect_copyresize_2_fu_1140_ap_idle,
        ap_ready => grp_vect_copyresize_2_fu_1140_ap_ready,
        o_V_address1 => grp_vect_copyresize_2_fu_1140_o_V_address1,
        o_V_ce1 => grp_vect_copyresize_2_fu_1140_o_V_ce1,
        o_V_we1 => grp_vect_copyresize_2_fu_1140_o_V_we1,
        o_V_d1 => grp_vect_copyresize_2_fu_1140_o_V_d1,
        v_V_address0 => grp_vect_copyresize_2_fu_1140_v_V_address0,
        v_V_ce0 => grp_vect_copyresize_2_fu_1140_v_V_ce0,
        v_V_q0 => mc_V_q0);

    grp_vect_compare_64_fu_1148 : component vect_compare_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vect_compare_64_fu_1148_ap_start,
        ap_done => grp_vect_compare_64_fu_1148_ap_done,
        ap_idle => grp_vect_compare_64_fu_1148_ap_idle,
        ap_ready => grp_vect_compare_64_fu_1148_ap_ready,
        d_V_address0 => grp_vect_compare_64_fu_1148_d_V_address0,
        d_V_ce0 => grp_vect_compare_64_fu_1148_d_V_ce0,
        d_V_q0 => d_V_q0,
        theta_V_address0 => grp_vect_compare_64_fu_1148_theta_V_address0,
        theta_V_ce0 => grp_vect_compare_64_fu_1148_theta_V_ce0,
        theta_V_q0 => theta_V_q0,
        ap_return => grp_vect_compare_64_fu_1148_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_shake_prng_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                elsif (((grp_shake_prng_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((grp_vect_copyresize_1_fu_1123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state44))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state44);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((grp_vect_copyresize_1_fu_1123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state54))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state54);
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state80) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((grp_hqc_ciphertext_from_s_fu_1050_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state80))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state80);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif (((grp_hqc_ciphertext_from_s_fu_1050_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state98) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state98))) then 
                    ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state98);
                elsif ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                elsif (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                    ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state108) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state108))) then 
                    ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state108);
                elsif ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                elsif (((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_ciphertext_from_s_fu_1050_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_ciphertext_to_st_fu_1060_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_public_key_from_1_fu_1086_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_public_key_from_1_fu_1086_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                    grp_hqc_public_key_from_1_fu_1086_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_public_key_from_1_fu_1086_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_public_key_from_1_fu_1086_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hqc_public_key_from_s_fu_1078_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hqc_public_key_from_s_fu_1078_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    grp_hqc_public_key_from_s_fu_1078_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hqc_public_key_from_s_fu_1078_ap_ready = ap_const_logic_1)) then 
                    grp_hqc_public_key_from_s_fu_1078_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_decode_fu_1043_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_decode_fu_1043_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                    grp_reed_muller_decode_fu_1043_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_decode_fu_1043_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_decode_fu_1043_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_muller_encode_fu_892_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_muller_encode_fu_892_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                    grp_reed_muller_encode_fu_892_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_muller_encode_fu_892_ap_ready = ap_const_logic_1)) then 
                    grp_reed_muller_encode_fu_892_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_decode_fu_1016_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_decode_fu_1016_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                    grp_reed_solomon_decode_fu_1016_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_decode_fu_1016_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_decode_fu_1016_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reed_solomon_encode_fu_873_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reed_solomon_encode_fu_873_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    grp_reed_solomon_encode_fu_873_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reed_solomon_encode_fu_873_ap_ready = ap_const_logic_1)) then 
                    grp_reed_solomon_encode_fu_873_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_init_fu_1006_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_init_fu_1006_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                    grp_seedexpander_init_fu_1006_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_init_fu_1006_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_init_fu_1006_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_seedexpander_mult_ty_fu_996_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_seedexpander_mult_ty_fu_996_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_seedexpander_mult_ty_fu_996_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_seedexpander_mult_ty_fu_996_ap_ready = ap_const_logic_1)) then 
                    grp_seedexpander_mult_ty_fu_996_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake256_512_ds_fu_963_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake256_512_ds_fu_963_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                    grp_shake256_512_ds_fu_963_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake256_512_ds_fu_963_ap_ready = ap_const_logic_1)) then 
                    grp_shake256_512_ds_fu_963_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_prng_fu_790_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_prng_fu_790_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_shake_prng_fu_790_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_prng_fu_790_ap_ready = ap_const_logic_1)) then 
                    grp_shake_prng_fu_790_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_prng_init_fu_985_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_prng_init_fu_985_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_shake_prng_init_fu_985_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_prng_init_fu_985_ap_ready = ap_const_logic_1)) then 
                    grp_shake_prng_init_fu_985_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_add_fu_925_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_add_fu_925_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                    grp_vect_add_fu_925_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_add_fu_925_ap_ready = ap_const_logic_1)) then 
                    grp_vect_add_fu_925_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_64_fu_1148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_64_fu_1148_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                    grp_vect_compare_64_fu_1148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_64_fu_1148_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_64_fu_1148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_compare_fu_1094_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_compare_fu_1094_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state126))) then 
                    grp_vect_compare_fu_1094_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_compare_fu_1094_ap_ready = ap_const_logic_1)) then 
                    grp_vect_compare_fu_1094_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_1_fu_1123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_1_fu_1123_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    grp_vect_copyresize_1_fu_1123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_1_fu_1123_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_1_fu_1123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_2_fu_1140_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_2_fu_1140_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                    grp_vect_copyresize_2_fu_1140_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_2_fu_1140_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_2_fu_1140_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_fu_1131_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_fu_1131_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                    grp_vect_copyresize_fu_1131_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_fu_1131_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_fu_1131_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_copyresize_mult_fu_1070_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_copyresize_mult_fu_1070_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                    grp_vect_copyresize_mult_fu_1070_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_copyresize_mult_fu_1070_ap_ready = ap_const_logic_1)) then 
                    grp_vect_copyresize_mult_fu_1070_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_mul_add_fu_824_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_mul_add_fu_824_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((icmp_ln144_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
                    grp_vect_mul_add_fu_824_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_mul_add_fu_824_ap_ready = ap_const_logic_1)) then 
                    grp_vect_mul_add_fu_824_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_1_fu_1111_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_1_fu_1111_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_vect_set_random_fixe_1_fu_1111_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_1_fu_1111_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_1_fu_1111_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vect_set_random_fixe_fu_949_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vect_set_random_fixe_fu_949_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_vect_set_random_fixe_fu_949_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vect_set_random_fixe_fu_949_ap_ready = ap_const_logic_1)) then 
                    grp_vect_set_random_fixe_fu_949_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i102_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                i_0_i102_reg_768 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln284_6_fu_1554_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                i_0_i102_reg_768 <= i_8_fu_1560_p2;
            end if; 
        end if;
    end process;

    i_0_i51_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_fu_1161_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i51_reg_634 <= i_2_fu_1167_p2;
            elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i51_reg_634 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i52_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln284_1_fu_1178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_0_i52_reg_645 <= i_3_fu_1184_p2;
            elsif (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_0_i52_reg_645 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i69_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln284_2_fu_1421_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_0_i69_reg_701 <= i_4_fu_1427_p2;
            elsif (((grp_vect_copyresize_1_fu_1123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_0_i69_reg_701 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i77_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_0_i77_reg_723 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln284_3_fu_1463_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_0_i77_reg_723 <= i_5_fu_1469_p2;
            end if; 
        end if;
    end process;

    i_0_i85_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln284_4_fu_1480_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_0_i85_reg_734 <= i_6_fu_1486_p2;
            elsif (((grp_hqc_ciphertext_from_s_fu_1050_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                i_0_i85_reg_734 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i93_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln284_5_reg_1899 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                i_0_i93_reg_745 <= i_7_reg_1903;
            elsif (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                i_0_i93_reg_745 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
                i_0_i_reg_779 <= i_reg_1969;
            elsif (((grp_vect_compare_fu_1094_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state129))) then 
                i_0_i_reg_779 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0189_0_i_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                p_0189_0_i_reg_667 <= i_V_22_reg_1680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_1))) then 
                p_0189_0_i_reg_667 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_025_0_i_i_i180_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                p_025_0_i_i_i180_reg_712 <= i_V_25_fu_1457_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                p_025_0_i_i_i180_reg_712 <= ap_const_lv10_229;
            end if; 
        end if;
    end process;

    p_025_0_i_i_i195_reg_757_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                p_025_0_i_i_i195_reg_757 <= i_V_26_fu_1548_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
                p_025_0_i_i_i195_reg_757 <= ap_const_lv10_229;
            end if; 
        end if;
    end process;

    p_025_0_i_i_i_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_025_0_i_i_i_reg_656 <= i_V_fu_1214_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_025_0_i_i_i_reg_656 <= ap_const_lv10_229;
            end if; 
        end if;
    end process;

    p_047_0_i_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_047_0_i_reg_678 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_52_fu_1339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                p_047_0_i_reg_678 <= i_V_23_fu_1345_p2;
            end if; 
        end if;
    end process;

    t_V_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                t_V_reg_689 <= i_V_24_reg_1808;
            elsif (((grp_shake_prng_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                t_V_reg_689 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state113_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                cmp_d_d2_reg_1946 <= grp_vect_compare_64_fu_1148_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_1094_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                cmp_u_u2_reg_1951 <= grp_vect_compare_fu_1094_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                i_7_reg_1903 <= i_7_fu_1503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_V_22_reg_1680 <= i_V_22_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                i_V_24_reg_1808 <= i_V_24_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state130)) then
                i_reg_1969 <= i_fu_1601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln284_1_reg_1645 <= icmp_ln284_1_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln284_2_reg_1828 <= icmp_ln284_2_fu_1421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln284_3_reg_1861 <= icmp_ln284_3_fu_1463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln284_4_reg_1880 <= icmp_ln284_4_fu_1480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln284_5_reg_1899 <= icmp_ln284_5_fu_1497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                icmp_ln284_6_reg_1927 <= icmp_ln284_6_fu_1554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln284_reg_1626 <= icmp_ln284_fu_1161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln887_52_reg_1780 <= icmp_ln887_52_fu_1339_p2;
                icmp_ln887_52_reg_1780_pp3_iter1_reg <= icmp_ln887_52_reg_1780;
                ret_V_122_reg_1789_pp3_iter1_reg <= ret_V_122_reg_1789;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln887_reg_1804 <= icmp_ln887_fu_1366_p2;
                icmp_ln887_reg_1804_pp4_iter1_reg <= icmp_ln887_reg_1804;
                t_V_reg_689_pp4_iter1_reg <= t_V_reg_689;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln887_reg_1804_pp4_iter2_reg <= icmp_ln887_reg_1804_pp4_iter1_reg;
                t_V_reg_689_pp4_iter2_reg <= t_V_reg_689_pp4_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_vect_compare_fu_1094_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state129))) then
                lhs_V_reg_1961 <= lhs_V_fu_1587_p3;
                result_reg_1956 <= result_fu_1576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_52_reg_1780 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                pk64_V_load_reg_1799 <= pk64_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_51_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ret_V_121_reg_1690(11 downto 3) <= ret_V_121_fu_1238_p3(11 downto 3);
                ret_V_reg_1685 <= ret_V_fu_1232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_52_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                ret_V_122_reg_1789 <= ret_V_122_fu_1351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_1595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                ss2_V_addr_reg_1974 <= zext_ln391_fu_1607_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                store_A_V_load_1_reg_1715 <= store_A_V_q1;
                store_A_V_load_reg_1710 <= store_A_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                store_A_V_load_2_reg_1730 <= store_A_V_q0;
                store_A_V_load_3_reg_1735 <= store_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                store_A_V_load_4_reg_1750 <= store_A_V_q0;
                store_A_V_load_5_reg_1755 <= store_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                store_A_V_load_6_reg_1770 <= store_A_V_q0;
                store_A_V_load_7_reg_1775 <= store_A_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                store_seeds_V_load_reg_1818 <= store_seeds_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln45_reg_1621 <= trunc_ln45_fu_1156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                trunc_ln717_1_reg_1847 <= trunc_ln717_1_fu_1438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                trunc_ln717_2_reg_1913 <= trunc_ln717_2_fu_1529_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln717_reg_1664 <= trunc_ln717_fu_1195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1804_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                trunc_ln802_reg_1823 <= trunc_ln802_fu_1412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln284_1_fu_1178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    zext_ln285_1_reg_1654(2 downto 0) <= zext_ln285_1_fu_1190_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln284_2_fu_1421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    zext_ln285_2_reg_1837(2 downto 0) <= zext_ln285_2_fu_1433_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln284_3_fu_1463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                    zext_ln285_3_reg_1870(2 downto 0) <= zext_ln285_3_fu_1475_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln284_4_fu_1480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    zext_ln285_4_reg_1889(2 downto 0) <= zext_ln285_4_fu_1492_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln284_6_fu_1554_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                    zext_ln285_6_reg_1936(2 downto 0) <= zext_ln285_6_fu_1566_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_fu_1161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln285_reg_1635(2 downto 0) <= zext_ln285_fu_1173_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln285_reg_1635(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_1_reg_1654(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    ret_V_121_reg_1690(2 downto 0) <= "000";
    zext_ln285_2_reg_1837(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_3_reg_1870(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_4_reg_1889(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln285_6_reg_1936(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln284_fu_1161_p2, ap_enable_reg_pp0_iter0, icmp_ln284_1_fu_1178_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state22, icmp_ln144_fu_1203_p2, ap_CS_fsm_state24, icmp_ln887_51_fu_1220_p2, icmp_ln887_52_fu_1339_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, icmp_ln887_fu_1366_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, icmp_ln284_2_fu_1421_p2, ap_enable_reg_pp5_iter0, icmp_ln144_1_fu_1446_p2, ap_CS_fsm_state53, icmp_ln284_3_fu_1463_p2, ap_enable_reg_pp6_iter0, icmp_ln284_4_fu_1480_p2, ap_enable_reg_pp7_iter0, icmp_ln284_5_fu_1497_p2, ap_enable_reg_pp8_iter0, icmp_ln144_2_fu_1537_p2, ap_CS_fsm_state107, icmp_ln284_6_fu_1554_p2, ap_enable_reg_pp9_iter0, ap_CS_fsm_state113, grp_vect_set_random_fixe_fu_949_ap_done, grp_shake256_512_ds_fu_963_ap_done, ap_block_state113_on_subcall_done, ap_CS_fsm_state127, grp_vect_compare_fu_1094_ap_done, ap_CS_fsm_state129, ap_CS_fsm_state130, icmp_ln390_fu_1595_p2, ap_CS_fsm_state6, grp_seedexpander_init_fu_1006_ap_done, ap_block_pp0_stage0_subdone, ap_CS_fsm_state14, ap_block_pp1_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_CS_fsm_state35, grp_shake_prng_fu_790_ap_done, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_CS_fsm_state43, grp_vect_copyresize_1_fu_1123_ap_done, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_CS_fsm_state79, grp_hqc_ciphertext_from_s_fu_1050_ap_done, ap_block_pp7_stage0_subdone, ap_CS_fsm_state97, ap_block_pp8_stage0_subdone, ap_block_pp9_stage0_subdone, grp_vect_mul_add_fu_824_ap_done, grp_vect_add_fu_925_ap_done, grp_shake_prng_init_fu_985_ap_done, grp_seedexpander_mult_ty_fu_996_ap_done, grp_reed_solomon_decode_fu_1016_ap_done, grp_reed_muller_decode_fu_1043_ap_done, grp_hqc_ciphertext_to_st_fu_1060_ap_done, grp_vect_set_random_fixe_1_fu_1111_ap_done, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state71, ap_CS_fsm_state125, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101, ap_CS_fsm_state93, ap_CS_fsm_state91, ap_CS_fsm_state77, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115, ap_CS_fsm_state95, ap_block_state10_on_subcall_done, ap_block_state12_on_subcall_done, ap_block_state57_on_subcall_done, ap_block_state65_on_subcall_done, ap_block_state67_on_subcall_done, ap_block_state69_on_subcall_done, ap_block_state83_on_subcall_done, ap_block_state85_on_subcall_done, ap_block_state111_on_subcall_done, ap_block_state119_on_subcall_done, ap_block_state121_on_subcall_done, ap_block_state123_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_shake_prng_init_fu_985_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_shake_prng_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln284_fu_1161_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln284_fu_1161_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln284_1_fu_1178_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln284_1_fu_1178_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_seedexpander_mult_ty_fu_996_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln887_51_fu_1220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln887_52_fu_1339_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln887_52_fu_1339_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_shake_prng_fu_790_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln887_fu_1366_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln887_fu_1366_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_vect_copyresize_1_fu_1123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln284_2_fu_1421_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln284_2_fu_1421_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_seedexpander_mult_ty_fu_996_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln284_3_fu_1463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln284_3_fu_1463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_boolean_0 = ap_block_state57_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_vect_set_random_fixe_1_fu_1111_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_boolean_0 = ap_block_state65_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_boolean_0 = ap_block_state67_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_boolean_0 = ap_block_state69_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_vect_add_fu_925_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_hqc_ciphertext_to_st_fu_1060_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((grp_hqc_ciphertext_from_s_fu_1050_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln284_4_fu_1480_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln284_4_fu_1480_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((ap_const_boolean_0 = ap_block_state83_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((ap_const_boolean_0 = ap_block_state85_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_reed_muller_decode_fu_1043_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (grp_reed_solomon_decode_fu_1016_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((grp_vect_copyresize_1_fu_1123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln284_5_fu_1497_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln284_5_fu_1497_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_seedexpander_mult_ty_fu_996_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                if (((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_pp9_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (icmp_ln284_6_fu_1554_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (icmp_ln284_6_fu_1554_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                if (((ap_const_boolean_0 = ap_block_state111_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                if (((ap_const_boolean_0 = ap_block_state113_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (grp_vect_set_random_fixe_1_fu_1111_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                if (((ap_const_boolean_0 = ap_block_state119_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                if (((ap_const_boolean_0 = ap_block_state121_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state121))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                if (((ap_const_boolean_0 = ap_block_state123_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state123))) then
                    ap_NS_fsm <= ap_ST_fsm_state124;
                else
                    ap_NS_fsm <= ap_ST_fsm_state123;
                end if;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state125) and (grp_vect_add_fu_925_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state126;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                if (((grp_vect_compare_fu_1094_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                if (((grp_vect_compare_fu_1094_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state129))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                else
                    ap_NS_fsm <= ap_ST_fsm_state129;
                end if;
            when ap_ST_fsm_state130 => 
                if (((icmp_ln390_fu_1595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                    ap_NS_fsm <= ap_ST_fsm_state131;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln321_fu_1513_p2 <= std_logic_vector(unsigned(zext_ln321_fu_1509_p1) + unsigned(ap_const_lv4_5));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(36);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(70);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(87);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(96);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state100 <= ap_CS_fsm(88);
    ap_CS_fsm_state101 <= ap_CS_fsm(89);
    ap_CS_fsm_state102 <= ap_CS_fsm(90);
    ap_CS_fsm_state103 <= ap_CS_fsm(91);
    ap_CS_fsm_state104 <= ap_CS_fsm(92);
    ap_CS_fsm_state105 <= ap_CS_fsm(93);
    ap_CS_fsm_state106 <= ap_CS_fsm(94);
    ap_CS_fsm_state107 <= ap_CS_fsm(95);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state110 <= ap_CS_fsm(97);
    ap_CS_fsm_state111 <= ap_CS_fsm(98);
    ap_CS_fsm_state112 <= ap_CS_fsm(99);
    ap_CS_fsm_state113 <= ap_CS_fsm(100);
    ap_CS_fsm_state114 <= ap_CS_fsm(101);
    ap_CS_fsm_state115 <= ap_CS_fsm(102);
    ap_CS_fsm_state116 <= ap_CS_fsm(103);
    ap_CS_fsm_state117 <= ap_CS_fsm(104);
    ap_CS_fsm_state118 <= ap_CS_fsm(105);
    ap_CS_fsm_state119 <= ap_CS_fsm(106);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state120 <= ap_CS_fsm(107);
    ap_CS_fsm_state121 <= ap_CS_fsm(108);
    ap_CS_fsm_state122 <= ap_CS_fsm(109);
    ap_CS_fsm_state123 <= ap_CS_fsm(110);
    ap_CS_fsm_state124 <= ap_CS_fsm(111);
    ap_CS_fsm_state125 <= ap_CS_fsm(112);
    ap_CS_fsm_state126 <= ap_CS_fsm(113);
    ap_CS_fsm_state127 <= ap_CS_fsm(114);
    ap_CS_fsm_state128 <= ap_CS_fsm(115);
    ap_CS_fsm_state129 <= ap_CS_fsm(116);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state130 <= ap_CS_fsm(117);
    ap_CS_fsm_state131 <= ap_CS_fsm(118);
    ap_CS_fsm_state132 <= ap_CS_fsm(119);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(32);
    ap_CS_fsm_state41 <= ap_CS_fsm(33);
    ap_CS_fsm_state42 <= ap_CS_fsm(34);
    ap_CS_fsm_state43 <= ap_CS_fsm(35);
    ap_CS_fsm_state46 <= ap_CS_fsm(37);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state48 <= ap_CS_fsm(39);
    ap_CS_fsm_state49 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(41);
    ap_CS_fsm_state51 <= ap_CS_fsm(42);
    ap_CS_fsm_state52 <= ap_CS_fsm(43);
    ap_CS_fsm_state53 <= ap_CS_fsm(44);
    ap_CS_fsm_state56 <= ap_CS_fsm(46);
    ap_CS_fsm_state57 <= ap_CS_fsm(47);
    ap_CS_fsm_state58 <= ap_CS_fsm(48);
    ap_CS_fsm_state59 <= ap_CS_fsm(49);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(50);
    ap_CS_fsm_state61 <= ap_CS_fsm(51);
    ap_CS_fsm_state62 <= ap_CS_fsm(52);
    ap_CS_fsm_state63 <= ap_CS_fsm(53);
    ap_CS_fsm_state64 <= ap_CS_fsm(54);
    ap_CS_fsm_state65 <= ap_CS_fsm(55);
    ap_CS_fsm_state66 <= ap_CS_fsm(56);
    ap_CS_fsm_state67 <= ap_CS_fsm(57);
    ap_CS_fsm_state68 <= ap_CS_fsm(58);
    ap_CS_fsm_state69 <= ap_CS_fsm(59);
    ap_CS_fsm_state70 <= ap_CS_fsm(60);
    ap_CS_fsm_state71 <= ap_CS_fsm(61);
    ap_CS_fsm_state72 <= ap_CS_fsm(62);
    ap_CS_fsm_state73 <= ap_CS_fsm(63);
    ap_CS_fsm_state74 <= ap_CS_fsm(64);
    ap_CS_fsm_state75 <= ap_CS_fsm(65);
    ap_CS_fsm_state76 <= ap_CS_fsm(66);
    ap_CS_fsm_state77 <= ap_CS_fsm(67);
    ap_CS_fsm_state78 <= ap_CS_fsm(68);
    ap_CS_fsm_state79 <= ap_CS_fsm(69);
    ap_CS_fsm_state82 <= ap_CS_fsm(71);
    ap_CS_fsm_state83 <= ap_CS_fsm(72);
    ap_CS_fsm_state84 <= ap_CS_fsm(73);
    ap_CS_fsm_state85 <= ap_CS_fsm(74);
    ap_CS_fsm_state86 <= ap_CS_fsm(75);
    ap_CS_fsm_state87 <= ap_CS_fsm(76);
    ap_CS_fsm_state88 <= ap_CS_fsm(77);
    ap_CS_fsm_state89 <= ap_CS_fsm(78);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
    ap_CS_fsm_state90 <= ap_CS_fsm(79);
    ap_CS_fsm_state91 <= ap_CS_fsm(80);
    ap_CS_fsm_state92 <= ap_CS_fsm(81);
    ap_CS_fsm_state93 <= ap_CS_fsm(82);
    ap_CS_fsm_state94 <= ap_CS_fsm(83);
    ap_CS_fsm_state95 <= ap_CS_fsm(84);
    ap_CS_fsm_state96 <= ap_CS_fsm(85);
    ap_CS_fsm_state97 <= ap_CS_fsm(86);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_shake_prng_fu_790_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_shake_prng_fu_790_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0));
    end process;


    ap_block_state111_on_subcall_done_assign_proc : process(grp_shake256_512_ds_fu_963_ap_done, grp_seedexpander_init_fu_1006_ap_done, grp_reed_solomon_encode_fu_873_ap_done)
    begin
                ap_block_state111_on_subcall_done <= ((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_873_ap_done = ap_const_logic_0));
    end process;


    ap_block_state113_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_shake256_512_ds_fu_963_ap_done, grp_vect_compare_64_fu_1148_ap_done)
    begin
                ap_block_state113_on_subcall_done <= ((grp_vect_compare_64_fu_1148_ap_done = ap_const_logic_0) or (grp_shake256_512_ds_fu_963_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0));
    end process;


    ap_block_state119_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_vect_mul_add_fu_824_ap_done)
    begin
                ap_block_state119_on_subcall_done <= ((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_0));
    end process;


    ap_block_state121_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_1_fu_1086_ap_done, grp_vect_set_random_fixe_1_fu_1111_ap_done, grp_vect_copyresize_fu_1131_ap_done)
    begin
                ap_block_state121_on_subcall_done <= ((grp_vect_copyresize_fu_1131_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_1111_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_1_fu_1086_ap_done = ap_const_logic_0));
    end process;


    ap_block_state123_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_824_ap_done, grp_reed_muller_encode_fu_892_ap_done)
    begin
                ap_block_state123_on_subcall_done <= ((grp_reed_muller_encode_fu_892_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_0));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_vect_set_random_fixe_1_fu_1111_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_1111_ap_done = ap_const_logic_0));
    end process;

        ap_block_state15_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state57_on_subcall_done_assign_proc : process(grp_seedexpander_init_fu_1006_ap_done, grp_reed_solomon_encode_fu_873_ap_done)
    begin
                ap_block_state57_on_subcall_done <= ((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_0) or (grp_reed_solomon_encode_fu_873_ap_done = ap_const_logic_0));
    end process;


    ap_block_state65_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_vect_mul_add_fu_824_ap_done)
    begin
                ap_block_state65_on_subcall_done <= ((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_0));
    end process;


    ap_block_state67_on_subcall_done_assign_proc : process(grp_hqc_public_key_from_s_fu_1078_ap_done, grp_vect_set_random_fixe_1_fu_1111_ap_done, grp_vect_copyresize_fu_1131_ap_done)
    begin
                ap_block_state67_on_subcall_done <= ((grp_vect_copyresize_fu_1131_ap_done = ap_const_logic_0) or (grp_vect_set_random_fixe_1_fu_1111_ap_done = ap_const_logic_0) or (grp_hqc_public_key_from_s_fu_1078_ap_done = ap_const_logic_0));
    end process;


    ap_block_state69_on_subcall_done_assign_proc : process(grp_vect_mul_add_fu_824_ap_done, grp_reed_muller_encode_fu_892_ap_done)
    begin
                ap_block_state69_on_subcall_done <= ((grp_reed_muller_encode_fu_892_ap_done = ap_const_logic_0) or (grp_vect_mul_add_fu_824_ap_done = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state83_on_subcall_done_assign_proc : process(grp_seedexpander_init_fu_1006_ap_done, grp_vect_copyresize_mult_fu_1070_ap_done)
    begin
                ap_block_state83_on_subcall_done <= ((grp_seedexpander_init_fu_1006_ap_done = ap_const_logic_0) or (grp_vect_copyresize_mult_fu_1070_ap_done = ap_const_logic_0));
    end process;


    ap_block_state85_on_subcall_done_assign_proc : process(grp_vect_set_random_fixe_fu_949_ap_done, grp_vect_copyresize_2_fu_1140_ap_done)
    begin
                ap_block_state85_on_subcall_done <= ((grp_vect_set_random_fixe_fu_949_ap_done = ap_const_logic_0) or (grp_vect_copyresize_2_fu_1140_ap_done = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln284_fu_1161_p2)
    begin
        if ((icmp_ln284_fu_1161_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state15_assign_proc : process(icmp_ln284_1_fu_1178_p2)
    begin
        if ((icmp_ln284_1_fu_1178_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state31_assign_proc : process(icmp_ln887_52_fu_1339_p2)
    begin
        if ((icmp_ln887_52_fu_1339_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state36_assign_proc : process(icmp_ln887_fu_1366_p2)
    begin
        if ((icmp_ln887_fu_1366_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state44_assign_proc : process(icmp_ln284_2_fu_1421_p2)
    begin
        if ((icmp_ln284_2_fu_1421_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state54_assign_proc : process(icmp_ln284_3_fu_1463_p2)
    begin
        if ((icmp_ln284_3_fu_1463_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state80_assign_proc : process(icmp_ln284_4_fu_1480_p2)
    begin
        if ((icmp_ln284_4_fu_1480_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state80 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state98_assign_proc : process(icmp_ln284_5_fu_1497_p2)
    begin
        if ((icmp_ln284_5_fu_1497_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state98 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state98 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state108_assign_proc : process(icmp_ln284_6_fu_1554_p2)
    begin
        if ((icmp_ln284_6_fu_1554_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state108 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state108 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i93_phi_fu_749_p4_assign_proc : process(i_0_i93_reg_745, icmp_ln284_5_reg_1899, ap_CS_fsm_pp8_stage0, i_7_reg_1903, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0)
    begin
        if (((icmp_ln284_5_reg_1899 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            ap_phi_mux_i_0_i93_phi_fu_749_p4 <= i_7_reg_1903;
        else 
            ap_phi_mux_i_0_i93_phi_fu_749_p4 <= i_0_i93_reg_745;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_693_p4_assign_proc : process(t_V_reg_689, ap_CS_fsm_pp4_stage0, icmp_ln887_reg_1804, i_V_24_reg_1808, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((icmp_ln887_reg_1804 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_t_V_phi_fu_693_p4 <= i_V_24_reg_1808;
        else 
            ap_phi_mux_t_V_phi_fu_693_p4 <= t_V_reg_689;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_reg_1956),32));

    ct_V_address1_assign_proc : process(ap_CS_fsm_state79, grp_hqc_ciphertext_from_s_fu_1050_ct_V_address1, grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_address1, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ct_V_address1 <= grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            ct_V_address1 <= grp_hqc_ciphertext_from_s_fu_1050_ct_V_address1;
        else 
            ct_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_V_ce0_assign_proc : process(ap_CS_fsm_state79, grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            ct_V_ce0 <= grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce0;
        else 
            ct_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_ce1_assign_proc : process(ap_CS_fsm_state79, grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce1, grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_ce1, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ct_V_ce1 <= grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            ct_V_ce1 <= grp_hqc_ciphertext_from_s_fu_1050_ct_V_ce1;
        else 
            ct_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_we1_assign_proc : process(grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_we1, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ct_V_we1 <= grp_hqc_ciphertext_to_st_fu_1060_ct_V_2_we1;
        else 
            ct_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    d_V_address0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state79, grp_shake256_512_ds_fu_963_output_V_address0, grp_hqc_ciphertext_from_s_fu_1050_d_V_6_address0, grp_hqc_ciphertext_to_st_fu_1060_d_V_4_address0, grp_vect_compare_64_fu_1148_d_V_address0, ap_CS_fsm_state73, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            d_V_address0 <= grp_vect_compare_64_fu_1148_d_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            d_V_address0 <= grp_hqc_ciphertext_to_st_fu_1060_d_V_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            d_V_address0 <= grp_hqc_ciphertext_from_s_fu_1050_d_V_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            d_V_address0 <= grp_shake256_512_ds_fu_963_output_V_address0;
        else 
            d_V_address0 <= "XXX";
        end if; 
    end process;


    d_V_ce0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state79, grp_shake256_512_ds_fu_963_output_V_ce0, grp_hqc_ciphertext_from_s_fu_1050_d_V_6_ce0, grp_hqc_ciphertext_to_st_fu_1060_d_V_4_ce0, grp_vect_compare_64_fu_1148_d_V_ce0, ap_CS_fsm_state73, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            d_V_ce0 <= grp_vect_compare_64_fu_1148_d_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            d_V_ce0 <= grp_hqc_ciphertext_to_st_fu_1060_d_V_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            d_V_ce0 <= grp_hqc_ciphertext_from_s_fu_1050_d_V_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            d_V_ce0 <= grp_shake256_512_ds_fu_963_output_V_ce0;
        else 
            d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_V_d0_assign_proc : process(ap_CS_fsm_state79, grp_shake256_512_ds_fu_963_output_V_d0, grp_hqc_ciphertext_from_s_fu_1050_d_V_6_d0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            d_V_d0 <= grp_hqc_ciphertext_from_s_fu_1050_d_V_6_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            d_V_d0 <= grp_shake256_512_ds_fu_963_output_V_d0;
        else 
            d_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_V_we0_assign_proc : process(ap_CS_fsm_state79, grp_shake256_512_ds_fu_963_output_V_we0, grp_hqc_ciphertext_from_s_fu_1050_d_V_6_we0, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            d_V_we0 <= grp_hqc_ciphertext_from_s_fu_1050_d_V_6_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            d_V_we0 <= grp_shake256_512_ds_fu_963_output_V_we0;
        else 
            d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_hqc_ciphertext_from_s_fu_1050_ap_start <= grp_hqc_ciphertext_from_s_fu_1050_ap_start_reg;
    grp_hqc_ciphertext_to_st_fu_1060_ap_start <= grp_hqc_ciphertext_to_st_fu_1060_ap_start_reg;
    grp_hqc_public_key_from_1_fu_1086_ap_start <= grp_hqc_public_key_from_1_fu_1086_ap_start_reg;
    grp_hqc_public_key_from_s_fu_1078_ap_start <= grp_hqc_public_key_from_s_fu_1078_ap_start_reg;
    grp_reed_muller_decode_fu_1043_ap_start <= grp_reed_muller_decode_fu_1043_ap_start_reg;
    grp_reed_muller_encode_fu_892_ap_start <= grp_reed_muller_encode_fu_892_ap_start_reg;

    grp_reed_muller_encode_fu_892_cdw_V_q0_assign_proc : process(mc_V_q0, uv2_V_q0, ap_CS_fsm_state69, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            grp_reed_muller_encode_fu_892_cdw_V_q0 <= uv2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_reed_muller_encode_fu_892_cdw_V_q0 <= mc_V_q0;
        else 
            grp_reed_muller_encode_fu_892_cdw_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_reed_muller_encode_fu_892_msg_V_q0_assign_proc : process(store_rs_encode_V_1_q0, store_rs_encode_V_q0, ap_CS_fsm_state69, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            grp_reed_muller_encode_fu_892_msg_V_q0 <= store_rs_encode_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_reed_muller_encode_fu_892_msg_V_q0 <= store_rs_encode_V_q0;
        else 
            grp_reed_muller_encode_fu_892_msg_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_reed_solomon_decode_fu_1016_ap_start <= grp_reed_solomon_decode_fu_1016_ap_start_reg;
    grp_reed_solomon_encode_fu_873_ap_start <= grp_reed_solomon_encode_fu_873_ap_start_reg;

    grp_reed_solomon_encode_fu_873_cdw_V_q0_assign_proc : process(store_rs_encode_V_1_q0, store_rs_encode_V_q0, ap_CS_fsm_state57, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_reed_solomon_encode_fu_873_cdw_V_q0 <= store_rs_encode_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_reed_solomon_encode_fu_873_cdw_V_q0 <= store_rs_encode_V_q0;
        else 
            grp_reed_solomon_encode_fu_873_cdw_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_reed_solomon_encode_fu_873_cdw_V_q1_assign_proc : process(store_rs_encode_V_1_q1, store_rs_encode_V_q1, ap_CS_fsm_state57, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_reed_solomon_encode_fu_873_cdw_V_q1 <= store_rs_encode_V_1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_reed_solomon_encode_fu_873_cdw_V_q1 <= store_rs_encode_V_q1;
        else 
            grp_reed_solomon_encode_fu_873_cdw_V_q1 <= "XXXXXXXX";
        end if; 
    end process;

    grp_seedexpander_init_fu_1006_ap_start <= grp_seedexpander_init_fu_1006_ap_start_reg;
    grp_seedexpander_mult_ty_fu_996_ap_start <= grp_seedexpander_mult_ty_fu_996_ap_start_reg;
    grp_shake256_512_ds_fu_963_ap_start <= grp_shake256_512_ds_fu_963_ap_start_reg;

    grp_shake256_512_ds_fu_963_domain_V_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state97, ap_CS_fsm_state111, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_shake256_512_ds_fu_963_domain_V <= ap_const_lv4_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_shake256_512_ds_fu_963_domain_V <= ap_const_lv4_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_shake256_512_ds_fu_963_domain_V <= ap_const_lv4_3;
        else 
            grp_shake256_512_ds_fu_963_domain_V <= "XXXX";
        end if; 
    end process;


    grp_shake256_512_ds_fu_963_inlen_V_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state97, ap_CS_fsm_state111, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_shake256_512_ds_fu_963_inlen_V <= ap_const_lv14_1151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_shake256_512_ds_fu_963_inlen_V <= ap_const_lv14_10;
        else 
            grp_shake256_512_ds_fu_963_inlen_V <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_shake_prng_fu_790_ap_start <= grp_shake_prng_fu_790_ap_start_reg;

    grp_shake_prng_fu_790_outlen_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_shake_prng_fu_790_outlen <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_shake_prng_fu_790_outlen <= ap_const_lv4_5;
        else 
            grp_shake_prng_fu_790_outlen <= "XXXX";
        end if; 
    end process;

    grp_shake_prng_init_fu_985_ap_start <= grp_shake_prng_init_fu_985_ap_start_reg;
    grp_vect_add_fu_925_ap_start <= grp_vect_add_fu_925_ap_start_reg;

    grp_vect_add_fu_925_o_V_q0_assign_proc : process(mc_V_q0, uv2_V_q0, ap_CS_fsm_state71, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_vect_add_fu_925_o_V_q0 <= uv2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_vect_add_fu_925_o_V_q0 <= mc_V_q0;
        else 
            grp_vect_add_fu_925_o_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_vect_compare_64_fu_1148_ap_start <= grp_vect_compare_64_fu_1148_ap_start_reg;
    grp_vect_compare_fu_1094_ap_start <= grp_vect_compare_fu_1094_ap_start_reg;

    grp_vect_compare_fu_1094_size_V_offset_assign_proc : process(ap_CS_fsm_state127, ap_CS_fsm_state129)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            grp_vect_compare_fu_1094_size_V_offset <= ap_const_lv12_8A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            grp_vect_compare_fu_1094_size_V_offset <= ap_const_lv12_8A1;
        else 
            grp_vect_compare_fu_1094_size_V_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_1094_v1_V_offset_assign_proc : process(ap_CS_fsm_state127, ap_CS_fsm_state129)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            grp_vect_compare_fu_1094_v1_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            grp_vect_compare_fu_1094_v1_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_1094_v1_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_compare_fu_1094_v2_V_offset_assign_proc : process(ap_CS_fsm_state127, ap_CS_fsm_state129)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            grp_vect_compare_fu_1094_v2_V_offset <= ap_const_lv13_8B1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            grp_vect_compare_fu_1094_v2_V_offset <= ap_const_lv13_10;
        else 
            grp_vect_compare_fu_1094_v2_V_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_copyresize_1_fu_1123_ap_start <= grp_vect_copyresize_1_fu_1123_ap_start_reg;
    grp_vect_copyresize_2_fu_1140_ap_start <= grp_vect_copyresize_2_fu_1140_ap_start_reg;
    grp_vect_copyresize_fu_1131_ap_start <= grp_vect_copyresize_fu_1131_ap_start_reg;
    grp_vect_copyresize_mult_fu_1070_ap_start <= grp_vect_copyresize_mult_fu_1070_ap_start_reg;

    grp_vect_mul_add_fu_824_a1_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_vect_mul_add_fu_824_a1_V_q0 <= random_vector_A_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_vect_mul_add_fu_824_a1_V_q0 <= random_vector_B_V_q0;
        else 
            grp_vect_mul_add_fu_824_a1_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vect_mul_add_fu_824_ap_start <= grp_vect_mul_add_fu_824_ap_start_reg;

    grp_vect_mul_add_fu_824_weight_V_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_vect_mul_add_fu_824_weight_V <= ap_const_lv8_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_vect_mul_add_fu_824_weight_V <= ap_const_lv8_42;
        else 
            grp_vect_mul_add_fu_824_weight_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_1_fu_1111_ap_start <= grp_vect_set_random_fixe_1_fu_1111_ap_start_reg;

    grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0 <= random_vector_B_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_set_random_fixe_1_fu_1111_weight_V_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_vect_set_random_fixe_1_fu_1111_weight_V <= ap_const_lv7_4B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_vect_set_random_fixe_1_fu_1111_weight_V <= ap_const_lv7_42;
        else 
            grp_vect_set_random_fixe_1_fu_1111_weight_V <= "XXXXXXX";
        end if; 
    end process;

    grp_vect_set_random_fixe_fu_949_ap_start <= grp_vect_set_random_fixe_fu_949_ap_start_reg;

    grp_vect_set_random_fixe_fu_949_v_V_q0_assign_proc : process(random_vector_A_V_q0, random_vector_B_V_q0, ap_CS_fsm_state113, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_vect_set_random_fixe_fu_949_v_V_q0 <= random_vector_B_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_vect_set_random_fixe_fu_949_v_V_q0 <= random_vector_A_V_q0;
        else 
            grp_vect_set_random_fixe_fu_949_v_V_q0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vect_set_random_fixe_fu_949_weight_V_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_vect_set_random_fixe_fu_949_weight_V <= ap_const_lv7_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_vect_set_random_fixe_fu_949_weight_V <= ap_const_lv7_42;
        else 
            grp_vect_set_random_fixe_fu_949_weight_V <= "XXXXXXX";
        end if; 
    end process;


    h_s_V_address0_assign_proc : process(grp_vect_mul_add_fu_824_a2_V_address0, grp_hqc_public_key_from_s_fu_1078_s_V_address0, grp_hqc_public_key_from_1_fu_1086_s_V_address0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state19, ap_CS_fsm_state50, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            h_s_V_address0 <= ap_const_lv10_228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_address0 <= grp_hqc_public_key_from_1_fu_1086_s_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_address0 <= grp_hqc_public_key_from_s_fu_1078_s_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            h_s_V_address0 <= grp_vect_mul_add_fu_824_a2_V_address0;
        else 
            h_s_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_s_V_address1_assign_proc : process(ap_CS_fsm_state22, icmp_ln144_fu_1203_p2, ap_CS_fsm_state53, ap_CS_fsm_state107, grp_vect_mul_add_fu_824_a2_V_address1, grp_seedexpander_mult_ty_fu_996_output_V_address1, grp_vect_copyresize_mult_fu_1070_o_V_address1, grp_hqc_public_key_from_s_fu_1078_s_V_address1, grp_hqc_public_key_from_1_fu_1086_s_V_address1, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state52, ap_CS_fsm_state106, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state83, ap_CS_fsm_state67, ap_CS_fsm_state121, zext_ln544_fu_1209_p1, zext_ln544_92_fu_1452_p1, zext_ln544_93_fu_1543_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            h_s_V_address1 <= zext_ln544_93_fu_1543_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            h_s_V_address1 <= zext_ln544_92_fu_1452_p1(10 - 1 downto 0);
        elsif (((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            h_s_V_address1 <= zext_ln544_fu_1209_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            h_s_V_address1 <= ap_const_lv10_228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_address1 <= grp_hqc_public_key_from_1_fu_1086_s_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_address1 <= grp_hqc_public_key_from_s_fu_1078_s_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            h_s_V_address1 <= grp_vect_copyresize_mult_fu_1070_o_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            h_s_V_address1 <= grp_seedexpander_mult_ty_fu_996_output_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            h_s_V_address1 <= grp_vect_mul_add_fu_824_a2_V_address1;
        else 
            h_s_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_s_V_ce0_assign_proc : process(grp_vect_mul_add_fu_824_a2_V_ce0, grp_hqc_public_key_from_s_fu_1078_s_V_ce0, grp_hqc_public_key_from_1_fu_1086_s_V_ce0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state19, ap_CS_fsm_state50, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            h_s_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_ce0 <= grp_hqc_public_key_from_1_fu_1086_s_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_ce0 <= grp_hqc_public_key_from_s_fu_1078_s_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            h_s_V_ce0 <= grp_vect_mul_add_fu_824_a2_V_ce0;
        else 
            h_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_ce1_assign_proc : process(ap_CS_fsm_state22, icmp_ln144_fu_1203_p2, ap_CS_fsm_state53, ap_CS_fsm_state107, grp_vect_mul_add_fu_824_a2_V_ce1, grp_seedexpander_mult_ty_fu_996_output_V_ce1, grp_vect_copyresize_mult_fu_1070_o_V_ce1, grp_hqc_public_key_from_s_fu_1078_s_V_ce1, grp_hqc_public_key_from_1_fu_1086_s_V_ce1, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state52, ap_CS_fsm_state106, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state83, ap_CS_fsm_state67, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            h_s_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_ce1 <= grp_hqc_public_key_from_1_fu_1086_s_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_ce1 <= grp_hqc_public_key_from_s_fu_1078_s_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            h_s_V_ce1 <= grp_vect_copyresize_mult_fu_1070_o_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            h_s_V_ce1 <= grp_seedexpander_mult_ty_fu_996_output_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            h_s_V_ce1 <= grp_vect_mul_add_fu_824_a2_V_ce1;
        else 
            h_s_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_s_V_d1_assign_proc : process(ap_CS_fsm_state22, icmp_ln144_fu_1203_p2, ap_CS_fsm_state53, ap_CS_fsm_state107, grp_seedexpander_mult_ty_fu_996_output_V_d1, grp_vect_copyresize_mult_fu_1070_o_V_d1, grp_hqc_public_key_from_s_fu_1078_s_V_d1, grp_hqc_public_key_from_1_fu_1086_s_V_d1, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state106, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state83, ap_CS_fsm_state67, ap_CS_fsm_state121, zext_ln717_fu_1199_p1, zext_ln717_1_fu_1442_p1, zext_ln717_2_fu_1533_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            h_s_V_d1 <= zext_ln717_2_fu_1533_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            h_s_V_d1 <= zext_ln717_1_fu_1442_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state53) or ((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            h_s_V_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            h_s_V_d1 <= zext_ln717_fu_1199_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_d1 <= grp_hqc_public_key_from_1_fu_1086_s_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_d1 <= grp_hqc_public_key_from_s_fu_1078_s_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            h_s_V_d1 <= grp_vect_copyresize_mult_fu_1070_o_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            h_s_V_d1 <= grp_seedexpander_mult_ty_fu_996_output_V_d1;
        else 
            h_s_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_s_V_we1_assign_proc : process(ap_CS_fsm_state22, icmp_ln144_fu_1203_p2, icmp_ln144_1_fu_1446_p2, ap_CS_fsm_state53, icmp_ln144_2_fu_1537_p2, ap_CS_fsm_state107, grp_seedexpander_mult_ty_fu_996_output_V_we1, grp_vect_copyresize_mult_fu_1070_o_V_we1, grp_hqc_public_key_from_s_fu_1078_s_V_we1, grp_hqc_public_key_from_1_fu_1086_s_V_we1, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state106, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state83, ap_CS_fsm_state67, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln144_2_fu_1537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((icmp_ln144_1_fu_1446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((icmp_ln144_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            h_s_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            h_s_V_we1 <= grp_hqc_public_key_from_1_fu_1086_s_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            h_s_V_we1 <= grp_hqc_public_key_from_s_fu_1078_s_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            h_s_V_we1 <= grp_vect_copyresize_mult_fu_1070_o_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            h_s_V_we1 <= grp_seedexpander_mult_ty_fu_996_output_V_we1;
        else 
            h_s_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_1167_p2 <= std_logic_vector(unsigned(i_0_i51_reg_634) + unsigned(ap_const_lv3_1));
    i_3_fu_1184_p2 <= std_logic_vector(unsigned(i_0_i52_reg_645) + unsigned(ap_const_lv3_1));
    i_4_fu_1427_p2 <= std_logic_vector(unsigned(i_0_i69_reg_701) + unsigned(ap_const_lv3_1));
    i_5_fu_1469_p2 <= std_logic_vector(unsigned(i_0_i77_reg_723) + unsigned(ap_const_lv3_1));
    i_6_fu_1486_p2 <= std_logic_vector(unsigned(i_0_i85_reg_734) + unsigned(ap_const_lv3_1));
    i_7_fu_1503_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i93_phi_fu_749_p4) + unsigned(ap_const_lv3_1));
    i_8_fu_1560_p2 <= std_logic_vector(unsigned(i_0_i102_reg_768) + unsigned(ap_const_lv3_1));
    i_V_22_fu_1226_p2 <= std_logic_vector(unsigned(p_0189_0_i_reg_667) + unsigned(ap_const_lv9_1));
    i_V_23_fu_1345_p2 <= std_logic_vector(unsigned(p_047_0_i_reg_678) + unsigned(ap_const_lv9_1));
    i_V_24_fu_1372_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_phi_fu_693_p4) + unsigned(ap_const_lv5_1));
    i_V_25_fu_1457_p2 <= std_logic_vector(unsigned(p_025_0_i_i_i180_reg_712) + unsigned(ap_const_lv10_1));
    i_V_26_fu_1548_p2 <= std_logic_vector(unsigned(p_025_0_i_i_i195_reg_757) + unsigned(ap_const_lv10_1));
    i_V_fu_1214_p2 <= std_logic_vector(unsigned(p_025_0_i_i_i_reg_656) + unsigned(ap_const_lv10_1));
    i_fu_1601_p2 <= std_logic_vector(unsigned(i_0_i_reg_779) + unsigned(ap_const_lv4_1));
    icmp_ln144_1_fu_1446_p2 <= "1" when (p_025_0_i_i_i180_reg_712 = ap_const_lv10_231) else "0";
    icmp_ln144_2_fu_1537_p2 <= "1" when (p_025_0_i_i_i195_reg_757 = ap_const_lv10_231) else "0";
    icmp_ln144_fu_1203_p2 <= "1" when (p_025_0_i_i_i_reg_656 = ap_const_lv10_231) else "0";
    icmp_ln284_1_fu_1178_p2 <= "1" when (i_0_i52_reg_645 = ap_const_lv3_5) else "0";
    icmp_ln284_2_fu_1421_p2 <= "1" when (i_0_i69_reg_701 = ap_const_lv3_5) else "0";
    icmp_ln284_3_fu_1463_p2 <= "1" when (i_0_i77_reg_723 = ap_const_lv3_5) else "0";
    icmp_ln284_4_fu_1480_p2 <= "1" when (i_0_i85_reg_734 = ap_const_lv3_5) else "0";
    icmp_ln284_5_fu_1497_p2 <= "1" when (ap_phi_mux_i_0_i93_phi_fu_749_p4 = ap_const_lv3_5) else "0";
    icmp_ln284_6_fu_1554_p2 <= "1" when (i_0_i102_reg_768 = ap_const_lv3_5) else "0";
    icmp_ln284_fu_1161_p2 <= "1" when (i_0_i51_reg_634 = ap_const_lv3_5) else "0";
    icmp_ln390_fu_1595_p2 <= "1" when (i_0_i_reg_779 = ap_const_lv4_8) else "0";
    icmp_ln887_51_fu_1220_p2 <= "1" when (p_0189_0_i_reg_667 = ap_const_lv9_115) else "0";
    icmp_ln887_52_fu_1339_p2 <= "1" when (p_047_0_i_reg_678 = ap_const_lv9_11A) else "0";
    icmp_ln887_fu_1366_p2 <= "1" when (ap_phi_mux_t_V_phi_fu_693_p4 = ap_const_lv5_10) else "0";
    lhs_V_fu_1587_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln1355_fu_1581_p2(0) = '1') else 
        ap_const_lv64_0;

    mc_V_address0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state127, ap_CS_fsm_state129, ap_CS_fsm_state43, ap_CS_fsm_state97, grp_reed_muller_encode_fu_892_cdw_V_address0, grp_vect_add_fu_925_o_V_address0, grp_shake256_512_ds_fu_963_input_V_address0, grp_hqc_ciphertext_to_st_fu_1060_u_V_address0, grp_vect_copyresize_mult_fu_1070_v_V_address0, grp_vect_compare_fu_1094_v1_V_address0, grp_vect_copyresize_1_fu_1123_v_V_address0, grp_vect_copyresize_2_fu_1140_v_V_address0, ap_CS_fsm_state69, ap_CS_fsm_state111, ap_CS_fsm_state71, ap_CS_fsm_state85, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state83, ap_CS_fsm_state77, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mc_V_address0 <= grp_vect_copyresize_2_fu_1140_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            mc_V_address0 <= grp_vect_copyresize_1_fu_1123_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            mc_V_address0 <= grp_vect_compare_fu_1094_v1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mc_V_address0 <= grp_vect_copyresize_mult_fu_1070_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            mc_V_address0 <= grp_hqc_ciphertext_to_st_fu_1060_u_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            mc_V_address0 <= grp_shake256_512_ds_fu_963_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_address0 <= grp_vect_add_fu_925_o_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_address0 <= grp_reed_muller_encode_fu_892_cdw_V_address0;
        else 
            mc_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_address1_assign_proc : process(ap_CS_fsm_state113, ap_enable_reg_pp4_iter3, ap_CS_fsm_state79, ap_CS_fsm_state97, grp_reed_muller_encode_fu_892_cdw_V_address1, grp_vect_add_fu_925_o_V_address1, grp_shake256_512_ds_fu_963_input_V_address1, grp_reed_solomon_decode_fu_1016_msg_V_address1, grp_hqc_ciphertext_from_s_fu_1050_u_V_address1, grp_vect_copyresize_mult_fu_1070_v_V_address1, grp_vect_copyresize_fu_1131_o_V_address1, ap_block_pp4_stage0, ap_CS_fsm_state69, ap_CS_fsm_state111, ap_CS_fsm_state71, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state83, ap_CS_fsm_state93, ap_CS_fsm_state67, zext_ln544_90_fu_1416_p1)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            mc_V_address1 <= zext_ln544_90_fu_1416_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            mc_V_address1 <= grp_vect_copyresize_fu_1131_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mc_V_address1 <= grp_vect_copyresize_mult_fu_1070_v_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            mc_V_address1 <= grp_hqc_ciphertext_from_s_fu_1050_u_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            mc_V_address1 <= grp_reed_solomon_decode_fu_1016_msg_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            mc_V_address1 <= grp_shake256_512_ds_fu_963_input_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_address1 <= grp_vect_add_fu_925_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_address1 <= grp_reed_muller_encode_fu_892_cdw_V_address1;
        else 
            mc_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mc_V_ce0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state127, ap_CS_fsm_state129, ap_CS_fsm_state43, ap_CS_fsm_state97, grp_reed_muller_encode_fu_892_cdw_V_ce0, grp_vect_add_fu_925_o_V_ce0, grp_shake256_512_ds_fu_963_input_V_ce0, grp_hqc_ciphertext_to_st_fu_1060_u_V_ce0, grp_vect_copyresize_mult_fu_1070_v_V_ce0, grp_vect_compare_fu_1094_v1_V_ce0, grp_vect_copyresize_1_fu_1123_v_V_ce0, grp_vect_copyresize_2_fu_1140_v_V_ce0, ap_CS_fsm_state69, ap_CS_fsm_state111, ap_CS_fsm_state71, ap_CS_fsm_state85, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state83, ap_CS_fsm_state77, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mc_V_ce0 <= grp_vect_copyresize_2_fu_1140_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            mc_V_ce0 <= grp_vect_copyresize_1_fu_1123_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            mc_V_ce0 <= grp_vect_compare_fu_1094_v1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mc_V_ce0 <= grp_vect_copyresize_mult_fu_1070_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            mc_V_ce0 <= grp_hqc_ciphertext_to_st_fu_1060_u_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            mc_V_ce0 <= grp_shake256_512_ds_fu_963_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_ce0 <= grp_vect_add_fu_925_o_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_ce0 <= grp_reed_muller_encode_fu_892_cdw_V_ce0;
        else 
            mc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_ce1_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state113, ap_enable_reg_pp4_iter3, ap_CS_fsm_state79, ap_CS_fsm_state97, grp_reed_muller_encode_fu_892_cdw_V_ce1, grp_vect_add_fu_925_o_V_ce1, grp_shake256_512_ds_fu_963_input_V_ce1, grp_reed_solomon_decode_fu_1016_msg_V_ce1, grp_hqc_ciphertext_from_s_fu_1050_u_V_ce1, grp_vect_copyresize_mult_fu_1070_v_V_ce1, grp_vect_copyresize_fu_1131_o_V_ce1, ap_CS_fsm_state69, ap_CS_fsm_state111, ap_CS_fsm_state71, ap_CS_fsm_state41, ap_CS_fsm_state73, ap_CS_fsm_state75, ap_CS_fsm_state83, ap_CS_fsm_state93, ap_CS_fsm_state67)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            mc_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            mc_V_ce1 <= grp_vect_copyresize_fu_1131_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mc_V_ce1 <= grp_vect_copyresize_mult_fu_1070_v_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            mc_V_ce1 <= grp_hqc_ciphertext_from_s_fu_1050_u_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            mc_V_ce1 <= grp_reed_solomon_decode_fu_1016_msg_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            mc_V_ce1 <= grp_shake256_512_ds_fu_963_input_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_ce1 <= grp_vect_add_fu_925_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_ce1 <= grp_reed_muller_encode_fu_892_cdw_V_ce1;
        else 
            mc_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mc_V_d1_assign_proc : process(trunc_ln802_reg_1823, ap_enable_reg_pp4_iter3, ap_CS_fsm_state79, grp_reed_muller_encode_fu_892_cdw_V_d1, grp_vect_add_fu_925_o_V_d1, grp_reed_solomon_decode_fu_1016_msg_V_d1, grp_hqc_ciphertext_from_s_fu_1050_u_V_d1, grp_vect_copyresize_fu_1131_o_V_d1, ap_block_pp4_stage0, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state93, ap_CS_fsm_state67)
    begin
        if (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            mc_V_d1 <= trunc_ln802_reg_1823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            mc_V_d1 <= grp_vect_copyresize_fu_1131_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            mc_V_d1 <= grp_hqc_ciphertext_from_s_fu_1050_u_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            mc_V_d1 <= grp_reed_solomon_decode_fu_1016_msg_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_d1 <= grp_vect_add_fu_925_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_d1 <= grp_reed_muller_encode_fu_892_cdw_V_d1;
        else 
            mc_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    mc_V_we1_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln887_reg_1804_pp4_iter2_reg, ap_enable_reg_pp4_iter3, ap_CS_fsm_state79, grp_reed_muller_encode_fu_892_cdw_V_we1, grp_vect_add_fu_925_o_V_we1, grp_reed_solomon_decode_fu_1016_msg_V_we1, grp_hqc_ciphertext_from_s_fu_1050_u_V_we1, grp_vect_copyresize_fu_1131_o_V_we1, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state93, ap_CS_fsm_state67)
    begin
        if (((icmp_ln887_reg_1804_pp4_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            mc_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            mc_V_we1 <= grp_vect_copyresize_fu_1131_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            mc_V_we1 <= grp_hqc_ciphertext_from_s_fu_1050_u_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            mc_V_we1 <= grp_reed_solomon_decode_fu_1016_msg_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            mc_V_we1 <= grp_vect_add_fu_925_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            mc_V_we1 <= grp_reed_muller_encode_fu_892_cdw_V_we1;
        else 
            mc_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1353_10_fu_1292_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_5);
    or_ln1353_11_fu_1302_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_6);
    or_ln1353_12_fu_1312_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_7);
    or_ln1353_7_fu_1262_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_2);
    or_ln1353_8_fu_1272_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_3);
    or_ln1353_9_fu_1282_p2 <= (ret_V_121_reg_1690 or ap_const_lv12_4);
    or_ln1353_fu_1251_p2 <= (ret_V_121_fu_1238_p3 or ap_const_lv12_1);
    or_ln387_fu_1571_p2 <= (grp_vect_compare_fu_1094_ap_return or cmp_d_d2_reg_1946);
    p_Result_7_i_fu_1326_p9 <= (((((((store_A_V_load_7_reg_1775 & store_A_V_load_6_reg_1770) & store_A_V_load_5_reg_1755) & store_A_V_load_4_reg_1750) & store_A_V_load_3_reg_1735) & store_A_V_load_2_reg_1730) & store_A_V_load_1_reg_1715) & store_A_V_load_reg_1710);

    pk64_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln285_2_fu_1433_p1, grp_hqc_public_key_from_s_fu_1078_pk64_V_address0, ap_CS_fsm_state67, zext_ln544_134_fu_1357_p1, ap_block_pp3_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            pk64_V_address0 <= zext_ln285_2_fu_1433_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            pk64_V_address0 <= zext_ln544_134_fu_1357_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            pk64_V_address0 <= grp_hqc_public_key_from_s_fu_1078_pk64_V_address0;
        else 
            pk64_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pk64_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln285_1_reg_1654, ap_enable_reg_pp1_iter1, ap_CS_fsm_state29, ap_block_pp1_stage0, zext_ln544_124_fu_1322_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk64_V_address1 <= zext_ln544_124_fu_1322_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk64_V_address1 <= zext_ln285_1_reg_1654(9 - 1 downto 0);
        else 
            pk64_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    pk64_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, grp_hqc_public_key_from_s_fu_1078_pk64_V_ce0, ap_CS_fsm_state67)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            pk64_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            pk64_V_ce0 <= grp_hqc_public_key_from_s_fu_1078_pk64_V_ce0;
        else 
            pk64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk64_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            pk64_V_ce1 <= ap_const_logic_1;
        else 
            pk64_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk64_V_d1_assign_proc : process(store_seeds_V_q0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state29, ap_block_pp1_stage0, p_Result_7_i_fu_1326_p9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk64_V_d1 <= p_Result_7_i_fu_1326_p9;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk64_V_d1 <= store_seeds_V_q0;
        else 
            pk64_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk64_V_we1_assign_proc : process(icmp_ln284_1_reg_1645, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln284_1_reg_1645 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            pk64_V_we1 <= ap_const_logic_1;
        else 
            pk64_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    prng_seed_V_address0 <= grp_shake_prng_init_fu_985_entropy_input_V_address0;
    prng_seed_V_ce0 <= grp_shake_prng_init_fu_985_entropy_input_V_ce0;
    r_V_fu_1407_p2 <= std_logic_vector(shift_right(unsigned(store_seeds_V_load_reg_1818),to_integer(unsigned('0' & zext_ln808_fu_1403_p1(31-1 downto 0)))));

    random_vector_A_V_address0_assign_proc : process(ap_CS_fsm_state113, grp_vect_mul_add_fu_824_a1_V_address0, grp_vect_set_random_fixe_fu_949_v_V_address0, grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            random_vector_A_V_address0 <= grp_vect_set_random_fixe_fu_949_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_A_V_address0 <= grp_vect_mul_add_fu_824_a1_V_address0;
        else 
            random_vector_A_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_A_V_ce0_assign_proc : process(ap_CS_fsm_state113, grp_vect_mul_add_fu_824_a1_V_ce0, grp_vect_set_random_fixe_fu_949_v_V_ce0, grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            random_vector_A_V_ce0 <= grp_vect_set_random_fixe_fu_949_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_A_V_ce0 <= grp_vect_mul_add_fu_824_a1_V_ce0;
        else 
            random_vector_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_ce1_assign_proc : process(ap_CS_fsm_state113, grp_vect_set_random_fixe_fu_949_v_V_ce1, ap_CS_fsm_state10, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            random_vector_A_V_ce1 <= grp_vect_set_random_fixe_fu_949_v_V_ce1;
        else 
            random_vector_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_A_V_we1_assign_proc : process(ap_CS_fsm_state113, grp_vect_set_random_fixe_fu_949_v_V_we1, ap_CS_fsm_state10, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            random_vector_A_V_we1 <= grp_vect_set_random_fixe_fu_949_v_V_we1;
        else 
            random_vector_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_824_a1_V_address0, grp_vect_set_random_fixe_fu_949_v_V_address0, grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_B_V_address0 <= grp_vect_set_random_fixe_fu_949_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            random_vector_B_V_address0 <= grp_vect_mul_add_fu_824_a1_V_address0;
        else 
            random_vector_B_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    random_vector_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_824_a1_V_ce0, grp_vect_set_random_fixe_fu_949_v_V_ce0, grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_1111_fixed_weight_by_coord_vector_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_B_V_ce0 <= grp_vect_set_random_fixe_fu_949_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            random_vector_B_V_ce0 <= grp_vect_mul_add_fu_824_a1_V_ce0;
        else 
            random_vector_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_ce1_assign_proc : process(grp_vect_set_random_fixe_fu_949_v_V_ce1, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_B_V_ce1 <= grp_vect_set_random_fixe_fu_949_v_V_ce1;
        else 
            random_vector_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    random_vector_B_V_we1_assign_proc : process(grp_vect_set_random_fixe_fu_949_v_V_we1, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            random_vector_B_V_we1 <= grp_vect_set_random_fixe_fu_949_v_V_we1;
        else 
            random_vector_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_1576_p2 <= (or_ln387_fu_1571_p2 or cmp_u_u2_reg_1951);
    ret_V_121_fu_1238_p3 <= (p_0189_0_i_reg_667 & ap_const_lv3_0);
    ret_V_122_fu_1351_p2 <= std_logic_vector(unsigned(p_047_0_i_reg_678) + unsigned(ap_const_lv9_5));
    ret_V_123_fu_1612_p2 <= (ss2_V_q0 and lhs_V_reg_1961);
    ret_V_fu_1232_p2 <= std_logic_vector(unsigned(p_0189_0_i_reg_667) + unsigned(ap_const_lv9_5));
    shl_ln_fu_1395_p3 <= (trunc_ln556_fu_1391_p1 & ap_const_lv3_0);

    sk64_V_address0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln285_4_fu_1492_p1, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, grp_hqc_public_key_from_1_fu_1086_pk_V_address0, ap_block_pp8_stage0, ap_CS_fsm_state121, ap_block_pp7_stage0, zext_ln321_7_fu_1519_p1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            sk64_V_address0 <= zext_ln321_7_fu_1519_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            sk64_V_address0 <= zext_ln285_4_fu_1492_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            sk64_V_address0 <= grp_hqc_public_key_from_1_fu_1086_pk_V_address0;
        else 
            sk64_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    sk64_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln285_reg_1635, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp3_stage0, zext_ln544_133_fu_1362_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            sk64_V_address1 <= zext_ln544_133_fu_1362_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sk64_V_address1 <= zext_ln285_reg_1635(9 - 1 downto 0);
        else 
            sk64_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    sk64_V_ce0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, grp_hqc_public_key_from_1_fu_1086_pk_V_ce0, ap_CS_fsm_state121)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            sk64_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            sk64_V_ce0 <= grp_hqc_public_key_from_1_fu_1086_pk_V_ce0;
        else 
            sk64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk64_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sk64_V_ce1 <= ap_const_logic_1;
        else 
            sk64_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk64_V_d1_assign_proc : process(store_seeds_V_q0, ap_CS_fsm_pp0_stage0, pk64_V_load_reg_1799, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            sk64_V_d1 <= pk64_V_load_reg_1799;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sk64_V_d1 <= store_seeds_V_q0;
        else 
            sk64_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sk64_V_we1_assign_proc : process(icmp_ln284_reg_1626, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp3_stage0_11001, icmp_ln887_52_reg_1780_pp3_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln887_52_reg_1780_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln284_reg_1626 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sk64_V_we1 <= ap_const_logic_1;
        else 
            sk64_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ss1_V_address0 <= grp_shake256_512_ds_fu_963_output_V_address0;

    ss1_V_ce0_assign_proc : process(grp_shake256_512_ds_fu_963_output_V_ce0, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            ss1_V_ce0 <= grp_shake256_512_ds_fu_963_output_V_ce0;
        else 
            ss1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ss1_V_d0 <= grp_shake256_512_ds_fu_963_output_V_d0;

    ss1_V_we0_assign_proc : process(grp_shake256_512_ds_fu_963_output_V_we0, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            ss1_V_we0 <= grp_shake256_512_ds_fu_963_output_V_we0;
        else 
            ss1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ss2_V_address0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state130, ss2_V_addr_reg_1974, grp_shake256_512_ds_fu_963_output_V_address0, ap_CS_fsm_state131, zext_ln391_fu_1607_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            ss2_V_address0 <= ss2_V_addr_reg_1974;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            ss2_V_address0 <= zext_ln391_fu_1607_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            ss2_V_address0 <= grp_shake256_512_ds_fu_963_output_V_address0;
        else 
            ss2_V_address0 <= "XXX";
        end if; 
    end process;


    ss2_V_ce0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state130, grp_shake256_512_ds_fu_963_output_V_ce0, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            ss2_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            ss2_V_ce0 <= grp_shake256_512_ds_fu_963_output_V_ce0;
        else 
            ss2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ss2_V_d0_assign_proc : process(ap_CS_fsm_state113, grp_shake256_512_ds_fu_963_output_V_d0, ap_CS_fsm_state131, ret_V_123_fu_1612_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            ss2_V_d0 <= ret_V_123_fu_1612_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            ss2_V_d0 <= grp_shake256_512_ds_fu_963_output_V_d0;
        else 
            ss2_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ss2_V_we0_assign_proc : process(ap_CS_fsm_state113, grp_shake256_512_ds_fu_963_output_V_we0, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            ss2_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            ss2_V_we0 <= grp_shake256_512_ds_fu_963_output_V_we0;
        else 
            ss2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_address0_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_address0, grp_shake_prng_init_fu_985_shake_prng_state_array_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_address0 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_address0 <= grp_shake_prng_fu_790_state_prng_V_address0;
        else 
            state_prng_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_address1_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_address1, grp_shake_prng_init_fu_985_shake_prng_state_array_V_address1, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_address1 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_address1 <= grp_shake_prng_fu_790_state_prng_V_address1;
        else 
            state_prng_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_prng_V_ce0_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_ce0, grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_ce0 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_ce0 <= grp_shake_prng_fu_790_state_prng_V_ce0;
        else 
            state_prng_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_ce1_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_ce1, grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce1, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_ce1 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_ce1 <= grp_shake_prng_fu_790_state_prng_V_ce1;
        else 
            state_prng_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_prng_V_d1_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_d1, grp_shake_prng_init_fu_985_shake_prng_state_array_V_d1, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_d1 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_d1 <= grp_shake_prng_fu_790_state_prng_V_d1;
        else 
            state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_prng_V_we1_assign_proc : process(ap_CS_fsm_state35, grp_shake_prng_fu_790_state_prng_V_we1, grp_shake_prng_init_fu_985_shake_prng_state_array_V_we1, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_prng_V_we1 <= grp_shake_prng_init_fu_985_shake_prng_state_array_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_prng_V_we1 <= grp_shake_prng_fu_790_state_prng_V_we1;
        else 
            state_prng_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address0, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address0, grp_seedexpander_init_fu_1006_state_V_2_address0, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_address0 <= grp_seedexpander_init_fu_1006_state_V_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_address0 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_address0 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address0;
        else 
            state_seedexpander_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address1, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address1, grp_seedexpander_init_fu_1006_state_V_2_address1, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_address1 <= grp_seedexpander_init_fu_1006_state_V_2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_address1 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_address1 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_address1;
        else 
            state_seedexpander_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce0, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce0, grp_seedexpander_init_fu_1006_state_V_2_ce0, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_init_fu_1006_state_V_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_ce0 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_ce0 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce0;
        else 
            state_seedexpander_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce1, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce1, grp_seedexpander_init_fu_1006_state_V_2_ce1, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_init_fu_1006_state_V_2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_ce1 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_ce1 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_ce1;
        else 
            state_seedexpander_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_d1, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_d1, grp_seedexpander_init_fu_1006_state_V_2_d1, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_d1 <= grp_seedexpander_init_fu_1006_state_V_2_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_d1 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_d1 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_d1;
        else 
            state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state113, ap_CS_fsm_state6, ap_CS_fsm_state14, grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_we1, grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_we1, grp_seedexpander_init_fu_1006_state_V_2_we1, ap_CS_fsm_state10, ap_CS_fsm_state65, ap_CS_fsm_state119, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state12, ap_CS_fsm_state59, ap_CS_fsm_state63, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state117, ap_CS_fsm_state18, ap_CS_fsm_state49, ap_CS_fsm_state103, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            state_seedexpander_V_we1 <= grp_seedexpander_init_fu_1006_state_V_2_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_seedexpander_V_we1 <= grp_seedexpander_mult_ty_fu_996_state_seedexpander_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_seedexpander_V_we1 <= grp_vect_set_random_fixe_fu_949_state_seedexpander_V_2_we1;
        else 
            state_seedexpander_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_address0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_vect_mul_add_fu_824_o_V_address0, grp_vect_add_fu_925_v2_V_address0, grp_reed_muller_decode_fu_1043_store_A_V_address0, grp_vect_copyresize_fu_1131_v_V_address0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state71, ap_CS_fsm_state125, ap_CS_fsm_state91, ap_CS_fsm_state67, ap_CS_fsm_state121, zext_ln544_125_fu_1246_p1, zext_ln544_127_fu_1267_p1, zext_ln544_129_fu_1287_p1, zext_ln544_131_fu_1307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            store_A_V_address0 <= zext_ln544_131_fu_1307_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            store_A_V_address0 <= zext_ln544_129_fu_1287_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            store_A_V_address0 <= zext_ln544_127_fu_1267_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            store_A_V_address0 <= zext_ln544_125_fu_1246_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            store_A_V_address0 <= grp_vect_copyresize_fu_1131_v_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_A_V_address0 <= grp_reed_muller_decode_fu_1043_store_A_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            store_A_V_address0 <= grp_vect_add_fu_925_v2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_A_V_address0 <= grp_vect_mul_add_fu_824_o_V_address0;
        else 
            store_A_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_A_V_address1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_vect_mul_add_fu_824_o_V_address1, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, zext_ln544_126_fu_1257_p1, zext_ln544_128_fu_1277_p1, zext_ln544_130_fu_1297_p1, zext_ln544_132_fu_1317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            store_A_V_address1 <= zext_ln544_132_fu_1317_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            store_A_V_address1 <= zext_ln544_130_fu_1297_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            store_A_V_address1 <= zext_ln544_128_fu_1277_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            store_A_V_address1 <= zext_ln544_126_fu_1257_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_A_V_address1 <= grp_vect_mul_add_fu_824_o_V_address1;
        else 
            store_A_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_A_V_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_vect_mul_add_fu_824_o_V_ce0, grp_vect_add_fu_925_v2_V_ce0, grp_reed_muller_decode_fu_1043_store_A_V_ce0, grp_vect_copyresize_fu_1131_v_V_ce0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state71, ap_CS_fsm_state125, ap_CS_fsm_state91, ap_CS_fsm_state67, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            store_A_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            store_A_V_ce0 <= grp_vect_copyresize_fu_1131_v_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_A_V_ce0 <= grp_reed_muller_decode_fu_1043_store_A_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            store_A_V_ce0 <= grp_vect_add_fu_925_v2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_A_V_ce0 <= grp_vect_mul_add_fu_824_o_V_ce0;
        else 
            store_A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_ce1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_vect_mul_add_fu_824_o_V_ce1, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            store_A_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_A_V_ce1 <= grp_vect_mul_add_fu_824_o_V_ce1;
        else 
            store_A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_A_V_we1_assign_proc : process(grp_vect_mul_add_fu_824_o_V_we1, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_A_V_we1 <= grp_vect_mul_add_fu_824_o_V_we1;
        else 
            store_A_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_address0_assign_proc : process(grp_vect_mul_add_fu_824_store_B_V_address0, grp_vect_set_random_fixe_1_fu_1111_v_V_address0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_address0 <= grp_vect_set_random_fixe_1_fu_1111_v_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_B_V_address0 <= grp_vect_mul_add_fu_824_store_B_V_address0;
        else 
            store_B_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_address1_assign_proc : process(grp_vect_mul_add_fu_824_store_B_V_address1, grp_vect_set_random_fixe_1_fu_1111_v_V_address1, grp_vect_copyresize_2_fu_1140_o_V_address1, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state85, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            store_B_V_address1 <= grp_vect_copyresize_2_fu_1140_o_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_address1 <= grp_vect_set_random_fixe_1_fu_1111_v_V_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_B_V_address1 <= grp_vect_mul_add_fu_824_store_B_V_address1;
        else 
            store_B_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    store_B_V_ce0_assign_proc : process(grp_vect_mul_add_fu_824_store_B_V_ce0, grp_vect_set_random_fixe_1_fu_1111_v_V_ce0, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_ce0 <= grp_vect_set_random_fixe_1_fu_1111_v_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_B_V_ce0 <= grp_vect_mul_add_fu_824_store_B_V_ce0;
        else 
            store_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_ce1_assign_proc : process(grp_vect_mul_add_fu_824_store_B_V_ce1, grp_vect_set_random_fixe_1_fu_1111_v_V_ce1, grp_vect_copyresize_2_fu_1140_o_V_ce1, ap_CS_fsm_state23, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state89, ap_CS_fsm_state119, ap_CS_fsm_state123, ap_CS_fsm_state12, ap_CS_fsm_state85, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            store_B_V_ce1 <= grp_vect_copyresize_2_fu_1140_o_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_ce1 <= grp_vect_set_random_fixe_1_fu_1111_v_V_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            store_B_V_ce1 <= grp_vect_mul_add_fu_824_store_B_V_ce1;
        else 
            store_B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_B_V_d1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1111_v_V_d1, grp_vect_copyresize_2_fu_1140_o_V_d1, ap_CS_fsm_state12, ap_CS_fsm_state85, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            store_B_V_d1 <= grp_vect_copyresize_2_fu_1140_o_V_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_d1 <= grp_vect_set_random_fixe_1_fu_1111_v_V_d1;
        else 
            store_B_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_B_V_we1_assign_proc : process(grp_vect_set_random_fixe_1_fu_1111_v_V_we1, grp_vect_copyresize_2_fu_1140_o_V_we1, ap_CS_fsm_state12, ap_CS_fsm_state85, ap_CS_fsm_state67, ap_CS_fsm_state121, ap_CS_fsm_state61, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            store_B_V_we1 <= grp_vect_copyresize_2_fu_1140_o_V_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            store_B_V_we1 <= grp_vect_set_random_fixe_1_fu_1111_v_V_we1;
        else 
            store_B_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_address0_assign_proc : process(ap_CS_fsm_state43, grp_reed_solomon_encode_fu_873_store_C_V_address0, grp_vect_copyresize_1_fu_1123_o_V_address0, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            store_C_V_address0 <= grp_vect_copyresize_1_fu_1123_o_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_C_V_address0 <= grp_reed_solomon_encode_fu_873_store_C_V_address0;
        else 
            store_C_V_address0 <= "XXXX";
        end if; 
    end process;


    store_C_V_ce0_assign_proc : process(ap_CS_fsm_state43, grp_reed_solomon_encode_fu_873_store_C_V_ce0, grp_vect_copyresize_1_fu_1123_o_V_ce0, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            store_C_V_ce0 <= grp_vect_copyresize_1_fu_1123_o_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_C_V_ce0 <= grp_reed_solomon_encode_fu_873_store_C_V_ce0;
        else 
            store_C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_C_V_we0_assign_proc : process(ap_CS_fsm_state43, grp_vect_copyresize_1_fu_1123_o_V_we0, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            store_C_V_we0 <= grp_vect_copyresize_1_fu_1123_o_V_we0;
        else 
            store_C_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_address1_assign_proc : process(grp_reed_solomon_decode_fu_1016_cdw_V_address1, grp_reed_muller_decode_fu_1043_msg_V_address1, ap_CS_fsm_state93, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_rs_decode_V_address1 <= grp_reed_muller_decode_fu_1043_msg_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            store_rs_decode_V_address1 <= grp_reed_solomon_decode_fu_1016_cdw_V_address1;
        else 
            store_rs_decode_V_address1 <= "XXXXXX";
        end if; 
    end process;


    store_rs_decode_V_ce0_assign_proc : process(grp_reed_solomon_decode_fu_1016_cdw_V_ce0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            store_rs_decode_V_ce0 <= grp_reed_solomon_decode_fu_1016_cdw_V_ce0;
        else 
            store_rs_decode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_ce1_assign_proc : process(grp_reed_solomon_decode_fu_1016_cdw_V_ce1, grp_reed_muller_decode_fu_1043_msg_V_ce1, ap_CS_fsm_state93, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_rs_decode_V_ce1 <= grp_reed_muller_decode_fu_1043_msg_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            store_rs_decode_V_ce1 <= grp_reed_solomon_decode_fu_1016_cdw_V_ce1;
        else 
            store_rs_decode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_decode_V_d1_assign_proc : process(grp_reed_solomon_decode_fu_1016_cdw_V_d1, grp_reed_muller_decode_fu_1043_msg_V_d1, ap_CS_fsm_state93, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_rs_decode_V_d1 <= grp_reed_muller_decode_fu_1043_msg_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            store_rs_decode_V_d1 <= grp_reed_solomon_decode_fu_1016_cdw_V_d1;
        else 
            store_rs_decode_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    store_rs_decode_V_we1_assign_proc : process(grp_reed_solomon_decode_fu_1016_cdw_V_we1, grp_reed_muller_decode_fu_1043_msg_V_we1, ap_CS_fsm_state93, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            store_rs_decode_V_we1 <= grp_reed_muller_decode_fu_1043_msg_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            store_rs_decode_V_we1 <= grp_reed_solomon_decode_fu_1016_cdw_V_we1;
        else 
            store_rs_decode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_address0_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_address0, grp_reed_muller_encode_fu_892_msg_V_address0, ap_CS_fsm_state123, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            store_rs_encode_V_1_address0 <= grp_reed_muller_encode_fu_892_msg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            store_rs_encode_V_1_address0 <= grp_reed_solomon_encode_fu_873_cdw_V_address0;
        else 
            store_rs_encode_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    store_rs_encode_V_1_ce0_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_ce0, grp_reed_muller_encode_fu_892_msg_V_ce0, ap_CS_fsm_state123, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            store_rs_encode_V_1_ce0 <= grp_reed_muller_encode_fu_892_msg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            store_rs_encode_V_1_ce0 <= grp_reed_solomon_encode_fu_873_cdw_V_ce0;
        else 
            store_rs_encode_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_ce1_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_ce1, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            store_rs_encode_V_1_ce1 <= grp_reed_solomon_encode_fu_873_cdw_V_ce1;
        else 
            store_rs_encode_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_1_we1_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_we1, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            store_rs_encode_V_1_we1 <= grp_reed_solomon_encode_fu_873_cdw_V_we1;
        else 
            store_rs_encode_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_address0_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_address0, grp_reed_muller_encode_fu_892_msg_V_address0, ap_CS_fsm_state69, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            store_rs_encode_V_address0 <= grp_reed_muller_encode_fu_892_msg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            store_rs_encode_V_address0 <= grp_reed_solomon_encode_fu_873_cdw_V_address0;
        else 
            store_rs_encode_V_address0 <= "XXXXXX";
        end if; 
    end process;


    store_rs_encode_V_ce0_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_ce0, grp_reed_muller_encode_fu_892_msg_V_ce0, ap_CS_fsm_state69, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            store_rs_encode_V_ce0 <= grp_reed_muller_encode_fu_892_msg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            store_rs_encode_V_ce0 <= grp_reed_solomon_encode_fu_873_cdw_V_ce0;
        else 
            store_rs_encode_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_ce1_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_ce1, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            store_rs_encode_V_ce1 <= grp_reed_solomon_encode_fu_873_cdw_V_ce1;
        else 
            store_rs_encode_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    store_rs_encode_V_we1_assign_proc : process(grp_reed_solomon_encode_fu_873_cdw_V_we1, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            store_rs_encode_V_we1 <= grp_reed_solomon_encode_fu_873_cdw_V_we1;
        else 
            store_rs_encode_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln285_fu_1173_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln285_1_fu_1190_p1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, zext_ln285_2_reg_1837, ap_CS_fsm_pp6_stage0, zext_ln285_3_reg_1870, ap_CS_fsm_pp7_stage0, zext_ln285_4_reg_1889, ap_CS_fsm_pp8_stage0, ap_CS_fsm_pp9_stage0, zext_ln285_6_reg_1936, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state35, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter1, ap_enable_reg_pp8_iter1, ap_enable_reg_pp9_iter1, grp_shake_prng_fu_790_output_V_address0, grp_seedexpander_init_fu_1006_seed_V_address0, ap_block_pp4_stage0, ap_block_pp8_stage0, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln544_91_fu_1386_p1, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0, zext_ln285_5_fu_1524_p1, ap_block_pp9_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_6_reg_1936(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_5_fu_1524_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_4_reg_1889(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_3_reg_1870(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_2_reg_1837(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            store_seeds_V_address0 <= zext_ln544_91_fu_1386_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_1_fu_1190_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            store_seeds_V_address0 <= zext_ln285_fu_1173_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_seeds_V_address0 <= grp_seedexpander_init_fu_1006_seed_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            store_seeds_V_address0 <= grp_shake_prng_fu_790_output_V_address0;
        else 
            store_seeds_V_address0 <= "XXX";
        end if; 
    end process;


    store_seeds_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state35, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter1, ap_enable_reg_pp8_iter1, ap_enable_reg_pp9_iter1, grp_shake_prng_fu_790_output_V_ce0, grp_seedexpander_init_fu_1006_seed_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state57, ap_CS_fsm_state111, ap_CS_fsm_state47, ap_CS_fsm_state83, ap_CS_fsm_state101)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            store_seeds_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            store_seeds_V_ce0 <= grp_seedexpander_init_fu_1006_seed_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            store_seeds_V_ce0 <= grp_shake_prng_fu_790_output_V_ce0;
        else 
            store_seeds_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    store_seeds_V_d0_assign_proc : process(sk64_V_q0, pk64_V_q0, theta_V_q0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp6_stage0, ap_CS_fsm_pp7_stage0, ap_CS_fsm_pp8_stage0, ap_CS_fsm_pp9_stage0, ap_CS_fsm_state35, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter1, ap_enable_reg_pp8_iter1, ap_enable_reg_pp9_iter1, grp_shake_prng_fu_790_output_V_d0, ap_block_pp8_stage0, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0, ap_block_pp9_stage0)
    begin
        if ((((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            store_seeds_V_d0 <= sk64_V_q0;
        elsif ((((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
            store_seeds_V_d0 <= theta_V_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            store_seeds_V_d0 <= pk64_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            store_seeds_V_d0 <= grp_shake_prng_fu_790_output_V_d0;
        else 
            store_seeds_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    store_seeds_V_we0_assign_proc : process(icmp_ln284_2_reg_1828, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln284_3_reg_1861, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, icmp_ln284_4_reg_1880, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, icmp_ln284_5_reg_1899, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, icmp_ln284_6_reg_1927, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_CS_fsm_state35, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter1, ap_enable_reg_pp8_iter1, ap_enable_reg_pp9_iter1, grp_shake_prng_fu_790_output_V_we0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (icmp_ln284_6_reg_1927 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln284_5_reg_1899 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln284_4_reg_1880 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln284_3_reg_1861 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln284_2_reg_1828 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            store_seeds_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            store_seeds_V_we0 <= grp_shake_prng_fu_790_output_V_we0;
        else 
            store_seeds_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_address0_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, zext_ln285_3_fu_1475_p1, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, zext_ln285_6_fu_1566_p1, ap_CS_fsm_state113, ap_CS_fsm_state97, grp_shake256_512_ds_fu_963_output_V_address0, grp_vect_compare_64_fu_1148_theta_V_address0, ap_CS_fsm_state111, ap_CS_fsm_state41, ap_block_pp6_stage0, ap_block_pp9_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            theta_V_address0 <= zext_ln285_6_fu_1566_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            theta_V_address0 <= zext_ln285_3_fu_1475_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            theta_V_address0 <= grp_vect_compare_64_fu_1148_theta_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            theta_V_address0 <= grp_shake256_512_ds_fu_963_output_V_address0;
        else 
            theta_V_address0 <= "XXX";
        end if; 
    end process;


    theta_V_ce0_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0, ap_CS_fsm_state113, ap_CS_fsm_state97, grp_shake256_512_ds_fu_963_output_V_ce0, grp_vect_compare_64_fu_1148_theta_V_ce0, ap_CS_fsm_state111, ap_CS_fsm_state41)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
            theta_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            theta_V_ce0 <= grp_vect_compare_64_fu_1148_theta_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            theta_V_ce0 <= grp_shake256_512_ds_fu_963_output_V_ce0;
        else 
            theta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_we0_assign_proc : process(ap_CS_fsm_state97, grp_shake256_512_ds_fu_963_output_V_we0, ap_CS_fsm_state111, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            theta_V_we0 <= grp_shake256_512_ds_fu_963_output_V_we0;
        else 
            theta_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_49_fu_1378_p3 <= ap_phi_mux_t_V_phi_fu_693_p4(3 downto 3);
    trunc_ln45_fu_1156_p1 <= seed_bytesize_V(7 - 1 downto 0);
    trunc_ln556_fu_1391_p1 <= t_V_reg_689_pp4_iter1_reg(3 - 1 downto 0);
    trunc_ln717_1_fu_1438_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln717_2_fu_1529_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln717_fu_1195_p1 <= h_s_V_q0(5 - 1 downto 0);
    trunc_ln802_fu_1412_p1 <= r_V_fu_1407_p2(8 - 1 downto 0);

    uv2_V_address0_assign_proc : process(ap_CS_fsm_state127, ap_CS_fsm_state129, grp_reed_muller_encode_fu_892_cdw_V_address0, grp_vect_add_fu_925_o_V_address0, grp_vect_compare_fu_1094_uv2_V_address0, ap_CS_fsm_state123, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            uv2_V_address0 <= grp_vect_compare_fu_1094_uv2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_address0 <= grp_vect_add_fu_925_o_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_address0 <= grp_reed_muller_encode_fu_892_cdw_V_address0;
        else 
            uv2_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_address1_assign_proc : process(grp_reed_muller_encode_fu_892_cdw_V_address1, grp_vect_add_fu_925_o_V_address1, grp_vect_copyresize_fu_1131_o_V_address1, ap_CS_fsm_state123, ap_CS_fsm_state125, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            uv2_V_address1 <= grp_vect_copyresize_fu_1131_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_address1 <= grp_vect_add_fu_925_o_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_address1 <= grp_reed_muller_encode_fu_892_cdw_V_address1;
        else 
            uv2_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    uv2_V_ce0_assign_proc : process(ap_CS_fsm_state127, ap_CS_fsm_state129, grp_reed_muller_encode_fu_892_cdw_V_ce0, grp_vect_add_fu_925_o_V_ce0, grp_vect_compare_fu_1094_uv2_V_ce0, ap_CS_fsm_state123, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            uv2_V_ce0 <= grp_vect_compare_fu_1094_uv2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_ce0 <= grp_vect_add_fu_925_o_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_ce0 <= grp_reed_muller_encode_fu_892_cdw_V_ce0;
        else 
            uv2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_ce1_assign_proc : process(grp_reed_muller_encode_fu_892_cdw_V_ce1, grp_vect_add_fu_925_o_V_ce1, grp_vect_copyresize_fu_1131_o_V_ce1, ap_CS_fsm_state123, ap_CS_fsm_state125, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            uv2_V_ce1 <= grp_vect_copyresize_fu_1131_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_ce1 <= grp_vect_add_fu_925_o_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_ce1 <= grp_reed_muller_encode_fu_892_cdw_V_ce1;
        else 
            uv2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    uv2_V_d1_assign_proc : process(grp_reed_muller_encode_fu_892_cdw_V_d1, grp_vect_add_fu_925_o_V_d1, grp_vect_copyresize_fu_1131_o_V_d1, ap_CS_fsm_state123, ap_CS_fsm_state125, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            uv2_V_d1 <= grp_vect_copyresize_fu_1131_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_d1 <= grp_vect_add_fu_925_o_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_d1 <= grp_reed_muller_encode_fu_892_cdw_V_d1;
        else 
            uv2_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    uv2_V_we1_assign_proc : process(grp_reed_muller_encode_fu_892_cdw_V_we1, grp_vect_add_fu_925_o_V_we1, grp_vect_copyresize_fu_1131_o_V_we1, ap_CS_fsm_state123, ap_CS_fsm_state125, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            uv2_V_we1 <= grp_vect_copyresize_fu_1131_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            uv2_V_we1 <= grp_vect_add_fu_925_o_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            uv2_V_we1 <= grp_reed_muller_encode_fu_892_cdw_V_we1;
        else 
            uv2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1355_fu_1581_p2 <= (result_fu_1576_p2 xor ap_const_lv1_1);
    zext_ln285_1_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i52_reg_645),64));
    zext_ln285_2_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i69_reg_701),64));
    zext_ln285_3_fu_1475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i77_reg_723),64));
    zext_ln285_4_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i85_reg_734),64));
    zext_ln285_5_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i93_reg_745),64));
    zext_ln285_6_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i102_reg_768),64));
    zext_ln285_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i51_reg_634),64));
    zext_ln321_7_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_1513_p2),64));
    zext_ln321_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_i93_phi_fu_749_p4),4));
    zext_ln391_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_779),64));
    zext_ln544_124_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1685),64));
    zext_ln544_125_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_121_fu_1238_p3),64));
    zext_ln544_126_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_fu_1251_p2),64));
    zext_ln544_127_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_7_fu_1262_p2),64));
    zext_ln544_128_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_8_fu_1272_p2),64));
    zext_ln544_129_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_9_fu_1282_p2),64));
    zext_ln544_130_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_10_fu_1292_p2),64));
    zext_ln544_131_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_11_fu_1302_p2),64));
    zext_ln544_132_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_12_fu_1312_p2),64));
    zext_ln544_133_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_122_reg_1789_pp3_iter1_reg),64));
    zext_ln544_134_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_047_0_i_reg_678),64));
    zext_ln544_90_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_689_pp4_iter2_reg),64));
    zext_ln544_91_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1378_p3),64));
    zext_ln544_92_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_i_i180_reg_712),64));
    zext_ln544_93_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_i_i195_reg_757),64));
    zext_ln544_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_i_i_reg_656),64));
    zext_ln717_1_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_1_reg_1847),32));
    zext_ln717_2_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_2_reg_1913),32));
    zext_ln717_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln717_reg_1664),32));
    zext_ln808_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1395_p3),64));
end behav;
