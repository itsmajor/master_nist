-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_set_random_fixe is
  port (
    ap_clk                        : in  std_logic;
    ap_rst                        : in  std_logic;
    ap_start                      : in  std_logic;
    ap_done                       : out std_logic;
    ap_idle                       : out std_logic;
    ap_ready                      : out std_logic;
    v_V_address0                  : out std_logic_vector (6 downto 0);
    v_V_ce0                       : out std_logic;
    v_V_q0                        : in  std_logic_vector (14 downto 0);
    v_V_address1                  : out std_logic_vector (6 downto 0);
    v_V_ce1                       : out std_logic;
    v_V_we1                       : out std_logic;
    v_V_d1                        : out std_logic_vector (14 downto 0);
    state_seedexpander_V_address0 : out std_logic_vector (4 downto 0);
    state_seedexpander_V_ce0      : out std_logic;
    state_seedexpander_V_q0       : in  std_logic_vector (63 downto 0);
    state_seedexpander_V_address1 : out std_logic_vector (4 downto 0);
    state_seedexpander_V_ce1      : out std_logic;
    state_seedexpander_V_we1      : out std_logic;
    state_seedexpander_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of vect_set_random_fixe is
  constant ap_const_logic_1     : std_logic                      := '1';
  constant ap_const_logic_0     : std_logic                      := '0';
  constant ap_ST_fsm_state1     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000000001";
  constant ap_ST_fsm_state2     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000000010";
  constant ap_ST_fsm_state3     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000000100";
  constant ap_ST_fsm_state4     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000001000";
  constant ap_ST_fsm_state5     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000010000";
  constant ap_ST_fsm_state6     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000100000";
  constant ap_ST_fsm_state7     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000001000000";
  constant ap_ST_fsm_state8     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000010000000";
  constant ap_ST_fsm_state9     : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000100000000";
  constant ap_ST_fsm_state10    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000001000000000";
  constant ap_ST_fsm_state11    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000010000000000";
  constant ap_ST_fsm_state12    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000100000000000";
  constant ap_ST_fsm_state13    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000001000000000000";
  constant ap_ST_fsm_pp2_stage0 : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000010000000000000";
  constant ap_ST_fsm_state16    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000100000000000000";
  constant ap_ST_fsm_pp3_stage0 : std_logic_vector (48 downto 0) := "0000000000000000000000000000000001000000000000000";
  constant ap_ST_fsm_state19    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000010000000000000000";
  constant ap_ST_fsm_state20    : std_logic_vector (48 downto 0) := "0000000000000000000000000000000100000000000000000";
  constant ap_ST_fsm_state21    : std_logic_vector (48 downto 0) := "0000000000000000000000000000001000000000000000000";
  constant ap_ST_fsm_state22    : std_logic_vector (48 downto 0) := "0000000000000000000000000000010000000000000000000";
  constant ap_ST_fsm_state23    : std_logic_vector (48 downto 0) := "0000000000000000000000000000100000000000000000000";
  constant ap_ST_fsm_state24    : std_logic_vector (48 downto 0) := "0000000000000000000000000001000000000000000000000";
  constant ap_ST_fsm_state25    : std_logic_vector (48 downto 0) := "0000000000000000000000000010000000000000000000000";
  constant ap_ST_fsm_state26    : std_logic_vector (48 downto 0) := "0000000000000000000000000100000000000000000000000";
  constant ap_ST_fsm_state27    : std_logic_vector (48 downto 0) := "0000000000000000000000001000000000000000000000000";
  constant ap_ST_fsm_state28    : std_logic_vector (48 downto 0) := "0000000000000000000000010000000000000000000000000";
  constant ap_ST_fsm_state29    : std_logic_vector (48 downto 0) := "0000000000000000000000100000000000000000000000000";
  constant ap_ST_fsm_state30    : std_logic_vector (48 downto 0) := "0000000000000000000001000000000000000000000000000";
  constant ap_ST_fsm_state31    : std_logic_vector (48 downto 0) := "0000000000000000000010000000000000000000000000000";
  constant ap_ST_fsm_state32    : std_logic_vector (48 downto 0) := "0000000000000000000100000000000000000000000000000";
  constant ap_ST_fsm_state33    : std_logic_vector (48 downto 0) := "0000000000000000001000000000000000000000000000000";
  constant ap_ST_fsm_state34    : std_logic_vector (48 downto 0) := "0000000000000000010000000000000000000000000000000";
  constant ap_ST_fsm_state35    : std_logic_vector (48 downto 0) := "0000000000000000100000000000000000000000000000000";
  constant ap_ST_fsm_state36    : std_logic_vector (48 downto 0) := "0000000000000001000000000000000000000000000000000";
  constant ap_ST_fsm_state37    : std_logic_vector (48 downto 0) := "0000000000000010000000000000000000000000000000000";
  constant ap_ST_fsm_state38    : std_logic_vector (48 downto 0) := "0000000000000100000000000000000000000000000000000";
  constant ap_ST_fsm_state39    : std_logic_vector (48 downto 0) := "0000000000001000000000000000000000000000000000000";
  constant ap_ST_fsm_state40    : std_logic_vector (48 downto 0) := "0000000000010000000000000000000000000000000000000";
  constant ap_ST_fsm_state41    : std_logic_vector (48 downto 0) := "0000000000100000000000000000000000000000000000000";
  constant ap_ST_fsm_state42    : std_logic_vector (48 downto 0) := "0000000001000000000000000000000000000000000000000";
  constant ap_ST_fsm_state43    : std_logic_vector (48 downto 0) := "0000000010000000000000000000000000000000000000000";
  constant ap_ST_fsm_state44    : std_logic_vector (48 downto 0) := "0000000100000000000000000000000000000000000000000";
  constant ap_ST_fsm_state45    : std_logic_vector (48 downto 0) := "0000001000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state46    : std_logic_vector (48 downto 0) := "0000010000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state47    : std_logic_vector (48 downto 0) := "0000100000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state48    : std_logic_vector (48 downto 0) := "0001000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state49    : std_logic_vector (48 downto 0) := "0010000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_pp4_stage0 : std_logic_vector (48 downto 0) := "0100000000000000000000000000000000000000000000000";
  constant ap_ST_fsm_state52    : std_logic_vector (48 downto 0) := "1000000000000000000000000000000000000000000000000";
  constant ap_const_boolean_1   : boolean                        := true;
  constant ap_const_lv32_0      : std_logic_vector (31 downto 0) := "00000000000000000000000000000000";
  constant ap_const_lv32_1      : std_logic_vector (31 downto 0) := "00000000000000000000000000000001";
  constant ap_const_lv32_2      : std_logic_vector (31 downto 0) := "00000000000000000000000000000010";
  constant ap_const_lv32_3      : std_logic_vector (31 downto 0) := "00000000000000000000000000000011";
  constant ap_const_lv32_4      : std_logic_vector (31 downto 0) := "00000000000000000000000000000100";
  constant ap_const_lv32_5      : std_logic_vector (31 downto 0) := "00000000000000000000000000000101";
  constant ap_const_lv1_0       : std_logic_vector (0 downto 0)  := "0";
  constant ap_const_lv32_6      : std_logic_vector (31 downto 0) := "00000000000000000000000000000110";
  constant ap_const_lv32_7      : std_logic_vector (31 downto 0) := "00000000000000000000000000000111";
  constant ap_const_lv32_8      : std_logic_vector (31 downto 0) := "00000000000000000000000000001000";
  constant ap_const_lv32_A      : std_logic_vector (31 downto 0) := "00000000000000000000000000001010";
  constant ap_const_lv32_B      : std_logic_vector (31 downto 0) := "00000000000000000000000000001011";
  constant ap_const_lv32_D      : std_logic_vector (31 downto 0) := "00000000000000000000000000001101";
  constant ap_const_boolean_0   : boolean                        := false;
  constant ap_const_lv1_1       : std_logic_vector (0 downto 0)  := "1";
  constant ap_const_lv32_E      : std_logic_vector (31 downto 0) := "00000000000000000000000000001110";
  constant ap_const_lv32_F      : std_logic_vector (31 downto 0) := "00000000000000000000000000001111";
  constant ap_const_lv32_10     : std_logic_vector (31 downto 0) := "00000000000000000000000000010000";
  constant ap_const_lv32_11     : std_logic_vector (31 downto 0) := "00000000000000000000000000010001";
  constant ap_const_lv32_12     : std_logic_vector (31 downto 0) := "00000000000000000000000000010010";
  constant ap_const_lv32_2E     : std_logic_vector (31 downto 0) := "00000000000000000000000000101110";
  constant ap_const_lv32_2F     : std_logic_vector (31 downto 0) := "00000000000000000000000000101111";
  constant ap_const_lv32_C      : std_logic_vector (31 downto 0) := "00000000000000000000000000001100";
  constant ap_const_lv8_0       : std_logic_vector (7 downto 0)  := "00000000";
  constant ap_const_lv32_30     : std_logic_vector (31 downto 0) := "00000000000000000000000000110000";
  constant ap_const_lv8_C6      : std_logic_vector (7 downto 0)  := "11000110";
  constant ap_const_lv32_9      : std_logic_vector (31 downto 0) := "00000000000000000000000000001001";
  constant ap_const_lv5_0       : std_logic_vector (4 downto 0)  := "00000";
  constant ap_const_lv4_0       : std_logic_vector (3 downto 0)  := "0000";
  constant ap_const_lv7_0       : std_logic_vector (6 downto 0)  := "0000000";
  constant ap_const_lv64_19     : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
  constant ap_const_lv8_E1      : std_logic_vector (7 downto 0)  := "11100001";
  constant ap_const_lv8_1       : std_logic_vector (7 downto 0)  := "00000001";
  constant ap_const_lv8_42      : std_logic_vector (7 downto 0)  := "01000010";
  constant ap_const_lv8_11      : std_logic_vector (7 downto 0)  := "00010001";
  constant ap_const_lv5_11      : std_logic_vector (4 downto 0)  := "10001";
  constant ap_const_lv5_1       : std_logic_vector (4 downto 0)  := "00001";
  constant ap_const_lv4_8       : std_logic_vector (3 downto 0)  := "1000";
  constant ap_const_lv4_1       : std_logic_vector (3 downto 0)  := "0001";
  constant ap_const_lv3_0       : std_logic_vector (2 downto 0)  := "000";
  constant ap_const_lv8_8       : std_logic_vector (7 downto 0)  := "00001000";
  constant ap_const_lv8_2       : std_logic_vector (7 downto 0)  := "00000010";
  constant ap_const_lv8_3       : std_logic_vector (7 downto 0)  := "00000011";
  constant ap_const_lv24_FFDB88 : std_logic_vector (23 downto 0) := "111111111101101110001000";
  constant ap_const_lv24_4505   : std_logic_vector (23 downto 0) := "000000000100010100000101";
  constant ap_const_lv32_13     : std_logic_vector (31 downto 0) := "00000000000000000000000000010011";
  constant ap_const_lv7_1       : std_logic_vector (6 downto 0)  := "0000001";

  signal ap_CS_fsm                                        : std_logic_vector (48 downto 0) := "0000000000000000000000000000000000000000000000001";
  attribute fsm_encoding                                  : string;
  attribute fsm_encoding of ap_CS_fsm                     : signal is "none";
  signal ap_CS_fsm_state1                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state1              : signal is "none";
  signal i_op_assign_reg_389                              : std_logic_vector (4 downto 0);
  signal tmp_V_0_5_reg_401                                : std_logic_vector (63 downto 0);
  signal p_093_0_i_reg_413                                : std_logic_vector (3 downto 0);
  signal t_V_3_reg_438                                    : std_logic_vector (6 downto 0);
  signal exist_0_reg_449                                  : std_logic_vector (0 downto 0);
  signal i_V_fu_475_p2                                    : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state2                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state2              : signal is "none";
  signal ap_CS_fsm_state3                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state3              : signal is "none";
  signal t_V_5_reg_799                                    : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state4                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state4              : signal is "none";
  signal icmp_ln879_fu_500_p2                             : std_logic_vector (0 downto 0);
  signal icmp_ln879_reg_809                               : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state5                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state5              : signal is "none";
  signal ap_CS_fsm_state6                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state6              : signal is "none";
  signal icmp_ln887_2_fu_506_p2                           : std_logic_vector (0 downto 0);
  signal cnt_fu_517_p1                                    : std_logic_vector (7 downto 0);
  signal cnt_reg_821                                      : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state7                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state7              : signal is "none";
  signal ap_CS_fsm_state8                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state8              : signal is "none";
  signal tmp_0_V_reg_833                                  : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state9                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state9              : signal is "none";
  signal zext_ln53_fu_546_p1                              : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state11                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state11             : signal is "none";
  signal icmp_ln58_fu_568_p2                              : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_state12                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state12             : signal is "none";
  signal zext_ln1595_fu_574_p1                            : std_logic_vector (7 downto 0);
  signal zext_ln1595_reg_850                              : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_pp2_stage0                             : std_logic;
  attribute fsm_encoding of ap_CS_fsm_pp2_stage0          : signal is "none";
  signal ap_enable_reg_pp2_iter0                          : std_logic                      := '0';
  signal ap_block_state14_pp2_stage0_iter0                : boolean;
  signal ap_block_state15_pp2_stage0_iter1                : boolean;
  signal ap_block_pp2_stage0_11001                        : boolean;
  signal icmp_ln887_4_fu_578_p2                           : std_logic_vector (0 downto 0);
  signal icmp_ln887_4_reg_855                             : std_logic_vector (0 downto 0);
  signal i_fu_584_p2                                      : std_logic_vector (4 downto 0);
  signal i_reg_859                                        : std_logic_vector (4 downto 0);
  signal icmp_ln63_fu_590_p2                              : std_logic_vector (0 downto 0);
  signal icmp_ln63_reg_864                                : std_logic_vector (0 downto 0);
  signal ap_enable_reg_pp2_iter1                          : std_logic                      := '0';
  signal sub_ln69_fu_601_p2                               : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state16                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state16             : signal is "none";
  signal icmp_ln887_3_fu_617_p2                           : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_pp3_stage0                             : std_logic;
  attribute fsm_encoding of ap_CS_fsm_pp3_stage0          : signal is "none";
  signal ap_block_state17_pp3_stage0_iter0                : boolean;
  signal ap_block_state18_pp3_stage0_iter1                : boolean;
  signal ap_block_pp3_stage0_11001                        : boolean;
  signal k_V_1_fu_623_p2                                  : std_logic_vector (3 downto 0);
  signal ap_enable_reg_pp3_iter0                          : std_logic                      := '0';
  signal ret_V_fu_633_p2                                  : std_logic_vector (7 downto 0);
  signal ret_V_reg_892                                    : std_logic_vector (7 downto 0);
  signal icmp_ln887_5_fu_639_p2                           : std_logic_vector (0 downto 0);
  signal icmp_ln887_5_reg_897                             : std_logic_vector (0 downto 0);
  signal trunc_ln802_fu_667_p1                            : std_logic_vector (7 downto 0);
  signal trunc_ln802_reg_901                              : std_logic_vector (7 downto 0);
  signal i_V_2_fu_675_p2                                  : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state19                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state19             : signal is "none";
  signal rand_bytes_V_q0                                  : std_logic_vector (7 downto 0);
  signal rand_bytes_V_load_reg_911                        : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state20                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state20             : signal is "none";
  signal j_V_fu_698_p2                                    : std_logic_vector (7 downto 0);
  signal j_V_reg_921                                      : std_logic_vector (7 downto 0);
  signal random_data_V_fu_709_p4                          : std_logic_vector (23 downto 0);
  signal random_data_V_reg_932                            : std_logic_vector (23 downto 0);
  signal ap_CS_fsm_state21                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state21             : signal is "none";
  signal trunc_ln61_fu_729_p1                             : std_logic_vector (14 downto 0);
  signal trunc_ln61_reg_940                               : std_logic_vector (14 downto 0);
  signal ap_CS_fsm_state49                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state49             : signal is "none";
  signal icmp_ln61_fu_737_p2                              : std_logic_vector (0 downto 0);
  signal icmp_ln61_reg_946                                : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_pp4_stage0                             : std_logic;
  attribute fsm_encoding of ap_CS_fsm_pp4_stage0          : signal is "none";
  signal ap_block_state50_pp4_stage0_iter0                : boolean;
  signal ap_block_state51_pp4_stage0_iter1                : boolean;
  signal ap_block_pp4_stage0_11001                        : boolean;
  signal k_V_fu_742_p2                                    : std_logic_vector (6 downto 0);
  signal ap_enable_reg_pp4_iter0                          : std_logic                      := '0';
  signal or_ln62_fu_758_p2                                : std_logic_vector (0 downto 0);
  signal ap_enable_reg_pp4_iter1                          : std_logic                      := '0';
  signal ap_CS_fsm_state13                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state13             : signal is "none";
  signal grp_KeccakF1600_StatePer_fu_461_ap_ready         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_ap_done          : std_logic;
  signal ap_block_pp2_stage0_subdone                      : boolean;
  signal ap_predicate_tran15to16_state14                  : boolean;
  signal ap_block_pp3_stage0_subdone                      : boolean;
  signal ap_condition_pp3_exit_iter0_state17              : std_logic;
  signal ap_enable_reg_pp3_iter1                          : std_logic                      := '0';
  signal ap_block_pp4_stage0_subdone                      : boolean;
  signal ap_condition_pp4_exit_iter0_state50              : std_logic;
  signal rand_bytes_V_address0                            : std_logic_vector (7 downto 0);
  signal rand_bytes_V_ce0                                 : std_logic;
  signal rand_bytes_V_address1                            : std_logic_vector (7 downto 0);
  signal rand_bytes_V_ce1                                 : std_logic;
  signal rand_bytes_V_we1                                 : std_logic;
  signal rand_bytes_V_d1                                  : std_logic_vector (7 downto 0);
  signal rand_bytes_V_q1                                  : std_logic_vector (7 downto 0);
  signal grp_KeccakF1600_StatePer_fu_461_ap_start         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_ap_idle          : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_state_V_address0 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_461_state_V_ce0      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_state_V_address1 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_461_state_V_ce1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_state_V_we1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_461_state_V_d1       : std_logic_vector (63 downto 0);
  signal p_080_0_reg_251                                  : std_logic_vector (7 downto 0);
  signal icmp_ln887_fu_469_p2                             : std_logic_vector (0 downto 0);
  signal tmp_V_0_6_reg_424                                : std_logic_vector (63 downto 0);
  signal tmp_V_0_0_reg_262                                : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state52                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state52             : signal is "none";
  signal p_072_0_reg_274                                  : std_logic_vector (7 downto 0);
  signal tmp_V_0_1_reg_286                                : std_logic_vector (63 downto 0);
  signal icmp_ln887_1_fu_494_p2                           : std_logic_vector (0 downto 0);
  signal icmp_ln891_fu_718_p2                             : std_logic_vector (0 downto 0);
  signal p_072_1_reg_297                                  : std_logic_vector (7 downto 0);
  signal tmp_V_0_4_reg_367                                : std_logic_vector (63 downto 0);
  signal tmp_V_0_2_reg_308                                : std_logic_vector (63 downto 0);
  signal p_0292_0_i_reg_319                               : std_logic_vector (7 downto 0);
  signal ap_phi_mux_t_V_phi_fu_334_p4                     : std_logic_vector (7 downto 0);
  signal t_V_reg_331                                      : std_logic_vector (7 downto 0);
  signal tmp_V_0_3_reg_343                                : std_logic_vector (63 downto 0);
  signal ap_CS_fsm_state10                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state10             : signal is "none";
  signal icmp_ln44_fu_535_p2                              : std_logic_vector (0 downto 0);
  signal ap_phi_mux_op2_assign_phi_fu_358_p4              : std_logic_vector (0 downto 0);
  signal op2_assign_reg_354                               : std_logic_vector (0 downto 0);
  signal p_0201_i_i_reg_379                               : std_logic_vector (7 downto 0);
  signal ap_phi_mux_i_op_assign_phi_fu_393_p4             : std_logic_vector (4 downto 0);
  signal ap_block_pp2_stage0                              : boolean;
  signal ap_block_pp4_stage0                              : boolean;
  signal grp_KeccakF1600_StatePer_fu_461_ap_start_reg     : std_logic                      := '0';
  signal zext_ln544_fu_481_p1                             : std_logic_vector (63 downto 0);
  signal zext_ln544_1_fu_512_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln49_fu_526_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln65_fu_596_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln544_6_fu_671_p1                           : std_logic_vector (63 downto 0);
  signal ap_block_pp3_stage0                              : boolean;
  signal zext_ln544_2_fu_693_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_3_fu_704_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_4_fu_748_p1                           : std_logic_vector (63 downto 0);
  signal zext_ln544_5_fu_764_p1                           : std_logic_vector (63 downto 0);
  signal t_V_1_fu_144                                     : std_logic_vector (7 downto 0);
  signal i_V_1_fu_768_p2                                  : std_logic_vector (7 downto 0);
  signal sext_ln301_fu_563_p1                             : std_logic_vector (63 downto 0);
  signal zext_ln214_fu_612_p1                             : std_logic_vector (63 downto 0);
  signal offset_state_fu_521_p2                           : std_logic_vector (7 downto 0);
  signal zext_ln44_fu_531_p1                              : std_logic_vector (7 downto 0);
  signal xor_ln53_fu_540_p2                               : std_logic_vector (0 downto 0);
  signal zext_ln54_fu_550_p1                              : std_logic_vector (8 downto 0);
  signal zext_ln54_1_fu_553_p1                            : std_logic_vector (8 downto 0);
  signal sub_ln54_fu_557_p2                               : std_logic_vector (8 downto 0);
  signal ret_V_2_fu_606_p2                                : std_logic_vector (4 downto 0);
  signal zext_ln887_fu_629_p1                             : std_logic_vector (7 downto 0);
  signal trunc_ln556_fu_645_p1                            : std_logic_vector (2 downto 0);
  signal shl_ln_fu_649_p3                                 : std_logic_vector (5 downto 0);
  signal zext_ln808_fu_657_p1                             : std_logic_vector (63 downto 0);
  signal r_V_fu_661_p2                                    : std_logic_vector (63 downto 0);
  signal j_V_3_fu_681_p2                                  : std_logic_vector (7 downto 0);
  signal j_V_4_fu_687_p2                                  : std_logic_vector (7 downto 0);
  signal grp_fu_724_p1                                    : std_logic_vector (15 downto 0);
  signal ap_CS_fsm_state22                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state22             : signal is "none";
  signal grp_fu_724_p2                                    : std_logic_vector (14 downto 0);
  signal zext_ln61_fu_733_p1                              : std_logic_vector (7 downto 0);
  signal icmp_ln879_1_fu_753_p2                           : std_logic_vector (0 downto 0);
  signal grp_fu_724_ap_start                              : std_logic;
  signal grp_fu_724_ap_done                               : std_logic;
  signal ap_NS_fsm                                        : std_logic_vector (48 downto 0);
  signal ap_idle_pp2                                      : std_logic;
  signal ap_enable_pp2                                    : std_logic;
  signal ap_idle_pp3                                      : std_logic;
  signal ap_enable_pp3                                    : std_logic;
  signal ap_idle_pp4                                      : std_logic;
  signal ap_enable_pp4                                    : std_logic;

  -- component KeccakF1600_StatePer is
    -- port (
      -- ap_clk           : in  std_logic;
      -- ap_rst           : in  std_logic;
      -- ap_start         : in  std_logic;
      -- ap_done          : out std_logic;
      -- ap_idle          : out std_logic;
      -- ap_ready         : out std_logic;
      -- state_V_address0 : out std_logic_vector (4 downto 0);
      -- state_V_ce0      : out std_logic;
      -- state_V_q0       : in  std_logic_vector (63 downto 0);
      -- state_V_address1 : out std_logic_vector (4 downto 0);
      -- state_V_ce1      : out std_logic;
      -- state_V_we1      : out std_logic;
      -- state_V_d1       : out std_logic_vector (63 downto 0));
  -- end component;


  component crypto_kem_keypaifYi is
    generic (
      ID         : integer;
      NUM_STAGE  : integer;
      din0_WIDTH : integer;
      din1_WIDTH : integer;
      dout_WIDTH : integer);
    port (
      clk   : in  std_logic;
      reset : in  std_logic;
      start : in  std_logic;
      done  : out std_logic;
      din0  : in  std_logic_vector (23 downto 0);
      din1  : in  std_logic_vector (15 downto 0);
      ce    : in  std_logic;
      dout  : out std_logic_vector (14 downto 0));
  end component;


  component vect_set_random_feOg is
    generic (
      DataWidth    : integer;
      AddressRange : integer;
      AddressWidth : integer);
    port (
      clk      : in  std_logic;
      reset    : in  std_logic;
      address0 : in  std_logic_vector (7 downto 0);
      ce0      : in  std_logic;
      q0       : out std_logic_vector (7 downto 0);
      address1 : in  std_logic_vector (7 downto 0);
      ce1      : in  std_logic;
      we1      : in  std_logic;
      d1       : in  std_logic_vector (7 downto 0);
      q1       : out std_logic_vector (7 downto 0));
  end component;



begin
  rand_bytes_V_U : component vect_set_random_feOg
    generic map (
      DataWidth    => 8,
      AddressRange => 225,
      AddressWidth => 8)
    port map (
      clk      => ap_clk,
      reset    => ap_rst,
      address0 => rand_bytes_V_address0,
      ce0      => rand_bytes_V_ce0,
      q0       => rand_bytes_V_q0,
      address1 => rand_bytes_V_address1,
      ce1      => rand_bytes_V_ce1,
      we1      => rand_bytes_V_we1,
      d1       => rand_bytes_V_d1,
      q1       => rand_bytes_V_q1);

  -- grp_KeccakF1600_StatePer_fu_461 : component KeccakF1600_StatePer
    -- port map (
      -- ap_clk           => ap_clk,
      -- ap_rst           => ap_rst,
      -- ap_start         => grp_KeccakF1600_StatePer_fu_461_ap_start,
      -- ap_done          => grp_KeccakF1600_StatePer_fu_461_ap_done,
      -- ap_idle          => grp_KeccakF1600_StatePer_fu_461_ap_idle,
      -- ap_ready         => grp_KeccakF1600_StatePer_fu_461_ap_ready,
      -- state_V_address0 => grp_KeccakF1600_StatePer_fu_461_state_V_address0,
      -- state_V_ce0      => grp_KeccakF1600_StatePer_fu_461_state_V_ce0,
      -- state_V_q0       => state_seedexpander_V_q0,
      -- state_V_address1 => grp_KeccakF1600_StatePer_fu_461_state_V_address1,
      -- state_V_ce1      => grp_KeccakF1600_StatePer_fu_461_state_V_ce1,
      -- state_V_we1      => grp_KeccakF1600_StatePer_fu_461_state_V_we1,
      -- state_V_d1       => grp_KeccakF1600_StatePer_fu_461_state_V_d1);
	  
  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_461_ap_start;
  state_V_q0_permute <= state_seedexpander_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_461_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_461_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_461_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_461_state_V_d1       <= state_V_d1_permute;

  crypto_kem_keypaifYi_U14 : component crypto_kem_keypaifYi
    generic map (
      ID         => 1,
      NUM_STAGE  => 28,
      din0_WIDTH => 24,
      din1_WIDTH => 16,
      dout_WIDTH => 15)
    port map (
      clk   => ap_clk,
      reset => ap_rst,
      start => grp_fu_724_ap_start,
      done  => grp_fu_724_ap_done,
      din0  => random_data_V_reg_932,
      din1  => grp_fu_724_p1,
      ce    => ap_const_logic_1,
      dout  => grp_fu_724_p2);





  ap_CS_fsm_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_CS_fsm <= ap_ST_fsm_state1;
      else
        ap_CS_fsm <= ap_NS_fsm;
      end if;
    end if;
  end process;


  ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
      else
        if (((ap_predicate_tran15to16_state14 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
          ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
        elsif (((grp_KeccakF1600_StatePer_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
          ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
      else
        if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
          ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        elsif (((grp_KeccakF1600_StatePer_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
          ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
      else
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
          ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_568_p2 = ap_const_lv1_1))) then
          ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
      else
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state17))) then
          ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state17);
        elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
          ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_568_p2 = ap_const_lv1_1))) then
          ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
      else
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state50) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
          ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then
          ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
      else
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state50))) then
          ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state50);
        elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
          ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then
          ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_KeccakF1600_StatePer_fu_461_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_KeccakF1600_StatePer_fu_461_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_568_p2 = ap_const_lv1_0))) then
          grp_KeccakF1600_StatePer_fu_461_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_KeccakF1600_StatePer_fu_461_ap_ready = ap_const_logic_1)) then
          grp_KeccakF1600_StatePer_fu_461_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  exist_0_reg_449_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
        exist_0_reg_449 <= ap_const_lv1_0;
      elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln61_reg_946 = ap_const_lv1_0))) then
        exist_0_reg_449 <= or_ln62_fu_758_p2;
      end if;
    end if;
  end process;

  i_op_assign_reg_389_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_864 = ap_const_lv1_1) and (icmp_ln887_4_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
        i_op_assign_reg_389 <= i_reg_859;
      elsif (((grp_KeccakF1600_StatePer_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
        i_op_assign_reg_389 <= ap_const_lv5_0;
      end if;
    end if;
  end process;

  op2_assign_reg_354_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln44_fu_535_p2 = ap_const_lv1_1) and (ap_phi_mux_op2_assign_phi_fu_358_p4 = ap_const_lv1_0))) then
        op2_assign_reg_354 <= ap_const_lv1_1;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
        op2_assign_reg_354 <= ap_const_lv1_0;
      end if;
    end if;
  end process;

  p_0201_i_i_reg_379_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
        p_0201_i_i_reg_379 <= sub_ln69_fu_601_p2;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then
        p_0201_i_i_reg_379 <= zext_ln53_fu_546_p1;
      end if;
    end if;
  end process;

  p_0292_0_i_reg_319_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_500_p2 = ap_const_lv1_1))) then
        p_0292_0_i_reg_319 <= ap_const_lv8_0;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then
        p_0292_0_i_reg_319 <= i_V_2_fu_675_p2;
      end if;
    end if;
  end process;

  p_072_0_reg_274_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
        p_072_0_reg_274 <= ap_const_lv8_C6;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then
        p_072_0_reg_274 <= j_V_reg_921;
      end if;
    end if;
  end process;

  p_072_1_reg_297_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln891_fu_718_p2 = ap_const_lv1_1))) then
        p_072_1_reg_297 <= j_V_reg_921;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_494_p2 = ap_const_lv1_1))) then
        p_072_1_reg_297 <= p_072_0_reg_274;
      end if;
    end if;
  end process;

  p_080_0_reg_251_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_469_p2 = ap_const_lv1_0))) then
        p_080_0_reg_251 <= i_V_fu_475_p2;
      elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
        p_080_0_reg_251 <= ap_const_lv8_0;
      end if;
    end if;
  end process;

  p_093_0_i_reg_413_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_3_fu_617_p2 = ap_const_lv1_0))) then
        p_093_0_i_reg_413 <= k_V_1_fu_623_p2;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_568_p2 = ap_const_lv1_1))) then
        p_093_0_i_reg_413 <= ap_const_lv4_0;
      end if;
    end if;
  end process;

  t_V_1_fu_144_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((exist_0_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
        t_V_1_fu_144 <= i_V_1_fu_768_p2;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
        t_V_1_fu_144 <= ap_const_lv8_0;
      end if;
    end if;
  end process;

  t_V_3_reg_438_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
        t_V_3_reg_438 <= ap_const_lv7_0;
      elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln61_fu_737_p2 = ap_const_lv1_0))) then
        t_V_3_reg_438 <= k_V_fu_742_p2;
      end if;
    end if;
  end process;

  t_V_reg_331_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_506_p2 = ap_const_lv1_0) and (icmp_ln879_reg_809 = ap_const_lv1_1))) then
        t_V_reg_331 <= ap_const_lv8_0;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_500_p2 = ap_const_lv1_0))) then
        t_V_reg_331 <= p_072_1_reg_297;
      end if;
    end if;
  end process;

  tmp_V_0_1_reg_286_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln891_fu_718_p2 = ap_const_lv1_1))) then
        tmp_V_0_1_reg_286 <= tmp_V_0_6_reg_424;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_494_p2 = ap_const_lv1_1))) then
        tmp_V_0_1_reg_286 <= tmp_V_0_0_reg_262;
      end if;
    end if;
  end process;

  tmp_V_0_2_reg_308_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_500_p2 = ap_const_lv1_1))) then
        tmp_V_0_2_reg_308 <= tmp_V_0_1_reg_286;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then
        tmp_V_0_2_reg_308 <= tmp_V_0_4_reg_367;
      end if;
    end if;
  end process;

  tmp_V_0_3_reg_343_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln44_fu_535_p2 = ap_const_lv1_1) and (ap_phi_mux_op2_assign_phi_fu_358_p4 = ap_const_lv1_0))) then
        tmp_V_0_3_reg_343 <= tmp_0_V_reg_833;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
        tmp_V_0_3_reg_343 <= tmp_V_0_2_reg_308;
      end if;
    end if;
  end process;

  tmp_V_0_4_reg_367_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
        tmp_V_0_4_reg_367 <= tmp_V_0_5_reg_401;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then
        tmp_V_0_4_reg_367 <= tmp_V_0_3_reg_343;
      end if;
    end if;
  end process;

  tmp_V_0_5_reg_401_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_864 = ap_const_lv1_1) and (icmp_ln887_4_reg_855 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
        tmp_V_0_5_reg_401 <= state_seedexpander_V_q0;
      elsif (((grp_KeccakF1600_StatePer_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
        tmp_V_0_5_reg_401 <= tmp_V_0_4_reg_367;
      end if;
    end if;
  end process;

  tmp_V_0_6_reg_424_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_506_p2 = ap_const_lv1_0) and (icmp_ln879_reg_809 = ap_const_lv1_1))) then
        tmp_V_0_6_reg_424 <= tmp_V_0_2_reg_308;
      elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln879_fu_500_p2 = ap_const_lv1_0))) then
        tmp_V_0_6_reg_424 <= tmp_V_0_1_reg_286;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
        cnt_reg_821 <= cnt_fu_517_p1;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
        i_reg_859                       <= i_fu_584_p2;
        zext_ln1595_reg_850(4 downto 0) <= zext_ln1595_fu_574_p1(4 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
        icmp_ln61_reg_946 <= icmp_ln61_fu_737_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_4_fu_578_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
        icmp_ln63_reg_864 <= icmp_ln63_fu_590_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
        icmp_ln879_reg_809 <= icmp_ln879_fu_500_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
        icmp_ln887_4_reg_855 <= icmp_ln887_4_fu_578_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_3_fu_617_p2 = ap_const_lv1_0))) then
        icmp_ln887_5_reg_897 <= icmp_ln887_5_fu_639_p2;
        ret_V_reg_892        <= ret_V_fu_633_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
        j_V_reg_921               <= j_V_fu_698_p2;
        rand_bytes_V_load_reg_911 <= rand_bytes_V_q0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
        random_data_V_reg_932 <= random_data_V_fu_709_p4;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
        t_V_5_reg_799 <= t_V_1_fu_144;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
        tmp_0_V_reg_833 <= state_seedexpander_V_q0;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
        tmp_V_0_0_reg_262 <= tmp_V_0_6_reg_424;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
        trunc_ln61_reg_940 <= trunc_ln61_fu_729_p1;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_5_fu_639_p2 = ap_const_lv1_1) and (icmp_ln887_3_fu_617_p2 = ap_const_lv1_0))) then
        trunc_ln802_reg_901 <= trunc_ln802_fu_667_p1;
      end if;
    end if;
  end process;
  zext_ln1595_reg_850(7 downto 5) <= "000";

  ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln879_reg_809, ap_CS_fsm_state6, icmp_ln887_2_fu_506_p2, icmp_ln58_fu_568_p2, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln887_3_fu_617_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state21, icmp_ln61_fu_737_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_ap_done, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, icmp_ln887_fu_469_p2, icmp_ln887_1_fu_494_p2, icmp_ln891_fu_718_p2, ap_CS_fsm_state10, icmp_ln44_fu_535_p2, ap_phi_mux_op2_assign_phi_fu_358_p4)
  begin
    case ap_CS_fsm is
      when ap_ST_fsm_state1 =>
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state1;
        end if;
      when ap_ST_fsm_state2 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_469_p2 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state3;
        end if;
      when ap_ST_fsm_state3 =>
        ap_NS_fsm <= ap_ST_fsm_state4;
      when ap_ST_fsm_state4 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_494_p2 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state1;
        else
          ap_NS_fsm <= ap_ST_fsm_state5;
        end if;
      when ap_ST_fsm_state5 =>
        ap_NS_fsm <= ap_ST_fsm_state6;
      when ap_ST_fsm_state6 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln887_2_fu_506_p2 = ap_const_lv1_0) or (icmp_ln879_reg_809 = ap_const_lv1_0)))) then
          ap_NS_fsm <= ap_ST_fsm_state20;
        else
          ap_NS_fsm <= ap_ST_fsm_state7;
        end if;
      when ap_ST_fsm_state7 =>
        ap_NS_fsm <= ap_ST_fsm_state8;
      when ap_ST_fsm_state8 =>
        ap_NS_fsm <= ap_ST_fsm_state9;
      when ap_ST_fsm_state9 =>
        ap_NS_fsm <= ap_ST_fsm_state10;
      when ap_ST_fsm_state10 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln44_fu_535_p2 = ap_const_lv1_1) and (ap_phi_mux_op2_assign_phi_fu_358_p4 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state10;
        else
          ap_NS_fsm <= ap_ST_fsm_state11;
        end if;
      when ap_ST_fsm_state11 =>
        ap_NS_fsm <= ap_ST_fsm_state12;
      when ap_ST_fsm_state12 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln58_fu_568_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
        else
          ap_NS_fsm <= ap_ST_fsm_state13;
        end if;
      when ap_ST_fsm_state13 =>
        if (((grp_KeccakF1600_StatePer_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
          ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
        else
          ap_NS_fsm <= ap_ST_fsm_state13;
        end if;
      when ap_ST_fsm_pp2_stage0 =>
        if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0)))) then
          ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
          ap_NS_fsm <= ap_ST_fsm_state16;
        else
          ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
        end if;
      when ap_ST_fsm_state16 =>
        ap_NS_fsm <= ap_ST_fsm_state12;
      when ap_ST_fsm_pp3_stage0 =>
        if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln887_3_fu_617_p2 = ap_const_lv1_1)))) then
          ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln887_3_fu_617_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state19;
        else
          ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
        end if;
      when ap_ST_fsm_state19 =>
        ap_NS_fsm <= ap_ST_fsm_state6;
      when ap_ST_fsm_state20 =>
        ap_NS_fsm <= ap_ST_fsm_state21;
      when ap_ST_fsm_state21 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln891_fu_718_p2 = ap_const_lv1_0))) then
          ap_NS_fsm <= ap_ST_fsm_state22;
        else
          ap_NS_fsm <= ap_ST_fsm_state5;
        end if;
      when ap_ST_fsm_state22 =>
        ap_NS_fsm <= ap_ST_fsm_state23;
      when ap_ST_fsm_state23 =>
        ap_NS_fsm <= ap_ST_fsm_state24;
      when ap_ST_fsm_state24 =>
        ap_NS_fsm <= ap_ST_fsm_state25;
      when ap_ST_fsm_state25 =>
        ap_NS_fsm <= ap_ST_fsm_state26;
      when ap_ST_fsm_state26 =>
        ap_NS_fsm <= ap_ST_fsm_state27;
      when ap_ST_fsm_state27 =>
        ap_NS_fsm <= ap_ST_fsm_state28;
      when ap_ST_fsm_state28 =>
        ap_NS_fsm <= ap_ST_fsm_state29;
      when ap_ST_fsm_state29 =>
        ap_NS_fsm <= ap_ST_fsm_state30;
      when ap_ST_fsm_state30 =>
        ap_NS_fsm <= ap_ST_fsm_state31;
      when ap_ST_fsm_state31 =>
        ap_NS_fsm <= ap_ST_fsm_state32;
      when ap_ST_fsm_state32 =>
        ap_NS_fsm <= ap_ST_fsm_state33;
      when ap_ST_fsm_state33 =>
        ap_NS_fsm <= ap_ST_fsm_state34;
      when ap_ST_fsm_state34 =>
        ap_NS_fsm <= ap_ST_fsm_state35;
      when ap_ST_fsm_state35 =>
        ap_NS_fsm <= ap_ST_fsm_state36;
      when ap_ST_fsm_state36 =>
        ap_NS_fsm <= ap_ST_fsm_state37;
      when ap_ST_fsm_state37 =>
        ap_NS_fsm <= ap_ST_fsm_state38;
      when ap_ST_fsm_state38 =>
        ap_NS_fsm <= ap_ST_fsm_state39;
      when ap_ST_fsm_state39 =>
        ap_NS_fsm <= ap_ST_fsm_state40;
      when ap_ST_fsm_state40 =>
        ap_NS_fsm <= ap_ST_fsm_state41;
      when ap_ST_fsm_state41 =>
        ap_NS_fsm <= ap_ST_fsm_state42;
      when ap_ST_fsm_state42 =>
        ap_NS_fsm <= ap_ST_fsm_state43;
      when ap_ST_fsm_state43 =>
        ap_NS_fsm <= ap_ST_fsm_state44;
      when ap_ST_fsm_state44 =>
        ap_NS_fsm <= ap_ST_fsm_state45;
      when ap_ST_fsm_state45 =>
        ap_NS_fsm <= ap_ST_fsm_state46;
      when ap_ST_fsm_state46 =>
        ap_NS_fsm <= ap_ST_fsm_state47;
      when ap_ST_fsm_state47 =>
        ap_NS_fsm <= ap_ST_fsm_state48;
      when ap_ST_fsm_state48 =>
        ap_NS_fsm <= ap_ST_fsm_state49;
      when ap_ST_fsm_state49 =>
        ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
      when ap_ST_fsm_pp4_stage0 =>
        if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln61_fu_737_p2 = ap_const_lv1_1)))) then
          ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln61_fu_737_p2 = ap_const_lv1_1))) then
          ap_NS_fsm <= ap_ST_fsm_state52;
        else
          ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
        end if;
      when ap_ST_fsm_state52 =>
        ap_NS_fsm <= ap_ST_fsm_state4;
      when others =>
        ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end case;
  end process;
  ap_CS_fsm_pp2_stage0              <= ap_CS_fsm(13);
  ap_CS_fsm_pp3_stage0              <= ap_CS_fsm(15);
  ap_CS_fsm_pp4_stage0              <= ap_CS_fsm(47);
  ap_CS_fsm_state1                  <= ap_CS_fsm(0);
  ap_CS_fsm_state10                 <= ap_CS_fsm(9);
  ap_CS_fsm_state11                 <= ap_CS_fsm(10);
  ap_CS_fsm_state12                 <= ap_CS_fsm(11);
  ap_CS_fsm_state13                 <= ap_CS_fsm(12);
  ap_CS_fsm_state16                 <= ap_CS_fsm(14);
  ap_CS_fsm_state19                 <= ap_CS_fsm(16);
  ap_CS_fsm_state2                  <= ap_CS_fsm(1);
  ap_CS_fsm_state20                 <= ap_CS_fsm(17);
  ap_CS_fsm_state21                 <= ap_CS_fsm(18);
  ap_CS_fsm_state22                 <= ap_CS_fsm(19);
  ap_CS_fsm_state3                  <= ap_CS_fsm(2);
  ap_CS_fsm_state4                  <= ap_CS_fsm(3);
  ap_CS_fsm_state49                 <= ap_CS_fsm(46);
  ap_CS_fsm_state5                  <= ap_CS_fsm(4);
  ap_CS_fsm_state52                 <= ap_CS_fsm(48);
  ap_CS_fsm_state6                  <= ap_CS_fsm(5);
  ap_CS_fsm_state7                  <= ap_CS_fsm(6);
  ap_CS_fsm_state8                  <= ap_CS_fsm(7);
  ap_CS_fsm_state9                  <= ap_CS_fsm(8);
  ap_block_pp2_stage0               <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp2_stage0_11001         <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp2_stage0_subdone       <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp3_stage0               <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp3_stage0_11001         <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp3_stage0_subdone       <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp4_stage0               <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp4_stage0_11001         <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp4_stage0_subdone       <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state17_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state18_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state50_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state51_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

  ap_condition_pp3_exit_iter0_state17_assign_proc : process(icmp_ln887_3_fu_617_p2)
  begin
    if ((icmp_ln887_3_fu_617_p2 = ap_const_lv1_1)) then
      ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_1;
    else
      ap_condition_pp3_exit_iter0_state17 <= ap_const_logic_0;
    end if;
  end process;


  ap_condition_pp4_exit_iter0_state50_assign_proc : process(icmp_ln61_fu_737_p2)
  begin
    if ((icmp_ln61_fu_737_p2 = ap_const_lv1_1)) then
      ap_condition_pp4_exit_iter0_state50 <= ap_const_logic_1;
    else
      ap_condition_pp4_exit_iter0_state50 <= ap_const_logic_0;
    end if;
  end process;


  ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln887_1_fu_494_p2)
  begin
    if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_494_p2 = ap_const_lv1_0)))) then
      ap_done <= ap_const_logic_1;
    else
      ap_done <= ap_const_logic_0;
    end if;
  end process;

  ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
  ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
  ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

  ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
  begin
    if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      ap_idle <= ap_const_logic_1;
    else
      ap_idle <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
  begin
    if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
      ap_idle_pp2 <= ap_const_logic_1;
    else
      ap_idle_pp2 <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
  begin
    if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
      ap_idle_pp3 <= ap_const_logic_1;
    else
      ap_idle_pp3 <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
  begin
    if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then
      ap_idle_pp4 <= ap_const_logic_1;
    else
      ap_idle_pp4 <= ap_const_logic_0;
    end if;
  end process;


  ap_phi_mux_i_op_assign_phi_fu_393_p4_assign_proc : process(i_op_assign_reg_389, ap_CS_fsm_pp2_stage0, icmp_ln887_4_reg_855, i_reg_859, icmp_ln63_reg_864, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
  begin
    if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_864 = ap_const_lv1_1) and (icmp_ln887_4_reg_855 = ap_const_lv1_1))) then
      ap_phi_mux_i_op_assign_phi_fu_393_p4 <= i_reg_859;
    else
      ap_phi_mux_i_op_assign_phi_fu_393_p4 <= i_op_assign_reg_389;
    end if;
  end process;

  ap_phi_mux_op2_assign_phi_fu_358_p4 <= op2_assign_reg_354;

  ap_phi_mux_t_V_phi_fu_334_p4_assign_proc : process(icmp_ln879_reg_809, ap_CS_fsm_state6, icmp_ln887_2_fu_506_p2, t_V_reg_331)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_2_fu_506_p2 = ap_const_lv1_0) and (icmp_ln879_reg_809 = ap_const_lv1_1))) then
      ap_phi_mux_t_V_phi_fu_334_p4 <= ap_const_lv8_0;
    else
      ap_phi_mux_t_V_phi_fu_334_p4 <= t_V_reg_331;
    end if;
  end process;


  ap_predicate_tran15to16_state14_assign_proc : process(icmp_ln887_4_fu_578_p2, icmp_ln63_fu_590_p2)
  begin
    ap_predicate_tran15to16_state14 <= ((icmp_ln63_fu_590_p2 = ap_const_lv1_0) or (icmp_ln887_4_fu_578_p2 = ap_const_lv1_0));
  end process;


  ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln887_1_fu_494_p2)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_1_fu_494_p2 = ap_const_lv1_0))) then
      ap_ready <= ap_const_logic_1;
    else
      ap_ready <= ap_const_logic_0;
    end if;
  end process;

  cnt_fu_517_p1                            <= state_seedexpander_V_q0(8 - 1 downto 0);
  grp_KeccakF1600_StatePer_fu_461_ap_start <= grp_KeccakF1600_StatePer_fu_461_ap_start_reg;

  grp_fu_724_ap_start_assign_proc : process(ap_CS_fsm_state22)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
      grp_fu_724_ap_start <= ap_const_logic_1;
    else
      grp_fu_724_ap_start <= ap_const_logic_0;
    end if;
  end process;

  grp_fu_724_p1          <= ap_const_lv24_4505(16 - 1 downto 0);
  i_V_1_fu_768_p2        <= std_logic_vector(unsigned(t_V_5_reg_799) + unsigned(ap_const_lv8_1));
  i_V_2_fu_675_p2        <= std_logic_vector(unsigned(p_0292_0_i_reg_319) + unsigned(ap_const_lv8_8));
  i_V_fu_475_p2          <= std_logic_vector(unsigned(p_080_0_reg_251) + unsigned(ap_const_lv8_1));
  i_fu_584_p2            <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_393_p4) + unsigned(ap_const_lv5_1));
  icmp_ln44_fu_535_p2    <= "1" when (unsigned(zext_ln44_fu_531_p1) < unsigned(cnt_reg_821))                      else "0";
  icmp_ln58_fu_568_p2    <= "1" when (p_0201_i_i_reg_379 = ap_const_lv8_0)                                        else "0";
  icmp_ln61_fu_737_p2    <= "1" when (zext_ln61_fu_733_p1 = t_V_5_reg_799)                                        else "0";
  icmp_ln63_fu_590_p2    <= "1" when (unsigned(zext_ln1595_fu_574_p1) < unsigned(p_0201_i_i_reg_379))             else "0";
  icmp_ln879_1_fu_753_p2 <= "1" when (v_V_q0 = trunc_ln61_reg_940)                                                else "0";
  icmp_ln879_fu_500_p2   <= "1" when (p_072_1_reg_297 = ap_const_lv8_C6)                                          else "0";
  icmp_ln887_1_fu_494_p2 <= "1" when (unsigned(t_V_1_fu_144) < unsigned(ap_const_lv8_42))                         else "0";
  icmp_ln887_2_fu_506_p2 <= "1" when (unsigned(p_0292_0_i_reg_319) < unsigned(ap_const_lv8_C6))                   else "0";
  icmp_ln887_3_fu_617_p2 <= "1" when (p_093_0_i_reg_413 = ap_const_lv4_8)                                         else "0";
  icmp_ln887_4_fu_578_p2 <= "1" when (unsigned(ap_phi_mux_i_op_assign_phi_fu_393_p4) < unsigned(ap_const_lv5_11)) else "0";
  icmp_ln887_5_fu_639_p2 <= "1" when (unsigned(ret_V_fu_633_p2) < unsigned(ap_const_lv8_C6))                      else "0";
  icmp_ln887_fu_469_p2   <= "1" when (p_080_0_reg_251 = ap_const_lv8_E1)                                          else "0";
  icmp_ln891_fu_718_p2   <= "1" when (unsigned(random_data_V_fu_709_p4) > unsigned(ap_const_lv24_FFDB88))         else "0";
  j_V_3_fu_681_p2        <= std_logic_vector(unsigned(t_V_reg_331) + unsigned(ap_const_lv8_1));
  j_V_4_fu_687_p2        <= std_logic_vector(unsigned(t_V_reg_331) + unsigned(ap_const_lv8_2));
  j_V_fu_698_p2          <= std_logic_vector(unsigned(t_V_reg_331) + unsigned(ap_const_lv8_3));
  k_V_1_fu_623_p2        <= std_logic_vector(unsigned(p_093_0_i_reg_413) + unsigned(ap_const_lv4_1));
  k_V_fu_742_p2          <= std_logic_vector(unsigned(t_V_3_reg_438) + unsigned(ap_const_lv7_1));
  offset_state_fu_521_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_reg_821));
  or_ln62_fu_758_p2      <= (icmp_ln879_1_fu_753_p2 or exist_0_reg_449);
  r_V_fu_661_p2          <= std_logic_vector(shift_right(unsigned(tmp_V_0_4_reg_367), to_integer(unsigned('0' & zext_ln808_fu_657_p1(31-1 downto 0)))));

  rand_bytes_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, zext_ln544_1_fu_512_p1, zext_ln544_2_fu_693_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
      rand_bytes_V_address0 <= zext_ln544_2_fu_693_p1(8 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      rand_bytes_V_address0 <= zext_ln544_1_fu_512_p1(8 - 1 downto 0);
    else
      rand_bytes_V_address0 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state20, ap_enable_reg_pp3_iter1, zext_ln544_fu_481_p1, zext_ln544_6_fu_671_p1, ap_block_pp3_stage0, zext_ln544_3_fu_704_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
      rand_bytes_V_address1 <= zext_ln544_3_fu_704_p1(8 - 1 downto 0);
    elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
      rand_bytes_V_address1 <= zext_ln544_6_fu_671_p1(8 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
      rand_bytes_V_address1 <= zext_ln544_fu_481_p1(8 - 1 downto 0);
    else
      rand_bytes_V_address1 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
      rand_bytes_V_ce0 <= ap_const_logic_1;
    else
      rand_bytes_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  rand_bytes_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state20, ap_enable_reg_pp3_iter1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then
      rand_bytes_V_ce1 <= ap_const_logic_1;
    else
      rand_bytes_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  rand_bytes_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, trunc_ln802_reg_901, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
  begin
    if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
      rand_bytes_V_d1 <= trunc_ln802_reg_901;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
      rand_bytes_V_d1 <= ap_const_lv8_0;
    else
      rand_bytes_V_d1 <= "XXXXXXXX";
    end if;
  end process;


  rand_bytes_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln887_5_reg_897, ap_enable_reg_pp3_iter1, icmp_ln887_fu_469_p2)
  begin
    if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln887_5_reg_897 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_469_p2 = ap_const_lv1_0)))) then
      rand_bytes_V_we1 <= ap_const_logic_1;
    else
      rand_bytes_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  random_data_V_fu_709_p4 <= ((rand_bytes_V_load_reg_911 & rand_bytes_V_q0) & rand_bytes_V_q1);
  ret_V_2_fu_606_p2       <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_389));
  ret_V_fu_633_p2         <= std_logic_vector(unsigned(p_0292_0_i_reg_319) + unsigned(zext_ln887_fu_629_p1));
  sext_ln301_fu_563_p1    <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_557_p2), 64));

  shl_ln_fu_649_p3 <= (trunc_ln556_fu_645_p1 & ap_const_lv3_0);

  state_seedexpander_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_address0, ap_block_pp2_stage0, zext_ln49_fu_526_p1, zext_ln65_fu_596_p1)
  begin
    if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
      state_seedexpander_V_address0 <= zext_ln65_fu_596_p1(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
      state_seedexpander_V_address0 <= zext_ln49_fu_526_p1(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then
      state_seedexpander_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_address0 <= grp_KeccakF1600_StatePer_fu_461_state_V_address0;
    else
      state_seedexpander_V_address0 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_address1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
      state_seedexpander_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_address1 <= grp_KeccakF1600_StatePer_fu_461_state_V_address1;
    else
      state_seedexpander_V_address1 <= "XXXXX";
    end if;
  end process;


  state_seedexpander_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_ce0)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
      state_seedexpander_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_ce0 <= grp_KeccakF1600_StatePer_fu_461_state_V_ce0;
    else
      state_seedexpander_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_ce1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
      state_seedexpander_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_ce1 <= grp_KeccakF1600_StatePer_fu_461_state_V_ce1;
    else
      state_seedexpander_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_seedexpander_V_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_d1, sext_ln301_fu_563_p1, zext_ln214_fu_612_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
      state_seedexpander_V_d1 <= zext_ln214_fu_612_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then
      state_seedexpander_V_d1 <= sext_ln301_fu_563_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_d1 <= grp_KeccakF1600_StatePer_fu_461_state_V_d1;
    else
      state_seedexpander_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_seedexpander_V_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state13, grp_KeccakF1600_StatePer_fu_461_state_V_we1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
      state_seedexpander_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
      state_seedexpander_V_we1 <= grp_KeccakF1600_StatePer_fu_461_state_V_we1;
    else
      state_seedexpander_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  sub_ln54_fu_557_p2    <= std_logic_vector(unsigned(zext_ln54_fu_550_p1) - unsigned(zext_ln54_1_fu_553_p1));
  sub_ln69_fu_601_p2    <= std_logic_vector(unsigned(p_0201_i_i_reg_379) - unsigned(zext_ln1595_reg_850));
  trunc_ln556_fu_645_p1 <= p_093_0_i_reg_413(3 - 1 downto 0);
  trunc_ln61_fu_729_p1  <= grp_fu_724_p2(15 - 1 downto 0);
  trunc_ln802_fu_667_p1 <= r_V_fu_661_p2(8 - 1 downto 0);
  v_V_address0          <= zext_ln544_4_fu_748_p1(7 - 1 downto 0);
  v_V_address1          <= zext_ln544_5_fu_764_p1(7 - 1 downto 0);

  v_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0)
  begin
    if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
      v_V_ce0 <= ap_const_logic_1;
    else
      v_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  v_V_ce1_assign_proc : process(ap_CS_fsm_state52)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
      v_V_ce1 <= ap_const_logic_1;
    else
      v_V_ce1 <= ap_const_logic_0;
    end if;
  end process;

  v_V_d1 <= trunc_ln61_reg_940;

  v_V_we1_assign_proc : process(exist_0_reg_449, ap_CS_fsm_state52)
  begin
    if (((exist_0_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
      v_V_we1 <= ap_const_logic_1;
    else
      v_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  xor_ln53_fu_540_p2     <= (op2_assign_reg_354 xor ap_const_lv1_1);
  zext_ln1595_fu_574_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_393_p4), 8));
  zext_ln214_fu_612_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_606_p2), 64));
  zext_ln44_fu_531_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_354), 8));
  zext_ln49_fu_526_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_521_p2), 64));
  zext_ln53_fu_546_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln53_fu_540_p2), 8));
  zext_ln544_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_334_p4), 64));
  zext_ln544_2_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_3_fu_681_p2), 64));
  zext_ln544_3_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_V_4_fu_687_p2), 64));
  zext_ln544_4_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_438), 64));
  zext_ln544_5_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_799), 64));
  zext_ln544_6_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_892), 64));
  zext_ln544_fu_481_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_080_0_reg_251), 64));
  zext_ln54_1_fu_553_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_354), 9));
  zext_ln54_fu_550_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_821), 9));
  zext_ln61_fu_733_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_438), 8));
  zext_ln65_fu_596_p1    <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_393_p4), 64));
  zext_ln808_fu_657_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_649_p3), 64));
  zext_ln887_fu_629_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_093_0_i_reg_413), 8));
end behav;
