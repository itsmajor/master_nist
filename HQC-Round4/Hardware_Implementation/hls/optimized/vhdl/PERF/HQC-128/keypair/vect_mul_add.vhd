-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vect_mul_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    o_V_ce0 : OUT STD_LOGIC;
    o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    o_V_ce1 : OUT STD_LOGIC;
    o_V_we1 : OUT STD_LOGIC;
    o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a1_V_ce0 : OUT STD_LOGIC;
    a1_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    a2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a2_V_ce0 : OUT STD_LOGIC;
    a2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a2_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a2_V_ce1 : OUT STD_LOGIC;
    a2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a3_V_ce0 : OUT STD_LOGIC;
    a3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a3_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a3_V_ce1 : OUT STD_LOGIC;
    a3_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of vect_mul_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000110";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv13_124E : STD_LOGIC_VECTOR (12 downto 0) := "1001001001110";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_47 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0194_0_reg_271 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_283 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_078_0_i_reg_294 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_082_0_i_reg_305 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_2_reg_316 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_V_3_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_V_fu_360_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_reg_609 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ret_V_fu_366_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_614 : STD_LOGIC_VECTOR (9 downto 0);
    signal a2_V_load_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state5_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal a2_V_load_1_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_V_load_2_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state6_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal a2_V_load_3_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_V_load_4_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state7_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal a2_V_load_5_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln76_reg_694_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_476_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_reg_698 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln887_7_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln544_fu_488_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln544_reg_708 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln544_2_fu_502_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln544_2_reg_714 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_729 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state11_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal trunc_ln544_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln544_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal a2_large_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal v1_V_reg_739 : STD_LOGIC_VECTOR (255 downto 0);
    signal res_mult_V_addr_1_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state12_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal sub_ln544_fu_554_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln544_reg_751 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state13_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal res_mult_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal res_mult_V_load_reg_756 : STD_LOGIC_VECTOR (255 downto 0);
    signal dl_V_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal dl_V_reg_761 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln719_fu_592_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal xor_ln719_reg_766 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal a2_large_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal a2_large_V_ce0 : STD_LOGIC;
    signal a2_large_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal a2_large_V_ce1 : STD_LOGIC;
    signal a2_large_V_we1 : STD_LOGIC;
    signal a2_large_V_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal res_mult_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_mult_V_ce0 : STD_LOGIC;
    signal res_mult_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_mult_V_ce1 : STD_LOGIC;
    signal res_mult_V_we1 : STD_LOGIC;
    signal res_mult_V_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal res_mult_V_q1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_reduce_naive_add_fu_328_ap_start : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_ap_done : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_ap_idle : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_ap_ready : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_o_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reduce_naive_add_fu_328_o_V_ce0 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_o_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reduce_naive_add_fu_328_o_V_ce1 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_o_V_we1 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_o_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reduce_naive_add_fu_328_a1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reduce_naive_add_fu_328_a1_V_ce0 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_a1_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_reduce_naive_add_fu_328_a1_V_ce1 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_a2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reduce_naive_add_fu_328_a2_V_ce0 : STD_LOGIC;
    signal grp_reduce_naive_add_fu_328_a2_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reduce_naive_add_fu_328_a2_V_ce1 : STD_LOGIC;
    signal p_025_0_i_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_6_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0194_0_phi_fu_275_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_287_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_p_078_0_i_phi_fu_298_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_p_082_0_i_phi_fu_309_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reduce_naive_add_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln544_7_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_8_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_9_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_12_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln544_13_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_14_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln544_15_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_16_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln544_17_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_18_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_10_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_11_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal p_Result_7_fu_455_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal or_ln1353_fu_379_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_1_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_2_fu_400_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_3_fu_410_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_4_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_5_fu_430_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1353_6_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_fu_496_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_19_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_540_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal zext_ln544_20_fu_551_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln544_1_fu_565_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_s_fu_575_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln544_21_fu_572_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal r_V_fu_582_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln209_fu_588_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component reduce_naive_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        o_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce0 : OUT STD_LOGIC;
        o_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        o_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        o_V_ce1 : OUT STD_LOGIC;
        o_V_we1 : OUT STD_LOGIC;
        o_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_ce0 : OUT STD_LOGIC;
        a1_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        a1_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a1_V_ce1 : OUT STD_LOGIC;
        a1_V_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
        a2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a2_V_ce0 : OUT STD_LOGIC;
        a2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a2_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a2_V_ce1 : OUT STD_LOGIC;
        a2_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vect_mul_add_a2_lg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component vect_mul_add_res_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    a2_large_V_U : component vect_mul_add_a2_lg8j
    generic map (
        DataWidth => 256,
        AddressRange => 71,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a2_large_V_address0,
        ce0 => a2_large_V_ce0,
        q0 => a2_large_V_q0,
        address1 => a2_large_V_address1,
        ce1 => a2_large_V_ce1,
        we1 => a2_large_V_we1,
        d1 => a2_large_V_d1);

    res_mult_V_U : component vect_mul_add_res_hbi
    generic map (
        DataWidth => 256,
        AddressRange => 140,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => res_mult_V_address0,
        ce0 => res_mult_V_ce0,
        q0 => res_mult_V_q0,
        address1 => res_mult_V_address1,
        ce1 => res_mult_V_ce1,
        we1 => res_mult_V_we1,
        d1 => res_mult_V_d1,
        q1 => res_mult_V_q1);

    grp_reduce_naive_add_fu_328 : component reduce_naive_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_naive_add_fu_328_ap_start,
        ap_done => grp_reduce_naive_add_fu_328_ap_done,
        ap_idle => grp_reduce_naive_add_fu_328_ap_idle,
        ap_ready => grp_reduce_naive_add_fu_328_ap_ready,
        o_V_address0 => grp_reduce_naive_add_fu_328_o_V_address0,
        o_V_ce0 => grp_reduce_naive_add_fu_328_o_V_ce0,
        o_V_q0 => o_V_q0,
        o_V_address1 => grp_reduce_naive_add_fu_328_o_V_address1,
        o_V_ce1 => grp_reduce_naive_add_fu_328_o_V_ce1,
        o_V_we1 => grp_reduce_naive_add_fu_328_o_V_we1,
        o_V_d1 => grp_reduce_naive_add_fu_328_o_V_d1,
        a1_V_address0 => grp_reduce_naive_add_fu_328_a1_V_address0,
        a1_V_ce0 => grp_reduce_naive_add_fu_328_a1_V_ce0,
        a1_V_q0 => res_mult_V_q0,
        a1_V_address1 => grp_reduce_naive_add_fu_328_a1_V_address1,
        a1_V_ce1 => grp_reduce_naive_add_fu_328_a1_V_ce1,
        a1_V_q1 => res_mult_V_q1,
        a2_V_address0 => grp_reduce_naive_add_fu_328_a2_V_address0,
        a2_V_ce0 => grp_reduce_naive_add_fu_328_a2_V_ce0,
        a2_V_q0 => a3_V_q0,
        a2_V_address1 => grp_reduce_naive_add_fu_328_a2_V_address1,
        a2_V_ce1 => grp_reduce_naive_add_fu_328_a2_V_ce1,
        a2_V_q1 => a3_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reduce_naive_add_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_naive_add_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_reduce_naive_add_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_naive_add_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_naive_add_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
                indvar_flatten_reg_283 <= add_ln76_reg_698;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten_reg_283 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    p_0194_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0194_0_reg_271 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                p_0194_0_reg_271 <= i_V_reg_609;
            end if; 
        end if;
    end process;

    p_025_0_i_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_6_fu_337_p2 = ap_const_lv1_0))) then 
                p_025_0_i_reg_260 <= i_V_3_fu_343_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_025_0_i_reg_260 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_078_0_i_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
                p_078_0_i_reg_294 <= select_ln544_2_reg_714;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_078_0_i_reg_294 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_082_0_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
                p_082_0_i_reg_305 <= dl_V_reg_761;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_082_0_i_reg_305 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_V_2_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln76_reg_694_pp2_iter1_reg = ap_const_lv1_0))) then 
                r_V_2_reg_316 <= v1_V_reg_739;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_V_2_reg_316 <= ap_const_lv256_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                a2_V_load_1_reg_639 <= a2_V_q1;
                a2_V_load_reg_634 <= a2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                a2_V_load_2_reg_654 <= a2_V_q0;
                a2_V_load_3_reg_659 <= a2_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then
                a2_V_load_4_reg_674 <= a2_V_q0;
                a2_V_load_5_reg_679 <= a2_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln76_reg_698 <= add_ln76_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                dl_V_reg_761 <= dl_V_fu_560_p2;
                res_mult_V_load_reg_756 <= res_mult_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_V_reg_609 <= i_V_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln76_reg_694 <= icmp_ln76_fu_470_p2;
                icmp_ln76_reg_694_pp2_iter1_reg <= icmp_ln76_reg_694;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_fu_470_p2 = ap_const_lv1_0))) then
                icmp_ln887_7_reg_703 <= icmp_ln887_7_fu_482_p2;
                select_ln544_reg_708 <= select_ln544_fu_488_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln887_reg_605 <= icmp_ln887_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                res_mult_V_addr_1_reg_745 <= zext_ln544_11_fu_546_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ret_V_reg_614(9 downto 3) <= ret_V_fu_366_p3(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_fu_470_p2 = ap_const_lv1_0))) then
                select_ln544_2_reg_714 <= select_ln544_2_fu_502_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                sub_ln544_reg_751 <= sub_ln544_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                tmp_4_reg_729 <= a1_V_q0(14 downto 8);
                trunc_ln544_reg_734 <= trunc_ln544_fu_530_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                v1_V_reg_739 <= a2_large_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then
                xor_ln719_reg_766 <= xor_ln719_fu_592_p2;
            end if;
        end if;
    end process;
    ret_V_reg_614(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_354_p2, ap_enable_reg_pp1_iter0, icmp_ln76_fu_470_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage3_subdone, ap_block_pp2_stage1_subdone, grp_reduce_naive_add_fu_328_ap_done, icmp_ln887_6_fu_337_p2, ap_CS_fsm_state17, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_6_fu_337_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln887_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln887_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln76_fu_470_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln76_fu_470_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_reduce_naive_add_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    a1_V_address0 <= zext_ln544_18_fu_510_p1(7 - 1 downto 0);

    a1_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            a1_V_ce0 <= ap_const_logic_1;
        else 
            a1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a2_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage0, zext_ln544_8_fu_374_p1, zext_ln544_12_fu_395_p1, ap_block_pp1_stage1, zext_ln544_14_fu_415_p1, ap_block_pp1_stage2, zext_ln544_16_fu_435_p1, ap_block_pp1_stage3)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                a2_V_address0 <= zext_ln544_16_fu_435_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                a2_V_address0 <= zext_ln544_14_fu_415_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                a2_V_address0 <= zext_ln544_12_fu_395_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                a2_V_address0 <= zext_ln544_8_fu_374_p1(10 - 1 downto 0);
            else 
                a2_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            a2_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a2_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage0, zext_ln544_9_fu_385_p1, ap_block_pp1_stage1, zext_ln544_13_fu_405_p1, ap_block_pp1_stage2, zext_ln544_15_fu_425_p1, ap_block_pp1_stage3, zext_ln544_17_fu_445_p1)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                a2_V_address1 <= zext_ln544_17_fu_445_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                a2_V_address1 <= zext_ln544_15_fu_425_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                a2_V_address1 <= zext_ln544_13_fu_405_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                a2_V_address1 <= zext_ln544_9_fu_385_p1(10 - 1 downto 0);
            else 
                a2_V_address1 <= "XXXXXXXXXX";
            end if;
        else 
            a2_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            a2_V_ce0 <= ap_const_logic_1;
        else 
            a2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a2_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            a2_V_ce1 <= ap_const_logic_1;
        else 
            a2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a2_large_V_address0 <= zext_ln544_10_fu_515_p1(7 - 1 downto 0);

    a2_large_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, ap_block_pp1_stage0, zext_ln544_fu_450_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a2_large_V_address1 <= ap_const_lv64_46(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            a2_large_V_address1 <= zext_ln544_fu_450_p1(7 - 1 downto 0);
        else 
            a2_large_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    a2_large_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            a2_large_V_ce0 <= ap_const_logic_1;
        else 
            a2_large_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a2_large_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            a2_large_V_ce1 <= ap_const_logic_1;
        else 
            a2_large_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a2_large_V_d1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, ap_block_pp1_stage0, p_Result_7_fu_455_p9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a2_large_V_d1 <= ap_const_lv256_lc_1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            a2_large_V_d1 <= p_Result_7_fu_455_p9;
        else 
            a2_large_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a2_large_V_we1_assign_proc : process(icmp_ln887_reg_605, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            a2_large_V_we1 <= ap_const_logic_1;
        else 
            a2_large_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a3_V_address0 <= grp_reduce_naive_add_fu_328_a2_V_address0;
    a3_V_address1 <= grp_reduce_naive_add_fu_328_a2_V_address1;
    a3_V_ce0 <= grp_reduce_naive_add_fu_328_a2_V_ce0;
    a3_V_ce1 <= grp_reduce_naive_add_fu_328_a2_V_ce1;
    add_ln700_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_p_078_0_i_phi_fu_298_p4));
    add_ln76_fu_476_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_287_p4) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln887_fu_354_p2)
    begin
        if ((icmp_ln887_fu_354_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln76_fu_470_p2)
    begin
        if ((icmp_ln76_fu_470_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_reduce_naive_add_fu_328_ap_done, ap_CS_fsm_state17)
    begin
        if ((((grp_reduce_naive_add_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_287_p4_assign_proc : process(indvar_flatten_reg_283, icmp_ln76_reg_694, ap_CS_fsm_pp2_stage0, add_ln76_reg_698, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_287_p4 <= add_ln76_reg_698;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_287_p4 <= indvar_flatten_reg_283;
        end if; 
    end process;


    ap_phi_mux_p_0194_0_phi_fu_275_p4_assign_proc : process(p_0194_0_reg_271, icmp_ln887_reg_605, ap_CS_fsm_pp1_stage0, i_V_reg_609, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln887_reg_605 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_p_0194_0_phi_fu_275_p4 <= i_V_reg_609;
        else 
            ap_phi_mux_p_0194_0_phi_fu_275_p4 <= p_0194_0_reg_271;
        end if; 
    end process;


    ap_phi_mux_p_078_0_i_phi_fu_298_p4_assign_proc : process(p_078_0_i_reg_294, icmp_ln76_reg_694, ap_CS_fsm_pp2_stage0, select_ln544_2_reg_714, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
            ap_phi_mux_p_078_0_i_phi_fu_298_p4 <= select_ln544_2_reg_714;
        else 
            ap_phi_mux_p_078_0_i_phi_fu_298_p4 <= p_078_0_i_reg_294;
        end if; 
    end process;


    ap_phi_mux_p_082_0_i_phi_fu_309_p4_assign_proc : process(p_082_0_i_reg_305, icmp_ln76_reg_694, ap_CS_fsm_pp2_stage0, dl_V_reg_761, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln76_reg_694 = ap_const_lv1_0))) then 
            ap_phi_mux_p_082_0_i_phi_fu_309_p4 <= dl_V_reg_761;
        else 
            ap_phi_mux_p_082_0_i_phi_fu_309_p4 <= p_082_0_i_reg_305;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_reduce_naive_add_fu_328_ap_done, ap_CS_fsm_state17)
    begin
        if (((grp_reduce_naive_add_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dl_V_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln544_reg_708));
    grp_reduce_naive_add_fu_328_ap_start <= grp_reduce_naive_add_fu_328_ap_start_reg;
    i_V_3_fu_343_p2 <= std_logic_vector(unsigned(p_025_0_i_reg_260) + unsigned(ap_const_lv8_1));
    i_V_fu_360_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_0194_0_phi_fu_275_p4) + unsigned(ap_const_lv7_1));
    icmp_ln76_fu_470_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_287_p4 = ap_const_lv13_124E) else "0";
    icmp_ln887_6_fu_337_p2 <= "1" when (p_025_0_i_reg_260 = ap_const_lv8_8C) else "0";
    icmp_ln887_7_fu_482_p2 <= "1" when (ap_phi_mux_p_082_0_i_phi_fu_309_p4 = ap_const_lv7_47) else "0";
    icmp_ln887_fu_354_p2 <= "1" when (ap_phi_mux_p_0194_0_phi_fu_275_p4 = ap_const_lv7_46) else "0";
    o_V_address0 <= grp_reduce_naive_add_fu_328_o_V_address0;
    o_V_address1 <= grp_reduce_naive_add_fu_328_o_V_address1;
    o_V_ce0 <= grp_reduce_naive_add_fu_328_o_V_ce0;
    o_V_ce1 <= grp_reduce_naive_add_fu_328_o_V_ce1;
    o_V_d1 <= grp_reduce_naive_add_fu_328_o_V_d1;
    o_V_we1 <= grp_reduce_naive_add_fu_328_o_V_we1;
    or_ln1353_1_fu_390_p2 <= (ret_V_reg_614 or ap_const_lv10_2);
    or_ln1353_2_fu_400_p2 <= (ret_V_reg_614 or ap_const_lv10_3);
    or_ln1353_3_fu_410_p2 <= (ret_V_reg_614 or ap_const_lv10_4);
    or_ln1353_4_fu_420_p2 <= (ret_V_reg_614 or ap_const_lv10_5);
    or_ln1353_5_fu_430_p2 <= (ret_V_reg_614 or ap_const_lv10_6);
    or_ln1353_6_fu_440_p2 <= (ret_V_reg_614 or ap_const_lv10_7);
    or_ln1353_fu_379_p2 <= (ret_V_fu_366_p3 or ap_const_lv10_1);
    p_Result_7_fu_455_p9 <= (((((((a2_V_q1 & a2_V_q0) & a2_V_load_5_reg_679) & a2_V_load_4_reg_674) & a2_V_load_3_reg_659) & a2_V_load_2_reg_654) & a2_V_load_1_reg_639) & a2_V_load_reg_634);
    p_Result_s_fu_575_p3 <= (v1_V_reg_739 & select_ln544_1_fu_565_p3);
    r_V_fu_582_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_575_p3),to_integer(unsigned('0' & zext_ln544_21_fu_572_p1(31-1 downto 0)))));

    res_mult_V_address0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, grp_reduce_naive_add_fu_328_a1_V_address0, ap_CS_fsm_state17, zext_ln544_11_fu_546_p1, ap_block_pp2_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            res_mult_V_address0 <= zext_ln544_11_fu_546_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_mult_V_address0 <= grp_reduce_naive_add_fu_328_a1_V_address0;
        else 
            res_mult_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    res_mult_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, res_mult_V_addr_1_reg_745, ap_enable_reg_pp2_iter1, grp_reduce_naive_add_fu_328_a1_V_address1, ap_CS_fsm_state17, zext_ln544_7_fu_349_p1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            res_mult_V_address1 <= res_mult_V_addr_1_reg_745;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_mult_V_address1 <= zext_ln544_7_fu_349_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_mult_V_address1 <= grp_reduce_naive_add_fu_328_a1_V_address1;
        else 
            res_mult_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    res_mult_V_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, grp_reduce_naive_add_fu_328_a1_V_ce0, ap_CS_fsm_state17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            res_mult_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_mult_V_ce0 <= grp_reduce_naive_add_fu_328_a1_V_ce0;
        else 
            res_mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_mult_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, grp_reduce_naive_add_fu_328_a1_V_ce1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            res_mult_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_mult_V_ce1 <= grp_reduce_naive_add_fu_328_a1_V_ce1;
        else 
            res_mult_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_mult_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, xor_ln719_reg_766, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            res_mult_V_d1 <= xor_ln719_reg_766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_mult_V_d1 <= ap_const_lv256_lc_1;
        else 
            res_mult_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_mult_V_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln76_reg_694_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, icmp_ln887_6_fu_337_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_6_fu_337_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln76_reg_694_pp2_iter1_reg = ap_const_lv1_0)))) then 
            res_mult_V_we1 <= ap_const_logic_1;
        else 
            res_mult_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_4_fu_540_p2 <= std_logic_vector(unsigned(zext_ln215_fu_537_p1) + unsigned(zext_ln544_19_fu_534_p1));
    ret_V_fu_366_p3 <= (ap_phi_mux_p_0194_0_phi_fu_275_p4 & ap_const_lv3_0);
    select_ln544_1_fu_565_p3 <= 
        ap_const_lv256_lc_1 when (icmp_ln887_7_reg_703(0) = '1') else 
        r_V_2_reg_316;
    select_ln544_2_fu_502_p3 <= 
        add_ln700_fu_496_p2 when (icmp_ln887_7_fu_482_p2(0) = '1') else 
        ap_phi_mux_p_078_0_i_phi_fu_298_p4;
    select_ln544_fu_488_p3 <= 
        ap_const_lv7_0 when (icmp_ln887_7_fu_482_p2(0) = '1') else 
        ap_phi_mux_p_082_0_i_phi_fu_309_p4;
    sub_ln544_fu_554_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(zext_ln544_20_fu_551_p1));
    trunc_ln209_fu_588_p1 <= r_V_fu_582_p2(256 - 1 downto 0);
    trunc_ln544_fu_530_p1 <= a1_V_q0(8 - 1 downto 0);
    xor_ln719_fu_592_p2 <= (trunc_ln209_fu_588_p1 xor res_mult_V_load_reg_756);
    zext_ln215_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_reg_708),8));
    zext_ln544_10_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_fu_488_p3),64));
    zext_ln544_11_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_540_p2),64));
    zext_ln544_12_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_1_fu_390_p2),64));
    zext_ln544_13_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_2_fu_400_p2),64));
    zext_ln544_14_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_3_fu_410_p2),64));
    zext_ln544_15_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_4_fu_420_p2),64));
    zext_ln544_16_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_5_fu_430_p2),64));
    zext_ln544_17_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_6_fu_440_p2),64));
    zext_ln544_18_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_2_fu_502_p3),64));
    zext_ln544_19_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_729),8));
    zext_ln544_20_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln544_reg_734),9));
    zext_ln544_21_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln544_reg_751),512));
    zext_ln544_7_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_025_0_i_reg_260),64));
    zext_ln544_8_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_366_p3),64));
    zext_ln544_9_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1353_fu_379_p2),64));
    zext_ln544_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0194_0_reg_271),64));
end behav;
