-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_prng is
  port (
    ap_clk                : in  std_logic;
    ap_rst                : in  std_logic;
    ap_start              : in  std_logic;
    ap_done               : out std_logic;
    ap_idle               : out std_logic;
    ap_ready              : out std_logic;
    output_V_address0     : out std_logic_vector (2 downto 0);
    output_V_ce0          : out std_logic;
    output_V_we0          : out std_logic;
    output_V_d0           : out std_logic_vector (63 downto 0);
    state_prng_V_address0 : out std_logic_vector (4 downto 0);
    state_prng_V_ce0      : out std_logic;
    state_prng_V_q0       : in  std_logic_vector (63 downto 0);
    state_prng_V_address1 : out std_logic_vector (4 downto 0);
    state_prng_V_ce1      : out std_logic;
    state_prng_V_we1      : out std_logic;
    state_prng_V_d1       : out std_logic_vector (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of shake_prng is
  constant ap_const_logic_1     : std_logic                      := '1';
  constant ap_const_logic_0     : std_logic                      := '0';
  constant ap_ST_fsm_state1     : std_logic_vector (7 downto 0)  := "00000001";
  constant ap_ST_fsm_state2     : std_logic_vector (7 downto 0)  := "00000010";
  constant ap_ST_fsm_pp0_stage0 : std_logic_vector (7 downto 0)  := "00000100";
  constant ap_ST_fsm_state5     : std_logic_vector (7 downto 0)  := "00001000";
  constant ap_ST_fsm_state6     : std_logic_vector (7 downto 0)  := "00010000";
  constant ap_ST_fsm_state7     : std_logic_vector (7 downto 0)  := "00100000";
  constant ap_ST_fsm_pp1_stage0 : std_logic_vector (7 downto 0)  := "01000000";
  constant ap_ST_fsm_state10    : std_logic_vector (7 downto 0)  := "10000000";
  constant ap_const_boolean_1   : boolean                        := true;
  constant ap_const_lv32_0      : std_logic_vector (31 downto 0) := "00000000000000000000000000000000";
  constant ap_const_lv32_1      : std_logic_vector (31 downto 0) := "00000000000000000000000000000001";
  constant ap_const_lv32_2      : std_logic_vector (31 downto 0) := "00000000000000000000000000000010";
  constant ap_const_boolean_0   : boolean                        := false;
  constant ap_const_lv1_1       : std_logic_vector (0 downto 0)  := "1";
  constant ap_const_lv32_3      : std_logic_vector (31 downto 0) := "00000000000000000000000000000011";
  constant ap_const_lv32_5      : std_logic_vector (31 downto 0) := "00000000000000000000000000000101";
  constant ap_const_lv32_6      : std_logic_vector (31 downto 0) := "00000000000000000000000000000110";
  constant ap_const_lv32_7      : std_logic_vector (31 downto 0) := "00000000000000000000000000000111";
  constant ap_const_lv1_0       : std_logic_vector (0 downto 0)  := "0";
  constant ap_const_lv3_0       : std_logic_vector (2 downto 0)  := "000";
  constant ap_const_lv5_0       : std_logic_vector (4 downto 0)  := "00000";
  constant ap_const_lv32_4      : std_logic_vector (31 downto 0) := "00000000000000000000000000000100";
  constant ap_const_lv64_19     : std_logic_vector (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
  constant ap_const_lv8_11      : std_logic_vector (7 downto 0)  := "00010001";
  constant ap_const_lv3_1       : std_logic_vector (2 downto 0)  := "001";
  constant ap_const_lv3_5       : std_logic_vector (2 downto 0)  := "101";
  constant ap_const_lv8_0       : std_logic_vector (7 downto 0)  := "00000000";
  constant ap_const_lv5_11      : std_logic_vector (4 downto 0)  := "10001";
  constant ap_const_lv5_1       : std_logic_vector (4 downto 0)  := "00001";

  signal ap_CS_fsm                                        : std_logic_vector (7 downto 0) := "00000001";
  attribute fsm_encoding                                  : string;
  attribute fsm_encoding of ap_CS_fsm                     : signal is "none";
  signal ap_CS_fsm_state1                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state1              : signal is "none";
  signal op2_assign_reg_128                               : std_logic_vector (2 downto 0);
  signal i_op_assign_reg_160                              : std_logic_vector (4 downto 0);
  signal cnt_fu_180_p1                                    : std_logic_vector (7 downto 0);
  signal cnt_reg_349                                      : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_state2                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state2              : signal is "none";
  signal zext_ln44_fu_190_p1                              : std_logic_vector (8 downto 0);
  signal zext_ln44_reg_355                                : std_logic_vector (8 downto 0);
  signal icmp_ln44_fu_198_p2                              : std_logic_vector (0 downto 0);
  signal icmp_ln44_reg_360                                : std_logic_vector (0 downto 0);
  signal ap_CS_fsm_pp0_stage0                             : std_logic;
  attribute fsm_encoding of ap_CS_fsm_pp0_stage0          : signal is "none";
  signal ap_block_state3_pp0_stage0_iter0                 : boolean;
  signal ap_block_state4_pp0_stage0_iter1                 : boolean;
  signal ap_block_pp0_stage0_11001                        : boolean;
  signal i_fu_203_p2                                      : std_logic_vector (2 downto 0);
  signal i_reg_364                                        : std_logic_vector (2 downto 0);
  signal ap_enable_reg_pp0_iter0                          : std_logic                     := '0';
  signal icmp_ln45_fu_209_p2                              : std_logic_vector (0 downto 0);
  signal icmp_ln45_reg_369                                : std_logic_vector (0 downto 0);
  signal offset_V_fu_234_p1                               : std_logic_vector (10 downto 0);
  signal ap_CS_fsm_state5                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state5              : signal is "none";
  signal outputwordsize_assig_fu_244_p1                   : std_logic_vector (7 downto 0);
  signal lhs_V_fu_272_p1                                  : std_logic_vector (11 downto 0);
  signal lhs_V_reg_391                                    : std_logic_vector (11 downto 0);
  signal ap_CS_fsm_state7                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state7              : signal is "none";
  signal grp_KeccakF1600_StatePer_fu_172_ap_ready         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_ap_done          : std_logic;
  signal zext_ln1595_fu_276_p1                            : std_logic_vector (7 downto 0);
  signal zext_ln1595_reg_396                              : std_logic_vector (7 downto 0);
  signal ap_CS_fsm_pp1_stage0                             : std_logic;
  attribute fsm_encoding of ap_CS_fsm_pp1_stage0          : signal is "none";
  signal ap_enable_reg_pp1_iter0                          : std_logic                     := '0';
  signal ap_block_state8_pp1_stage0_iter0                 : boolean;
  signal ap_block_state9_pp1_stage0_iter1                 : boolean;
  signal ap_block_pp1_stage0_11001                        : boolean;
  signal icmp_ln887_fu_280_p2                             : std_logic_vector (0 downto 0);
  signal icmp_ln887_reg_401                               : std_logic_vector (0 downto 0);
  signal i_1_fu_286_p2                                    : std_logic_vector (4 downto 0);
  signal i_1_reg_405                                      : std_logic_vector (4 downto 0);
  signal icmp_ln63_fu_292_p2                              : std_logic_vector (0 downto 0);
  signal icmp_ln63_reg_410                                : std_logic_vector (0 downto 0);
  signal offset_V_1_fu_321_p2                             : std_logic_vector (10 downto 0);
  signal ap_CS_fsm_state10                                : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state10             : signal is "none";
  signal sub_ln69_fu_327_p2                               : std_logic_vector (7 downto 0);
  signal ap_block_pp0_stage0_subdone                      : boolean;
  signal ap_predicate_tran3to5_state3                     : boolean;
  signal ap_condition_pp0_exit_iter0_state3               : std_logic;
  signal ap_enable_reg_pp0_iter1                          : std_logic                     := '0';
  signal ap_block_pp1_stage0_subdone                      : boolean;
  signal ap_predicate_tran8to10_state8                    : boolean;
  signal ap_condition_pp1_exit_iter0_state8               : std_logic;
  signal ap_enable_reg_pp1_iter1                          : std_logic                     := '0';
  signal grp_KeccakF1600_StatePer_fu_172_ap_start         : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_ap_idle          : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_state_V_address0 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_172_state_V_ce0      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_state_V_address1 : std_logic_vector (4 downto 0);
  signal grp_KeccakF1600_StatePer_fu_172_state_V_ce1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_state_V_we1      : std_logic;
  signal grp_KeccakF1600_StatePer_fu_172_state_V_d1       : std_logic_vector (63 downto 0);
  signal ap_phi_mux_op2_assign_phi_fu_132_p4              : std_logic_vector (2 downto 0);
  signal ap_block_pp0_stage0                              : boolean;
  signal p_0204_0_i_reg_140                               : std_logic_vector (10 downto 0);
  signal p_0201_i_reg_150                                 : std_logic_vector (7 downto 0);
  signal ap_phi_mux_i_op_assign_phi_fu_164_p4             : std_logic_vector (4 downto 0);
  signal ap_block_pp1_stage0                              : boolean;
  signal grp_KeccakF1600_StatePer_fu_172_ap_start_reg     : std_logic                     := '0';
  signal ap_CS_fsm_state6                                 : std_logic;
  attribute fsm_encoding of ap_CS_fsm_state6              : signal is "none";
  signal icmp_ln58_fu_266_p2                              : std_logic_vector (0 downto 0);
  signal zext_ln49_2_fu_224_p1                            : std_logic_vector (63 downto 0);
  signal zext_ln49_fu_229_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln65_fu_298_p1                              : std_logic_vector (63 downto 0);
  signal zext_ln544_fu_312_p1                             : std_logic_vector (63 downto 0);
  signal sext_ln301_fu_261_p1                             : std_logic_vector (63 downto 0);
  signal zext_ln214_fu_338_p1                             : std_logic_vector (63 downto 0);
  signal offset_state_fu_184_p2                           : std_logic_vector (7 downto 0);
  signal zext_ln44_1_fu_194_p1                            : std_logic_vector (7 downto 0);
  signal zext_ln49_1_fu_215_p1                            : std_logic_vector (8 downto 0);
  signal add_ln49_fu_219_p2                               : std_logic_vector (8 downto 0);
  signal sub_ln53_fu_238_p2                               : std_logic_vector (2 downto 0);
  signal zext_ln54_fu_248_p1                              : std_logic_vector (8 downto 0);
  signal zext_ln54_2_fu_251_p1                            : std_logic_vector (8 downto 0);
  signal sub_ln54_fu_255_p2                               : std_logic_vector (8 downto 0);
  signal rhs_V_fu_303_p1                                  : std_logic_vector (11 downto 0);
  signal ret_V_23_fu_307_p2                               : std_logic_vector (11 downto 0);
  signal zext_ln700_fu_317_p1                             : std_logic_vector (10 downto 0);
  signal ret_V_fu_332_p2                                  : std_logic_vector (4 downto 0);
  signal ap_NS_fsm                                        : std_logic_vector (7 downto 0);
  signal ap_idle_pp0                                      : std_logic;
  signal ap_enable_pp0                                    : std_logic;
  signal ap_idle_pp1                                      : std_logic;
  signal ap_enable_pp1                                    : std_logic;

  -- component KeccakF1600_StatePer is
    -- port (
      -- ap_clk           : in  std_logic;
      -- ap_rst           : in  std_logic;
      -- ap_start         : in  std_logic;
      -- ap_done          : out std_logic;
      -- ap_idle          : out std_logic;
      -- ap_ready         : out std_logic;
      -- state_V_address0 : out std_logic_vector (4 downto 0);
      -- state_V_ce0      : out std_logic;
      -- state_V_q0       : in  std_logic_vector (63 downto 0);
      -- state_V_address1 : out std_logic_vector (4 downto 0);
      -- state_V_ce1      : out std_logic;
      -- state_V_we1      : out std_logic;
      -- state_V_d1       : out std_logic_vector (63 downto 0));
  -- end component;



begin
  -- grp_KeccakF1600_StatePer_fu_172 : component KeccakF1600_StatePer
    -- port map (
      -- ap_clk           => ap_clk,
      -- ap_rst           => ap_rst,
      -- ap_start         => grp_KeccakF1600_StatePer_fu_172_ap_start,
      -- ap_done          => grp_KeccakF1600_StatePer_fu_172_ap_done,
      -- ap_idle          => grp_KeccakF1600_StatePer_fu_172_ap_idle,
      -- ap_ready         => grp_KeccakF1600_StatePer_fu_172_ap_ready,
      -- state_V_address0 => grp_KeccakF1600_StatePer_fu_172_state_V_address0,
      -- state_V_ce0      => grp_KeccakF1600_StatePer_fu_172_state_V_ce0,
      -- state_V_q0       => state_prng_V_q0,
      -- state_V_address1 => grp_KeccakF1600_StatePer_fu_172_state_V_address1,
      -- state_V_ce1      => grp_KeccakF1600_StatePer_fu_172_state_V_ce1,
      -- state_V_we1      => grp_KeccakF1600_StatePer_fu_172_state_V_we1,
      -- state_V_d1       => grp_KeccakF1600_StatePer_fu_172_state_V_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_172_ap_start;
  state_V_q0_permute <= state_prng_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_172_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_172_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_172_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_172_state_V_d1       <= state_V_d1_permute;



  ap_CS_fsm_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_CS_fsm <= ap_ST_fsm_state1;
      else
        ap_CS_fsm <= ap_NS_fsm;
      end if;
    end if;
  end process;


  ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
          ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
          ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
          ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
        elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
          ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
          ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
          ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_172_ap_done = ap_const_logic_1))) then
          ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
        end if;
      end if;
    end if;
  end process;


  ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
          ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
        elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
          ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_172_ap_done = ap_const_logic_1))) then
          ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  grp_KeccakF1600_StatePer_fu_172_ap_start_reg_assign_proc : process(ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (ap_rst = '1') then
        grp_KeccakF1600_StatePer_fu_172_ap_start_reg <= ap_const_logic_0;
      else
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln58_fu_266_p2 = ap_const_lv1_0))) then
          grp_KeccakF1600_StatePer_fu_172_ap_start_reg <= ap_const_logic_1;
        elsif ((grp_KeccakF1600_StatePer_fu_172_ap_ready = ap_const_logic_1)) then
          grp_KeccakF1600_StatePer_fu_172_ap_start_reg <= ap_const_logic_0;
        end if;
      end if;
    end if;
  end process;


  i_op_assign_reg_160_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_172_ap_done = ap_const_logic_1))) then
        i_op_assign_reg_160 <= ap_const_lv5_0;
      elsif (((icmp_ln63_reg_410 = ap_const_lv1_1) and (icmp_ln887_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
        i_op_assign_reg_160 <= i_1_reg_405;
      end if;
    end if;
  end process;

  op2_assign_reg_128_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln45_reg_369 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
        op2_assign_reg_128 <= i_reg_364;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
        op2_assign_reg_128 <= ap_const_lv3_0;
      end if;
    end if;
  end process;

  p_0201_i_reg_150_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
        p_0201_i_reg_150 <= outputwordsize_assig_fu_244_p1;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
        p_0201_i_reg_150 <= sub_ln69_fu_327_p2;
      end if;
    end if;
  end process;

  p_0204_0_i_reg_140_assign_proc : process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
        p_0204_0_i_reg_140 <= offset_V_fu_234_p1;
      elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
        p_0204_0_i_reg_140 <= offset_V_1_fu_321_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
        cnt_reg_349                   <= cnt_fu_180_p1;
        zext_ln44_reg_355(7 downto 0) <= zext_ln44_fu_190_p1(7 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
        i_1_reg_405                     <= i_1_fu_286_p2;
        zext_ln1595_reg_396(4 downto 0) <= zext_ln1595_fu_276_p1(4 downto 0);
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
        i_reg_364 <= i_fu_203_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
        icmp_ln44_reg_360 <= icmp_ln44_fu_198_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
        icmp_ln45_reg_369 <= icmp_ln45_fu_209_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((icmp_ln887_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
        icmp_ln63_reg_410 <= icmp_ln63_fu_292_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
        icmp_ln887_reg_401 <= icmp_ln887_fu_280_p2;
      end if;
    end if;
  end process;
  process (ap_clk)
  begin
    if (ap_clk'event and ap_clk = '1') then
      if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_172_ap_done = ap_const_logic_1))) then
        lhs_V_reg_391(10 downto 0) <= lhs_V_fu_272_p1(10 downto 0);
      end if;
    end if;
  end process;
  zext_ln44_reg_355(8)            <= '0';
  lhs_V_reg_391(11)               <= '0';
  zext_ln1595_reg_396(7 downto 5) <= "000";

  ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_172_ap_done, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_predicate_tran3to5_state3, ap_block_pp1_stage0_subdone, ap_predicate_tran8to10_state8, ap_CS_fsm_state6, icmp_ln58_fu_266_p2)
  begin
    case ap_CS_fsm is
      when ap_ST_fsm_state1 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_state2;
        else
          ap_NS_fsm <= ap_ST_fsm_state1;
        end if;
      when ap_ST_fsm_state2 =>
        ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
      when ap_ST_fsm_pp0_stage0 =>
        if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
          ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran3to5_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
          ap_NS_fsm <= ap_ST_fsm_state5;
        else
          ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
        end if;
      when ap_ST_fsm_state5 =>
        ap_NS_fsm <= ap_ST_fsm_state6;
      when ap_ST_fsm_state6 =>
        if (((icmp_ln58_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
          ap_NS_fsm <= ap_ST_fsm_state1;
        else
          ap_NS_fsm <= ap_ST_fsm_state7;
        end if;
      when ap_ST_fsm_state7 =>
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_172_ap_done = ap_const_logic_1))) then
          ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
        else
          ap_NS_fsm <= ap_ST_fsm_state7;
        end if;
      when ap_ST_fsm_pp1_stage0 =>
        if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_tran8to10_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
          ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_tran8to10_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
          ap_NS_fsm <= ap_ST_fsm_state10;
        else
          ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
        end if;
      when ap_ST_fsm_state10 =>
        ap_NS_fsm <= ap_ST_fsm_state6;
      when others =>
        ap_NS_fsm <= "XXXXXXXX";
    end case;
  end process;
  add_ln49_fu_219_p2               <= std_logic_vector(unsigned(zext_ln44_reg_355) + unsigned(zext_ln49_1_fu_215_p1));
  ap_CS_fsm_pp0_stage0             <= ap_CS_fsm(2);
  ap_CS_fsm_pp1_stage0             <= ap_CS_fsm(6);
  ap_CS_fsm_state1                 <= ap_CS_fsm(0);
  ap_CS_fsm_state10                <= ap_CS_fsm(7);
  ap_CS_fsm_state2                 <= ap_CS_fsm(1);
  ap_CS_fsm_state5                 <= ap_CS_fsm(3);
  ap_CS_fsm_state6                 <= ap_CS_fsm(4);
  ap_CS_fsm_state7                 <= ap_CS_fsm(5);
  ap_block_pp0_stage0              <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp0_stage0_11001        <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp0_stage0_subdone      <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp1_stage0              <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp1_stage0_11001        <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_pp1_stage0_subdone      <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
  ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

  ap_condition_pp0_exit_iter0_state3_assign_proc : process(ap_predicate_tran3to5_state3)
  begin
    if ((ap_predicate_tran3to5_state3 = ap_const_boolean_1)) then
      ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
    else
      ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
    end if;
  end process;


  ap_condition_pp1_exit_iter0_state8_assign_proc : process(ap_predicate_tran8to10_state8)
  begin
    if ((ap_predicate_tran8to10_state8 = ap_const_boolean_1)) then
      ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
    else
      ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
    end if;
  end process;


  ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln58_fu_266_p2)
  begin
    if ((((icmp_ln58_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
      ap_done <= ap_const_logic_1;
    else
      ap_done <= ap_const_logic_0;
    end if;
  end process;

  ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
  ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

  ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
  begin
    if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
      ap_idle <= ap_const_logic_1;
    else
      ap_idle <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
  begin
    if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
      ap_idle_pp0 <= ap_const_logic_1;
    else
      ap_idle_pp0 <= ap_const_logic_0;
    end if;
  end process;


  ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
  begin
    if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
      ap_idle_pp1 <= ap_const_logic_1;
    else
      ap_idle_pp1 <= ap_const_logic_0;
    end if;
  end process;


  ap_phi_mux_i_op_assign_phi_fu_164_p4_assign_proc : process(i_op_assign_reg_160, ap_CS_fsm_pp1_stage0, icmp_ln887_reg_401, i_1_reg_405, icmp_ln63_reg_410, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
  begin
    if (((icmp_ln63_reg_410 = ap_const_lv1_1) and (icmp_ln887_reg_401 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
      ap_phi_mux_i_op_assign_phi_fu_164_p4 <= i_1_reg_405;
    else
      ap_phi_mux_i_op_assign_phi_fu_164_p4 <= i_op_assign_reg_160;
    end if;
  end process;


  ap_phi_mux_op2_assign_phi_fu_132_p4_assign_proc : process(op2_assign_reg_128, icmp_ln44_reg_360, ap_CS_fsm_pp0_stage0, i_reg_364, icmp_ln45_reg_369, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
  begin
    if (((icmp_ln45_reg_369 = ap_const_lv1_1) and (icmp_ln44_reg_360 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
      ap_phi_mux_op2_assign_phi_fu_132_p4 <= i_reg_364;
    else
      ap_phi_mux_op2_assign_phi_fu_132_p4 <= op2_assign_reg_128;
    end if;
  end process;


  ap_predicate_tran3to5_state3_assign_proc : process(icmp_ln44_fu_198_p2, icmp_ln45_fu_209_p2)
  begin
    ap_predicate_tran3to5_state3 <= ((icmp_ln45_fu_209_p2 = ap_const_lv1_0) or (icmp_ln44_fu_198_p2 = ap_const_lv1_0));
  end process;


  ap_predicate_tran8to10_state8_assign_proc : process(icmp_ln887_fu_280_p2, icmp_ln63_fu_292_p2)
  begin
    ap_predicate_tran8to10_state8 <= ((icmp_ln63_fu_292_p2 = ap_const_lv1_0) or (icmp_ln887_fu_280_p2 = ap_const_lv1_0));
  end process;


  ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln58_fu_266_p2)
  begin
    if (((icmp_ln58_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
      ap_ready <= ap_const_logic_1;
    else
      ap_ready <= ap_const_logic_0;
    end if;
  end process;

  cnt_fu_180_p1                            <= state_prng_V_q0(8 - 1 downto 0);
  grp_KeccakF1600_StatePer_fu_172_ap_start <= grp_KeccakF1600_StatePer_fu_172_ap_start_reg;
  i_1_fu_286_p2                            <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_164_p4) + unsigned(ap_const_lv5_1));
  i_fu_203_p2                              <= std_logic_vector(unsigned(ap_phi_mux_op2_assign_phi_fu_132_p4) + unsigned(ap_const_lv3_1));
  icmp_ln44_fu_198_p2                      <= "1" when (unsigned(zext_ln44_1_fu_194_p1) < unsigned(cnt_reg_349))                    else "0";
  icmp_ln45_fu_209_p2                      <= "1" when (unsigned(ap_phi_mux_op2_assign_phi_fu_132_p4) < unsigned(ap_const_lv3_5))   else "0";
  icmp_ln58_fu_266_p2                      <= "1" when (p_0201_i_reg_150 = ap_const_lv8_0)                                          else "0";
  icmp_ln63_fu_292_p2                      <= "1" when (unsigned(zext_ln1595_fu_276_p1) < unsigned(p_0201_i_reg_150))               else "0";
  icmp_ln887_fu_280_p2                     <= "1" when (unsigned(ap_phi_mux_i_op_assign_phi_fu_164_p4) < unsigned(ap_const_lv5_11)) else "0";
  lhs_V_fu_272_p1                          <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0204_0_i_reg_140), 12));
  offset_V_1_fu_321_p2                     <= std_logic_vector(unsigned(zext_ln700_fu_317_p1) + unsigned(p_0204_0_i_reg_140));
  offset_V_fu_234_p1                       <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_128), 11));
  offset_state_fu_184_p2                   <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_fu_180_p1));

  output_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln49_fu_229_p1, zext_ln544_fu_312_p1)
  begin
    if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
      output_V_address0 <= zext_ln544_fu_312_p1(3 - 1 downto 0);
    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
      output_V_address0 <= zext_ln49_fu_229_p1(3 - 1 downto 0);
    else
      output_V_address0 <= "XXX";
    end if;
  end process;


  output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
  begin
    if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
      output_V_ce0 <= ap_const_logic_1;
    else
      output_V_ce0 <= ap_const_logic_0;
    end if;
  end process;

  output_V_d0 <= state_prng_V_q0;

  output_V_we0_assign_proc : process(icmp_ln44_reg_360, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln45_reg_369, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln887_reg_401, icmp_ln63_reg_410, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
  begin
    if ((((icmp_ln45_reg_369 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln63_reg_410 = ap_const_lv1_1) and (icmp_ln887_reg_401 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
      output_V_we0 <= ap_const_logic_1;
    else
      output_V_we0 <= ap_const_logic_0;
    end if;
  end process;

  outputwordsize_assig_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln53_fu_238_p2), 8));
  ret_V_23_fu_307_p2             <= std_logic_vector(unsigned(lhs_V_reg_391) + unsigned(rhs_V_fu_303_p1));
  ret_V_fu_332_p2                <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_160));
  rhs_V_fu_303_p1                <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_160), 12));
  sext_ln301_fu_261_p1           <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_255_p2), 64));


  state_prng_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_KeccakF1600_StatePer_fu_172_state_V_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln49_2_fu_224_p1, zext_ln65_fu_298_p1)
  begin
    if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
      state_prng_V_address0 <= zext_ln65_fu_298_p1(5 - 1 downto 0);
    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
      state_prng_V_address0 <= zext_ln49_2_fu_224_p1(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then
      state_prng_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_address0 <= grp_KeccakF1600_StatePer_fu_172_state_V_address0;
    else
      state_prng_V_address0 <= "XXXXX";
    end if;
  end process;


  state_prng_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_172_state_V_address1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_prng_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_address1 <= grp_KeccakF1600_StatePer_fu_172_state_V_address1;
    else
      state_prng_V_address1 <= "XXXXX";
    end if;
  end process;


  state_prng_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_KeccakF1600_StatePer_fu_172_state_V_ce0)
  begin
    if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
      state_prng_V_ce0 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_ce0 <= grp_KeccakF1600_StatePer_fu_172_state_V_ce0;
    else
      state_prng_V_ce0 <= ap_const_logic_0;
    end if;
  end process;


  state_prng_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_172_state_V_ce1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_prng_V_ce1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_ce1 <= grp_KeccakF1600_StatePer_fu_172_state_V_ce1;
    else
      state_prng_V_ce1 <= ap_const_logic_0;
    end if;
  end process;


  state_prng_V_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_172_state_V_d1, sext_ln301_fu_261_p1, zext_ln214_fu_338_p1)
  begin
    if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
      state_prng_V_d1 <= zext_ln214_fu_338_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then
      state_prng_V_d1 <= sext_ln301_fu_261_p1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_d1 <= grp_KeccakF1600_StatePer_fu_172_state_V_d1;
    else
      state_prng_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    end if;
  end process;


  state_prng_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, grp_KeccakF1600_StatePer_fu_172_state_V_we1)
  begin
    if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
      state_prng_V_we1 <= ap_const_logic_1;
    elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then
      state_prng_V_we1 <= grp_KeccakF1600_StatePer_fu_172_state_V_we1;
    else
      state_prng_V_we1 <= ap_const_logic_0;
    end if;
  end process;

  sub_ln53_fu_238_p2    <= std_logic_vector(signed(ap_const_lv3_5) - signed(op2_assign_reg_128));
  sub_ln54_fu_255_p2    <= std_logic_vector(unsigned(zext_ln54_fu_248_p1) - unsigned(zext_ln54_2_fu_251_p1));
  sub_ln69_fu_327_p2    <= std_logic_vector(unsigned(p_0201_i_reg_150) - unsigned(zext_ln1595_reg_396));
  zext_ln1595_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_164_p4), 8));
  zext_ln214_fu_338_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_332_p2), 64));
  zext_ln44_1_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_op2_assign_phi_fu_132_p4), 8));
  zext_ln44_fu_190_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_184_p2), 9));
  zext_ln49_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_op2_assign_phi_fu_132_p4), 9));
  zext_ln49_2_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_219_p2), 64));
  zext_ln49_fu_229_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_128), 64));
  zext_ln544_fu_312_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_23_fu_307_p2), 64));
  zext_ln54_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_128), 9));
  zext_ln54_fu_248_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_349), 9));
  zext_ln65_fu_298_p1   <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_164_p4), 64));
  zext_ln700_fu_317_p1  <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_160), 11));
end behav;
