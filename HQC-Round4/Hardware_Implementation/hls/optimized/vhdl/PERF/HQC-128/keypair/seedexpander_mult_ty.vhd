-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seedexpander_mult_ty is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_we1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_ce1 : OUT STD_LOGIC;
    state_V_we1 : OUT STD_LOGIC;
    state_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
       );
end;


architecture behav of seedexpander_mult_ty is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_229 : STD_LOGIC_VECTOR (9 downto 0) := "1000101001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_op_assign_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_0_3_reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_098_0_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal cnt_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cnt_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_0_V_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln53_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln58_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln1595_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1595_reg_471 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln887_8_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_8_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_480 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal sub_ln69_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln887_7_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state13_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal k_V_fu_375_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ret_V_fu_385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_513 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_9_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln802_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln802_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_255_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran11to12_state10 : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_KeccakF1600_StatePer_fu_255_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_state_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_255_state_V_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_state_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_255_state_V_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_state_V_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_255_state_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_2_reg_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_0_0_reg_150 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0296_0_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_0_1_reg_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln44_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_op2_assign_phi_fu_189_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0201_i_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_224_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_255_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln49_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln301_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_state_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln53_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln54_3_fu_305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_24_fu_358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln556_fu_397_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_401_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln808_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_ce0 : OUT STD_LOGIC;
        -- state_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_ce1 : OUT STD_LOGIC;
        -- state_V_we1 : OUT STD_LOGIC;
        -- state_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;



begin
    -- grp_KeccakF1600_StatePer_fu_255 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_255_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_255_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_255_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_255_ap_ready,
        -- state_V_address0 => grp_KeccakF1600_StatePer_fu_255_state_V_address0,
        -- state_V_ce0 => grp_KeccakF1600_StatePer_fu_255_state_V_ce0,
        -- state_V_q0 => state_V_q0,
        -- state_V_address1 => grp_KeccakF1600_StatePer_fu_255_state_V_address1,
        -- state_V_ce1 => grp_KeccakF1600_StatePer_fu_255_state_V_ce1,
        -- state_V_we1 => grp_KeccakF1600_StatePer_fu_255_state_V_we1,
        -- state_V_d1 => grp_KeccakF1600_StatePer_fu_255_state_V_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_255_ap_start;
  state_V_q0_permute <= state_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_255_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_255_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_255_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_255_state_V_d1       <= state_V_d1_permute;



    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_predicate_tran11to12_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_fu_255_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_fu_255_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln58_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state13))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((icmp_ln58_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_255_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_255_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln58_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_KeccakF1600_StatePer_fu_255_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_255_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_255_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln63_reg_485 = ap_const_lv1_1) and (icmp_ln887_8_reg_476 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_reg_220 <= i_reg_480;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_fu_255_ap_done = ap_const_logic_1))) then 
                i_op_assign_reg_220 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    op2_assign_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_op2_assign_phi_fu_189_p4 = ap_const_lv1_0) and (icmp_ln44_fu_287_p2 = ap_const_lv1_1))) then 
                op2_assign_reg_185 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                op2_assign_reg_185 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_0201_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_0201_i_reg_210 <= sub_ln69_fu_353_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_0201_i_reg_210 <= zext_ln53_fu_298_p1;
            end if; 
        end if;
    end process;

    p_0296_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_0296_0_reg_162 <= i_V_fu_427_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0296_0_reg_162 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_098_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_7_fu_369_p2 = ap_const_lv1_0))) then 
                p_098_0_reg_244 <= k_V_fu_375_p2;
            elsif (((icmp_ln58_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_098_0_reg_244 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    tmp_V_0_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_op2_assign_phi_fu_189_p4 = ap_const_lv1_0) and (icmp_ln44_fu_287_p2 = ap_const_lv1_1))) then 
                tmp_V_0_1_reg_174 <= tmp_0_V_reg_454;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_V_0_1_reg_174 <= tmp_V_0_0_reg_150;
            end if; 
        end if;
    end process;

    tmp_V_0_2_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_V_0_2_reg_198 <= tmp_V_0_3_reg_232;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_V_0_2_reg_198 <= tmp_V_0_1_reg_174;
            end if; 
        end if;
    end process;

    tmp_V_0_3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln63_reg_485 = ap_const_lv1_1) and (icmp_ln887_8_reg_476 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_V_0_3_reg_232 <= state_V_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_fu_255_ap_done = ap_const_logic_1))) then 
                tmp_V_0_3_reg_232 <= tmp_V_0_2_reg_198;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cnt_reg_442 <= cnt_fu_269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_reg_480 <= i_fu_336_p2;
                    zext_ln1595_reg_471(4 downto 0) <= zext_ln1595_fu_326_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_8_fu_330_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln63_reg_485 <= icmp_ln63_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_8_reg_476 <= icmp_ln887_8_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_7_fu_369_p2 = ap_const_lv1_0))) then
                icmp_ln887_9_reg_518 <= icmp_ln887_9_fu_391_p2;
                ret_V_reg_513 <= ret_V_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_0_V_reg_454 <= state_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_V_0_0_reg_150 <= tmp_V_0_2_reg_198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_7_fu_369_p2 = ap_const_lv1_0) and (icmp_ln887_9_fu_391_p2 = ap_const_lv1_1))) then
                trunc_ln802_reg_522 <= trunc_ln802_fu_419_p1;
            end if;
        end if;
    end process;
    zext_ln1595_reg_471(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln58_fu_320_p2, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln887_7_fu_369_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_ap_done, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_CS_fsm_state6, icmp_ln44_fu_287_p2, ap_phi_mux_op2_assign_phi_fu_189_p4, ap_CS_fsm_state2, icmp_ln887_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_263_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_op2_assign_phi_fu_189_p4 = ap_const_lv1_0) and (icmp_ln44_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln58_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeccakF1600_StatePer_fu_255_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln887_7_fu_369_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln887_7_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state13_assign_proc : process(icmp_ln887_7_fu_369_p2)
    begin
        if ((icmp_ln887_7_fu_369_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_263_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_263_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_224_p4_assign_proc : process(i_op_assign_reg_220, ap_CS_fsm_pp1_stage0, icmp_ln887_8_reg_476, i_reg_480, icmp_ln63_reg_485, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln63_reg_485 = ap_const_lv1_1) and (icmp_ln887_8_reg_476 = ap_const_lv1_1))) then 
            ap_phi_mux_i_op_assign_phi_fu_224_p4 <= i_reg_480;
        else 
            ap_phi_mux_i_op_assign_phi_fu_224_p4 <= i_op_assign_reg_220;
        end if; 
    end process;

    ap_phi_mux_op2_assign_phi_fu_189_p4 <= op2_assign_reg_185;

    ap_predicate_tran11to12_state10_assign_proc : process(icmp_ln887_8_fu_330_p2, icmp_ln63_fu_342_p2)
    begin
                ap_predicate_tran11to12_state10 <= ((icmp_ln63_fu_342_p2 = ap_const_lv1_0) or (icmp_ln887_8_fu_330_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_263_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_263_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_fu_269_p1 <= state_V_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_255_ap_start <= grp_KeccakF1600_StatePer_fu_255_ap_start_reg;
    i_V_fu_427_p2 <= std_logic_vector(unsigned(p_0296_0_reg_162) + unsigned(ap_const_lv10_2));
    i_fu_336_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_224_p4) + unsigned(ap_const_lv5_1));
    icmp_ln44_fu_287_p2 <= "1" when (unsigned(zext_ln44_fu_283_p1) < unsigned(cnt_reg_442)) else "0";
    icmp_ln58_fu_320_p2 <= "1" when (p_0201_i_reg_210 = ap_const_lv8_0) else "0";
    icmp_ln63_fu_342_p2 <= "1" when (unsigned(zext_ln1595_fu_326_p1) < unsigned(p_0201_i_reg_210)) else "0";
    icmp_ln887_7_fu_369_p2 <= "1" when (p_098_0_reg_244 = ap_const_lv2_2) else "0";
    icmp_ln887_8_fu_330_p2 <= "1" when (unsigned(ap_phi_mux_i_op_assign_phi_fu_224_p4) < unsigned(ap_const_lv5_11)) else "0";
    icmp_ln887_9_fu_391_p2 <= "1" when (unsigned(ret_V_fu_385_p2) < unsigned(ap_const_lv10_229)) else "0";
    icmp_ln887_fu_263_p2 <= "1" when (unsigned(p_0296_0_reg_162) < unsigned(ap_const_lv10_229)) else "0";
    k_V_fu_375_p2 <= std_logic_vector(unsigned(p_098_0_reg_244) + unsigned(ap_const_lv2_1));
    offset_state_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(cnt_reg_442));
    output_V_address1 <= zext_ln544_fu_423_p1(10 - 1 downto 0);

    output_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d1 <= trunc_ln802_reg_522;

    output_V_we1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln887_9_reg_518, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln887_9_reg_518 = ap_const_lv1_1))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_413_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_0_2_reg_198),to_integer(unsigned('0' & zext_ln808_fu_409_p1(31-1 downto 0)))));
    ret_V_24_fu_358_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(i_op_assign_reg_220));
    ret_V_fu_385_p2 <= std_logic_vector(unsigned(p_0296_0_reg_162) + unsigned(zext_ln215_fu_381_p1));
        sext_ln301_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_309_p2),64));

    shl_ln_fu_401_p3 <= (trunc_ln556_fu_397_p1 & ap_const_lv5_0);

    state_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_address0, ap_block_pp1_stage0, zext_ln49_fu_278_p1, zext_ln65_fu_348_p1, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            state_V_address0 <= zext_ln65_fu_348_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address0 <= zext_ln49_fu_278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_address0 <= grp_KeccakF1600_StatePer_fu_255_state_V_address0;
        else 
            state_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_V_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_address1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_address1 <= grp_KeccakF1600_StatePer_fu_255_state_V_address1;
        else 
            state_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            state_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_ce0 <= grp_KeccakF1600_StatePer_fu_255_state_V_ce0;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_ce1 <= grp_KeccakF1600_StatePer_fu_255_state_V_ce1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_d1, sext_ln301_fu_315_p1, zext_ln214_fu_364_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_d1 <= zext_ln214_fu_364_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_d1 <= sext_ln301_fu_315_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_d1 <= grp_KeccakF1600_StatePer_fu_255_state_V_d1;
        else 
            state_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_fu_255_state_V_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_we1 <= grp_KeccakF1600_StatePer_fu_255_state_V_we1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln54_fu_309_p2 <= std_logic_vector(unsigned(zext_ln54_fu_302_p1) - unsigned(zext_ln54_3_fu_305_p1));
    sub_ln69_fu_353_p2 <= std_logic_vector(unsigned(p_0201_i_reg_210) - unsigned(zext_ln1595_reg_471));
    trunc_ln556_fu_397_p1 <= p_098_0_reg_244(1 - 1 downto 0);
    trunc_ln802_fu_419_p1 <= r_V_fu_413_p2(32 - 1 downto 0);
    xor_ln53_fu_292_p2 <= (op2_assign_reg_185 xor ap_const_lv1_1);
    zext_ln1595_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_224_p4),8));
    zext_ln214_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_24_fu_358_p2),64));
    zext_ln215_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_098_0_reg_244),10));
    zext_ln44_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_185),8));
    zext_ln49_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_state_fu_273_p2),64));
    zext_ln53_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln53_fu_292_p2),8));
    zext_ln544_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_513),64));
    zext_ln54_3_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_reg_185),9));
    zext_ln54_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_reg_442),9));
    zext_ln65_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_224_p4),64));
    zext_ln808_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_401_p3),64));
end behav;
