-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_prng_init is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    entropy_input_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    entropy_input_V_ce0 : OUT STD_LOGIC;
    entropy_input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    enlen_V : IN STD_LOGIC_VECTOR (6 downto 0);
    shake_prng_state_array_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    shake_prng_state_array_V_ce0 : OUT STD_LOGIC;
    shake_prng_state_array_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    shake_prng_state_array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    shake_prng_state_array_V_ce1 : OUT STD_LOGIC;
    shake_prng_state_array_V_we1 : OUT STD_LOGIC;
    shake_prng_state_array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) ;
	  -- Channel to KeccakF1600_StatePermute
      ap_start_permute              : out std_logic;
      ap_done_permute               : in  std_logic;
      ap_idle_permute               : in  std_logic;
      ap_ready_permute              : in  std_logic;
      state_V_address0_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce0_permute           : in  std_logic;
      state_V_q0_permute            : out std_logic_vector (63 downto 0);
      state_V_address1_permute      : in  std_logic_vector (4 downto 0);
      state_V_ce1_permute           : in  std_logic;
      state_V_we1_permute           : in  std_logic;
      state_V_d1_permute            : in  std_logic_vector (63 downto 0)
      );
end;


architecture behav of shake_prng_init is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_87 : STD_LOGIC_VECTOR (8 downto 0) := "010000111";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv25_1F00 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001111100000000";
    constant ap_const_lv25_1F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000011111";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1F0000 : STD_LOGIC_VECTOR (24 downto 0) := "0000111110000000000000000";
    constant ap_const_lv41_10000000000 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv41_1F00000000 : STD_LOGIC_VECTOR (40 downto 0) := "00001111100000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv57_100000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv57_1F000000000000 : STD_LOGIC_VECTOR (56 downto 0) := "000011111000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_buffer_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_buffer_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_458 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_468 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_V_fu_483_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_reg_1095 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln544_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_1100 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_494_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_reg_1117 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_vector_init_64_fu_393_ap_ready : STD_LOGIC;
    signal grp_vector_init_64_fu_393_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln891_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_V_fu_527_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal len_V_reg_1140 : STD_LOGIC_VECTOR (2 downto 0);
    signal cnt_V_2_load_1_reg_1172 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_buffer_V_load_12_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal shake_prng_state_arr_reg_1192 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln891_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_1_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_V_4_fu_613_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_385_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_ap_done : STD_LOGIC;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal icmp_ln117_3_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_3_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln117_4_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_4_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_5_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_5_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_6_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_6_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_5_fu_786_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_5_reg_1259 : STD_LOGIC_VECTOR (56 downto 0);
    signal cnt_V_3_fu_807_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cnt_V_3_reg_1264 : STD_LOGIC_VECTOR (8 downto 0);
    signal shake_prng_state_arr_2_reg_1270 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln891_2_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_2_reg_1276 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal shake_prng_state_arr_4_reg_1280 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ret_V_20_fu_924_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_20_reg_1285 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_reg_1296 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln21_1_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_1306 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_reg_1311 : STD_LOGIC_VECTOR (0 downto 0);
    signal shake_prng_state_arr_5_reg_1317 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal temp_buffer_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buffer_V_ce0 : STD_LOGIC;
    signal temp_buffer_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buffer_V_ce1 : STD_LOGIC;
    signal temp_buffer_V_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_385_state_V_6_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_vector_init_64_fu_393_ap_start : STD_LOGIC;
    signal grp_vector_init_64_fu_393_ap_idle : STD_LOGIC;
    signal grp_vector_init_64_fu_393_array_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vector_init_64_fu_393_array_V_ce1 : STD_LOGIC;
    signal grp_vector_init_64_fu_393_array_V_we1 : STD_LOGIC;
    signal grp_vector_init_64_fu_393_array_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_reg_351 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_p_0260_0_i_phi_fu_366_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0260_0_i_reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_01676_2_i_reg_374 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal grp_KeccakF1600_StatePer_fu_385_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_vector_init_64_fu_393_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_20_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_21_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_12_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_22_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_23_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_24_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_25_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_26_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_27_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_28_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_13_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_14_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_15_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_16_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_17_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_18_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_29_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_30_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_V_2_fu_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal cnt_V_fu_590_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln719_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_1_fu_907_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln719_2_fu_1071_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln719_3_fu_1078_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_404_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_1_fu_497_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_501_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_18_fu_555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_21_fu_571_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_22_fu_649_p6 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_masked_V_5_fu_683_p8 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp_ln117_2_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1356_fu_663_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal m_masked_V_4_fu_667_p7 : STD_LOGIC_VECTOR (40 downto 0);
    signal select_ln117_2_fu_760_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln117_1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln214_1_fu_701_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal m_masked_V_6_fu_705_p9 : STD_LOGIC_VECTOR (56 downto 0);
    signal or_ln117_2_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_1_fu_768_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_3_fu_778_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln700_fu_794_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_fu_797_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln700_1_fu_803_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_masked_V_1_fu_826_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_masked_V_fu_818_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln117_fu_852_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln214_fu_836_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal m_masked_V_2_fu_840_p5 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln117_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_fu_859_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln117_1_fu_867_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln117_4_fu_878_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln117_1_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_3_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln117_2_fu_886_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln117_6_fu_896_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln117_3_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln21_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_fu_964_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_fu_957_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln21_2_fu_975_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln21_fu_983_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln21_4_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_3_fu_1001_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln21_fu_987_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal select_ln21_4_fu_1015_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln21_1_fu_1023_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln21_6_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_5_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_5_i_fu_1041_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln21_1_fu_1027_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_fu_1055_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_0186_0_i_cast30_fu_1063_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_0186_0_i_cast_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    -- component KeccakF1600_StatePer IS
    -- port (
        -- ap_clk : IN STD_LOGIC;
        -- ap_rst : IN STD_LOGIC;
        -- ap_start : IN STD_LOGIC;
        -- ap_done : OUT STD_LOGIC;
        -- ap_idle : OUT STD_LOGIC;
        -- ap_ready : OUT STD_LOGIC;
        -- state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce0 : OUT STD_LOGIC;
        -- state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        -- state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        -- state_V_6_ce1 : OUT STD_LOGIC;
        -- state_V_6_we1 : OUT STD_LOGIC;
        -- state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    -- end component;


    component vector_init_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        array_V_ce1 : OUT STD_LOGIC;
        array_V_we1 : OUT STD_LOGIC;
        array_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component shake_prng_init_tdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_buffer_V_U : component shake_prng_init_tdEe
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_buffer_V_address0,
        ce0 => temp_buffer_V_ce0,
        q0 => temp_buffer_V_q0,
        address1 => temp_buffer_V_address1,
        ce1 => temp_buffer_V_ce1,
        we1 => temp_buffer_V_we1,
        d1 => entropy_input_V_q0,
        q1 => temp_buffer_V_q1);

    -- grp_KeccakF1600_StatePer_fu_385 : component KeccakF1600_StatePer
    -- port map (
        -- ap_clk => ap_clk,
        -- ap_rst => ap_rst,
        -- ap_start => grp_KeccakF1600_StatePer_fu_385_ap_start,
        -- ap_done => grp_KeccakF1600_StatePer_fu_385_ap_done,
        -- ap_idle => grp_KeccakF1600_StatePer_fu_385_ap_idle,
        -- ap_ready => grp_KeccakF1600_StatePer_fu_385_ap_ready,
        -- state_V_6_address0 => grp_KeccakF1600_StatePer_fu_385_state_V_6_address0,
        -- state_V_6_ce0 => grp_KeccakF1600_StatePer_fu_385_state_V_6_ce0,
        -- state_V_6_q0 => shake_prng_state_array_V_q0,
        -- state_V_6_address1 => grp_KeccakF1600_StatePer_fu_385_state_V_6_address1,
        -- state_V_6_ce1 => grp_KeccakF1600_StatePer_fu_385_state_V_6_ce1,
        -- state_V_6_we1 => grp_KeccakF1600_StatePer_fu_385_state_V_6_we1,
        -- state_V_6_d1 => grp_KeccakF1600_StatePer_fu_385_state_V_6_d1);

  -- Outputs
  ap_start_permute   <= grp_KeccakF1600_StatePer_fu_385_ap_start;
  state_V_q0_permute <= shake_prng_state_array_V_q0;
  -- Inputs
  grp_KeccakF1600_StatePer_fu_385_ap_done          <= ap_done_permute;
  grp_KeccakF1600_StatePer_fu_385_ap_idle          <= ap_idle_permute;
  grp_KeccakF1600_StatePer_fu_385_ap_ready         <= ap_ready_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_address0 <= state_V_address0_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_ce0      <= state_V_ce0_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_address1 <= state_V_address1_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_ce1      <= state_V_ce1_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_we1      <= state_V_we1_permute;
  grp_KeccakF1600_StatePer_fu_385_state_V_6_d1       <= state_V_d1_permute;
  

    grp_vector_init_64_fu_393 : component vector_init_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_init_64_fu_393_ap_start,
        ap_done => grp_vector_init_64_fu_393_ap_done,
        ap_idle => grp_vector_init_64_fu_393_ap_idle,
        ap_ready => grp_vector_init_64_fu_393_ap_ready,
        array_V_address1 => grp_vector_init_64_fu_393_array_V_address1,
        array_V_ce1 => grp_vector_init_64_fu_393_array_V_ce1,
        array_V_we1 => grp_vector_init_64_fu_393_array_V_we1,
        array_V_d1 => grp_vector_init_64_fu_393_array_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_385_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_385_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_KeccakF1600_StatePer_fu_385_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_385_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_385_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_init_64_fu_393_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_init_64_fu_393_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_478_p2 = ap_const_lv1_1))) then 
                    grp_vector_init_64_fu_393_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_init_64_fu_393_ap_ready = ap_const_logic_1)) then 
                    grp_vector_init_64_fu_393_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cnt_V_2_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln891_1_fu_602_p2 = ap_const_lv1_0))) then 
                cnt_V_2_fu_154 <= cnt_V_fu_590_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_478_p2 = ap_const_lv1_1)))) then 
                cnt_V_2_fu_154 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_01676_2_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln891_2_fu_914_p2 = ap_const_lv1_0))) then 
                p_01676_2_i_reg_374 <= cnt_V_3_reg_1264;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1))) then 
                p_01676_2_i_reg_374 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0260_0_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_393_ap_done = ap_const_logic_1))) then 
                p_0260_0_i_reg_362 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then 
                p_0260_0_i_reg_362 <= i_V_4_fu_613_p2;
            end if; 
        end if;
    end process;

    reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_458 <= temp_buffer_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_458 <= temp_buffer_V_q1;
            end if; 
        end if;
    end process;

    reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_463 <= temp_buffer_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_463 <= temp_buffer_V_q0;
            end if; 
        end if;
    end process;

    reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_468 <= temp_buffer_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_468 <= temp_buffer_V_q1;
            end if; 
        end if;
    end process;

    reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_473 <= temp_buffer_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_473 <= temp_buffer_V_q0;
            end if; 
        end if;
    end process;

    t_V_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_351 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_351 <= i_V_reg_1095;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cnt_V_2_load_1_reg_1172 <= cnt_V_2_fu_154;
                shake_prng_state_arr_reg_1192 <= zext_ln544_28_fu_566_p1(5 - 1 downto 0);
                temp_buffer_V_load_12_reg_1177 <= temp_buffer_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                cnt_V_3_reg_1264 <= cnt_V_3_fu_807_p2;
                icmp_ln117_3_reg_1237 <= icmp_ln117_3_fu_740_p2;
                icmp_ln117_4_reg_1242 <= icmp_ln117_4_fu_745_p2;
                icmp_ln117_5_reg_1248 <= icmp_ln117_5_fu_750_p2;
                icmp_ln117_6_reg_1253 <= icmp_ln117_6_fu_755_p2;
                select_ln117_5_reg_1259 <= select_ln117_5_fu_786_p3;
                shake_prng_state_arr_2_reg_1270 <= zext_ln544_29_fu_813_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_1095 <= i_V_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                icmp_ln21_1_reg_1306 <= icmp_ln21_1_fu_943_p2;
                icmp_ln21_2_reg_1311 <= icmp_ln21_2_fu_948_p2;
                icmp_ln21_reg_1301 <= icmp_ln21_fu_938_p2;
                shake_prng_state_arr_5_reg_1317 <= zext_ln544_30_fu_953_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln891_1_reg_1198 <= icmp_ln891_1_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                icmp_ln891_2_reg_1276 <= icmp_ln891_2_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_1))) then
                len_V_reg_1140 <= len_V_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                r_V_reg_1296 <= p_01676_2_i_reg_374(7 downto 3);
                ret_V_20_reg_1285 <= ret_V_20_fu_924_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_454 <= temp_buffer_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_393_ap_done = ap_const_logic_1))) then
                    zext_ln215_reg_1117(6 downto 0) <= zext_ln215_fu_494_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_478_p2 = ap_const_lv1_0))) then
                    zext_ln544_reg_1100(6 downto 0) <= zext_ln544_fu_489_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_reg_1100(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln215_reg_1117(16 downto 7) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_478_p2, ap_CS_fsm_state4, grp_vector_init_64_fu_393_ap_done, ap_CS_fsm_state5, icmp_ln891_fu_507_p2, icmp_ln891_1_fu_602_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_block_state11_on_subcall_done, icmp_ln891_2_fu_914_p2, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_block_state18_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_478_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_vector_init_64_fu_393_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln891_1_fu_602_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln891_2_fu_914_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln700_fu_797_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(zext_ln700_fu_794_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(icmp_ln891_1_reg_1198, grp_KeccakF1600_StatePer_fu_385_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_KeccakF1600_StatePer_fu_385_ap_done = ap_const_logic_0) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_KeccakF1600_StatePer_fu_385_ap_done, icmp_ln891_2_reg_1276)
    begin
                ap_block_state18_on_subcall_done <= ((grp_KeccakF1600_StatePer_fu_385_ap_done = ap_const_logic_0) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_p_0260_0_i_phi_fu_366_p4 <= p_0260_0_i_reg_362;

    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_V_3_fu_807_p2 <= std_logic_vector(unsigned(zext_ln700_1_fu_803_p1) + unsigned(cnt_V_2_fu_154));
    cnt_V_fu_590_p2 <= std_logic_vector(unsigned(cnt_V_2_load_1_reg_1172) + unsigned(ap_const_lv9_8));
    empty_26_fu_1049_p2 <= (icmp_ln21_6_fu_1036_p2 or icmp_ln21_5_fu_1031_p2);
    entropy_input_V_address0 <= zext_ln544_fu_489_p1(6 - 1 downto 0);

    entropy_input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            entropy_input_V_ce0 <= ap_const_logic_1;
        else 
            entropy_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_fu_385_ap_start <= grp_KeccakF1600_StatePer_fu_385_ap_start_reg;

    grp_fu_404_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state5, ap_phi_mux_p_0260_0_i_phi_fu_366_p4, p_0260_0_i_reg_362)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_404_p0 <= p_0260_0_i_reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_404_p0 <= ap_phi_mux_p_0260_0_i_phi_fu_366_p4;
        else 
            grp_fu_404_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_404_p2 <= (grp_fu_404_p0 or ap_const_lv16_1);
    grp_fu_411_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_2);
    grp_fu_417_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_3);
    grp_fu_423_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_4);
    grp_fu_429_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_5);
    grp_fu_438_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_6);
    grp_fu_444_p4 <= cnt_V_2_fu_154(7 downto 3);
    grp_vector_init_64_fu_393_ap_start <= grp_vector_init_64_fu_393_ap_start_reg;
    i_V_4_fu_613_p2 <= std_logic_vector(unsigned(p_0260_0_i_reg_362) + unsigned(ap_const_lv16_8));
    i_V_fu_483_p2 <= std_logic_vector(unsigned(t_V_reg_351) + unsigned(ap_const_lv7_1));
    icmp_ln117_1_fu_730_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_5) else "0";
    icmp_ln117_2_fu_735_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_4) else "0";
    icmp_ln117_3_fu_740_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_3) else "0";
    icmp_ln117_4_fu_745_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_2) else "0";
    icmp_ln117_5_fu_750_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_1) else "0";
    icmp_ln117_6_fu_755_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_0) else "0";
    icmp_ln117_fu_725_p2 <= "1" when (len_V_reg_1140 = ap_const_lv3_6) else "0";
    icmp_ln21_1_fu_943_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_2) else "0";
    icmp_ln21_2_fu_948_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_3) else "0";
    icmp_ln21_3_fu_991_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_4) else "0";
    icmp_ln21_4_fu_996_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_5) else "0";
    icmp_ln21_5_fu_1031_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_6) else "0";
    icmp_ln21_6_fu_1036_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_7) else "0";
    icmp_ln21_fu_938_p2 <= "1" when (ret_V_20_reg_1285 = ap_const_lv3_1) else "0";
    icmp_ln24_fu_478_p2 <= "1" when (t_V_reg_351 = enlen_V) else "0";
    icmp_ln891_1_fu_602_p2 <= "1" when (unsigned(cnt_V_fu_590_p2) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_2_fu_914_p2 <= "1" when (unsigned(cnt_V_3_reg_1264) > unsigned(ap_const_lv9_87)) else "0";
    icmp_ln891_fu_507_p2 <= "1" when (unsigned(zext_ln215_reg_1117) < unsigned(ret_V_fu_501_p2)) else "0";
    len_V_fu_527_p1 <= enlen_V(3 - 1 downto 0);
    m_masked_V_1_fu_826_p4 <= ((ap_const_lv1_1 & reg_458) & reg_454);
    m_masked_V_2_fu_840_p5 <= (((ap_const_lv1_1 & reg_463) & reg_458) & reg_454);
    m_masked_V_4_fu_667_p7 <= (((((ap_const_lv1_1 & reg_473) & reg_468) & reg_463) & reg_458) & reg_454);
    m_masked_V_5_fu_683_p8 <= ((((((ap_const_lv1_1 & temp_buffer_V_q0) & reg_473) & reg_468) & reg_463) & reg_458) & reg_454);
    m_masked_V_6_fu_705_p9 <= (((((((ap_const_lv1_1 & temp_buffer_V_q1) & temp_buffer_V_q0) & reg_473) & reg_468) & reg_463) & reg_458) & reg_454);
    m_masked_V_fu_818_p3 <= (ap_const_lv1_1 & reg_454);
    or_ln117_1_fu_874_p2 <= (icmp_ln117_4_reg_1242 or icmp_ln117_3_reg_1237);
    or_ln117_2_fu_772_p2 <= (icmp_ln117_2_fu_735_p2 or icmp_ln117_1_fu_730_p2);
    or_ln117_3_fu_890_p2 <= (or_ln117_fu_863_p2 or or_ln117_1_fu_874_p2);
    or_ln117_fu_863_p2 <= (icmp_ln117_6_reg_1253 or icmp_ln117_5_reg_1248);
    or_ln21_1_fu_1009_p2 <= (icmp_ln21_4_fu_996_p2 or icmp_ln21_3_fu_991_p2);
    or_ln21_fu_971_p2 <= (icmp_ln21_2_reg_1311 or icmp_ln21_1_reg_1306);
        p_0186_0_i_cast30_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0186_0_i_fu_1055_p3),61));

    p_0186_0_i_cast_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0186_0_i_cast30_fu_1063_p1),64));
    p_0186_0_i_fu_1055_p3 <= 
        select_ln21_5_i_fu_1041_p3 when (empty_26_fu_1049_p2(0) = '1') else 
        zext_ln21_1_fu_1027_p1;
    ret_V_18_fu_555_p2 <= (p_0260_0_i_reg_362 or ap_const_lv16_7);
    ret_V_20_fu_924_p1 <= p_01676_2_i_reg_374(3 - 1 downto 0);
    ret_V_21_fu_571_p9 <= (((((((temp_buffer_V_q1 & temp_buffer_V_q0) & temp_buffer_V_load_12_reg_1177) & reg_473) & reg_468) & reg_463) & reg_458) & reg_454);
    ret_V_22_fu_649_p6 <= ((((ap_const_lv1_1 & reg_468) & reg_463) & reg_458) & reg_454);
    ret_V_fu_501_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_497_p1) + unsigned(ap_const_lv17_8));
    select_ln117_1_fu_867_p3 <= 
        zext_ln214_fu_836_p1 when (icmp_ln117_4_reg_1242(0) = '1') else 
        m_masked_V_2_fu_840_p5;
    select_ln117_2_fu_760_p3 <= 
        zext_ln1356_fu_663_p1 when (icmp_ln117_2_fu_735_p2(0) = '1') else 
        m_masked_V_4_fu_667_p7;
    select_ln117_3_fu_778_p3 <= 
        zext_ln214_1_fu_701_p1 when (icmp_ln117_fu_725_p2(0) = '1') else 
        m_masked_V_6_fu_705_p9;
    select_ln117_4_fu_878_p3 <= 
        zext_ln117_fu_859_p1 when (or_ln117_fu_863_p2(0) = '1') else 
        select_ln117_1_fu_867_p3;
    select_ln117_5_fu_786_p3 <= 
        zext_ln117_1_fu_768_p1 when (or_ln117_2_fu_772_p2(0) = '1') else 
        select_ln117_3_fu_778_p3;
    select_ln117_6_fu_896_p3 <= 
        zext_ln117_2_fu_886_p1 when (or_ln117_3_fu_890_p2(0) = '1') else 
        select_ln117_5_reg_1259;
    select_ln117_fu_852_p3 <= 
        ap_const_lv9_1 when (icmp_ln117_6_reg_1253(0) = '1') else 
        m_masked_V_fu_818_p3;
    select_ln21_1_fu_964_p3 <= 
        ap_const_lv25_1000000 when (icmp_ln21_2_reg_1311(0) = '1') else 
        ap_const_lv25_1F0000;
    select_ln21_2_fu_975_p3 <= 
        select_ln21_1_fu_964_p3 when (or_ln21_fu_971_p2(0) = '1') else 
        select_ln21_fu_957_p3;
    select_ln21_3_fu_1001_p3 <= 
        ap_const_lv41_10000000000 when (icmp_ln21_4_fu_996_p2(0) = '1') else 
        ap_const_lv41_1F00000000;
    select_ln21_4_fu_1015_p3 <= 
        select_ln21_3_fu_1001_p3 when (or_ln21_1_fu_1009_p2(0) = '1') else 
        zext_ln21_fu_987_p1;
    select_ln21_5_i_fu_1041_p3 <= 
        ap_const_lv57_100000000000000 when (icmp_ln21_6_fu_1036_p2(0) = '1') else 
        ap_const_lv57_1F000000000000;
    select_ln21_fu_957_p3 <= 
        ap_const_lv25_1F00 when (icmp_ln21_reg_1301(0) = '1') else 
        ap_const_lv25_1F;
        sext_ln21_1_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_4_fu_1015_p3),45));

        sext_ln21_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln21_2_fu_975_p3),29));

    shake_prng_state_arr_4_reg_1280 <= ap_const_lv64_19(5 - 1 downto 0);

    shake_prng_state_array_V_address0_assign_proc : process(ap_CS_fsm_state8, icmp_ln891_1_reg_1198, ap_CS_fsm_state11, ap_CS_fsm_state15, icmp_ln891_2_reg_1276, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_address0, ap_CS_fsm_state18, zext_ln544_28_fu_566_p1, zext_ln544_29_fu_813_p1, zext_ln544_30_fu_953_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_30_fu_953_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_29_fu_813_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shake_prng_state_array_V_address0 <= zext_ln544_28_fu_566_p1(5 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_address0 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_address0;
        else 
            shake_prng_state_array_V_address0 <= "XXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_address1_assign_proc : process(ap_CS_fsm_state4, shake_prng_state_arr_reg_1192, icmp_ln891_1_reg_1198, ap_CS_fsm_state9, ap_CS_fsm_state11, shake_prng_state_arr_2_reg_1270, icmp_ln891_2_reg_1276, ap_CS_fsm_state16, shake_prng_state_arr_4_reg_1280, ap_CS_fsm_state19, shake_prng_state_arr_5_reg_1317, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_address1, grp_vector_init_64_fu_393_array_V_address1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            shake_prng_state_array_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_4_reg_1280;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_5_reg_1317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            shake_prng_state_array_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_2_reg_1270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shake_prng_state_array_V_address1 <= shake_prng_state_arr_reg_1192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_address1 <= grp_vector_init_64_fu_393_array_V_address1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_address1 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_address1;
        else 
            shake_prng_state_array_V_address1 <= "XXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_ce0_assign_proc : process(ap_CS_fsm_state8, icmp_ln891_1_reg_1198, ap_CS_fsm_state11, ap_CS_fsm_state15, icmp_ln891_2_reg_1276, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            shake_prng_state_array_V_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_ce0 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_ce0;
        else 
            shake_prng_state_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_prng_state_array_V_ce1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1198, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln891_2_reg_1276, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_ce1, grp_vector_init_64_fu_393_array_V_ce1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            shake_prng_state_array_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_ce1 <= grp_vector_init_64_fu_393_array_V_ce1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_ce1 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_ce1;
        else 
            shake_prng_state_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_prng_state_array_V_d1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1198, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln891_2_reg_1276, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_d1, grp_vector_init_64_fu_393_array_V_d1, ap_CS_fsm_state18, xor_ln719_fu_595_p2, xor_ln719_1_fu_907_p2, zext_ln209_fu_919_p1, ap_CS_fsm_state21, xor_ln719_2_fu_1071_p2, ap_CS_fsm_state23, xor_ln719_3_fu_1078_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_3_fu_1078_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            shake_prng_state_array_V_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_2_fu_1071_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            shake_prng_state_array_V_d1 <= zext_ln209_fu_919_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_1_fu_907_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shake_prng_state_array_V_d1 <= xor_ln719_fu_595_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_d1 <= grp_vector_init_64_fu_393_array_V_d1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_d1 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_d1;
        else 
            shake_prng_state_array_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_prng_state_array_V_we1_assign_proc : process(ap_CS_fsm_state4, icmp_ln891_1_reg_1198, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln891_2_reg_1276, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_fu_385_state_V_6_we1, grp_vector_init_64_fu_393_array_V_we1, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            shake_prng_state_array_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shake_prng_state_array_V_we1 <= grp_vector_init_64_fu_393_array_V_we1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln891_2_reg_1276 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln891_1_reg_1198 = ap_const_lv1_1)))) then 
            shake_prng_state_array_V_we1 <= grp_KeccakF1600_StatePer_fu_385_state_V_6_we1;
        else 
            shake_prng_state_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, icmp_ln891_fu_507_p2, zext_ln544_20_fu_512_p1, zext_ln544_12_fu_522_p1, zext_ln544_22_fu_530_p1, zext_ln544_24_fu_540_p1, zext_ln544_26_fu_550_p1, zext_ln544_13_fu_619_p1, zext_ln544_15_fu_629_p1, zext_ln544_17_fu_639_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_buffer_V_address0 <= zext_ln544_17_fu_639_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buffer_V_address0 <= zext_ln544_15_fu_629_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buffer_V_address0 <= zext_ln544_13_fu_619_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buffer_V_address0 <= zext_ln544_26_fu_550_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_buffer_V_address0 <= zext_ln544_24_fu_540_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_buffer_V_address0 <= zext_ln544_22_fu_530_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_1))) then 
            temp_buffer_V_address0 <= zext_ln544_12_fu_522_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_0))) then 
            temp_buffer_V_address0 <= zext_ln544_20_fu_512_p1(7 - 1 downto 0);
        else 
            temp_buffer_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_buffer_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, zext_ln544_reg_1100, ap_CS_fsm_state5, ap_CS_fsm_state3, zext_ln544_21_fu_517_p1, zext_ln544_23_fu_535_p1, zext_ln544_25_fu_545_p1, zext_ln544_27_fu_561_p1, zext_ln544_14_fu_624_p1, zext_ln544_16_fu_634_p1, zext_ln544_18_fu_644_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_buffer_V_address1 <= zext_ln544_18_fu_644_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buffer_V_address1 <= zext_ln544_16_fu_634_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buffer_V_address1 <= zext_ln544_14_fu_624_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buffer_V_address1 <= zext_ln544_27_fu_561_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_buffer_V_address1 <= zext_ln544_25_fu_545_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_buffer_V_address1 <= zext_ln544_23_fu_535_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_buffer_V_address1 <= zext_ln544_21_fu_517_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_buffer_V_address1 <= zext_ln544_reg_1100(7 - 1 downto 0);
        else 
            temp_buffer_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, icmp_ln891_fu_507_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln891_fu_507_p2 = ap_const_lv1_0)))) then 
            temp_buffer_V_ce0 <= ap_const_logic_1;
        else 
            temp_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_buffer_V_ce1 <= ap_const_logic_1;
        else 
            temp_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buffer_V_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_buffer_V_we1 <= ap_const_logic_1;
        else 
            temp_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln719_1_fu_907_p2 <= (zext_ln117_3_fu_903_p1 xor shake_prng_state_array_V_q0);
    xor_ln719_2_fu_1071_p2 <= (shake_prng_state_array_V_q0 xor p_0186_0_i_cast_fu_1067_p1);
    xor_ln719_3_fu_1078_p2 <= (shake_prng_state_array_V_q0 xor ap_const_lv64_8000000000000000);
    xor_ln719_fu_595_p2 <= (shake_prng_state_array_V_q0 xor ret_V_21_fu_571_p9);
    zext_ln117_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_2_fu_760_p3),57));
    zext_ln117_2_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_4_fu_878_p3),57));
    zext_ln117_3_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_6_fu_896_p3),64));
    zext_ln117_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_fu_852_p3),25));
    zext_ln1356_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_22_fu_649_p6),41));
    zext_ln209_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01676_2_i_reg_374),64));
    zext_ln214_1_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_masked_V_5_fu_683_p8),57));
    zext_ln214_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_masked_V_1_fu_826_p4),25));
    zext_ln215_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_362),17));
    zext_ln215_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(enlen_V),17));
    zext_ln21_1_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_1_fu_1023_p1),57));
    zext_ln21_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_fu_983_p1),41));
    zext_ln544_12_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_362),64));
    zext_ln544_13_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_404_p2),64));
    zext_ln544_14_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_411_p2),64));
    zext_ln544_15_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_417_p2),64));
    zext_ln544_16_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_423_p2),64));
    zext_ln544_17_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_429_p2),64));
    zext_ln544_18_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_438_p2),64));
    zext_ln544_20_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0260_0_i_reg_362),64));
    zext_ln544_21_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_404_p2),64));
    zext_ln544_22_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_411_p2),64));
    zext_ln544_23_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_417_p2),64));
    zext_ln544_24_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_423_p2),64));
    zext_ln544_25_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_429_p2),64));
    zext_ln544_26_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_438_p2),64));
    zext_ln544_27_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_18_fu_555_p2),64));
    zext_ln544_28_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_444_p4),64));
    zext_ln544_29_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_444_p4),64));
    zext_ln544_30_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1296),64));
    zext_ln544_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_351),64));
    zext_ln700_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_797_p2),9));
    zext_ln700_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_V_reg_1140),4));
end behav;
