-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakF1600_StatePer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    -- Channel A
    ap_start_A           : in  std_logic;
    ap_done_A            : out std_logic;
    ap_idle_A            : out std_logic;
    ap_ready_A           : out std_logic;
    state_V_address0_A   : out std_logic_vector (4 downto 0);
    state_V_ce0_A        : out std_logic;
    state_V_q0_A         : in  std_logic_vector (63 downto 0);
    state_V_address1_A   : out std_logic_vector (4 downto 0);
    state_V_ce1_A        : out std_logic;
    state_V_we1_A        : out std_logic;
    state_V_d1_A         : out std_logic_vector (63 downto 0);
    -- Channel B
    ap_start_B           : in  std_logic;
    ap_done_B            : out std_logic;
    ap_idle_B            : out std_logic;
    ap_ready_B           : out std_logic;
    state_V_address0_B   : out std_logic_vector (4 downto 0);
    state_V_ce0_B        : out std_logic;
    state_V_q0_B         : in  std_logic_vector (63 downto 0);
    state_V_address1_B   : out std_logic_vector (4 downto 0);
    state_V_ce1_B        : out std_logic;
    state_V_we1_B        : out std_logic;
    state_V_d1_B         : out std_logic_vector (63 downto 0);
    -- Channel C
    ap_start_C           : in  std_logic;
    ap_done_C            : out std_logic;
    ap_idle_C            : out std_logic;
    ap_ready_C           : out std_logic;
    state_V_address0_C   : out std_logic_vector (4 downto 0);
    state_V_ce0_C        : out std_logic;
    state_V_q0_C         : in  std_logic_vector (63 downto 0);
    state_V_address1_C   : out std_logic_vector (4 downto 0);
    state_V_ce1_C        : out std_logic;
    state_V_we1_C        : out std_logic;
    state_V_d1_C         : out std_logic_vector (63 downto 0);
    -- Channel D
    ap_start_D           : in  std_logic;
    ap_done_D            : out std_logic;
    ap_idle_D            : out std_logic;
    ap_ready_D           : out std_logic;
    state_V_address0_D   : out std_logic_vector (4 downto 0);
    state_V_ce0_D        : out std_logic;
    state_V_q0_D         : in  std_logic_vector (63 downto 0);
    state_V_address1_D   : out std_logic_vector (4 downto 0);
    state_V_ce1_D        : out std_logic;
    state_V_we1_D        : out std_logic;
    state_V_d1_D         : out std_logic_vector (63 downto 0);
    -- Channel E
    ap_start_E           : in  std_logic;
    ap_done_E            : out std_logic;
    ap_idle_E            : out std_logic;
    ap_ready_E           : out std_logic;
    state_V_address0_E   : out std_logic_vector (4 downto 0);
    state_V_ce0_E        : out std_logic;
    state_V_q0_E         : in  std_logic_vector (63 downto 0);
    state_V_address1_E   : out std_logic_vector (4 downto 0);
    state_V_ce1_E        : out std_logic;
    state_V_we1_E        : out std_logic;
    state_V_d1_E         : out std_logic_vector (63 downto 0)
	 );
end;


architecture behav of KeccakF1600_StatePer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakF_RoundConstan_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakF_RoundConstan_ce0 : STD_LOGIC;
    signal KeccakF_RoundConstan_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_2628 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal round_V_fu_883_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal round_V_reg_2641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln887_23_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_1_V_fu_1286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal A_2_V_fu_1304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_3_V_fu_1322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_4_V_fu_1340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_5_V_fu_1498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_6_V_fu_1516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_7_V_fu_1534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_8_V_fu_1552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_9_V_fu_1570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_10_V_fu_1726_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_11_V_fu_1744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_12_V_fu_1762_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_13_V_fu_1780_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_14_V_fu_1798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_15_V_fu_1956_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_16_V_fu_1974_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_17_V_fu_1992_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_18_V_fu_2010_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_19_V_fu_2028_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_20_V_fu_2186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_21_V_fu_2204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_22_V_fu_2222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_23_V_1_fu_2240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_fu_2258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_0_V_fu_2270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_11_fu_2282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_0101_0_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal A_24_V_225_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_23_V_224_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_22_V_223_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_21_V_222_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_20_V_221_reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_19_V_220_reg_438 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_18_V_219_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_17_V_218_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_16_V_217_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_15_V_216_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_14_V_215_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_13_V_214_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_12_V_213_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_11_V_212_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_10_V_211_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_9_V_210_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_8_V_29_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_7_V_28_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_6_V_27_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_5_V_26_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_4_V_25_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_3_V_24_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_2_V_23_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_1_V_22_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_0_V_21_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_045_0_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0101_2_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_24_fu_2276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_67_fu_2288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_1_fu_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal A_24_V_2_fu_242 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_3_fu_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_4_fu_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_5_fu_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_6_fu_258 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_7_fu_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_8_fu_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_9_fu_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_10_fu_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_11_fu_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_12_fu_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_13_fu_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_14_fu_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_15_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_16_fu_298 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_17_fu_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_18_fu_306 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_19_fu_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_20_fu_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_21_fu_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_22_fu_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_23_fu_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_24_fu_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_25_fu_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_2293_p27 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_21_fu_900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_22_fu_906_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_25_fu_924_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_26_fu_930_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_23_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_29_fu_948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_30_fu_954_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_27_fu_942_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_33_fu_972_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_34_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_31_fu_966_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_36_fu_996_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_37_fu_1002_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_35_fu_990_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_20_fu_936_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_fu_1014_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_1018_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_32_fu_1008_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1026_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_24_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_1_fu_1040_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_fu_1044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_16_fu_912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1357_1_fu_1052_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_28_fu_984_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_2_fu_1066_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_2_fu_1078_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_3_fu_1092_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_fu_1096_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_3_fu_1104_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_4_fu_1118_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_16_fu_1122_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_4_fu_1130_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_fu_1034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_29_fu_1060_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_34_fu_1150_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_fu_1156_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln1_fu_1160_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal xor_ln1357_30_fu_1086_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_35_fu_1178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_1_fu_1184_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln646_1_fu_1188_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal xor_ln1357_31_fu_1112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_36_fu_1206_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_2_fu_1212_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln646_2_fu_1216_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal xor_ln1357_32_fu_1138_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_37_fu_1234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_3_fu_1240_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal lshr_ln646_3_fu_1244_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln1_fu_1170_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_1_fu_1198_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_fu_1262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_2_fu_1226_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_1_fu_1274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_8_fu_1280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_3_fu_1254_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_2_fu_1292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_9_fu_1298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_33_fu_1144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_3_fu_1310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_10_fu_1316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_4_fu_1328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_11_fu_1334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_42_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_4_fu_1352_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln646_4_fu_1356_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal xor_ln1357_43_fu_1374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_5_fu_1380_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal lshr_ln646_5_fu_1384_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal xor_ln1357_44_fu_1402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_6_fu_1408_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln646_6_fu_1412_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1357_45_fu_1430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_7_fu_1436_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln646_7_fu_1440_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal xor_ln1357_46_fu_1458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_8_fu_1464_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln646_8_fu_1468_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal or_ln647_5_fu_1394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_6_fu_1422_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_5_fu_1486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_4_fu_1366_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_12_fu_1492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_7_fu_1450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_6_fu_1504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_13_fu_1510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_8_fu_1478_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_7_fu_1522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_14_fu_1528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_8_fu_1540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_15_fu_1546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_9_fu_1558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_16_fu_1564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_52_fu_1576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_9_fu_1582_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_1586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1357_53_fu_1602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_10_fu_1608_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal lshr_ln646_s_fu_1612_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln1357_54_fu_1630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_11_fu_1636_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln646_9_fu_1640_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xor_ln1357_55_fu_1658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_12_fu_1664_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln646_10_fu_1668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_56_fu_1686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_13_fu_1692_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal lshr_ln646_11_fu_1696_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln647_s_fu_1622_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_10_fu_1650_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_10_fu_1714_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_9_fu_1594_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_17_fu_1720_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_11_fu_1678_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_11_fu_1732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_18_fu_1738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_12_fu_1706_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_12_fu_1750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_19_fu_1756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_13_fu_1768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_20_fu_1774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_14_fu_1786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_21_fu_1792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_62_fu_1804_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_14_fu_1810_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lshr_ln646_12_fu_1814_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal xor_ln1357_63_fu_1832_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_15_fu_1838_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln646_13_fu_1842_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln1357_64_fu_1860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_16_fu_1866_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln646_14_fu_1870_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1357_65_fu_1888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_17_fu_1894_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal lshr_ln646_15_fu_1898_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln1357_66_fu_1916_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_18_fu_1922_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln646_16_fu_1926_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal or_ln647_14_fu_1852_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_15_fu_1880_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_15_fu_1944_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_13_fu_1824_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_22_fu_1950_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_16_fu_1908_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_16_fu_1962_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_23_fu_1968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_17_fu_1936_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_17_fu_1980_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_24_fu_1986_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_18_fu_1998_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_25_fu_2004_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_19_fu_2016_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_26_fu_2022_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_72_fu_2034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_19_fu_2040_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln646_17_fu_2044_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal xor_ln1357_73_fu_2062_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_20_fu_2068_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln646_18_fu_2072_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal xor_ln1357_74_fu_2090_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_21_fu_2096_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln646_19_fu_2100_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal xor_ln1357_75_fu_2118_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_22_fu_2124_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal lshr_ln646_20_fu_2128_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal xor_ln1357_76_fu_2146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_23_fu_2152_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal lshr_ln646_21_fu_2156_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln647_19_fu_2082_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_20_fu_2110_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_20_fu_2174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_18_fu_2054_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_27_fu_2180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_21_fu_2138_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_21_fu_2192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_28_fu_2198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_22_fu_2166_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_22_fu_2210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_29_fu_2216_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_23_fu_2228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_30_fu_2234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_24_fu_2246_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_31_fu_2252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_fu_1268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_38_fu_2264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
	
	
	  signal ap_start         : std_logic;
  signal ap_done          : std_logic;
  signal ap_idle          : std_logic;
  signal ap_ready         : std_logic;
  signal state_V_6_address0 : std_logic_vector (4 downto 0);
  signal state_V_6_ce0      : std_logic;
  signal state_V_6_q0       : std_logic_vector (63 downto 0);
  signal state_V_6_address1 : std_logic_vector (4 downto 0);
  signal state_V_6_ce1      : std_logic;
  signal state_V_6_we1      : std_logic;
  signal state_V_6_d1       : std_logic_vector (63 downto 0);
  

    component crypto_kem_enc_hlcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_Statebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;

  signal ap_start_vect : std_logic_vector(4 downto 0);

begin
  
  ap_start      <= ap_start_A or ap_start_B or ap_start_C or ap_start_D or ap_start_E;
  ap_start_vect <= ap_start_A & ap_start_B & ap_start_C & ap_start_D & ap_start_E;

  process(state_V_q0_A, state_V_q0_B, state_V_q0_C, state_V_q0_D, state_V_q0_E, ap_start_vect)
  begin
    case (ap_start_vect) is
      when "10000" => state_V_6_q0 <= state_V_q0_A;
      when "01000" => state_V_6_q0 <= state_V_q0_B;
      when "00100" => state_V_6_q0 <= state_V_q0_C;
      when "00010" => state_V_6_q0 <= state_V_q0_D;
      when "00001" => state_V_6_q0 <= state_V_q0_E;
      when others  => state_V_6_q0 <= (others => '0');
    end case;
  end process;
  
  -- Channel A
  ap_done_A          <= ap_done;
  ap_idle_A          <= ap_idle;
  ap_ready_A         <= ap_ready;
  state_V_address0_A <= state_V_6_address0;
  state_V_ce0_A      <= state_V_6_ce0 when ap_start_A = '1' else '0';
  state_V_address1_A <= state_V_6_address1;
  state_V_ce1_A      <= state_V_6_ce1 when ap_start_A = '1' else '0';
  state_V_we1_A      <= state_V_6_we1 when ap_start_A = '1' else '0';
  state_V_d1_A       <= state_V_6_d1;
  -- Channel B
  ap_done_B          <= ap_done;
  ap_idle_B          <= ap_idle;
  ap_ready_B         <= ap_ready;
  state_V_address0_B <= state_V_6_address0;
  state_V_ce0_B      <= state_V_6_ce0 when ap_start_B = '1' else '0';
  state_V_address1_B <= state_V_6_address1;
  state_V_ce1_B      <= state_V_6_ce1 when ap_start_B = '1' else '0';
  state_V_we1_B      <= state_V_6_we1 when ap_start_B = '1' else '0';
  state_V_d1_B       <= state_V_6_d1;
  -- Channel C
  ap_done_C          <= ap_done;
  ap_idle_C          <= ap_idle;
  ap_ready_C         <= ap_ready;
  state_V_address0_C <= state_V_6_address0;
  state_V_ce0_C      <= state_V_6_ce0 when ap_start_C = '1' else '0';
  state_V_address1_C <= state_V_6_address1;
  state_V_ce1_C      <= state_V_6_ce1 when ap_start_C = '1' else '0';
  state_V_we1_C      <= state_V_6_we1 when ap_start_C = '1' else '0';
  state_V_d1_C       <= state_V_6_d1;
  -- Channel D
  ap_done_D          <= ap_done;
  ap_idle_D          <= ap_idle;
  ap_ready_D         <= ap_ready;
  state_V_address0_D <= state_V_6_address0;
  state_V_ce0_D      <= state_V_6_ce0 when ap_start_D = '1' else '0';
  state_V_address1_D <= state_V_6_address1;
  state_V_ce1_D      <= state_V_6_ce1 when ap_start_D = '1' else '0';
  state_V_we1_D      <= state_V_6_we1 when ap_start_D = '1' else '0';
  state_V_d1_D       <= state_V_6_d1;
  -- Channel E
  ap_done_E          <= ap_done;
  ap_idle_E          <= ap_idle;
  ap_ready_E         <= ap_ready;
  state_V_address0_E <= state_V_6_address0;
  state_V_ce0_E      <= state_V_6_ce0 when ap_start_E = '1' else '0';
  state_V_address1_E <= state_V_6_address1;
  state_V_ce1_E      <= state_V_6_ce1 when ap_start_E = '1' else '0';
  state_V_we1_E      <= state_V_6_we1 when ap_start_E = '1' else '0';
  state_V_d1_E       <= state_V_6_d1;
  
    KeccakF_RoundConstan_U : component KeccakF1600_Statebkb
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakF_RoundConstan_address0,
        ce0 => KeccakF_RoundConstan_ce0,
        q0 => KeccakF_RoundConstan_q0);

    crypto_kem_enc_hlcud_U2 : component crypto_kem_enc_hlcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 64,
        din21_WIDTH => 64,
        din22_WIDTH => 64,
        din23_WIDTH => 64,
        din24_WIDTH => 64,
        din25_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => A_0_V_21_reg_628,
        din1 => A_1_V_22_reg_618,
        din2 => A_2_V_23_reg_608,
        din3 => A_3_V_24_reg_598,
        din4 => A_4_V_25_reg_588,
        din5 => A_5_V_26_reg_578,
        din6 => A_6_V_27_reg_568,
        din7 => A_7_V_28_reg_558,
        din8 => A_8_V_29_reg_548,
        din9 => A_9_V_210_reg_538,
        din10 => A_10_V_211_reg_528,
        din11 => A_11_V_212_reg_518,
        din12 => A_12_V_213_reg_508,
        din13 => A_13_V_214_reg_498,
        din14 => A_14_V_215_reg_488,
        din15 => A_15_V_216_reg_478,
        din16 => A_16_V_217_reg_468,
        din17 => A_17_V_218_reg_458,
        din18 => A_18_V_219_reg_448,
        din19 => A_19_V_220_reg_438,
        din20 => A_20_V_221_reg_428,
        din21 => A_21_V_222_reg_418,
        din22 => A_22_V_223_reg_408,
        din23 => A_23_V_224_reg_398,
        din24 => A_24_V_225_reg_388,
        din25 => p_0101_2_reg_649,
        dout => tmp_s_fu_2293_p27);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    A_0_V_21_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_0_V_21_reg_628 <= A_24_V_1_fu_238;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_0_V_21_reg_628 <= A_0_V_fu_2270_p2;
            end if; 
        end if;
    end process;

    A_10_V_211_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_10_V_211_reg_528 <= A_24_V_11_fu_278;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_10_V_211_reg_528 <= A_10_V_fu_1726_p2;
            end if; 
        end if;
    end process;

    A_11_V_212_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_11_V_212_reg_518 <= A_24_V_12_fu_282;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_11_V_212_reg_518 <= A_11_V_fu_1744_p2;
            end if; 
        end if;
    end process;

    A_12_V_213_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_12_V_213_reg_508 <= A_24_V_13_fu_286;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_12_V_213_reg_508 <= A_12_V_fu_1762_p2;
            end if; 
        end if;
    end process;

    A_13_V_214_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_13_V_214_reg_498 <= A_24_V_14_fu_290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_13_V_214_reg_498 <= A_13_V_fu_1780_p2;
            end if; 
        end if;
    end process;

    A_14_V_215_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_14_V_215_reg_488 <= A_24_V_15_fu_294;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_14_V_215_reg_488 <= A_14_V_fu_1798_p2;
            end if; 
        end if;
    end process;

    A_15_V_216_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_15_V_216_reg_478 <= A_24_V_16_fu_298;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_15_V_216_reg_478 <= A_15_V_fu_1956_p2;
            end if; 
        end if;
    end process;

    A_16_V_217_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_16_V_217_reg_468 <= A_24_V_17_fu_302;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_16_V_217_reg_468 <= A_16_V_fu_1974_p2;
            end if; 
        end if;
    end process;

    A_17_V_218_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_17_V_218_reg_458 <= A_24_V_18_fu_306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_17_V_218_reg_458 <= A_17_V_fu_1992_p2;
            end if; 
        end if;
    end process;

    A_18_V_219_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_18_V_219_reg_448 <= A_24_V_19_fu_310;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_18_V_219_reg_448 <= A_18_V_fu_2010_p2;
            end if; 
        end if;
    end process;

    A_19_V_220_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_19_V_220_reg_438 <= A_24_V_20_fu_314;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_19_V_220_reg_438 <= A_19_V_fu_2028_p2;
            end if; 
        end if;
    end process;

    A_1_V_22_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_1_V_22_reg_618 <= A_24_V_2_fu_242;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_1_V_22_reg_618 <= A_1_V_fu_1286_p2;
            end if; 
        end if;
    end process;

    A_20_V_221_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_20_V_221_reg_428 <= A_24_V_21_fu_318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_20_V_221_reg_428 <= A_20_V_fu_2186_p2;
            end if; 
        end if;
    end process;

    A_21_V_222_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_21_V_222_reg_418 <= A_24_V_22_fu_322;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_21_V_222_reg_418 <= A_21_V_fu_2204_p2;
            end if; 
        end if;
    end process;

    A_22_V_223_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_22_V_223_reg_408 <= A_24_V_23_fu_326;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_22_V_223_reg_408 <= A_22_V_fu_2222_p2;
            end if; 
        end if;
    end process;

    A_23_V_224_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_23_V_224_reg_398 <= A_24_V_24_fu_330;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_23_V_224_reg_398 <= A_23_V_1_fu_2240_p2;
            end if; 
        end if;
    end process;

    A_24_V_225_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_24_V_225_reg_388 <= A_24_V_25_fu_334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_24_V_225_reg_388 <= A_24_V_fu_2258_p2;
            end if; 
        end if;
    end process;

    A_2_V_23_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_2_V_23_reg_608 <= A_24_V_3_fu_246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_2_V_23_reg_608 <= A_2_V_fu_1304_p2;
            end if; 
        end if;
    end process;

    A_3_V_24_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_3_V_24_reg_598 <= A_24_V_4_fu_250;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_3_V_24_reg_598 <= A_3_V_fu_1322_p2;
            end if; 
        end if;
    end process;

    A_4_V_25_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_4_V_25_reg_588 <= A_24_V_5_fu_254;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_4_V_25_reg_588 <= A_4_V_fu_1340_p2;
            end if; 
        end if;
    end process;

    A_5_V_26_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_5_V_26_reg_578 <= A_24_V_6_fu_258;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_5_V_26_reg_578 <= A_5_V_fu_1498_p2;
            end if; 
        end if;
    end process;

    A_6_V_27_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_6_V_27_reg_568 <= A_24_V_7_fu_262;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_6_V_27_reg_568 <= A_6_V_fu_1516_p2;
            end if; 
        end if;
    end process;

    A_7_V_28_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_7_V_28_reg_558 <= A_24_V_8_fu_266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_7_V_28_reg_558 <= A_7_V_fu_1534_p2;
            end if; 
        end if;
    end process;

    A_8_V_29_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_8_V_29_reg_548 <= A_24_V_9_fu_270;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_8_V_29_reg_548 <= A_8_V_fu_1552_p2;
            end if; 
        end if;
    end process;

    A_9_V_210_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_9_V_210_reg_538 <= A_24_V_10_fu_274;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_9_V_210_reg_538 <= A_9_V_fu_1570_p2;
            end if; 
        end if;
    end process;

    p_0101_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0101_0_reg_376 <= i_V_reg_2628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0101_0_reg_376 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0101_2_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_23_fu_877_p2 = ap_const_lv1_1))) then 
                p_0101_2_reg_649 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_0))) then 
                p_0101_2_reg_649 <= i_V_11_fu_2282_p2;
            end if; 
        end if;
    end process;

    p_045_0_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                p_045_0_reg_638 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_045_0_reg_638 <= round_V_reg_2641;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_9))) then
                A_24_V_10_fu_274 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_A))) then
                A_24_V_11_fu_278 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_B))) then
                A_24_V_12_fu_282 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_C))) then
                A_24_V_13_fu_286 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_D))) then
                A_24_V_14_fu_290 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_E))) then
                A_24_V_15_fu_294 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_F))) then
                A_24_V_16_fu_298 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_10))) then
                A_24_V_17_fu_302 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_11))) then
                A_24_V_18_fu_306 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_12))) then
                A_24_V_19_fu_310 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_0))) then
                A_24_V_1_fu_238 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_13))) then
                A_24_V_20_fu_314 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_14))) then
                A_24_V_21_fu_318 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_15))) then
                A_24_V_22_fu_322 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_16))) then
                A_24_V_23_fu_326 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_17))) then
                A_24_V_24_fu_330 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((p_0101_0_reg_376 = ap_const_lv5_18) or ((p_0101_0_reg_376 = ap_const_lv5_19) or ((p_0101_0_reg_376 = ap_const_lv5_1A) or ((p_0101_0_reg_376 = ap_const_lv5_1B) or ((p_0101_0_reg_376 = ap_const_lv5_1C) or ((p_0101_0_reg_376 = ap_const_lv5_1D) or ((p_0101_0_reg_376 = ap_const_lv5_1E) or (p_0101_0_reg_376 = ap_const_lv5_1F)))))))))) then
                A_24_V_25_fu_334 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_1))) then
                A_24_V_2_fu_242 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_2))) then
                A_24_V_3_fu_246 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_3))) then
                A_24_V_4_fu_250 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_4))) then
                A_24_V_5_fu_254 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_5))) then
                A_24_V_6_fu_258 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_6))) then
                A_24_V_7_fu_262 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_7))) then
                A_24_V_8_fu_266 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_8))) then
                A_24_V_9_fu_270 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_2628 <= i_V_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                round_V_reg_2641 <= round_V_fu_883_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_735_p2, ap_CS_fsm_state5, icmp_ln887_23_fu_877_p2, ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_23_fu_877_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    A_0_V_fu_2270_p2 <= (xor_ln719_38_fu_2264_p2 xor KeccakF_RoundConstan_q0);
    A_10_V_fu_1726_p2 <= (or_ln647_9_fu_1594_p3 xor and_ln1355_17_fu_1720_p2);
    A_11_V_fu_1744_p2 <= (or_ln647_s_fu_1622_p3 xor and_ln1355_18_fu_1738_p2);
    A_12_V_fu_1762_p2 <= (or_ln647_10_fu_1650_p3 xor and_ln1355_19_fu_1756_p2);
    A_13_V_fu_1780_p2 <= (or_ln647_11_fu_1678_p3 xor and_ln1355_20_fu_1774_p2);
    A_14_V_fu_1798_p2 <= (or_ln647_12_fu_1706_p3 xor and_ln1355_21_fu_1792_p2);
    A_15_V_fu_1956_p2 <= (or_ln647_13_fu_1824_p3 xor and_ln1355_22_fu_1950_p2);
    A_16_V_fu_1974_p2 <= (or_ln647_14_fu_1852_p3 xor and_ln1355_23_fu_1968_p2);
    A_17_V_fu_1992_p2 <= (or_ln647_15_fu_1880_p3 xor and_ln1355_24_fu_1986_p2);
    A_18_V_fu_2010_p2 <= (or_ln647_16_fu_1908_p3 xor and_ln1355_25_fu_2004_p2);
    A_19_V_fu_2028_p2 <= (or_ln647_17_fu_1936_p3 xor and_ln1355_26_fu_2022_p2);
    A_1_V_fu_1286_p2 <= (or_ln1_fu_1170_p3 xor and_ln1355_8_fu_1280_p2);
    A_20_V_fu_2186_p2 <= (or_ln647_18_fu_2054_p3 xor and_ln1355_27_fu_2180_p2);
    A_21_V_fu_2204_p2 <= (or_ln647_19_fu_2082_p3 xor and_ln1355_28_fu_2198_p2);
    A_22_V_fu_2222_p2 <= (or_ln647_20_fu_2110_p3 xor and_ln1355_29_fu_2216_p2);
    A_23_V_1_fu_2240_p2 <= (or_ln647_21_fu_2138_p3 xor and_ln1355_30_fu_2234_p2);
    A_24_V_fu_2258_p2 <= (or_ln647_22_fu_2166_p3 xor and_ln1355_31_fu_2252_p2);
    A_2_V_fu_1304_p2 <= (or_ln647_1_fu_1198_p3 xor and_ln1355_9_fu_1298_p2);
    A_3_V_fu_1322_p2 <= (or_ln647_2_fu_1226_p3 xor and_ln1355_10_fu_1316_p2);
    A_4_V_fu_1340_p2 <= (or_ln647_3_fu_1254_p3 xor and_ln1355_11_fu_1334_p2);
    A_5_V_fu_1498_p2 <= (or_ln647_4_fu_1366_p3 xor and_ln1355_12_fu_1492_p2);
    A_6_V_fu_1516_p2 <= (or_ln647_5_fu_1394_p3 xor and_ln1355_13_fu_1510_p2);
    A_7_V_fu_1534_p2 <= (or_ln647_6_fu_1422_p3 xor and_ln1355_14_fu_1528_p2);
    A_8_V_fu_1552_p2 <= (or_ln647_7_fu_1450_p3 xor and_ln1355_15_fu_1546_p2);
    A_9_V_fu_1570_p2 <= (or_ln647_8_fu_1478_p3 xor and_ln1355_16_fu_1564_p2);
    KeccakF_RoundConstan_address0 <= zext_ln156_fu_889_p1(5 - 1 downto 0);

    KeccakF_RoundConstan_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_1;
        else 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln1355_10_fu_1316_p2 <= (xor_ln769_3_fu_1310_p2 and xor_ln1357_33_fu_1144_p2);
    and_ln1355_11_fu_1334_p2 <= (xor_ln769_4_fu_1328_p2 and or_ln1_fu_1170_p3);
    and_ln1355_12_fu_1492_p2 <= (xor_ln769_5_fu_1486_p2 and or_ln647_6_fu_1422_p3);
    and_ln1355_13_fu_1510_p2 <= (xor_ln769_6_fu_1504_p2 and or_ln647_7_fu_1450_p3);
    and_ln1355_14_fu_1528_p2 <= (xor_ln769_7_fu_1522_p2 and or_ln647_8_fu_1478_p3);
    and_ln1355_15_fu_1546_p2 <= (xor_ln769_8_fu_1540_p2 and or_ln647_4_fu_1366_p3);
    and_ln1355_16_fu_1564_p2 <= (xor_ln769_9_fu_1558_p2 and or_ln647_5_fu_1394_p3);
    and_ln1355_17_fu_1720_p2 <= (xor_ln769_10_fu_1714_p2 and or_ln647_10_fu_1650_p3);
    and_ln1355_18_fu_1738_p2 <= (xor_ln769_11_fu_1732_p2 and or_ln647_11_fu_1678_p3);
    and_ln1355_19_fu_1756_p2 <= (xor_ln769_12_fu_1750_p2 and or_ln647_12_fu_1706_p3);
    and_ln1355_20_fu_1774_p2 <= (xor_ln769_13_fu_1768_p2 and or_ln647_9_fu_1594_p3);
    and_ln1355_21_fu_1792_p2 <= (xor_ln769_14_fu_1786_p2 and or_ln647_s_fu_1622_p3);
    and_ln1355_22_fu_1950_p2 <= (xor_ln769_15_fu_1944_p2 and or_ln647_15_fu_1880_p3);
    and_ln1355_23_fu_1968_p2 <= (xor_ln769_16_fu_1962_p2 and or_ln647_16_fu_1908_p3);
    and_ln1355_24_fu_1986_p2 <= (xor_ln769_17_fu_1980_p2 and or_ln647_17_fu_1936_p3);
    and_ln1355_25_fu_2004_p2 <= (xor_ln769_18_fu_1998_p2 and or_ln647_13_fu_1824_p3);
    and_ln1355_26_fu_2022_p2 <= (xor_ln769_19_fu_2016_p2 and or_ln647_14_fu_1852_p3);
    and_ln1355_27_fu_2180_p2 <= (xor_ln769_20_fu_2174_p2 and or_ln647_20_fu_2110_p3);
    and_ln1355_28_fu_2198_p2 <= (xor_ln769_21_fu_2192_p2 and or_ln647_21_fu_2138_p3);
    and_ln1355_29_fu_2216_p2 <= (xor_ln769_22_fu_2210_p2 and or_ln647_22_fu_2166_p3);
    and_ln1355_30_fu_2234_p2 <= (xor_ln769_23_fu_2228_p2 and or_ln647_18_fu_2054_p3);
    and_ln1355_31_fu_2252_p2 <= (xor_ln769_24_fu_2246_p2 and or_ln647_19_fu_2082_p3);
    and_ln1355_8_fu_1280_p2 <= (xor_ln769_1_fu_1274_p2 and or_ln647_2_fu_1226_p3);
    and_ln1355_9_fu_1298_p2 <= (xor_ln769_2_fu_1292_p2 and or_ln647_3_fu_1254_p3);
    and_ln1355_fu_1268_p2 <= (xor_ln769_fu_1262_p2 and or_ln647_1_fu_1198_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_11_fu_2282_p2 <= std_logic_vector(unsigned(p_0101_2_reg_649) + unsigned(ap_const_lv5_1));
    i_V_fu_741_p2 <= std_logic_vector(unsigned(p_0101_0_reg_376) + unsigned(ap_const_lv5_1));
    icmp_ln887_23_fu_877_p2 <= "1" when (p_045_0_reg_638 = ap_const_lv5_18) else "0";
    icmp_ln887_24_fu_2276_p2 <= "1" when (p_0101_2_reg_649 = ap_const_lv5_19) else "0";
    icmp_ln887_fu_735_p2 <= "1" when (p_0101_0_reg_376 = ap_const_lv5_19) else "0";
    lshr_ln1_fu_1160_p4 <= xor_ln1357_34_fu_1150_p2(63 downto 20);
    lshr_ln646_10_fu_1668_p4 <= xor_ln1357_55_fu_1658_p2(63 downto 56);
    lshr_ln646_11_fu_1696_p4 <= xor_ln1357_56_fu_1686_p2(63 downto 46);
    lshr_ln646_12_fu_1814_p4 <= xor_ln1357_62_fu_1804_p2(63 downto 37);
    lshr_ln646_13_fu_1842_p4 <= xor_ln1357_63_fu_1832_p2(63 downto 28);
    lshr_ln646_14_fu_1870_p4 <= xor_ln1357_64_fu_1860_p2(63 downto 54);
    lshr_ln646_15_fu_1898_p4 <= xor_ln1357_65_fu_1888_p2(63 downto 49);
    lshr_ln646_16_fu_1926_p4 <= xor_ln1357_66_fu_1916_p2(63 downto 8);
    lshr_ln646_17_fu_2044_p4 <= xor_ln1357_72_fu_2034_p2(63 downto 2);
    lshr_ln646_18_fu_2072_p4 <= xor_ln1357_73_fu_2062_p2(63 downto 9);
    lshr_ln646_19_fu_2100_p4 <= xor_ln1357_74_fu_2090_p2(63 downto 25);
    lshr_ln646_1_fu_1188_p4 <= xor_ln1357_35_fu_1178_p2(63 downto 21);
    lshr_ln646_20_fu_2128_p4 <= xor_ln1357_75_fu_2118_p2(63 downto 23);
    lshr_ln646_21_fu_2156_p4 <= xor_ln1357_76_fu_2146_p2(63 downto 62);
    lshr_ln646_2_fu_1216_p4 <= xor_ln1357_36_fu_1206_p2(63 downto 43);
    lshr_ln646_3_fu_1244_p4 <= xor_ln1357_37_fu_1234_p2(63 downto 50);
    lshr_ln646_4_fu_1356_p4 <= xor_ln1357_42_fu_1346_p2(63 downto 36);
    lshr_ln646_5_fu_1384_p4 <= xor_ln1357_43_fu_1374_p2(63 downto 44);
    lshr_ln646_6_fu_1412_p4 <= xor_ln1357_44_fu_1402_p2(63 downto 61);
    lshr_ln646_7_fu_1440_p4 <= xor_ln1357_45_fu_1430_p2(63 downto 19);
    lshr_ln646_8_fu_1468_p4 <= xor_ln1357_46_fu_1458_p2(63 downto 3);
    lshr_ln646_9_fu_1640_p4 <= xor_ln1357_54_fu_1630_p2(63 downto 39);
    lshr_ln646_s_fu_1612_p4 <= xor_ln1357_53_fu_1602_p2(63 downto 58);
    or_ln1357_1_fu_1052_p3 <= (trunc_ln1503_1_fu_1040_p1 & tmp_13_fu_1044_p3);
    or_ln1357_2_fu_1078_p3 <= (trunc_ln1503_2_fu_1066_p1 & tmp_14_fu_1070_p3);
    or_ln1357_3_fu_1104_p3 <= (trunc_ln1503_3_fu_1092_p1 & tmp_15_fu_1096_p3);
    or_ln1357_4_fu_1130_p3 <= (trunc_ln1503_4_fu_1118_p1 & tmp_16_fu_1122_p3);
    or_ln1_fu_1170_p3 <= (trunc_ln645_fu_1156_p1 & lshr_ln1_fu_1160_p4);
    or_ln647_10_fu_1650_p3 <= (trunc_ln645_11_fu_1636_p1 & lshr_ln646_9_fu_1640_p4);
    or_ln647_11_fu_1678_p3 <= (trunc_ln645_12_fu_1664_p1 & lshr_ln646_10_fu_1668_p4);
    or_ln647_12_fu_1706_p3 <= (trunc_ln645_13_fu_1692_p1 & lshr_ln646_11_fu_1696_p4);
    or_ln647_13_fu_1824_p3 <= (trunc_ln645_14_fu_1810_p1 & lshr_ln646_12_fu_1814_p4);
    or_ln647_14_fu_1852_p3 <= (trunc_ln645_15_fu_1838_p1 & lshr_ln646_13_fu_1842_p4);
    or_ln647_15_fu_1880_p3 <= (trunc_ln645_16_fu_1866_p1 & lshr_ln646_14_fu_1870_p4);
    or_ln647_16_fu_1908_p3 <= (trunc_ln645_17_fu_1894_p1 & lshr_ln646_15_fu_1898_p4);
    or_ln647_17_fu_1936_p3 <= (trunc_ln645_18_fu_1922_p1 & lshr_ln646_16_fu_1926_p4);
    or_ln647_18_fu_2054_p3 <= (trunc_ln645_19_fu_2040_p1 & lshr_ln646_17_fu_2044_p4);
    or_ln647_19_fu_2082_p3 <= (trunc_ln645_20_fu_2068_p1 & lshr_ln646_18_fu_2072_p4);
    or_ln647_1_fu_1198_p3 <= (trunc_ln645_1_fu_1184_p1 & lshr_ln646_1_fu_1188_p4);
    or_ln647_20_fu_2110_p3 <= (trunc_ln645_21_fu_2096_p1 & lshr_ln646_19_fu_2100_p4);
    or_ln647_21_fu_2138_p3 <= (trunc_ln645_22_fu_2124_p1 & lshr_ln646_20_fu_2128_p4);
    or_ln647_22_fu_2166_p3 <= (trunc_ln645_23_fu_2152_p1 & lshr_ln646_21_fu_2156_p4);
    or_ln647_2_fu_1226_p3 <= (trunc_ln645_2_fu_1212_p1 & lshr_ln646_2_fu_1216_p4);
    or_ln647_3_fu_1254_p3 <= (trunc_ln645_3_fu_1240_p1 & lshr_ln646_3_fu_1244_p4);
    or_ln647_4_fu_1366_p3 <= (trunc_ln645_4_fu_1352_p1 & lshr_ln646_4_fu_1356_p4);
    or_ln647_5_fu_1394_p3 <= (trunc_ln645_5_fu_1380_p1 & lshr_ln646_5_fu_1384_p4);
    or_ln647_6_fu_1422_p3 <= (trunc_ln645_6_fu_1408_p1 & lshr_ln646_6_fu_1412_p4);
    or_ln647_7_fu_1450_p3 <= (trunc_ln645_7_fu_1436_p1 & lshr_ln646_7_fu_1440_p4);
    or_ln647_8_fu_1478_p3 <= (trunc_ln645_8_fu_1464_p1 & lshr_ln646_8_fu_1468_p4);
    or_ln647_9_fu_1594_p3 <= (trunc_ln645_9_fu_1582_p1 & tmp_17_fu_1586_p3);
    or_ln647_s_fu_1622_p3 <= (trunc_ln645_10_fu_1608_p1 & lshr_ln646_s_fu_1612_p4);
    or_ln_fu_1026_p3 <= (trunc_ln1503_fu_1014_p1 & tmp_12_fu_1018_p3);
    round_V_fu_883_p2 <= std_logic_vector(unsigned(p_045_0_reg_638) + unsigned(ap_const_lv5_1));
    state_V_6_address0 <= zext_ln544_fu_747_p1(5 - 1 downto 0);
    state_V_6_address1 <= zext_ln544_67_fu_2288_p1(5 - 1 downto 0);

    state_V_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_6_ce0 <= ap_const_logic_1;
        else 
            state_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_6_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_6_ce1 <= ap_const_logic_1;
        else 
            state_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_6_d1 <= tmp_s_fu_2293_p27;

    state_V_6_we1_assign_proc : process(ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_0))) then 
            state_V_6_we1 <= ap_const_logic_1;
        else 
            state_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_1018_p3 <= xor_ln719_20_fu_936_p2(63 downto 63);
    tmp_13_fu_1044_p3 <= xor_ln719_24_fu_960_p2(63 downto 63);
    tmp_14_fu_1070_p3 <= xor_ln719_28_fu_984_p2(63 downto 63);
    tmp_15_fu_1096_p3 <= xor_ln719_32_fu_1008_p2(63 downto 63);
    tmp_16_fu_1122_p3 <= xor_ln719_16_fu_912_p2(63 downto 63);
    tmp_17_fu_1586_p3 <= xor_ln1357_52_fu_1576_p2(63 downto 63);
    trunc_ln1503_1_fu_1040_p1 <= xor_ln719_24_fu_960_p2(63 - 1 downto 0);
    trunc_ln1503_2_fu_1066_p1 <= xor_ln719_28_fu_984_p2(63 - 1 downto 0);
    trunc_ln1503_3_fu_1092_p1 <= xor_ln719_32_fu_1008_p2(63 - 1 downto 0);
    trunc_ln1503_4_fu_1118_p1 <= xor_ln719_16_fu_912_p2(63 - 1 downto 0);
    trunc_ln1503_fu_1014_p1 <= xor_ln719_20_fu_936_p2(63 - 1 downto 0);
    trunc_ln645_10_fu_1608_p1 <= xor_ln1357_53_fu_1602_p2(58 - 1 downto 0);
    trunc_ln645_11_fu_1636_p1 <= xor_ln1357_54_fu_1630_p2(39 - 1 downto 0);
    trunc_ln645_12_fu_1664_p1 <= xor_ln1357_55_fu_1658_p2(56 - 1 downto 0);
    trunc_ln645_13_fu_1692_p1 <= xor_ln1357_56_fu_1686_p2(46 - 1 downto 0);
    trunc_ln645_14_fu_1810_p1 <= xor_ln1357_62_fu_1804_p2(37 - 1 downto 0);
    trunc_ln645_15_fu_1838_p1 <= xor_ln1357_63_fu_1832_p2(28 - 1 downto 0);
    trunc_ln645_16_fu_1866_p1 <= xor_ln1357_64_fu_1860_p2(54 - 1 downto 0);
    trunc_ln645_17_fu_1894_p1 <= xor_ln1357_65_fu_1888_p2(49 - 1 downto 0);
    trunc_ln645_18_fu_1922_p1 <= xor_ln1357_66_fu_1916_p2(8 - 1 downto 0);
    trunc_ln645_19_fu_2040_p1 <= xor_ln1357_72_fu_2034_p2(2 - 1 downto 0);
    trunc_ln645_1_fu_1184_p1 <= xor_ln1357_35_fu_1178_p2(21 - 1 downto 0);
    trunc_ln645_20_fu_2068_p1 <= xor_ln1357_73_fu_2062_p2(9 - 1 downto 0);
    trunc_ln645_21_fu_2096_p1 <= xor_ln1357_74_fu_2090_p2(25 - 1 downto 0);
    trunc_ln645_22_fu_2124_p1 <= xor_ln1357_75_fu_2118_p2(23 - 1 downto 0);
    trunc_ln645_23_fu_2152_p1 <= xor_ln1357_76_fu_2146_p2(62 - 1 downto 0);
    trunc_ln645_2_fu_1212_p1 <= xor_ln1357_36_fu_1206_p2(43 - 1 downto 0);
    trunc_ln645_3_fu_1240_p1 <= xor_ln1357_37_fu_1234_p2(50 - 1 downto 0);
    trunc_ln645_4_fu_1352_p1 <= xor_ln1357_42_fu_1346_p2(36 - 1 downto 0);
    trunc_ln645_5_fu_1380_p1 <= xor_ln1357_43_fu_1374_p2(44 - 1 downto 0);
    trunc_ln645_6_fu_1408_p1 <= xor_ln1357_44_fu_1402_p2(61 - 1 downto 0);
    trunc_ln645_7_fu_1436_p1 <= xor_ln1357_45_fu_1430_p2(19 - 1 downto 0);
    trunc_ln645_8_fu_1464_p1 <= xor_ln1357_46_fu_1458_p2(3 - 1 downto 0);
    trunc_ln645_9_fu_1582_p1 <= xor_ln1357_52_fu_1576_p2(63 - 1 downto 0);
    trunc_ln645_fu_1156_p1 <= xor_ln1357_34_fu_1150_p2(20 - 1 downto 0);
    xor_ln1357_29_fu_1060_p2 <= (xor_ln719_16_fu_912_p2 xor or_ln1357_1_fu_1052_p3);
    xor_ln1357_30_fu_1086_p2 <= (xor_ln719_20_fu_936_p2 xor or_ln1357_2_fu_1078_p3);
    xor_ln1357_31_fu_1112_p2 <= (xor_ln719_24_fu_960_p2 xor or_ln1357_3_fu_1104_p3);
    xor_ln1357_32_fu_1138_p2 <= (xor_ln719_28_fu_984_p2 xor or_ln1357_4_fu_1130_p3);
    xor_ln1357_33_fu_1144_p2 <= (xor_ln1357_fu_1034_p2 xor A_0_V_21_reg_628);
    xor_ln1357_34_fu_1150_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_6_V_27_reg_568);
    xor_ln1357_35_fu_1178_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_12_V_213_reg_508);
    xor_ln1357_36_fu_1206_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_18_V_219_reg_448);
    xor_ln1357_37_fu_1234_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_24_V_225_reg_388);
    xor_ln1357_42_fu_1346_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_3_V_24_reg_598);
    xor_ln1357_43_fu_1374_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_9_V_210_reg_538);
    xor_ln1357_44_fu_1402_p2 <= (xor_ln1357_fu_1034_p2 xor A_10_V_211_reg_528);
    xor_ln1357_45_fu_1430_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_16_V_217_reg_468);
    xor_ln1357_46_fu_1458_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_22_V_223_reg_408);
    xor_ln1357_52_fu_1576_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_1_V_22_reg_618);
    xor_ln1357_53_fu_1602_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_7_V_28_reg_558);
    xor_ln1357_54_fu_1630_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_13_V_214_reg_498);
    xor_ln1357_55_fu_1658_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_19_V_220_reg_438);
    xor_ln1357_56_fu_1686_p2 <= (xor_ln1357_fu_1034_p2 xor A_20_V_221_reg_428);
    xor_ln1357_62_fu_1804_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_4_V_25_reg_588);
    xor_ln1357_63_fu_1832_p2 <= (xor_ln1357_fu_1034_p2 xor A_5_V_26_reg_578);
    xor_ln1357_64_fu_1860_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_11_V_212_reg_518);
    xor_ln1357_65_fu_1888_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_17_V_218_reg_458);
    xor_ln1357_66_fu_1916_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_23_V_224_reg_398);
    xor_ln1357_72_fu_2034_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_2_V_23_reg_608);
    xor_ln1357_73_fu_2062_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_8_V_29_reg_548);
    xor_ln1357_74_fu_2090_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_14_V_215_reg_488);
    xor_ln1357_75_fu_2118_p2 <= (xor_ln1357_fu_1034_p2 xor A_15_V_216_reg_478);
    xor_ln1357_76_fu_2146_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_21_V_222_reg_418);
    xor_ln1357_fu_1034_p2 <= (xor_ln719_32_fu_1008_p2 xor or_ln_fu_1026_p3);
    xor_ln719_16_fu_912_p2 <= (xor_ln719_fu_894_p2 xor xor_ln719_22_fu_906_p2);
    xor_ln719_20_fu_936_p2 <= (xor_ln719_26_fu_930_p2 xor xor_ln719_23_fu_918_p2);
    xor_ln719_21_fu_900_p2 <= (A_20_V_221_reg_428 xor A_0_V_21_reg_628);
    xor_ln719_22_fu_906_p2 <= (xor_ln719_21_fu_900_p2 xor A_5_V_26_reg_578);
    xor_ln719_23_fu_918_p2 <= (A_16_V_217_reg_468 xor A_11_V_212_reg_518);
    xor_ln719_24_fu_960_p2 <= (xor_ln719_30_fu_954_p2 xor xor_ln719_27_fu_942_p2);
    xor_ln719_25_fu_924_p2 <= (A_21_V_222_reg_418 xor A_1_V_22_reg_618);
    xor_ln719_26_fu_930_p2 <= (xor_ln719_25_fu_924_p2 xor A_6_V_27_reg_568);
    xor_ln719_27_fu_942_p2 <= (A_17_V_218_reg_458 xor A_12_V_213_reg_508);
    xor_ln719_28_fu_984_p2 <= (xor_ln719_34_fu_978_p2 xor xor_ln719_31_fu_966_p2);
    xor_ln719_29_fu_948_p2 <= (A_2_V_23_reg_608 xor A_22_V_223_reg_408);
    xor_ln719_30_fu_954_p2 <= (xor_ln719_29_fu_948_p2 xor A_7_V_28_reg_558);
    xor_ln719_31_fu_966_p2 <= (A_18_V_219_reg_448 xor A_13_V_214_reg_498);
    xor_ln719_32_fu_1008_p2 <= (xor_ln719_37_fu_1002_p2 xor xor_ln719_35_fu_990_p2);
    xor_ln719_33_fu_972_p2 <= (A_3_V_24_reg_598 xor A_23_V_224_reg_398);
    xor_ln719_34_fu_978_p2 <= (xor_ln719_33_fu_972_p2 xor A_8_V_29_reg_548);
    xor_ln719_35_fu_990_p2 <= (A_19_V_220_reg_438 xor A_14_V_215_reg_488);
    xor_ln719_36_fu_996_p2 <= (A_4_V_25_reg_588 xor A_24_V_225_reg_388);
    xor_ln719_37_fu_1002_p2 <= (xor_ln719_36_fu_996_p2 xor A_9_V_210_reg_538);
    xor_ln719_38_fu_2264_p2 <= (xor_ln1357_33_fu_1144_p2 xor and_ln1355_fu_1268_p2);
    xor_ln719_fu_894_p2 <= (A_15_V_216_reg_478 xor A_10_V_211_reg_528);
    xor_ln769_10_fu_1714_p2 <= (or_ln647_s_fu_1622_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_11_fu_1732_p2 <= (or_ln647_10_fu_1650_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_12_fu_1750_p2 <= (or_ln647_11_fu_1678_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_13_fu_1768_p2 <= (or_ln647_12_fu_1706_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_14_fu_1786_p2 <= (or_ln647_9_fu_1594_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_15_fu_1944_p2 <= (or_ln647_14_fu_1852_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_16_fu_1962_p2 <= (or_ln647_15_fu_1880_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_17_fu_1980_p2 <= (or_ln647_16_fu_1908_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_18_fu_1998_p2 <= (or_ln647_17_fu_1936_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_19_fu_2016_p2 <= (or_ln647_13_fu_1824_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_1_fu_1274_p2 <= (or_ln647_1_fu_1198_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_20_fu_2174_p2 <= (or_ln647_19_fu_2082_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_21_fu_2192_p2 <= (or_ln647_20_fu_2110_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_22_fu_2210_p2 <= (or_ln647_21_fu_2138_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_23_fu_2228_p2 <= (or_ln647_22_fu_2166_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_24_fu_2246_p2 <= (or_ln647_18_fu_2054_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_2_fu_1292_p2 <= (or_ln647_2_fu_1226_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_3_fu_1310_p2 <= (or_ln647_3_fu_1254_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_4_fu_1328_p2 <= (xor_ln1357_33_fu_1144_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_5_fu_1486_p2 <= (or_ln647_5_fu_1394_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_6_fu_1504_p2 <= (or_ln647_6_fu_1422_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_7_fu_1522_p2 <= (or_ln647_7_fu_1450_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_8_fu_1540_p2 <= (or_ln647_8_fu_1478_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_9_fu_1558_p2 <= (or_ln647_4_fu_1366_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_fu_1262_p2 <= (or_ln1_fu_1170_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln156_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_045_0_reg_638),64));
    zext_ln544_67_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0101_2_reg_649),64));
    zext_ln544_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0101_0_reg_376),64));
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakF1600_SoloPer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_6_ce0 : OUT STD_LOGIC;
    state_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_V_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_V_6_ce1 : OUT STD_LOGIC;
    state_V_6_we1 : OUT STD_LOGIC;
    state_V_6_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of KeccakF1600_SoloPer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakF_RoundConstan_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakF_RoundConstan_ce0 : STD_LOGIC;
    signal KeccakF_RoundConstan_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_V_reg_2628 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal round_V_fu_883_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal round_V_reg_2641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln887_23_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_1_V_fu_1286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal A_2_V_fu_1304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_3_V_fu_1322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_4_V_fu_1340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_5_V_fu_1498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_6_V_fu_1516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_7_V_fu_1534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_8_V_fu_1552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_9_V_fu_1570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_10_V_fu_1726_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_11_V_fu_1744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_12_V_fu_1762_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_13_V_fu_1780_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_14_V_fu_1798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_15_V_fu_1956_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_16_V_fu_1974_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_17_V_fu_1992_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_18_V_fu_2010_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_19_V_fu_2028_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_20_V_fu_2186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_21_V_fu_2204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_22_V_fu_2222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_23_V_1_fu_2240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_fu_2258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_0_V_fu_2270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_11_fu_2282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_0101_0_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal A_24_V_225_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_23_V_224_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_22_V_223_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_21_V_222_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_20_V_221_reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_19_V_220_reg_438 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_18_V_219_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_17_V_218_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_16_V_217_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_15_V_216_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_14_V_215_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_13_V_214_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_12_V_213_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_11_V_212_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_10_V_211_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_9_V_210_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_8_V_29_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_7_V_28_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_6_V_27_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_5_V_26_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_4_V_25_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_3_V_24_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_2_V_23_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_1_V_22_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_0_V_21_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_045_0_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0101_2_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_24_fu_2276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_67_fu_2288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_1_fu_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal A_24_V_2_fu_242 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_3_fu_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_4_fu_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_5_fu_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_6_fu_258 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_7_fu_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_8_fu_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_9_fu_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_10_fu_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_11_fu_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_12_fu_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_13_fu_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_14_fu_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_15_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_16_fu_298 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_17_fu_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_18_fu_306 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_19_fu_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_20_fu_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_21_fu_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_22_fu_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_23_fu_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_24_fu_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_24_V_25_fu_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_2293_p27 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_21_fu_900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_22_fu_906_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_25_fu_924_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_26_fu_930_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_23_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_29_fu_948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_30_fu_954_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_27_fu_942_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_33_fu_972_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_34_fu_978_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_31_fu_966_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_36_fu_996_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_37_fu_1002_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_35_fu_990_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_20_fu_936_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_fu_1014_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_1018_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_32_fu_1008_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1026_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_24_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_1_fu_1040_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_fu_1044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln719_16_fu_912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1357_1_fu_1052_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_28_fu_984_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_2_fu_1066_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_2_fu_1078_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_3_fu_1092_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_fu_1096_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_3_fu_1104_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_4_fu_1118_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_16_fu_1122_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1357_4_fu_1130_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_fu_1034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_29_fu_1060_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_34_fu_1150_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_fu_1156_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln1_fu_1160_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal xor_ln1357_30_fu_1086_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_35_fu_1178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_1_fu_1184_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln646_1_fu_1188_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal xor_ln1357_31_fu_1112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_36_fu_1206_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_2_fu_1212_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln646_2_fu_1216_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal xor_ln1357_32_fu_1138_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_37_fu_1234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_3_fu_1240_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal lshr_ln646_3_fu_1244_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln1_fu_1170_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_1_fu_1198_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_fu_1262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_2_fu_1226_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_1_fu_1274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_8_fu_1280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_3_fu_1254_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_2_fu_1292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_9_fu_1298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_33_fu_1144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_3_fu_1310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_10_fu_1316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_4_fu_1328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_11_fu_1334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_42_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_4_fu_1352_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln646_4_fu_1356_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal xor_ln1357_43_fu_1374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_5_fu_1380_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal lshr_ln646_5_fu_1384_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal xor_ln1357_44_fu_1402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_6_fu_1408_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln646_6_fu_1412_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1357_45_fu_1430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_7_fu_1436_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln646_7_fu_1440_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal xor_ln1357_46_fu_1458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_8_fu_1464_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln646_8_fu_1468_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal or_ln647_5_fu_1394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_6_fu_1422_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_5_fu_1486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_4_fu_1366_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_12_fu_1492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_7_fu_1450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_6_fu_1504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_13_fu_1510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_8_fu_1478_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_7_fu_1522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_14_fu_1528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_8_fu_1540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_15_fu_1546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_9_fu_1558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_16_fu_1564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_52_fu_1576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_9_fu_1582_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_1586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1357_53_fu_1602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_10_fu_1608_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal lshr_ln646_s_fu_1612_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln1357_54_fu_1630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_11_fu_1636_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln646_9_fu_1640_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xor_ln1357_55_fu_1658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_12_fu_1664_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln646_10_fu_1668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1357_56_fu_1686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_13_fu_1692_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal lshr_ln646_11_fu_1696_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln647_s_fu_1622_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_10_fu_1650_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_10_fu_1714_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_9_fu_1594_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_17_fu_1720_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_11_fu_1678_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_11_fu_1732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_18_fu_1738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_12_fu_1706_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_12_fu_1750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_19_fu_1756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_13_fu_1768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_20_fu_1774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_14_fu_1786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_21_fu_1792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_62_fu_1804_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_14_fu_1810_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lshr_ln646_12_fu_1814_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal xor_ln1357_63_fu_1832_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_15_fu_1838_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln646_13_fu_1842_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln1357_64_fu_1860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_16_fu_1866_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln646_14_fu_1870_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1357_65_fu_1888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_17_fu_1894_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal lshr_ln646_15_fu_1898_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln1357_66_fu_1916_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_18_fu_1922_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln646_16_fu_1926_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal or_ln647_14_fu_1852_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_15_fu_1880_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_15_fu_1944_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_13_fu_1824_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_22_fu_1950_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_16_fu_1908_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_16_fu_1962_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_23_fu_1968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_17_fu_1936_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_17_fu_1980_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_24_fu_1986_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_18_fu_1998_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_25_fu_2004_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_19_fu_2016_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_26_fu_2022_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1357_72_fu_2034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_19_fu_2040_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln646_17_fu_2044_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal xor_ln1357_73_fu_2062_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_20_fu_2068_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln646_18_fu_2072_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal xor_ln1357_74_fu_2090_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_21_fu_2096_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln646_19_fu_2100_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal xor_ln1357_75_fu_2118_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_22_fu_2124_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal lshr_ln646_20_fu_2128_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal xor_ln1357_76_fu_2146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln645_23_fu_2152_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal lshr_ln646_21_fu_2156_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln647_19_fu_2082_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_20_fu_2110_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_20_fu_2174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_18_fu_2054_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_27_fu_2180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_21_fu_2138_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_21_fu_2192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_28_fu_2198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln647_22_fu_2166_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_22_fu_2210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_29_fu_2216_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_23_fu_2228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_30_fu_2234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_24_fu_2246_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_31_fu_2252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1355_fu_1268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_38_fu_2264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component crypto_kem_enc_hlcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakF1600_Statebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakF_RoundConstan_U : component KeccakF1600_Statebkb
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakF_RoundConstan_address0,
        ce0 => KeccakF_RoundConstan_ce0,
        q0 => KeccakF_RoundConstan_q0);

    crypto_kem_enc_hlcud_U2 : component crypto_kem_enc_hlcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 64,
        din21_WIDTH => 64,
        din22_WIDTH => 64,
        din23_WIDTH => 64,
        din24_WIDTH => 64,
        din25_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => A_0_V_21_reg_628,
        din1 => A_1_V_22_reg_618,
        din2 => A_2_V_23_reg_608,
        din3 => A_3_V_24_reg_598,
        din4 => A_4_V_25_reg_588,
        din5 => A_5_V_26_reg_578,
        din6 => A_6_V_27_reg_568,
        din7 => A_7_V_28_reg_558,
        din8 => A_8_V_29_reg_548,
        din9 => A_9_V_210_reg_538,
        din10 => A_10_V_211_reg_528,
        din11 => A_11_V_212_reg_518,
        din12 => A_12_V_213_reg_508,
        din13 => A_13_V_214_reg_498,
        din14 => A_14_V_215_reg_488,
        din15 => A_15_V_216_reg_478,
        din16 => A_16_V_217_reg_468,
        din17 => A_17_V_218_reg_458,
        din18 => A_18_V_219_reg_448,
        din19 => A_19_V_220_reg_438,
        din20 => A_20_V_221_reg_428,
        din21 => A_21_V_222_reg_418,
        din22 => A_22_V_223_reg_408,
        din23 => A_23_V_224_reg_398,
        din24 => A_24_V_225_reg_388,
        din25 => p_0101_2_reg_649,
        dout => tmp_s_fu_2293_p27);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    A_0_V_21_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_0_V_21_reg_628 <= A_24_V_1_fu_238;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_0_V_21_reg_628 <= A_0_V_fu_2270_p2;
            end if; 
        end if;
    end process;

    A_10_V_211_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_10_V_211_reg_528 <= A_24_V_11_fu_278;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_10_V_211_reg_528 <= A_10_V_fu_1726_p2;
            end if; 
        end if;
    end process;

    A_11_V_212_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_11_V_212_reg_518 <= A_24_V_12_fu_282;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_11_V_212_reg_518 <= A_11_V_fu_1744_p2;
            end if; 
        end if;
    end process;

    A_12_V_213_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_12_V_213_reg_508 <= A_24_V_13_fu_286;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_12_V_213_reg_508 <= A_12_V_fu_1762_p2;
            end if; 
        end if;
    end process;

    A_13_V_214_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_13_V_214_reg_498 <= A_24_V_14_fu_290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_13_V_214_reg_498 <= A_13_V_fu_1780_p2;
            end if; 
        end if;
    end process;

    A_14_V_215_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_14_V_215_reg_488 <= A_24_V_15_fu_294;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_14_V_215_reg_488 <= A_14_V_fu_1798_p2;
            end if; 
        end if;
    end process;

    A_15_V_216_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_15_V_216_reg_478 <= A_24_V_16_fu_298;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_15_V_216_reg_478 <= A_15_V_fu_1956_p2;
            end if; 
        end if;
    end process;

    A_16_V_217_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_16_V_217_reg_468 <= A_24_V_17_fu_302;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_16_V_217_reg_468 <= A_16_V_fu_1974_p2;
            end if; 
        end if;
    end process;

    A_17_V_218_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_17_V_218_reg_458 <= A_24_V_18_fu_306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_17_V_218_reg_458 <= A_17_V_fu_1992_p2;
            end if; 
        end if;
    end process;

    A_18_V_219_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_18_V_219_reg_448 <= A_24_V_19_fu_310;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_18_V_219_reg_448 <= A_18_V_fu_2010_p2;
            end if; 
        end if;
    end process;

    A_19_V_220_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_19_V_220_reg_438 <= A_24_V_20_fu_314;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_19_V_220_reg_438 <= A_19_V_fu_2028_p2;
            end if; 
        end if;
    end process;

    A_1_V_22_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_1_V_22_reg_618 <= A_24_V_2_fu_242;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_1_V_22_reg_618 <= A_1_V_fu_1286_p2;
            end if; 
        end if;
    end process;

    A_20_V_221_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_20_V_221_reg_428 <= A_24_V_21_fu_318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_20_V_221_reg_428 <= A_20_V_fu_2186_p2;
            end if; 
        end if;
    end process;

    A_21_V_222_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_21_V_222_reg_418 <= A_24_V_22_fu_322;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_21_V_222_reg_418 <= A_21_V_fu_2204_p2;
            end if; 
        end if;
    end process;

    A_22_V_223_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_22_V_223_reg_408 <= A_24_V_23_fu_326;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_22_V_223_reg_408 <= A_22_V_fu_2222_p2;
            end if; 
        end if;
    end process;

    A_23_V_224_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_23_V_224_reg_398 <= A_24_V_24_fu_330;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_23_V_224_reg_398 <= A_23_V_1_fu_2240_p2;
            end if; 
        end if;
    end process;

    A_24_V_225_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_24_V_225_reg_388 <= A_24_V_25_fu_334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_24_V_225_reg_388 <= A_24_V_fu_2258_p2;
            end if; 
        end if;
    end process;

    A_2_V_23_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_2_V_23_reg_608 <= A_24_V_3_fu_246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_2_V_23_reg_608 <= A_2_V_fu_1304_p2;
            end if; 
        end if;
    end process;

    A_3_V_24_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_3_V_24_reg_598 <= A_24_V_4_fu_250;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_3_V_24_reg_598 <= A_3_V_fu_1322_p2;
            end if; 
        end if;
    end process;

    A_4_V_25_reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_4_V_25_reg_588 <= A_24_V_5_fu_254;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_4_V_25_reg_588 <= A_4_V_fu_1340_p2;
            end if; 
        end if;
    end process;

    A_5_V_26_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_5_V_26_reg_578 <= A_24_V_6_fu_258;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_5_V_26_reg_578 <= A_5_V_fu_1498_p2;
            end if; 
        end if;
    end process;

    A_6_V_27_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_6_V_27_reg_568 <= A_24_V_7_fu_262;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_6_V_27_reg_568 <= A_6_V_fu_1516_p2;
            end if; 
        end if;
    end process;

    A_7_V_28_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_7_V_28_reg_558 <= A_24_V_8_fu_266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_7_V_28_reg_558 <= A_7_V_fu_1534_p2;
            end if; 
        end if;
    end process;

    A_8_V_29_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_8_V_29_reg_548 <= A_24_V_9_fu_270;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_8_V_29_reg_548 <= A_8_V_fu_1552_p2;
            end if; 
        end if;
    end process;

    A_9_V_210_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                A_9_V_210_reg_538 <= A_24_V_10_fu_274;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                A_9_V_210_reg_538 <= A_9_V_fu_1570_p2;
            end if; 
        end if;
    end process;

    p_0101_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0101_0_reg_376 <= i_V_reg_2628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0101_0_reg_376 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0101_2_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_23_fu_877_p2 = ap_const_lv1_1))) then 
                p_0101_2_reg_649 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_0))) then 
                p_0101_2_reg_649 <= i_V_11_fu_2282_p2;
            end if; 
        end if;
    end process;

    p_045_0_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then 
                p_045_0_reg_638 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_045_0_reg_638 <= round_V_reg_2641;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_9))) then
                A_24_V_10_fu_274 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_A))) then
                A_24_V_11_fu_278 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_B))) then
                A_24_V_12_fu_282 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_C))) then
                A_24_V_13_fu_286 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_D))) then
                A_24_V_14_fu_290 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_E))) then
                A_24_V_15_fu_294 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_F))) then
                A_24_V_16_fu_298 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_10))) then
                A_24_V_17_fu_302 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_11))) then
                A_24_V_18_fu_306 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_12))) then
                A_24_V_19_fu_310 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_0))) then
                A_24_V_1_fu_238 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_13))) then
                A_24_V_20_fu_314 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_14))) then
                A_24_V_21_fu_318 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_15))) then
                A_24_V_22_fu_322 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_16))) then
                A_24_V_23_fu_326 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_17))) then
                A_24_V_24_fu_330 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((p_0101_0_reg_376 = ap_const_lv5_18) or ((p_0101_0_reg_376 = ap_const_lv5_19) or ((p_0101_0_reg_376 = ap_const_lv5_1A) or ((p_0101_0_reg_376 = ap_const_lv5_1B) or ((p_0101_0_reg_376 = ap_const_lv5_1C) or ((p_0101_0_reg_376 = ap_const_lv5_1D) or ((p_0101_0_reg_376 = ap_const_lv5_1E) or (p_0101_0_reg_376 = ap_const_lv5_1F)))))))))) then
                A_24_V_25_fu_334 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_1))) then
                A_24_V_2_fu_242 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_2))) then
                A_24_V_3_fu_246 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_3))) then
                A_24_V_4_fu_250 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_4))) then
                A_24_V_5_fu_254 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_5))) then
                A_24_V_6_fu_258 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_6))) then
                A_24_V_7_fu_262 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_7))) then
                A_24_V_8_fu_266 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (p_0101_0_reg_376 = ap_const_lv5_8))) then
                A_24_V_9_fu_270 <= state_V_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_2628 <= i_V_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                round_V_reg_2641 <= round_V_fu_883_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_735_p2, ap_CS_fsm_state5, icmp_ln887_23_fu_877_p2, ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln887_fu_735_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_23_fu_877_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    A_0_V_fu_2270_p2 <= (xor_ln719_38_fu_2264_p2 xor KeccakF_RoundConstan_q0);
    A_10_V_fu_1726_p2 <= (or_ln647_9_fu_1594_p3 xor and_ln1355_17_fu_1720_p2);
    A_11_V_fu_1744_p2 <= (or_ln647_s_fu_1622_p3 xor and_ln1355_18_fu_1738_p2);
    A_12_V_fu_1762_p2 <= (or_ln647_10_fu_1650_p3 xor and_ln1355_19_fu_1756_p2);
    A_13_V_fu_1780_p2 <= (or_ln647_11_fu_1678_p3 xor and_ln1355_20_fu_1774_p2);
    A_14_V_fu_1798_p2 <= (or_ln647_12_fu_1706_p3 xor and_ln1355_21_fu_1792_p2);
    A_15_V_fu_1956_p2 <= (or_ln647_13_fu_1824_p3 xor and_ln1355_22_fu_1950_p2);
    A_16_V_fu_1974_p2 <= (or_ln647_14_fu_1852_p3 xor and_ln1355_23_fu_1968_p2);
    A_17_V_fu_1992_p2 <= (or_ln647_15_fu_1880_p3 xor and_ln1355_24_fu_1986_p2);
    A_18_V_fu_2010_p2 <= (or_ln647_16_fu_1908_p3 xor and_ln1355_25_fu_2004_p2);
    A_19_V_fu_2028_p2 <= (or_ln647_17_fu_1936_p3 xor and_ln1355_26_fu_2022_p2);
    A_1_V_fu_1286_p2 <= (or_ln1_fu_1170_p3 xor and_ln1355_8_fu_1280_p2);
    A_20_V_fu_2186_p2 <= (or_ln647_18_fu_2054_p3 xor and_ln1355_27_fu_2180_p2);
    A_21_V_fu_2204_p2 <= (or_ln647_19_fu_2082_p3 xor and_ln1355_28_fu_2198_p2);
    A_22_V_fu_2222_p2 <= (or_ln647_20_fu_2110_p3 xor and_ln1355_29_fu_2216_p2);
    A_23_V_1_fu_2240_p2 <= (or_ln647_21_fu_2138_p3 xor and_ln1355_30_fu_2234_p2);
    A_24_V_fu_2258_p2 <= (or_ln647_22_fu_2166_p3 xor and_ln1355_31_fu_2252_p2);
    A_2_V_fu_1304_p2 <= (or_ln647_1_fu_1198_p3 xor and_ln1355_9_fu_1298_p2);
    A_3_V_fu_1322_p2 <= (or_ln647_2_fu_1226_p3 xor and_ln1355_10_fu_1316_p2);
    A_4_V_fu_1340_p2 <= (or_ln647_3_fu_1254_p3 xor and_ln1355_11_fu_1334_p2);
    A_5_V_fu_1498_p2 <= (or_ln647_4_fu_1366_p3 xor and_ln1355_12_fu_1492_p2);
    A_6_V_fu_1516_p2 <= (or_ln647_5_fu_1394_p3 xor and_ln1355_13_fu_1510_p2);
    A_7_V_fu_1534_p2 <= (or_ln647_6_fu_1422_p3 xor and_ln1355_14_fu_1528_p2);
    A_8_V_fu_1552_p2 <= (or_ln647_7_fu_1450_p3 xor and_ln1355_15_fu_1546_p2);
    A_9_V_fu_1570_p2 <= (or_ln647_8_fu_1478_p3 xor and_ln1355_16_fu_1564_p2);
    KeccakF_RoundConstan_address0 <= zext_ln156_fu_889_p1(5 - 1 downto 0);

    KeccakF_RoundConstan_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_1;
        else 
            KeccakF_RoundConstan_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln1355_10_fu_1316_p2 <= (xor_ln769_3_fu_1310_p2 and xor_ln1357_33_fu_1144_p2);
    and_ln1355_11_fu_1334_p2 <= (xor_ln769_4_fu_1328_p2 and or_ln1_fu_1170_p3);
    and_ln1355_12_fu_1492_p2 <= (xor_ln769_5_fu_1486_p2 and or_ln647_6_fu_1422_p3);
    and_ln1355_13_fu_1510_p2 <= (xor_ln769_6_fu_1504_p2 and or_ln647_7_fu_1450_p3);
    and_ln1355_14_fu_1528_p2 <= (xor_ln769_7_fu_1522_p2 and or_ln647_8_fu_1478_p3);
    and_ln1355_15_fu_1546_p2 <= (xor_ln769_8_fu_1540_p2 and or_ln647_4_fu_1366_p3);
    and_ln1355_16_fu_1564_p2 <= (xor_ln769_9_fu_1558_p2 and or_ln647_5_fu_1394_p3);
    and_ln1355_17_fu_1720_p2 <= (xor_ln769_10_fu_1714_p2 and or_ln647_10_fu_1650_p3);
    and_ln1355_18_fu_1738_p2 <= (xor_ln769_11_fu_1732_p2 and or_ln647_11_fu_1678_p3);
    and_ln1355_19_fu_1756_p2 <= (xor_ln769_12_fu_1750_p2 and or_ln647_12_fu_1706_p3);
    and_ln1355_20_fu_1774_p2 <= (xor_ln769_13_fu_1768_p2 and or_ln647_9_fu_1594_p3);
    and_ln1355_21_fu_1792_p2 <= (xor_ln769_14_fu_1786_p2 and or_ln647_s_fu_1622_p3);
    and_ln1355_22_fu_1950_p2 <= (xor_ln769_15_fu_1944_p2 and or_ln647_15_fu_1880_p3);
    and_ln1355_23_fu_1968_p2 <= (xor_ln769_16_fu_1962_p2 and or_ln647_16_fu_1908_p3);
    and_ln1355_24_fu_1986_p2 <= (xor_ln769_17_fu_1980_p2 and or_ln647_17_fu_1936_p3);
    and_ln1355_25_fu_2004_p2 <= (xor_ln769_18_fu_1998_p2 and or_ln647_13_fu_1824_p3);
    and_ln1355_26_fu_2022_p2 <= (xor_ln769_19_fu_2016_p2 and or_ln647_14_fu_1852_p3);
    and_ln1355_27_fu_2180_p2 <= (xor_ln769_20_fu_2174_p2 and or_ln647_20_fu_2110_p3);
    and_ln1355_28_fu_2198_p2 <= (xor_ln769_21_fu_2192_p2 and or_ln647_21_fu_2138_p3);
    and_ln1355_29_fu_2216_p2 <= (xor_ln769_22_fu_2210_p2 and or_ln647_22_fu_2166_p3);
    and_ln1355_30_fu_2234_p2 <= (xor_ln769_23_fu_2228_p2 and or_ln647_18_fu_2054_p3);
    and_ln1355_31_fu_2252_p2 <= (xor_ln769_24_fu_2246_p2 and or_ln647_19_fu_2082_p3);
    and_ln1355_8_fu_1280_p2 <= (xor_ln769_1_fu_1274_p2 and or_ln647_2_fu_1226_p3);
    and_ln1355_9_fu_1298_p2 <= (xor_ln769_2_fu_1292_p2 and or_ln647_3_fu_1254_p3);
    and_ln1355_fu_1268_p2 <= (xor_ln769_fu_1262_p2 and or_ln647_1_fu_1198_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_11_fu_2282_p2 <= std_logic_vector(unsigned(p_0101_2_reg_649) + unsigned(ap_const_lv5_1));
    i_V_fu_741_p2 <= std_logic_vector(unsigned(p_0101_0_reg_376) + unsigned(ap_const_lv5_1));
    icmp_ln887_23_fu_877_p2 <= "1" when (p_045_0_reg_638 = ap_const_lv5_18) else "0";
    icmp_ln887_24_fu_2276_p2 <= "1" when (p_0101_2_reg_649 = ap_const_lv5_19) else "0";
    icmp_ln887_fu_735_p2 <= "1" when (p_0101_0_reg_376 = ap_const_lv5_19) else "0";
    lshr_ln1_fu_1160_p4 <= xor_ln1357_34_fu_1150_p2(63 downto 20);
    lshr_ln646_10_fu_1668_p4 <= xor_ln1357_55_fu_1658_p2(63 downto 56);
    lshr_ln646_11_fu_1696_p4 <= xor_ln1357_56_fu_1686_p2(63 downto 46);
    lshr_ln646_12_fu_1814_p4 <= xor_ln1357_62_fu_1804_p2(63 downto 37);
    lshr_ln646_13_fu_1842_p4 <= xor_ln1357_63_fu_1832_p2(63 downto 28);
    lshr_ln646_14_fu_1870_p4 <= xor_ln1357_64_fu_1860_p2(63 downto 54);
    lshr_ln646_15_fu_1898_p4 <= xor_ln1357_65_fu_1888_p2(63 downto 49);
    lshr_ln646_16_fu_1926_p4 <= xor_ln1357_66_fu_1916_p2(63 downto 8);
    lshr_ln646_17_fu_2044_p4 <= xor_ln1357_72_fu_2034_p2(63 downto 2);
    lshr_ln646_18_fu_2072_p4 <= xor_ln1357_73_fu_2062_p2(63 downto 9);
    lshr_ln646_19_fu_2100_p4 <= xor_ln1357_74_fu_2090_p2(63 downto 25);
    lshr_ln646_1_fu_1188_p4 <= xor_ln1357_35_fu_1178_p2(63 downto 21);
    lshr_ln646_20_fu_2128_p4 <= xor_ln1357_75_fu_2118_p2(63 downto 23);
    lshr_ln646_21_fu_2156_p4 <= xor_ln1357_76_fu_2146_p2(63 downto 62);
    lshr_ln646_2_fu_1216_p4 <= xor_ln1357_36_fu_1206_p2(63 downto 43);
    lshr_ln646_3_fu_1244_p4 <= xor_ln1357_37_fu_1234_p2(63 downto 50);
    lshr_ln646_4_fu_1356_p4 <= xor_ln1357_42_fu_1346_p2(63 downto 36);
    lshr_ln646_5_fu_1384_p4 <= xor_ln1357_43_fu_1374_p2(63 downto 44);
    lshr_ln646_6_fu_1412_p4 <= xor_ln1357_44_fu_1402_p2(63 downto 61);
    lshr_ln646_7_fu_1440_p4 <= xor_ln1357_45_fu_1430_p2(63 downto 19);
    lshr_ln646_8_fu_1468_p4 <= xor_ln1357_46_fu_1458_p2(63 downto 3);
    lshr_ln646_9_fu_1640_p4 <= xor_ln1357_54_fu_1630_p2(63 downto 39);
    lshr_ln646_s_fu_1612_p4 <= xor_ln1357_53_fu_1602_p2(63 downto 58);
    or_ln1357_1_fu_1052_p3 <= (trunc_ln1503_1_fu_1040_p1 & tmp_13_fu_1044_p3);
    or_ln1357_2_fu_1078_p3 <= (trunc_ln1503_2_fu_1066_p1 & tmp_14_fu_1070_p3);
    or_ln1357_3_fu_1104_p3 <= (trunc_ln1503_3_fu_1092_p1 & tmp_15_fu_1096_p3);
    or_ln1357_4_fu_1130_p3 <= (trunc_ln1503_4_fu_1118_p1 & tmp_16_fu_1122_p3);
    or_ln1_fu_1170_p3 <= (trunc_ln645_fu_1156_p1 & lshr_ln1_fu_1160_p4);
    or_ln647_10_fu_1650_p3 <= (trunc_ln645_11_fu_1636_p1 & lshr_ln646_9_fu_1640_p4);
    or_ln647_11_fu_1678_p3 <= (trunc_ln645_12_fu_1664_p1 & lshr_ln646_10_fu_1668_p4);
    or_ln647_12_fu_1706_p3 <= (trunc_ln645_13_fu_1692_p1 & lshr_ln646_11_fu_1696_p4);
    or_ln647_13_fu_1824_p3 <= (trunc_ln645_14_fu_1810_p1 & lshr_ln646_12_fu_1814_p4);
    or_ln647_14_fu_1852_p3 <= (trunc_ln645_15_fu_1838_p1 & lshr_ln646_13_fu_1842_p4);
    or_ln647_15_fu_1880_p3 <= (trunc_ln645_16_fu_1866_p1 & lshr_ln646_14_fu_1870_p4);
    or_ln647_16_fu_1908_p3 <= (trunc_ln645_17_fu_1894_p1 & lshr_ln646_15_fu_1898_p4);
    or_ln647_17_fu_1936_p3 <= (trunc_ln645_18_fu_1922_p1 & lshr_ln646_16_fu_1926_p4);
    or_ln647_18_fu_2054_p3 <= (trunc_ln645_19_fu_2040_p1 & lshr_ln646_17_fu_2044_p4);
    or_ln647_19_fu_2082_p3 <= (trunc_ln645_20_fu_2068_p1 & lshr_ln646_18_fu_2072_p4);
    or_ln647_1_fu_1198_p3 <= (trunc_ln645_1_fu_1184_p1 & lshr_ln646_1_fu_1188_p4);
    or_ln647_20_fu_2110_p3 <= (trunc_ln645_21_fu_2096_p1 & lshr_ln646_19_fu_2100_p4);
    or_ln647_21_fu_2138_p3 <= (trunc_ln645_22_fu_2124_p1 & lshr_ln646_20_fu_2128_p4);
    or_ln647_22_fu_2166_p3 <= (trunc_ln645_23_fu_2152_p1 & lshr_ln646_21_fu_2156_p4);
    or_ln647_2_fu_1226_p3 <= (trunc_ln645_2_fu_1212_p1 & lshr_ln646_2_fu_1216_p4);
    or_ln647_3_fu_1254_p3 <= (trunc_ln645_3_fu_1240_p1 & lshr_ln646_3_fu_1244_p4);
    or_ln647_4_fu_1366_p3 <= (trunc_ln645_4_fu_1352_p1 & lshr_ln646_4_fu_1356_p4);
    or_ln647_5_fu_1394_p3 <= (trunc_ln645_5_fu_1380_p1 & lshr_ln646_5_fu_1384_p4);
    or_ln647_6_fu_1422_p3 <= (trunc_ln645_6_fu_1408_p1 & lshr_ln646_6_fu_1412_p4);
    or_ln647_7_fu_1450_p3 <= (trunc_ln645_7_fu_1436_p1 & lshr_ln646_7_fu_1440_p4);
    or_ln647_8_fu_1478_p3 <= (trunc_ln645_8_fu_1464_p1 & lshr_ln646_8_fu_1468_p4);
    or_ln647_9_fu_1594_p3 <= (trunc_ln645_9_fu_1582_p1 & tmp_17_fu_1586_p3);
    or_ln647_s_fu_1622_p3 <= (trunc_ln645_10_fu_1608_p1 & lshr_ln646_s_fu_1612_p4);
    or_ln_fu_1026_p3 <= (trunc_ln1503_fu_1014_p1 & tmp_12_fu_1018_p3);
    round_V_fu_883_p2 <= std_logic_vector(unsigned(p_045_0_reg_638) + unsigned(ap_const_lv5_1));
    state_V_6_address0 <= zext_ln544_fu_747_p1(5 - 1 downto 0);
    state_V_6_address1 <= zext_ln544_67_fu_2288_p1(5 - 1 downto 0);

    state_V_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_6_ce0 <= ap_const_logic_1;
        else 
            state_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_6_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_6_ce1 <= ap_const_logic_1;
        else 
            state_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_6_d1 <= tmp_s_fu_2293_p27;

    state_V_6_we1_assign_proc : process(ap_CS_fsm_state7, icmp_ln887_24_fu_2276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_24_fu_2276_p2 = ap_const_lv1_0))) then 
            state_V_6_we1 <= ap_const_logic_1;
        else 
            state_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_1018_p3 <= xor_ln719_20_fu_936_p2(63 downto 63);
    tmp_13_fu_1044_p3 <= xor_ln719_24_fu_960_p2(63 downto 63);
    tmp_14_fu_1070_p3 <= xor_ln719_28_fu_984_p2(63 downto 63);
    tmp_15_fu_1096_p3 <= xor_ln719_32_fu_1008_p2(63 downto 63);
    tmp_16_fu_1122_p3 <= xor_ln719_16_fu_912_p2(63 downto 63);
    tmp_17_fu_1586_p3 <= xor_ln1357_52_fu_1576_p2(63 downto 63);
    trunc_ln1503_1_fu_1040_p1 <= xor_ln719_24_fu_960_p2(63 - 1 downto 0);
    trunc_ln1503_2_fu_1066_p1 <= xor_ln719_28_fu_984_p2(63 - 1 downto 0);
    trunc_ln1503_3_fu_1092_p1 <= xor_ln719_32_fu_1008_p2(63 - 1 downto 0);
    trunc_ln1503_4_fu_1118_p1 <= xor_ln719_16_fu_912_p2(63 - 1 downto 0);
    trunc_ln1503_fu_1014_p1 <= xor_ln719_20_fu_936_p2(63 - 1 downto 0);
    trunc_ln645_10_fu_1608_p1 <= xor_ln1357_53_fu_1602_p2(58 - 1 downto 0);
    trunc_ln645_11_fu_1636_p1 <= xor_ln1357_54_fu_1630_p2(39 - 1 downto 0);
    trunc_ln645_12_fu_1664_p1 <= xor_ln1357_55_fu_1658_p2(56 - 1 downto 0);
    trunc_ln645_13_fu_1692_p1 <= xor_ln1357_56_fu_1686_p2(46 - 1 downto 0);
    trunc_ln645_14_fu_1810_p1 <= xor_ln1357_62_fu_1804_p2(37 - 1 downto 0);
    trunc_ln645_15_fu_1838_p1 <= xor_ln1357_63_fu_1832_p2(28 - 1 downto 0);
    trunc_ln645_16_fu_1866_p1 <= xor_ln1357_64_fu_1860_p2(54 - 1 downto 0);
    trunc_ln645_17_fu_1894_p1 <= xor_ln1357_65_fu_1888_p2(49 - 1 downto 0);
    trunc_ln645_18_fu_1922_p1 <= xor_ln1357_66_fu_1916_p2(8 - 1 downto 0);
    trunc_ln645_19_fu_2040_p1 <= xor_ln1357_72_fu_2034_p2(2 - 1 downto 0);
    trunc_ln645_1_fu_1184_p1 <= xor_ln1357_35_fu_1178_p2(21 - 1 downto 0);
    trunc_ln645_20_fu_2068_p1 <= xor_ln1357_73_fu_2062_p2(9 - 1 downto 0);
    trunc_ln645_21_fu_2096_p1 <= xor_ln1357_74_fu_2090_p2(25 - 1 downto 0);
    trunc_ln645_22_fu_2124_p1 <= xor_ln1357_75_fu_2118_p2(23 - 1 downto 0);
    trunc_ln645_23_fu_2152_p1 <= xor_ln1357_76_fu_2146_p2(62 - 1 downto 0);
    trunc_ln645_2_fu_1212_p1 <= xor_ln1357_36_fu_1206_p2(43 - 1 downto 0);
    trunc_ln645_3_fu_1240_p1 <= xor_ln1357_37_fu_1234_p2(50 - 1 downto 0);
    trunc_ln645_4_fu_1352_p1 <= xor_ln1357_42_fu_1346_p2(36 - 1 downto 0);
    trunc_ln645_5_fu_1380_p1 <= xor_ln1357_43_fu_1374_p2(44 - 1 downto 0);
    trunc_ln645_6_fu_1408_p1 <= xor_ln1357_44_fu_1402_p2(61 - 1 downto 0);
    trunc_ln645_7_fu_1436_p1 <= xor_ln1357_45_fu_1430_p2(19 - 1 downto 0);
    trunc_ln645_8_fu_1464_p1 <= xor_ln1357_46_fu_1458_p2(3 - 1 downto 0);
    trunc_ln645_9_fu_1582_p1 <= xor_ln1357_52_fu_1576_p2(63 - 1 downto 0);
    trunc_ln645_fu_1156_p1 <= xor_ln1357_34_fu_1150_p2(20 - 1 downto 0);
    xor_ln1357_29_fu_1060_p2 <= (xor_ln719_16_fu_912_p2 xor or_ln1357_1_fu_1052_p3);
    xor_ln1357_30_fu_1086_p2 <= (xor_ln719_20_fu_936_p2 xor or_ln1357_2_fu_1078_p3);
    xor_ln1357_31_fu_1112_p2 <= (xor_ln719_24_fu_960_p2 xor or_ln1357_3_fu_1104_p3);
    xor_ln1357_32_fu_1138_p2 <= (xor_ln719_28_fu_984_p2 xor or_ln1357_4_fu_1130_p3);
    xor_ln1357_33_fu_1144_p2 <= (xor_ln1357_fu_1034_p2 xor A_0_V_21_reg_628);
    xor_ln1357_34_fu_1150_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_6_V_27_reg_568);
    xor_ln1357_35_fu_1178_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_12_V_213_reg_508);
    xor_ln1357_36_fu_1206_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_18_V_219_reg_448);
    xor_ln1357_37_fu_1234_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_24_V_225_reg_388);
    xor_ln1357_42_fu_1346_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_3_V_24_reg_598);
    xor_ln1357_43_fu_1374_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_9_V_210_reg_538);
    xor_ln1357_44_fu_1402_p2 <= (xor_ln1357_fu_1034_p2 xor A_10_V_211_reg_528);
    xor_ln1357_45_fu_1430_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_16_V_217_reg_468);
    xor_ln1357_46_fu_1458_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_22_V_223_reg_408);
    xor_ln1357_52_fu_1576_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_1_V_22_reg_618);
    xor_ln1357_53_fu_1602_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_7_V_28_reg_558);
    xor_ln1357_54_fu_1630_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_13_V_214_reg_498);
    xor_ln1357_55_fu_1658_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_19_V_220_reg_438);
    xor_ln1357_56_fu_1686_p2 <= (xor_ln1357_fu_1034_p2 xor A_20_V_221_reg_428);
    xor_ln1357_62_fu_1804_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_4_V_25_reg_588);
    xor_ln1357_63_fu_1832_p2 <= (xor_ln1357_fu_1034_p2 xor A_5_V_26_reg_578);
    xor_ln1357_64_fu_1860_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_11_V_212_reg_518);
    xor_ln1357_65_fu_1888_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_17_V_218_reg_458);
    xor_ln1357_66_fu_1916_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_23_V_224_reg_398);
    xor_ln1357_72_fu_2034_p2 <= (xor_ln1357_30_fu_1086_p2 xor A_2_V_23_reg_608);
    xor_ln1357_73_fu_2062_p2 <= (xor_ln1357_31_fu_1112_p2 xor A_8_V_29_reg_548);
    xor_ln1357_74_fu_2090_p2 <= (xor_ln1357_32_fu_1138_p2 xor A_14_V_215_reg_488);
    xor_ln1357_75_fu_2118_p2 <= (xor_ln1357_fu_1034_p2 xor A_15_V_216_reg_478);
    xor_ln1357_76_fu_2146_p2 <= (xor_ln1357_29_fu_1060_p2 xor A_21_V_222_reg_418);
    xor_ln1357_fu_1034_p2 <= (xor_ln719_32_fu_1008_p2 xor or_ln_fu_1026_p3);
    xor_ln719_16_fu_912_p2 <= (xor_ln719_fu_894_p2 xor xor_ln719_22_fu_906_p2);
    xor_ln719_20_fu_936_p2 <= (xor_ln719_26_fu_930_p2 xor xor_ln719_23_fu_918_p2);
    xor_ln719_21_fu_900_p2 <= (A_20_V_221_reg_428 xor A_0_V_21_reg_628);
    xor_ln719_22_fu_906_p2 <= (xor_ln719_21_fu_900_p2 xor A_5_V_26_reg_578);
    xor_ln719_23_fu_918_p2 <= (A_16_V_217_reg_468 xor A_11_V_212_reg_518);
    xor_ln719_24_fu_960_p2 <= (xor_ln719_30_fu_954_p2 xor xor_ln719_27_fu_942_p2);
    xor_ln719_25_fu_924_p2 <= (A_21_V_222_reg_418 xor A_1_V_22_reg_618);
    xor_ln719_26_fu_930_p2 <= (xor_ln719_25_fu_924_p2 xor A_6_V_27_reg_568);
    xor_ln719_27_fu_942_p2 <= (A_17_V_218_reg_458 xor A_12_V_213_reg_508);
    xor_ln719_28_fu_984_p2 <= (xor_ln719_34_fu_978_p2 xor xor_ln719_31_fu_966_p2);
    xor_ln719_29_fu_948_p2 <= (A_2_V_23_reg_608 xor A_22_V_223_reg_408);
    xor_ln719_30_fu_954_p2 <= (xor_ln719_29_fu_948_p2 xor A_7_V_28_reg_558);
    xor_ln719_31_fu_966_p2 <= (A_18_V_219_reg_448 xor A_13_V_214_reg_498);
    xor_ln719_32_fu_1008_p2 <= (xor_ln719_37_fu_1002_p2 xor xor_ln719_35_fu_990_p2);
    xor_ln719_33_fu_972_p2 <= (A_3_V_24_reg_598 xor A_23_V_224_reg_398);
    xor_ln719_34_fu_978_p2 <= (xor_ln719_33_fu_972_p2 xor A_8_V_29_reg_548);
    xor_ln719_35_fu_990_p2 <= (A_19_V_220_reg_438 xor A_14_V_215_reg_488);
    xor_ln719_36_fu_996_p2 <= (A_4_V_25_reg_588 xor A_24_V_225_reg_388);
    xor_ln719_37_fu_1002_p2 <= (xor_ln719_36_fu_996_p2 xor A_9_V_210_reg_538);
    xor_ln719_38_fu_2264_p2 <= (xor_ln1357_33_fu_1144_p2 xor and_ln1355_fu_1268_p2);
    xor_ln719_fu_894_p2 <= (A_15_V_216_reg_478 xor A_10_V_211_reg_528);
    xor_ln769_10_fu_1714_p2 <= (or_ln647_s_fu_1622_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_11_fu_1732_p2 <= (or_ln647_10_fu_1650_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_12_fu_1750_p2 <= (or_ln647_11_fu_1678_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_13_fu_1768_p2 <= (or_ln647_12_fu_1706_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_14_fu_1786_p2 <= (or_ln647_9_fu_1594_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_15_fu_1944_p2 <= (or_ln647_14_fu_1852_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_16_fu_1962_p2 <= (or_ln647_15_fu_1880_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_17_fu_1980_p2 <= (or_ln647_16_fu_1908_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_18_fu_1998_p2 <= (or_ln647_17_fu_1936_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_19_fu_2016_p2 <= (or_ln647_13_fu_1824_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_1_fu_1274_p2 <= (or_ln647_1_fu_1198_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_20_fu_2174_p2 <= (or_ln647_19_fu_2082_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_21_fu_2192_p2 <= (or_ln647_20_fu_2110_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_22_fu_2210_p2 <= (or_ln647_21_fu_2138_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_23_fu_2228_p2 <= (or_ln647_22_fu_2166_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_24_fu_2246_p2 <= (or_ln647_18_fu_2054_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_2_fu_1292_p2 <= (or_ln647_2_fu_1226_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_3_fu_1310_p2 <= (or_ln647_3_fu_1254_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_4_fu_1328_p2 <= (xor_ln1357_33_fu_1144_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_5_fu_1486_p2 <= (or_ln647_5_fu_1394_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_6_fu_1504_p2 <= (or_ln647_6_fu_1422_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_7_fu_1522_p2 <= (or_ln647_7_fu_1450_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_8_fu_1540_p2 <= (or_ln647_8_fu_1478_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_9_fu_1558_p2 <= (or_ln647_4_fu_1366_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln769_fu_1262_p2 <= (or_ln1_fu_1170_p3 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln156_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_045_0_reg_638),64));
    zext_ln544_67_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0101_2_reg_649),64));
    zext_ln544_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0101_0_reg_376),64));
end behav;
