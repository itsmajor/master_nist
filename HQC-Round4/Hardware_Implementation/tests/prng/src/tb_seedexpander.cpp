/**
 * @file tb_seedexpander.cpp
 * @brief Checks that seedexpander generates the same stream of bytes as the reference code when initialised identically.
 */

#include "shake_prng.h"
#include <stdio.h>
#include <stdint.h>

int tb_generic_call(void (*f)(uint8_t*, size_t), const char *name, size_t compare_bytesize);

/**
 * @brief Initializes the seedexpander, calls it and writes the generated bytes in hex into output.
 *
 * Initialises the seedexpander with 0x44 as initial seed byte, calls seedexpander and
 * writes compare_bytesize generated bytes in hex into output.
 *
 * @param[out] output pointer to a byte array containing the generated bytes in hex
 * @param[in] compare_bytesize amount of bytes that are generated and will be compared with the reference data.
 */
void tested_function(uint8_t *output, size_t compare_bytesize) {
    ap_uint64 seedexpander_state[26];
    // Initialization with = {0} leads to a sporadic issue with HLS datatypes
    ap_uint8 seedexpander_seed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    seedexpander_seed[0] = 0x44;
    seedexpander_init((ap_uint64 *)seedexpander_seed, 1, seedexpander_state);
    seedexpander((vector_byte_type *)output, compare_bytesize / sizeof(vector_byte_type), seedexpander_state);
}


/**
 * @brief Launches the tb_generic_call function that calls tested_function and checks the resulting output is correct.
 *
 * Calls the generic function that will call tested_function to generate the hardware implementation output,
 * and then compare this output to the reference data which is available on a pre-generated file.
 *
 * @returns 0 if the outputs are the same and 1 if not
 */
int main() {
    const char *test_name = "seedexpander";
    return tb_generic_call(tested_function, test_name, 16);
}
